// Generated by swift-openapi-generator, do not modify.
@_spi(Generated) import OpenAPIRuntime
#if os(Linux)
@preconcurrency import struct Foundation.URL
@preconcurrency import struct Foundation.Data
@preconcurrency import struct Foundation.Date
#else
import struct Foundation.URL
import struct Foundation.Data
import struct Foundation.Date
#endif
/// A type that performs HTTP operations defined by the OpenAPI document.
public protocol APIProtocol: Sendable {
    /// Returns a list of assistants.
    ///
    /// - Remark: HTTP `GET /assistants`.
    /// - Remark: Generated from `#/paths//assistants/get(listAssistants)`.
    func listAssistants(_ input: Operations.ListAssistants.Input) async throws -> Operations.ListAssistants.Output
    /// Create an assistant with a model and instructions.
    ///
    /// - Remark: HTTP `POST /assistants`.
    /// - Remark: Generated from `#/paths//assistants/post(createAssistant)`.
    func createAssistant(_ input: Operations.CreateAssistant.Input) async throws -> Operations.CreateAssistant.Output
    /// Retrieves an assistant.
    ///
    /// - Remark: HTTP `GET /assistants/{assistant_id}`.
    /// - Remark: Generated from `#/paths//assistants/{assistant_id}/get(getAssistant)`.
    func getAssistant(_ input: Operations.GetAssistant.Input) async throws -> Operations.GetAssistant.Output
    /// Modifies an assistant.
    ///
    /// - Remark: HTTP `POST /assistants/{assistant_id}`.
    /// - Remark: Generated from `#/paths//assistants/{assistant_id}/post(modifyAssistant)`.
    func modifyAssistant(_ input: Operations.ModifyAssistant.Input) async throws -> Operations.ModifyAssistant.Output
    /// Delete an assistant.
    ///
    /// - Remark: HTTP `DELETE /assistants/{assistant_id}`.
    /// - Remark: Generated from `#/paths//assistants/{assistant_id}/delete(deleteAssistant)`.
    func deleteAssistant(_ input: Operations.DeleteAssistant.Input) async throws -> Operations.DeleteAssistant.Output
    /// Generates audio from the input text.
    ///
    /// - Remark: HTTP `POST /audio/speech`.
    /// - Remark: Generated from `#/paths//audio/speech/post(createSpeech)`.
    func createSpeech(_ input: Operations.CreateSpeech.Input) async throws -> Operations.CreateSpeech.Output
    /// Transcribes audio into the input language.
    ///
    /// - Remark: HTTP `POST /audio/transcriptions`.
    /// - Remark: Generated from `#/paths//audio/transcriptions/post(createTranscription)`.
    func createTranscription(_ input: Operations.CreateTranscription.Input) async throws -> Operations.CreateTranscription.Output
    /// Translates audio into English.
    ///
    /// - Remark: HTTP `POST /audio/translations`.
    /// - Remark: Generated from `#/paths//audio/translations/post(createTranslation)`.
    func createTranslation(_ input: Operations.CreateTranslation.Input) async throws -> Operations.CreateTranslation.Output
    /// List your organization's batches.
    ///
    /// - Remark: HTTP `GET /batches`.
    /// - Remark: Generated from `#/paths//batches/get(listBatches)`.
    func listBatches(_ input: Operations.ListBatches.Input) async throws -> Operations.ListBatches.Output
    /// Creates and executes a batch from an uploaded file of requests
    ///
    /// - Remark: HTTP `POST /batches`.
    /// - Remark: Generated from `#/paths//batches/post(createBatch)`.
    func createBatch(_ input: Operations.CreateBatch.Input) async throws -> Operations.CreateBatch.Output
    /// Retrieves a batch.
    ///
    /// - Remark: HTTP `GET /batches/{batch_id}`.
    /// - Remark: Generated from `#/paths//batches/{batch_id}/get(retrieveBatch)`.
    func retrieveBatch(_ input: Operations.RetrieveBatch.Input) async throws -> Operations.RetrieveBatch.Output
    /// Cancels an in-progress batch. The batch will be in status `cancelling` for up to 10 minutes, before changing to `cancelled`, where it will have partial results (if any) available in the output file.
    ///
    /// - Remark: HTTP `POST /batches/{batch_id}/cancel`.
    /// - Remark: Generated from `#/paths//batches/{batch_id}/cancel/post(cancelBatch)`.
    func cancelBatch(_ input: Operations.CancelBatch.Input) async throws -> Operations.CancelBatch.Output
    /// Creates a model response for the given chat conversation. Learn more in the
    /// [text generation](/docs/guides/text-generation), [vision](/docs/guides/vision),
    /// and [audio](/docs/guides/audio) guides.
    ///
    /// Parameter support can differ depending on the model used to generate the
    /// response, particularly for newer reasoning models. Parameters that are only
    /// supported for reasoning models are noted below. For the current state of 
    /// unsupported parameters in reasoning models, 
    /// [refer to the reasoning guide](/docs/guides/reasoning).
    ///
    ///
    /// - Remark: HTTP `POST /chat/completions`.
    /// - Remark: Generated from `#/paths//chat/completions/post(createChatCompletion)`.
    func createChatCompletion(_ input: Operations.CreateChatCompletion.Input) async throws -> Operations.CreateChatCompletion.Output
    /// Creates a completion for the provided prompt and parameters.
    ///
    /// - Remark: HTTP `POST /completions`.
    /// - Remark: Generated from `#/paths//completions/post(createCompletion)`.
    func createCompletion(_ input: Operations.CreateCompletion.Input) async throws -> Operations.CreateCompletion.Output
    /// Creates an embedding vector representing the input text.
    ///
    /// - Remark: HTTP `POST /embeddings`.
    /// - Remark: Generated from `#/paths//embeddings/post(createEmbedding)`.
    func createEmbedding(_ input: Operations.CreateEmbedding.Input) async throws -> Operations.CreateEmbedding.Output
    /// Returns a list of files.
    ///
    /// - Remark: HTTP `GET /files`.
    /// - Remark: Generated from `#/paths//files/get(listFiles)`.
    func listFiles(_ input: Operations.ListFiles.Input) async throws -> Operations.ListFiles.Output
    /// Upload a file that can be used across various endpoints. Individual files can be up to 512 MB, and the size of all files uploaded by one organization can be up to 100 GB.
    ///
    /// The Assistants API supports files up to 2 million tokens and of specific file types. See the [Assistants Tools guide](/docs/assistants/tools) for details.
    ///
    /// The Fine-tuning API only supports `.jsonl` files. The input also has certain required formats for fine-tuning [chat](/docs/api-reference/fine-tuning/chat-input) or [completions](/docs/api-reference/fine-tuning/completions-input) models.
    ///
    /// The Batch API only supports `.jsonl` files up to 200 MB in size. The input also has a specific required [format](/docs/api-reference/batch/request-input).
    ///
    /// Please [contact us](https://help.openai.com/) if you need to increase these storage limits.
    ///
    ///
    /// - Remark: HTTP `POST /files`.
    /// - Remark: Generated from `#/paths//files/post(createFile)`.
    func createFile(_ input: Operations.CreateFile.Input) async throws -> Operations.CreateFile.Output
    /// Returns information about a specific file.
    ///
    /// - Remark: HTTP `GET /files/{file_id}`.
    /// - Remark: Generated from `#/paths//files/{file_id}/get(retrieveFile)`.
    func retrieveFile(_ input: Operations.RetrieveFile.Input) async throws -> Operations.RetrieveFile.Output
    /// Delete a file.
    ///
    /// - Remark: HTTP `DELETE /files/{file_id}`.
    /// - Remark: Generated from `#/paths//files/{file_id}/delete(deleteFile)`.
    func deleteFile(_ input: Operations.DeleteFile.Input) async throws -> Operations.DeleteFile.Output
    /// Returns the contents of the specified file.
    ///
    /// - Remark: HTTP `GET /files/{file_id}/content`.
    /// - Remark: Generated from `#/paths//files/{file_id}/content/get(downloadFile)`.
    func downloadFile(_ input: Operations.DownloadFile.Input) async throws -> Operations.DownloadFile.Output
    /// List your organization's fine-tuning jobs
    ///
    ///
    /// - Remark: HTTP `GET /fine_tuning/jobs`.
    /// - Remark: Generated from `#/paths//fine_tuning/jobs/get(listPaginatedFineTuningJobs)`.
    func listPaginatedFineTuningJobs(_ input: Operations.ListPaginatedFineTuningJobs.Input) async throws -> Operations.ListPaginatedFineTuningJobs.Output
    /// Creates a fine-tuning job which begins the process of creating a new model from a given dataset.
    ///
    /// Response includes details of the enqueued job including job status and the name of the fine-tuned models once complete.
    ///
    /// [Learn more about fine-tuning](/docs/guides/fine-tuning)
    ///
    ///
    /// - Remark: HTTP `POST /fine_tuning/jobs`.
    /// - Remark: Generated from `#/paths//fine_tuning/jobs/post(createFineTuningJob)`.
    func createFineTuningJob(_ input: Operations.CreateFineTuningJob.Input) async throws -> Operations.CreateFineTuningJob.Output
    /// Get info about a fine-tuning job.
    ///
    /// [Learn more about fine-tuning](/docs/guides/fine-tuning)
    ///
    ///
    /// - Remark: HTTP `GET /fine_tuning/jobs/{fine_tuning_job_id}`.
    /// - Remark: Generated from `#/paths//fine_tuning/jobs/{fine_tuning_job_id}/get(retrieveFineTuningJob)`.
    func retrieveFineTuningJob(_ input: Operations.RetrieveFineTuningJob.Input) async throws -> Operations.RetrieveFineTuningJob.Output
    /// Immediately cancel a fine-tune job.
    ///
    ///
    /// - Remark: HTTP `POST /fine_tuning/jobs/{fine_tuning_job_id}/cancel`.
    /// - Remark: Generated from `#/paths//fine_tuning/jobs/{fine_tuning_job_id}/cancel/post(cancelFineTuningJob)`.
    func cancelFineTuningJob(_ input: Operations.CancelFineTuningJob.Input) async throws -> Operations.CancelFineTuningJob.Output
    /// List checkpoints for a fine-tuning job.
    ///
    ///
    /// - Remark: HTTP `GET /fine_tuning/jobs/{fine_tuning_job_id}/checkpoints`.
    /// - Remark: Generated from `#/paths//fine_tuning/jobs/{fine_tuning_job_id}/checkpoints/get(listFineTuningJobCheckpoints)`.
    func listFineTuningJobCheckpoints(_ input: Operations.ListFineTuningJobCheckpoints.Input) async throws -> Operations.ListFineTuningJobCheckpoints.Output
    /// Get status updates for a fine-tuning job.
    ///
    ///
    /// - Remark: HTTP `GET /fine_tuning/jobs/{fine_tuning_job_id}/events`.
    /// - Remark: Generated from `#/paths//fine_tuning/jobs/{fine_tuning_job_id}/events/get(listFineTuningEvents)`.
    func listFineTuningEvents(_ input: Operations.ListFineTuningEvents.Input) async throws -> Operations.ListFineTuningEvents.Output
    /// Creates an edited or extended image given an original image and a prompt.
    ///
    /// - Remark: HTTP `POST /images/edits`.
    /// - Remark: Generated from `#/paths//images/edits/post(createImageEdit)`.
    func createImageEdit(_ input: Operations.CreateImageEdit.Input) async throws -> Operations.CreateImageEdit.Output
    /// Creates an image given a prompt.
    ///
    /// - Remark: HTTP `POST /images/generations`.
    /// - Remark: Generated from `#/paths//images/generations/post(createImage)`.
    func createImage(_ input: Operations.CreateImage.Input) async throws -> Operations.CreateImage.Output
    /// Creates a variation of a given image.
    ///
    /// - Remark: HTTP `POST /images/variations`.
    /// - Remark: Generated from `#/paths//images/variations/post(createImageVariation)`.
    func createImageVariation(_ input: Operations.CreateImageVariation.Input) async throws -> Operations.CreateImageVariation.Output
    /// Lists the currently available models, and provides basic information about each one such as the owner and availability.
    ///
    /// - Remark: HTTP `GET /models`.
    /// - Remark: Generated from `#/paths//models/get(listModels)`.
    func listModels(_ input: Operations.ListModels.Input) async throws -> Operations.ListModels.Output
    /// Retrieves a model instance, providing basic information about the model such as the owner and permissioning.
    ///
    /// - Remark: HTTP `GET /models/{model}`.
    /// - Remark: Generated from `#/paths//models/{model}/get(retrieveModel)`.
    func retrieveModel(_ input: Operations.RetrieveModel.Input) async throws -> Operations.RetrieveModel.Output
    /// Delete a fine-tuned model. You must have the Owner role in your organization to delete a model.
    ///
    /// - Remark: HTTP `DELETE /models/{model}`.
    /// - Remark: Generated from `#/paths//models/{model}/delete(deleteModel)`.
    func deleteModel(_ input: Operations.DeleteModel.Input) async throws -> Operations.DeleteModel.Output
    /// Classifies if text and/or image inputs are potentially harmful. Learn
    /// more in the [moderation guide](/docs/guides/moderation).
    ///
    ///
    /// - Remark: HTTP `POST /moderations`.
    /// - Remark: Generated from `#/paths//moderations/post(createModeration)`.
    func createModeration(_ input: Operations.CreateModeration.Input) async throws -> Operations.CreateModeration.Output
    /// List organization API keys
    ///
    /// Retrieve a paginated list of organization admin API keys.
    ///
    /// - Remark: HTTP `GET /organization/admin_api_keys`.
    /// - Remark: Generated from `#/paths//organization/admin_api_keys/get(admin-api-keys-list)`.
    func adminApiKeysList(_ input: Operations.AdminApiKeysList.Input) async throws -> Operations.AdminApiKeysList.Output
    /// Create an organization admin API key
    ///
    /// Create a new admin-level API key for the organization.
    ///
    /// - Remark: HTTP `POST /organization/admin_api_keys`.
    /// - Remark: Generated from `#/paths//organization/admin_api_keys/post(admin-api-keys-create)`.
    func adminApiKeysCreate(_ input: Operations.AdminApiKeysCreate.Input) async throws -> Operations.AdminApiKeysCreate.Output
    /// Retrieve a single organization API key
    ///
    /// Get details for a specific organization API key by its ID.
    ///
    /// - Remark: HTTP `GET /organization/admin_api_keys/{key_id}`.
    /// - Remark: Generated from `#/paths//organization/admin_api_keys/{key_id}/get(admin-api-keys-get)`.
    func adminApiKeysGet(_ input: Operations.AdminApiKeysGet.Input) async throws -> Operations.AdminApiKeysGet.Output
    /// Delete an organization admin API key
    ///
    /// Delete the specified admin API key.
    ///
    /// - Remark: HTTP `DELETE /organization/admin_api_keys/{key_id}`.
    /// - Remark: Generated from `#/paths//organization/admin_api_keys/{key_id}/delete(admin-api-keys-delete)`.
    func adminApiKeysDelete(_ input: Operations.AdminApiKeysDelete.Input) async throws -> Operations.AdminApiKeysDelete.Output
    /// List user actions and configuration changes within this organization.
    ///
    /// - Remark: HTTP `GET /organization/audit_logs`.
    /// - Remark: Generated from `#/paths//organization/audit_logs/get(list-audit-logs)`.
    func listAuditLogs(_ input: Operations.ListAuditLogs.Input) async throws -> Operations.ListAuditLogs.Output
    /// Get costs details for the organization.
    ///
    /// - Remark: HTTP `GET /organization/costs`.
    /// - Remark: Generated from `#/paths//organization/costs/get(usage-costs)`.
    func usageCosts(_ input: Operations.UsageCosts.Input) async throws -> Operations.UsageCosts.Output
    /// Returns a list of invites in the organization.
    ///
    /// - Remark: HTTP `GET /organization/invites`.
    /// - Remark: Generated from `#/paths//organization/invites/get(list-invites)`.
    func listInvites(_ input: Operations.ListInvites.Input) async throws -> Operations.ListInvites.Output
    /// Create an invite for a user to the organization. The invite must be accepted by the user before they have access to the organization.
    ///
    /// - Remark: HTTP `POST /organization/invites`.
    /// - Remark: Generated from `#/paths//organization/invites/post(inviteUser)`.
    func inviteUser(_ input: Operations.InviteUser.Input) async throws -> Operations.InviteUser.Output
    /// Retrieves an invite.
    ///
    /// - Remark: HTTP `GET /organization/invites/{invite_id}`.
    /// - Remark: Generated from `#/paths//organization/invites/{invite_id}/get(retrieve-invite)`.
    func retrieveInvite(_ input: Operations.RetrieveInvite.Input) async throws -> Operations.RetrieveInvite.Output
    /// Delete an invite. If the invite has already been accepted, it cannot be deleted.
    ///
    /// - Remark: HTTP `DELETE /organization/invites/{invite_id}`.
    /// - Remark: Generated from `#/paths//organization/invites/{invite_id}/delete(delete-invite)`.
    func deleteInvite(_ input: Operations.DeleteInvite.Input) async throws -> Operations.DeleteInvite.Output
    /// Returns a list of projects.
    ///
    /// - Remark: HTTP `GET /organization/projects`.
    /// - Remark: Generated from `#/paths//organization/projects/get(list-projects)`.
    func listProjects(_ input: Operations.ListProjects.Input) async throws -> Operations.ListProjects.Output
    /// Create a new project in the organization. Projects can be created and archived, but cannot be deleted.
    ///
    /// - Remark: HTTP `POST /organization/projects`.
    /// - Remark: Generated from `#/paths//organization/projects/post(create-project)`.
    func createProject(_ input: Operations.CreateProject.Input) async throws -> Operations.CreateProject.Output
    /// Retrieves a project.
    ///
    /// - Remark: HTTP `GET /organization/projects/{project_id}`.
    /// - Remark: Generated from `#/paths//organization/projects/{project_id}/get(retrieve-project)`.
    func retrieveProject(_ input: Operations.RetrieveProject.Input) async throws -> Operations.RetrieveProject.Output
    /// Modifies a project in the organization.
    ///
    /// - Remark: HTTP `POST /organization/projects/{project_id}`.
    /// - Remark: Generated from `#/paths//organization/projects/{project_id}/post(modify-project)`.
    func modifyProject(_ input: Operations.ModifyProject.Input) async throws -> Operations.ModifyProject.Output
    /// Returns a list of API keys in the project.
    ///
    /// - Remark: HTTP `GET /organization/projects/{project_id}/api_keys`.
    /// - Remark: Generated from `#/paths//organization/projects/{project_id}/api_keys/get(list-project-api-keys)`.
    func listProjectApiKeys(_ input: Operations.ListProjectApiKeys.Input) async throws -> Operations.ListProjectApiKeys.Output
    /// Retrieves an API key in the project.
    ///
    /// - Remark: HTTP `GET /organization/projects/{project_id}/api_keys/{key_id}`.
    /// - Remark: Generated from `#/paths//organization/projects/{project_id}/api_keys/{key_id}/get(retrieve-project-api-key)`.
    func retrieveProjectApiKey(_ input: Operations.RetrieveProjectApiKey.Input) async throws -> Operations.RetrieveProjectApiKey.Output
    /// Deletes an API key from the project.
    ///
    /// - Remark: HTTP `DELETE /organization/projects/{project_id}/api_keys/{key_id}`.
    /// - Remark: Generated from `#/paths//organization/projects/{project_id}/api_keys/{key_id}/delete(delete-project-api-key)`.
    func deleteProjectApiKey(_ input: Operations.DeleteProjectApiKey.Input) async throws -> Operations.DeleteProjectApiKey.Output
    /// Archives a project in the organization. Archived projects cannot be used or updated.
    ///
    /// - Remark: HTTP `POST /organization/projects/{project_id}/archive`.
    /// - Remark: Generated from `#/paths//organization/projects/{project_id}/archive/post(archive-project)`.
    func archiveProject(_ input: Operations.ArchiveProject.Input) async throws -> Operations.ArchiveProject.Output
    /// Returns the rate limits per model for a project.
    ///
    /// - Remark: HTTP `GET /organization/projects/{project_id}/rate_limits`.
    /// - Remark: Generated from `#/paths//organization/projects/{project_id}/rate_limits/get(list-project-rate-limits)`.
    func listProjectRateLimits(_ input: Operations.ListProjectRateLimits.Input) async throws -> Operations.ListProjectRateLimits.Output
    /// Updates a project rate limit.
    ///
    /// - Remark: HTTP `POST /organization/projects/{project_id}/rate_limits/{rate_limit_id}`.
    /// - Remark: Generated from `#/paths//organization/projects/{project_id}/rate_limits/{rate_limit_id}/post(update-project-rate-limits)`.
    func updateProjectRateLimits(_ input: Operations.UpdateProjectRateLimits.Input) async throws -> Operations.UpdateProjectRateLimits.Output
    /// Returns a list of service accounts in the project.
    ///
    /// - Remark: HTTP `GET /organization/projects/{project_id}/service_accounts`.
    /// - Remark: Generated from `#/paths//organization/projects/{project_id}/service_accounts/get(list-project-service-accounts)`.
    func listProjectServiceAccounts(_ input: Operations.ListProjectServiceAccounts.Input) async throws -> Operations.ListProjectServiceAccounts.Output
    /// Creates a new service account in the project. This also returns an unredacted API key for the service account.
    ///
    /// - Remark: HTTP `POST /organization/projects/{project_id}/service_accounts`.
    /// - Remark: Generated from `#/paths//organization/projects/{project_id}/service_accounts/post(create-project-service-account)`.
    func createProjectServiceAccount(_ input: Operations.CreateProjectServiceAccount.Input) async throws -> Operations.CreateProjectServiceAccount.Output
    /// Retrieves a service account in the project.
    ///
    /// - Remark: HTTP `GET /organization/projects/{project_id}/service_accounts/{service_account_id}`.
    /// - Remark: Generated from `#/paths//organization/projects/{project_id}/service_accounts/{service_account_id}/get(retrieve-project-service-account)`.
    func retrieveProjectServiceAccount(_ input: Operations.RetrieveProjectServiceAccount.Input) async throws -> Operations.RetrieveProjectServiceAccount.Output
    /// Deletes a service account from the project.
    ///
    /// - Remark: HTTP `DELETE /organization/projects/{project_id}/service_accounts/{service_account_id}`.
    /// - Remark: Generated from `#/paths//organization/projects/{project_id}/service_accounts/{service_account_id}/delete(delete-project-service-account)`.
    func deleteProjectServiceAccount(_ input: Operations.DeleteProjectServiceAccount.Input) async throws -> Operations.DeleteProjectServiceAccount.Output
    /// Returns a list of users in the project.
    ///
    /// - Remark: HTTP `GET /organization/projects/{project_id}/users`.
    /// - Remark: Generated from `#/paths//organization/projects/{project_id}/users/get(list-project-users)`.
    func listProjectUsers(_ input: Operations.ListProjectUsers.Input) async throws -> Operations.ListProjectUsers.Output
    /// Adds a user to the project. Users must already be members of the organization to be added to a project.
    ///
    /// - Remark: HTTP `POST /organization/projects/{project_id}/users`.
    /// - Remark: Generated from `#/paths//organization/projects/{project_id}/users/post(create-project-user)`.
    func createProjectUser(_ input: Operations.CreateProjectUser.Input) async throws -> Operations.CreateProjectUser.Output
    /// Retrieves a user in the project.
    ///
    /// - Remark: HTTP `GET /organization/projects/{project_id}/users/{user_id}`.
    /// - Remark: Generated from `#/paths//organization/projects/{project_id}/users/{user_id}/get(retrieve-project-user)`.
    func retrieveProjectUser(_ input: Operations.RetrieveProjectUser.Input) async throws -> Operations.RetrieveProjectUser.Output
    /// Modifies a user's role in the project.
    ///
    /// - Remark: HTTP `POST /organization/projects/{project_id}/users/{user_id}`.
    /// - Remark: Generated from `#/paths//organization/projects/{project_id}/users/{user_id}/post(modify-project-user)`.
    func modifyProjectUser(_ input: Operations.ModifyProjectUser.Input) async throws -> Operations.ModifyProjectUser.Output
    /// Deletes a user from the project.
    ///
    /// - Remark: HTTP `DELETE /organization/projects/{project_id}/users/{user_id}`.
    /// - Remark: Generated from `#/paths//organization/projects/{project_id}/users/{user_id}/delete(delete-project-user)`.
    func deleteProjectUser(_ input: Operations.DeleteProjectUser.Input) async throws -> Operations.DeleteProjectUser.Output
    /// Get audio speeches usage details for the organization.
    ///
    /// - Remark: HTTP `GET /organization/usage/audio_speeches`.
    /// - Remark: Generated from `#/paths//organization/usage/audio_speeches/get(usage-audio-speeches)`.
    func usageAudioSpeeches(_ input: Operations.UsageAudioSpeeches.Input) async throws -> Operations.UsageAudioSpeeches.Output
    /// Get audio transcriptions usage details for the organization.
    ///
    /// - Remark: HTTP `GET /organization/usage/audio_transcriptions`.
    /// - Remark: Generated from `#/paths//organization/usage/audio_transcriptions/get(usage-audio-transcriptions)`.
    func usageAudioTranscriptions(_ input: Operations.UsageAudioTranscriptions.Input) async throws -> Operations.UsageAudioTranscriptions.Output
    /// Get code interpreter sessions usage details for the organization.
    ///
    /// - Remark: HTTP `GET /organization/usage/code_interpreter_sessions`.
    /// - Remark: Generated from `#/paths//organization/usage/code_interpreter_sessions/get(usage-code-interpreter-sessions)`.
    func usageCodeInterpreterSessions(_ input: Operations.UsageCodeInterpreterSessions.Input) async throws -> Operations.UsageCodeInterpreterSessions.Output
    /// Get completions usage details for the organization.
    ///
    /// - Remark: HTTP `GET /organization/usage/completions`.
    /// - Remark: Generated from `#/paths//organization/usage/completions/get(usage-completions)`.
    func usageCompletions(_ input: Operations.UsageCompletions.Input) async throws -> Operations.UsageCompletions.Output
    /// Get embeddings usage details for the organization.
    ///
    /// - Remark: HTTP `GET /organization/usage/embeddings`.
    /// - Remark: Generated from `#/paths//organization/usage/embeddings/get(usage-embeddings)`.
    func usageEmbeddings(_ input: Operations.UsageEmbeddings.Input) async throws -> Operations.UsageEmbeddings.Output
    /// Get images usage details for the organization.
    ///
    /// - Remark: HTTP `GET /organization/usage/images`.
    /// - Remark: Generated from `#/paths//organization/usage/images/get(usage-images)`.
    func usageImages(_ input: Operations.UsageImages.Input) async throws -> Operations.UsageImages.Output
    /// Get moderations usage details for the organization.
    ///
    /// - Remark: HTTP `GET /organization/usage/moderations`.
    /// - Remark: Generated from `#/paths//organization/usage/moderations/get(usage-moderations)`.
    func usageModerations(_ input: Operations.UsageModerations.Input) async throws -> Operations.UsageModerations.Output
    /// Get vector stores usage details for the organization.
    ///
    /// - Remark: HTTP `GET /organization/usage/vector_stores`.
    /// - Remark: Generated from `#/paths//organization/usage/vector_stores/get(usage-vector-stores)`.
    func usageVectorStores(_ input: Operations.UsageVectorStores.Input) async throws -> Operations.UsageVectorStores.Output
    /// Lists all of the users in the organization.
    ///
    /// - Remark: HTTP `GET /organization/users`.
    /// - Remark: Generated from `#/paths//organization/users/get(list-users)`.
    func listUsers(_ input: Operations.ListUsers.Input) async throws -> Operations.ListUsers.Output
    /// Retrieves a user by their identifier.
    ///
    /// - Remark: HTTP `GET /organization/users/{user_id}`.
    /// - Remark: Generated from `#/paths//organization/users/{user_id}/get(retrieve-user)`.
    func retrieveUser(_ input: Operations.RetrieveUser.Input) async throws -> Operations.RetrieveUser.Output
    /// Modifies a user's role in the organization.
    ///
    /// - Remark: HTTP `POST /organization/users/{user_id}`.
    /// - Remark: Generated from `#/paths//organization/users/{user_id}/post(modify-user)`.
    func modifyUser(_ input: Operations.ModifyUser.Input) async throws -> Operations.ModifyUser.Output
    /// Deletes a user from the organization.
    ///
    /// - Remark: HTTP `DELETE /organization/users/{user_id}`.
    /// - Remark: Generated from `#/paths//organization/users/{user_id}/delete(delete-user)`.
    func deleteUser(_ input: Operations.DeleteUser.Input) async throws -> Operations.DeleteUser.Output
    /// Create an ephemeral API token for use in client-side applications with the
    /// Realtime API. Can be configured with the same session parameters as the
    /// `session.update` client event.
    ///
    /// It responds with a session object, plus a `client_secret` key which contains
    /// a usable ephemeral API token that can be used to authenticate browser clients
    /// for the Realtime API.
    ///
    ///
    /// - Remark: HTTP `POST /realtime/sessions`.
    /// - Remark: Generated from `#/paths//realtime/sessions/post(create-realtime-session)`.
    func createRealtimeSession(_ input: Operations.CreateRealtimeSession.Input) async throws -> Operations.CreateRealtimeSession.Output
    /// Create a thread.
    ///
    /// - Remark: HTTP `POST /threads`.
    /// - Remark: Generated from `#/paths//threads/post(createThread)`.
    func createThread(_ input: Operations.CreateThread.Input) async throws -> Operations.CreateThread.Output
    /// Create a thread and run it in one request.
    ///
    /// - Remark: HTTP `POST /threads/runs`.
    /// - Remark: Generated from `#/paths//threads/runs/post(createThreadAndRun)`.
    func createThreadAndRun(_ input: Operations.CreateThreadAndRun.Input) async throws -> Operations.CreateThreadAndRun.Output
    /// Retrieves a thread.
    ///
    /// - Remark: HTTP `GET /threads/{thread_id}`.
    /// - Remark: Generated from `#/paths//threads/{thread_id}/get(getThread)`.
    func getThread(_ input: Operations.GetThread.Input) async throws -> Operations.GetThread.Output
    /// Modifies a thread.
    ///
    /// - Remark: HTTP `POST /threads/{thread_id}`.
    /// - Remark: Generated from `#/paths//threads/{thread_id}/post(modifyThread)`.
    func modifyThread(_ input: Operations.ModifyThread.Input) async throws -> Operations.ModifyThread.Output
    /// Delete a thread.
    ///
    /// - Remark: HTTP `DELETE /threads/{thread_id}`.
    /// - Remark: Generated from `#/paths//threads/{thread_id}/delete(deleteThread)`.
    func deleteThread(_ input: Operations.DeleteThread.Input) async throws -> Operations.DeleteThread.Output
    /// Returns a list of messages for a given thread.
    ///
    /// - Remark: HTTP `GET /threads/{thread_id}/messages`.
    /// - Remark: Generated from `#/paths//threads/{thread_id}/messages/get(listMessages)`.
    func listMessages(_ input: Operations.ListMessages.Input) async throws -> Operations.ListMessages.Output
    /// Create a message.
    ///
    /// - Remark: HTTP `POST /threads/{thread_id}/messages`.
    /// - Remark: Generated from `#/paths//threads/{thread_id}/messages/post(createMessage)`.
    func createMessage(_ input: Operations.CreateMessage.Input) async throws -> Operations.CreateMessage.Output
    /// Retrieve a message.
    ///
    /// - Remark: HTTP `GET /threads/{thread_id}/messages/{message_id}`.
    /// - Remark: Generated from `#/paths//threads/{thread_id}/messages/{message_id}/get(getMessage)`.
    func getMessage(_ input: Operations.GetMessage.Input) async throws -> Operations.GetMessage.Output
    /// Modifies a message.
    ///
    /// - Remark: HTTP `POST /threads/{thread_id}/messages/{message_id}`.
    /// - Remark: Generated from `#/paths//threads/{thread_id}/messages/{message_id}/post(modifyMessage)`.
    func modifyMessage(_ input: Operations.ModifyMessage.Input) async throws -> Operations.ModifyMessage.Output
    /// Deletes a message.
    ///
    /// - Remark: HTTP `DELETE /threads/{thread_id}/messages/{message_id}`.
    /// - Remark: Generated from `#/paths//threads/{thread_id}/messages/{message_id}/delete(deleteMessage)`.
    func deleteMessage(_ input: Operations.DeleteMessage.Input) async throws -> Operations.DeleteMessage.Output
    /// Returns a list of runs belonging to a thread.
    ///
    /// - Remark: HTTP `GET /threads/{thread_id}/runs`.
    /// - Remark: Generated from `#/paths//threads/{thread_id}/runs/get(listRuns)`.
    func listRuns(_ input: Operations.ListRuns.Input) async throws -> Operations.ListRuns.Output
    /// Create a run.
    ///
    /// - Remark: HTTP `POST /threads/{thread_id}/runs`.
    /// - Remark: Generated from `#/paths//threads/{thread_id}/runs/post(createRun)`.
    func createRun(_ input: Operations.CreateRun.Input) async throws -> Operations.CreateRun.Output
    /// Retrieves a run.
    ///
    /// - Remark: HTTP `GET /threads/{thread_id}/runs/{run_id}`.
    /// - Remark: Generated from `#/paths//threads/{thread_id}/runs/{run_id}/get(getRun)`.
    func getRun(_ input: Operations.GetRun.Input) async throws -> Operations.GetRun.Output
    /// Modifies a run.
    ///
    /// - Remark: HTTP `POST /threads/{thread_id}/runs/{run_id}`.
    /// - Remark: Generated from `#/paths//threads/{thread_id}/runs/{run_id}/post(modifyRun)`.
    func modifyRun(_ input: Operations.ModifyRun.Input) async throws -> Operations.ModifyRun.Output
    /// Cancels a run that is `in_progress`.
    ///
    /// - Remark: HTTP `POST /threads/{thread_id}/runs/{run_id}/cancel`.
    /// - Remark: Generated from `#/paths//threads/{thread_id}/runs/{run_id}/cancel/post(cancelRun)`.
    func cancelRun(_ input: Operations.CancelRun.Input) async throws -> Operations.CancelRun.Output
    /// Returns a list of run steps belonging to a run.
    ///
    /// - Remark: HTTP `GET /threads/{thread_id}/runs/{run_id}/steps`.
    /// - Remark: Generated from `#/paths//threads/{thread_id}/runs/{run_id}/steps/get(listRunSteps)`.
    func listRunSteps(_ input: Operations.ListRunSteps.Input) async throws -> Operations.ListRunSteps.Output
    /// Retrieves a run step.
    ///
    /// - Remark: HTTP `GET /threads/{thread_id}/runs/{run_id}/steps/{step_id}`.
    /// - Remark: Generated from `#/paths//threads/{thread_id}/runs/{run_id}/steps/{step_id}/get(getRunStep)`.
    func getRunStep(_ input: Operations.GetRunStep.Input) async throws -> Operations.GetRunStep.Output
    /// When a run has the `status: "requires_action"` and `required_action.type` is `submit_tool_outputs`, this endpoint can be used to submit the outputs from the tool calls once they're all completed. All outputs must be submitted in a single request.
    ///
    ///
    /// - Remark: HTTP `POST /threads/{thread_id}/runs/{run_id}/submit_tool_outputs`.
    /// - Remark: Generated from `#/paths//threads/{thread_id}/runs/{run_id}/submit_tool_outputs/post(submitToolOuputsToRun)`.
    func submitToolOuputsToRun(_ input: Operations.SubmitToolOuputsToRun.Input) async throws -> Operations.SubmitToolOuputsToRun.Output
    /// Creates an intermediate [Upload](/docs/api-reference/uploads/object) object that you can add [Parts](/docs/api-reference/uploads/part-object) to. Currently, an Upload can accept at most 8 GB in total and expires after an hour after you create it.
    ///
    /// Once you complete the Upload, we will create a [File](/docs/api-reference/files/object) object that contains all the parts you uploaded. This File is usable in the rest of our platform as a regular File object.
    ///
    /// For certain `purpose`s, the correct `mime_type` must be specified. Please refer to documentation for the supported MIME types for your use case:
    /// - [Assistants](/docs/assistants/tools/file-search#supported-files)
    ///
    /// For guidance on the proper filename extensions for each purpose, please follow the documentation on [creating a File](/docs/api-reference/files/create).
    ///
    ///
    /// - Remark: HTTP `POST /uploads`.
    /// - Remark: Generated from `#/paths//uploads/post(createUpload)`.
    func createUpload(_ input: Operations.CreateUpload.Input) async throws -> Operations.CreateUpload.Output
    /// Cancels the Upload. No Parts may be added after an Upload is cancelled.
    ///
    ///
    /// - Remark: HTTP `POST /uploads/{upload_id}/cancel`.
    /// - Remark: Generated from `#/paths//uploads/{upload_id}/cancel/post(cancelUpload)`.
    func cancelUpload(_ input: Operations.CancelUpload.Input) async throws -> Operations.CancelUpload.Output
    /// Completes the [Upload](/docs/api-reference/uploads/object). 
    ///
    /// Within the returned Upload object, there is a nested [File](/docs/api-reference/files/object) object that is ready to use in the rest of the platform.
    ///
    /// You can specify the order of the Parts by passing in an ordered list of the Part IDs.
    ///
    /// The number of bytes uploaded upon completion must match the number of bytes initially specified when creating the Upload object. No Parts may be added after an Upload is completed.
    ///
    ///
    /// - Remark: HTTP `POST /uploads/{upload_id}/complete`.
    /// - Remark: Generated from `#/paths//uploads/{upload_id}/complete/post(completeUpload)`.
    func completeUpload(_ input: Operations.CompleteUpload.Input) async throws -> Operations.CompleteUpload.Output
    /// Adds a [Part](/docs/api-reference/uploads/part-object) to an [Upload](/docs/api-reference/uploads/object) object. A Part represents a chunk of bytes from the file you are trying to upload. 
    ///
    /// Each Part can be at most 64 MB, and you can add Parts until you hit the Upload maximum of 8 GB.
    ///
    /// It is possible to add multiple Parts in parallel. You can decide the intended order of the Parts when you [complete the Upload](/docs/api-reference/uploads/complete).
    ///
    ///
    /// - Remark: HTTP `POST /uploads/{upload_id}/parts`.
    /// - Remark: Generated from `#/paths//uploads/{upload_id}/parts/post(addUploadPart)`.
    func addUploadPart(_ input: Operations.AddUploadPart.Input) async throws -> Operations.AddUploadPart.Output
    /// Returns a list of vector stores.
    ///
    /// - Remark: HTTP `GET /vector_stores`.
    /// - Remark: Generated from `#/paths//vector_stores/get(listVectorStores)`.
    func listVectorStores(_ input: Operations.ListVectorStores.Input) async throws -> Operations.ListVectorStores.Output
    /// Create a vector store.
    ///
    /// - Remark: HTTP `POST /vector_stores`.
    /// - Remark: Generated from `#/paths//vector_stores/post(createVectorStore)`.
    func createVectorStore(_ input: Operations.CreateVectorStore.Input) async throws -> Operations.CreateVectorStore.Output
    /// Retrieves a vector store.
    ///
    /// - Remark: HTTP `GET /vector_stores/{vector_store_id}`.
    /// - Remark: Generated from `#/paths//vector_stores/{vector_store_id}/get(getVectorStore)`.
    func getVectorStore(_ input: Operations.GetVectorStore.Input) async throws -> Operations.GetVectorStore.Output
    /// Modifies a vector store.
    ///
    /// - Remark: HTTP `POST /vector_stores/{vector_store_id}`.
    /// - Remark: Generated from `#/paths//vector_stores/{vector_store_id}/post(modifyVectorStore)`.
    func modifyVectorStore(_ input: Operations.ModifyVectorStore.Input) async throws -> Operations.ModifyVectorStore.Output
    /// Delete a vector store.
    ///
    /// - Remark: HTTP `DELETE /vector_stores/{vector_store_id}`.
    /// - Remark: Generated from `#/paths//vector_stores/{vector_store_id}/delete(deleteVectorStore)`.
    func deleteVectorStore(_ input: Operations.DeleteVectorStore.Input) async throws -> Operations.DeleteVectorStore.Output
    /// Create a vector store file batch.
    ///
    /// - Remark: HTTP `POST /vector_stores/{vector_store_id}/file_batches`.
    /// - Remark: Generated from `#/paths//vector_stores/{vector_store_id}/file_batches/post(createVectorStoreFileBatch)`.
    func createVectorStoreFileBatch(_ input: Operations.CreateVectorStoreFileBatch.Input) async throws -> Operations.CreateVectorStoreFileBatch.Output
    /// Retrieves a vector store file batch.
    ///
    /// - Remark: HTTP `GET /vector_stores/{vector_store_id}/file_batches/{batch_id}`.
    /// - Remark: Generated from `#/paths//vector_stores/{vector_store_id}/file_batches/{batch_id}/get(getVectorStoreFileBatch)`.
    func getVectorStoreFileBatch(_ input: Operations.GetVectorStoreFileBatch.Input) async throws -> Operations.GetVectorStoreFileBatch.Output
    /// Cancel a vector store file batch. This attempts to cancel the processing of files in this batch as soon as possible.
    ///
    /// - Remark: HTTP `POST /vector_stores/{vector_store_id}/file_batches/{batch_id}/cancel`.
    /// - Remark: Generated from `#/paths//vector_stores/{vector_store_id}/file_batches/{batch_id}/cancel/post(cancelVectorStoreFileBatch)`.
    func cancelVectorStoreFileBatch(_ input: Operations.CancelVectorStoreFileBatch.Input) async throws -> Operations.CancelVectorStoreFileBatch.Output
    /// Returns a list of vector store files in a batch.
    ///
    /// - Remark: HTTP `GET /vector_stores/{vector_store_id}/file_batches/{batch_id}/files`.
    /// - Remark: Generated from `#/paths//vector_stores/{vector_store_id}/file_batches/{batch_id}/files/get(listFilesInVectorStoreBatch)`.
    func listFilesInVectorStoreBatch(_ input: Operations.ListFilesInVectorStoreBatch.Input) async throws -> Operations.ListFilesInVectorStoreBatch.Output
    /// Returns a list of vector store files.
    ///
    /// - Remark: HTTP `GET /vector_stores/{vector_store_id}/files`.
    /// - Remark: Generated from `#/paths//vector_stores/{vector_store_id}/files/get(listVectorStoreFiles)`.
    func listVectorStoreFiles(_ input: Operations.ListVectorStoreFiles.Input) async throws -> Operations.ListVectorStoreFiles.Output
    /// Create a vector store file by attaching a [File](/docs/api-reference/files) to a [vector store](/docs/api-reference/vector-stores/object).
    ///
    /// - Remark: HTTP `POST /vector_stores/{vector_store_id}/files`.
    /// - Remark: Generated from `#/paths//vector_stores/{vector_store_id}/files/post(createVectorStoreFile)`.
    func createVectorStoreFile(_ input: Operations.CreateVectorStoreFile.Input) async throws -> Operations.CreateVectorStoreFile.Output
    /// Retrieves a vector store file.
    ///
    /// - Remark: HTTP `GET /vector_stores/{vector_store_id}/files/{file_id}`.
    /// - Remark: Generated from `#/paths//vector_stores/{vector_store_id}/files/{file_id}/get(getVectorStoreFile)`.
    func getVectorStoreFile(_ input: Operations.GetVectorStoreFile.Input) async throws -> Operations.GetVectorStoreFile.Output
    /// Delete a vector store file. This will remove the file from the vector store but the file itself will not be deleted. To delete the file, use the [delete file](/docs/api-reference/files/delete) endpoint.
    ///
    /// - Remark: HTTP `DELETE /vector_stores/{vector_store_id}/files/{file_id}`.
    /// - Remark: Generated from `#/paths//vector_stores/{vector_store_id}/files/{file_id}/delete(deleteVectorStoreFile)`.
    func deleteVectorStoreFile(_ input: Operations.DeleteVectorStoreFile.Input) async throws -> Operations.DeleteVectorStoreFile.Output
}

/// Convenience overloads for operation inputs.
extension APIProtocol {
    /// Returns a list of assistants.
    ///
    /// - Remark: HTTP `GET /assistants`.
    /// - Remark: Generated from `#/paths//assistants/get(listAssistants)`.
    public func listAssistants(
        query: Operations.ListAssistants.Input.Query = .init(),
        headers: Operations.ListAssistants.Input.Headers = .init()
    ) async throws -> Operations.ListAssistants.Output {
        try await listAssistants(Operations.ListAssistants.Input(
            query: query,
            headers: headers
        ))
    }
    /// Create an assistant with a model and instructions.
    ///
    /// - Remark: HTTP `POST /assistants`.
    /// - Remark: Generated from `#/paths//assistants/post(createAssistant)`.
    public func createAssistant(
        headers: Operations.CreateAssistant.Input.Headers = .init(),
        body: Operations.CreateAssistant.Input.Body
    ) async throws -> Operations.CreateAssistant.Output {
        try await createAssistant(Operations.CreateAssistant.Input(
            headers: headers,
            body: body
        ))
    }
    /// Retrieves an assistant.
    ///
    /// - Remark: HTTP `GET /assistants/{assistant_id}`.
    /// - Remark: Generated from `#/paths//assistants/{assistant_id}/get(getAssistant)`.
    public func getAssistant(
        path: Operations.GetAssistant.Input.Path,
        headers: Operations.GetAssistant.Input.Headers = .init()
    ) async throws -> Operations.GetAssistant.Output {
        try await getAssistant(Operations.GetAssistant.Input(
            path: path,
            headers: headers
        ))
    }
    /// Modifies an assistant.
    ///
    /// - Remark: HTTP `POST /assistants/{assistant_id}`.
    /// - Remark: Generated from `#/paths//assistants/{assistant_id}/post(modifyAssistant)`.
    public func modifyAssistant(
        path: Operations.ModifyAssistant.Input.Path,
        headers: Operations.ModifyAssistant.Input.Headers = .init(),
        body: Operations.ModifyAssistant.Input.Body
    ) async throws -> Operations.ModifyAssistant.Output {
        try await modifyAssistant(Operations.ModifyAssistant.Input(
            path: path,
            headers: headers,
            body: body
        ))
    }
    /// Delete an assistant.
    ///
    /// - Remark: HTTP `DELETE /assistants/{assistant_id}`.
    /// - Remark: Generated from `#/paths//assistants/{assistant_id}/delete(deleteAssistant)`.
    public func deleteAssistant(
        path: Operations.DeleteAssistant.Input.Path,
        headers: Operations.DeleteAssistant.Input.Headers = .init()
    ) async throws -> Operations.DeleteAssistant.Output {
        try await deleteAssistant(Operations.DeleteAssistant.Input(
            path: path,
            headers: headers
        ))
    }
    /// Generates audio from the input text.
    ///
    /// - Remark: HTTP `POST /audio/speech`.
    /// - Remark: Generated from `#/paths//audio/speech/post(createSpeech)`.
    public func createSpeech(
        headers: Operations.CreateSpeech.Input.Headers = .init(),
        body: Operations.CreateSpeech.Input.Body
    ) async throws -> Operations.CreateSpeech.Output {
        try await createSpeech(Operations.CreateSpeech.Input(
            headers: headers,
            body: body
        ))
    }
    /// Transcribes audio into the input language.
    ///
    /// - Remark: HTTP `POST /audio/transcriptions`.
    /// - Remark: Generated from `#/paths//audio/transcriptions/post(createTranscription)`.
    public func createTranscription(
        headers: Operations.CreateTranscription.Input.Headers = .init(),
        body: Operations.CreateTranscription.Input.Body
    ) async throws -> Operations.CreateTranscription.Output {
        try await createTranscription(Operations.CreateTranscription.Input(
            headers: headers,
            body: body
        ))
    }
    /// Translates audio into English.
    ///
    /// - Remark: HTTP `POST /audio/translations`.
    /// - Remark: Generated from `#/paths//audio/translations/post(createTranslation)`.
    public func createTranslation(
        headers: Operations.CreateTranslation.Input.Headers = .init(),
        body: Operations.CreateTranslation.Input.Body
    ) async throws -> Operations.CreateTranslation.Output {
        try await createTranslation(Operations.CreateTranslation.Input(
            headers: headers,
            body: body
        ))
    }
    /// List your organization's batches.
    ///
    /// - Remark: HTTP `GET /batches`.
    /// - Remark: Generated from `#/paths//batches/get(listBatches)`.
    public func listBatches(
        query: Operations.ListBatches.Input.Query = .init(),
        headers: Operations.ListBatches.Input.Headers = .init()
    ) async throws -> Operations.ListBatches.Output {
        try await listBatches(Operations.ListBatches.Input(
            query: query,
            headers: headers
        ))
    }
    /// Creates and executes a batch from an uploaded file of requests
    ///
    /// - Remark: HTTP `POST /batches`.
    /// - Remark: Generated from `#/paths//batches/post(createBatch)`.
    public func createBatch(
        headers: Operations.CreateBatch.Input.Headers = .init(),
        body: Operations.CreateBatch.Input.Body
    ) async throws -> Operations.CreateBatch.Output {
        try await createBatch(Operations.CreateBatch.Input(
            headers: headers,
            body: body
        ))
    }
    /// Retrieves a batch.
    ///
    /// - Remark: HTTP `GET /batches/{batch_id}`.
    /// - Remark: Generated from `#/paths//batches/{batch_id}/get(retrieveBatch)`.
    public func retrieveBatch(
        path: Operations.RetrieveBatch.Input.Path,
        headers: Operations.RetrieveBatch.Input.Headers = .init()
    ) async throws -> Operations.RetrieveBatch.Output {
        try await retrieveBatch(Operations.RetrieveBatch.Input(
            path: path,
            headers: headers
        ))
    }
    /// Cancels an in-progress batch. The batch will be in status `cancelling` for up to 10 minutes, before changing to `cancelled`, where it will have partial results (if any) available in the output file.
    ///
    /// - Remark: HTTP `POST /batches/{batch_id}/cancel`.
    /// - Remark: Generated from `#/paths//batches/{batch_id}/cancel/post(cancelBatch)`.
    public func cancelBatch(
        path: Operations.CancelBatch.Input.Path,
        headers: Operations.CancelBatch.Input.Headers = .init()
    ) async throws -> Operations.CancelBatch.Output {
        try await cancelBatch(Operations.CancelBatch.Input(
            path: path,
            headers: headers
        ))
    }
    /// Creates a model response for the given chat conversation. Learn more in the
    /// [text generation](/docs/guides/text-generation), [vision](/docs/guides/vision),
    /// and [audio](/docs/guides/audio) guides.
    ///
    /// Parameter support can differ depending on the model used to generate the
    /// response, particularly for newer reasoning models. Parameters that are only
    /// supported for reasoning models are noted below. For the current state of 
    /// unsupported parameters in reasoning models, 
    /// [refer to the reasoning guide](/docs/guides/reasoning).
    ///
    ///
    /// - Remark: HTTP `POST /chat/completions`.
    /// - Remark: Generated from `#/paths//chat/completions/post(createChatCompletion)`.
    public func createChatCompletion(
        headers: Operations.CreateChatCompletion.Input.Headers = .init(),
        body: Operations.CreateChatCompletion.Input.Body
    ) async throws -> Operations.CreateChatCompletion.Output {
        try await createChatCompletion(Operations.CreateChatCompletion.Input(
            headers: headers,
            body: body
        ))
    }
    /// Creates a completion for the provided prompt and parameters.
    ///
    /// - Remark: HTTP `POST /completions`.
    /// - Remark: Generated from `#/paths//completions/post(createCompletion)`.
    public func createCompletion(
        headers: Operations.CreateCompletion.Input.Headers = .init(),
        body: Operations.CreateCompletion.Input.Body
    ) async throws -> Operations.CreateCompletion.Output {
        try await createCompletion(Operations.CreateCompletion.Input(
            headers: headers,
            body: body
        ))
    }
    /// Creates an embedding vector representing the input text.
    ///
    /// - Remark: HTTP `POST /embeddings`.
    /// - Remark: Generated from `#/paths//embeddings/post(createEmbedding)`.
    public func createEmbedding(
        headers: Operations.CreateEmbedding.Input.Headers = .init(),
        body: Operations.CreateEmbedding.Input.Body
    ) async throws -> Operations.CreateEmbedding.Output {
        try await createEmbedding(Operations.CreateEmbedding.Input(
            headers: headers,
            body: body
        ))
    }
    /// Returns a list of files.
    ///
    /// - Remark: HTTP `GET /files`.
    /// - Remark: Generated from `#/paths//files/get(listFiles)`.
    public func listFiles(
        query: Operations.ListFiles.Input.Query = .init(),
        headers: Operations.ListFiles.Input.Headers = .init()
    ) async throws -> Operations.ListFiles.Output {
        try await listFiles(Operations.ListFiles.Input(
            query: query,
            headers: headers
        ))
    }
    /// Upload a file that can be used across various endpoints. Individual files can be up to 512 MB, and the size of all files uploaded by one organization can be up to 100 GB.
    ///
    /// The Assistants API supports files up to 2 million tokens and of specific file types. See the [Assistants Tools guide](/docs/assistants/tools) for details.
    ///
    /// The Fine-tuning API only supports `.jsonl` files. The input also has certain required formats for fine-tuning [chat](/docs/api-reference/fine-tuning/chat-input) or [completions](/docs/api-reference/fine-tuning/completions-input) models.
    ///
    /// The Batch API only supports `.jsonl` files up to 200 MB in size. The input also has a specific required [format](/docs/api-reference/batch/request-input).
    ///
    /// Please [contact us](https://help.openai.com/) if you need to increase these storage limits.
    ///
    ///
    /// - Remark: HTTP `POST /files`.
    /// - Remark: Generated from `#/paths//files/post(createFile)`.
    public func createFile(
        headers: Operations.CreateFile.Input.Headers = .init(),
        body: Operations.CreateFile.Input.Body
    ) async throws -> Operations.CreateFile.Output {
        try await createFile(Operations.CreateFile.Input(
            headers: headers,
            body: body
        ))
    }
    /// Returns information about a specific file.
    ///
    /// - Remark: HTTP `GET /files/{file_id}`.
    /// - Remark: Generated from `#/paths//files/{file_id}/get(retrieveFile)`.
    public func retrieveFile(
        path: Operations.RetrieveFile.Input.Path,
        headers: Operations.RetrieveFile.Input.Headers = .init()
    ) async throws -> Operations.RetrieveFile.Output {
        try await retrieveFile(Operations.RetrieveFile.Input(
            path: path,
            headers: headers
        ))
    }
    /// Delete a file.
    ///
    /// - Remark: HTTP `DELETE /files/{file_id}`.
    /// - Remark: Generated from `#/paths//files/{file_id}/delete(deleteFile)`.
    public func deleteFile(
        path: Operations.DeleteFile.Input.Path,
        headers: Operations.DeleteFile.Input.Headers = .init()
    ) async throws -> Operations.DeleteFile.Output {
        try await deleteFile(Operations.DeleteFile.Input(
            path: path,
            headers: headers
        ))
    }
    /// Returns the contents of the specified file.
    ///
    /// - Remark: HTTP `GET /files/{file_id}/content`.
    /// - Remark: Generated from `#/paths//files/{file_id}/content/get(downloadFile)`.
    public func downloadFile(
        path: Operations.DownloadFile.Input.Path,
        headers: Operations.DownloadFile.Input.Headers = .init()
    ) async throws -> Operations.DownloadFile.Output {
        try await downloadFile(Operations.DownloadFile.Input(
            path: path,
            headers: headers
        ))
    }
    /// List your organization's fine-tuning jobs
    ///
    ///
    /// - Remark: HTTP `GET /fine_tuning/jobs`.
    /// - Remark: Generated from `#/paths//fine_tuning/jobs/get(listPaginatedFineTuningJobs)`.
    public func listPaginatedFineTuningJobs(
        query: Operations.ListPaginatedFineTuningJobs.Input.Query = .init(),
        headers: Operations.ListPaginatedFineTuningJobs.Input.Headers = .init()
    ) async throws -> Operations.ListPaginatedFineTuningJobs.Output {
        try await listPaginatedFineTuningJobs(Operations.ListPaginatedFineTuningJobs.Input(
            query: query,
            headers: headers
        ))
    }
    /// Creates a fine-tuning job which begins the process of creating a new model from a given dataset.
    ///
    /// Response includes details of the enqueued job including job status and the name of the fine-tuned models once complete.
    ///
    /// [Learn more about fine-tuning](/docs/guides/fine-tuning)
    ///
    ///
    /// - Remark: HTTP `POST /fine_tuning/jobs`.
    /// - Remark: Generated from `#/paths//fine_tuning/jobs/post(createFineTuningJob)`.
    public func createFineTuningJob(
        headers: Operations.CreateFineTuningJob.Input.Headers = .init(),
        body: Operations.CreateFineTuningJob.Input.Body
    ) async throws -> Operations.CreateFineTuningJob.Output {
        try await createFineTuningJob(Operations.CreateFineTuningJob.Input(
            headers: headers,
            body: body
        ))
    }
    /// Get info about a fine-tuning job.
    ///
    /// [Learn more about fine-tuning](/docs/guides/fine-tuning)
    ///
    ///
    /// - Remark: HTTP `GET /fine_tuning/jobs/{fine_tuning_job_id}`.
    /// - Remark: Generated from `#/paths//fine_tuning/jobs/{fine_tuning_job_id}/get(retrieveFineTuningJob)`.
    public func retrieveFineTuningJob(
        path: Operations.RetrieveFineTuningJob.Input.Path,
        headers: Operations.RetrieveFineTuningJob.Input.Headers = .init()
    ) async throws -> Operations.RetrieveFineTuningJob.Output {
        try await retrieveFineTuningJob(Operations.RetrieveFineTuningJob.Input(
            path: path,
            headers: headers
        ))
    }
    /// Immediately cancel a fine-tune job.
    ///
    ///
    /// - Remark: HTTP `POST /fine_tuning/jobs/{fine_tuning_job_id}/cancel`.
    /// - Remark: Generated from `#/paths//fine_tuning/jobs/{fine_tuning_job_id}/cancel/post(cancelFineTuningJob)`.
    public func cancelFineTuningJob(
        path: Operations.CancelFineTuningJob.Input.Path,
        headers: Operations.CancelFineTuningJob.Input.Headers = .init()
    ) async throws -> Operations.CancelFineTuningJob.Output {
        try await cancelFineTuningJob(Operations.CancelFineTuningJob.Input(
            path: path,
            headers: headers
        ))
    }
    /// List checkpoints for a fine-tuning job.
    ///
    ///
    /// - Remark: HTTP `GET /fine_tuning/jobs/{fine_tuning_job_id}/checkpoints`.
    /// - Remark: Generated from `#/paths//fine_tuning/jobs/{fine_tuning_job_id}/checkpoints/get(listFineTuningJobCheckpoints)`.
    public func listFineTuningJobCheckpoints(
        path: Operations.ListFineTuningJobCheckpoints.Input.Path,
        query: Operations.ListFineTuningJobCheckpoints.Input.Query = .init(),
        headers: Operations.ListFineTuningJobCheckpoints.Input.Headers = .init()
    ) async throws -> Operations.ListFineTuningJobCheckpoints.Output {
        try await listFineTuningJobCheckpoints(Operations.ListFineTuningJobCheckpoints.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
    /// Get status updates for a fine-tuning job.
    ///
    ///
    /// - Remark: HTTP `GET /fine_tuning/jobs/{fine_tuning_job_id}/events`.
    /// - Remark: Generated from `#/paths//fine_tuning/jobs/{fine_tuning_job_id}/events/get(listFineTuningEvents)`.
    public func listFineTuningEvents(
        path: Operations.ListFineTuningEvents.Input.Path,
        query: Operations.ListFineTuningEvents.Input.Query = .init(),
        headers: Operations.ListFineTuningEvents.Input.Headers = .init()
    ) async throws -> Operations.ListFineTuningEvents.Output {
        try await listFineTuningEvents(Operations.ListFineTuningEvents.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
    /// Creates an edited or extended image given an original image and a prompt.
    ///
    /// - Remark: HTTP `POST /images/edits`.
    /// - Remark: Generated from `#/paths//images/edits/post(createImageEdit)`.
    public func createImageEdit(
        headers: Operations.CreateImageEdit.Input.Headers = .init(),
        body: Operations.CreateImageEdit.Input.Body
    ) async throws -> Operations.CreateImageEdit.Output {
        try await createImageEdit(Operations.CreateImageEdit.Input(
            headers: headers,
            body: body
        ))
    }
    /// Creates an image given a prompt.
    ///
    /// - Remark: HTTP `POST /images/generations`.
    /// - Remark: Generated from `#/paths//images/generations/post(createImage)`.
    public func createImage(
        headers: Operations.CreateImage.Input.Headers = .init(),
        body: Operations.CreateImage.Input.Body
    ) async throws -> Operations.CreateImage.Output {
        try await createImage(Operations.CreateImage.Input(
            headers: headers,
            body: body
        ))
    }
    /// Creates a variation of a given image.
    ///
    /// - Remark: HTTP `POST /images/variations`.
    /// - Remark: Generated from `#/paths//images/variations/post(createImageVariation)`.
    public func createImageVariation(
        headers: Operations.CreateImageVariation.Input.Headers = .init(),
        body: Operations.CreateImageVariation.Input.Body
    ) async throws -> Operations.CreateImageVariation.Output {
        try await createImageVariation(Operations.CreateImageVariation.Input(
            headers: headers,
            body: body
        ))
    }
    /// Lists the currently available models, and provides basic information about each one such as the owner and availability.
    ///
    /// - Remark: HTTP `GET /models`.
    /// - Remark: Generated from `#/paths//models/get(listModels)`.
    public func listModels(headers: Operations.ListModels.Input.Headers = .init()) async throws -> Operations.ListModels.Output {
        try await listModels(Operations.ListModels.Input(headers: headers))
    }
    /// Retrieves a model instance, providing basic information about the model such as the owner and permissioning.
    ///
    /// - Remark: HTTP `GET /models/{model}`.
    /// - Remark: Generated from `#/paths//models/{model}/get(retrieveModel)`.
    public func retrieveModel(
        path: Operations.RetrieveModel.Input.Path,
        headers: Operations.RetrieveModel.Input.Headers = .init()
    ) async throws -> Operations.RetrieveModel.Output {
        try await retrieveModel(Operations.RetrieveModel.Input(
            path: path,
            headers: headers
        ))
    }
    /// Delete a fine-tuned model. You must have the Owner role in your organization to delete a model.
    ///
    /// - Remark: HTTP `DELETE /models/{model}`.
    /// - Remark: Generated from `#/paths//models/{model}/delete(deleteModel)`.
    public func deleteModel(
        path: Operations.DeleteModel.Input.Path,
        headers: Operations.DeleteModel.Input.Headers = .init()
    ) async throws -> Operations.DeleteModel.Output {
        try await deleteModel(Operations.DeleteModel.Input(
            path: path,
            headers: headers
        ))
    }
    /// Classifies if text and/or image inputs are potentially harmful. Learn
    /// more in the [moderation guide](/docs/guides/moderation).
    ///
    ///
    /// - Remark: HTTP `POST /moderations`.
    /// - Remark: Generated from `#/paths//moderations/post(createModeration)`.
    public func createModeration(
        headers: Operations.CreateModeration.Input.Headers = .init(),
        body: Operations.CreateModeration.Input.Body
    ) async throws -> Operations.CreateModeration.Output {
        try await createModeration(Operations.CreateModeration.Input(
            headers: headers,
            body: body
        ))
    }
    /// List organization API keys
    ///
    /// Retrieve a paginated list of organization admin API keys.
    ///
    /// - Remark: HTTP `GET /organization/admin_api_keys`.
    /// - Remark: Generated from `#/paths//organization/admin_api_keys/get(admin-api-keys-list)`.
    public func adminApiKeysList(
        query: Operations.AdminApiKeysList.Input.Query = .init(),
        headers: Operations.AdminApiKeysList.Input.Headers = .init()
    ) async throws -> Operations.AdminApiKeysList.Output {
        try await adminApiKeysList(Operations.AdminApiKeysList.Input(
            query: query,
            headers: headers
        ))
    }
    /// Create an organization admin API key
    ///
    /// Create a new admin-level API key for the organization.
    ///
    /// - Remark: HTTP `POST /organization/admin_api_keys`.
    /// - Remark: Generated from `#/paths//organization/admin_api_keys/post(admin-api-keys-create)`.
    public func adminApiKeysCreate(
        headers: Operations.AdminApiKeysCreate.Input.Headers = .init(),
        body: Operations.AdminApiKeysCreate.Input.Body
    ) async throws -> Operations.AdminApiKeysCreate.Output {
        try await adminApiKeysCreate(Operations.AdminApiKeysCreate.Input(
            headers: headers,
            body: body
        ))
    }
    /// Retrieve a single organization API key
    ///
    /// Get details for a specific organization API key by its ID.
    ///
    /// - Remark: HTTP `GET /organization/admin_api_keys/{key_id}`.
    /// - Remark: Generated from `#/paths//organization/admin_api_keys/{key_id}/get(admin-api-keys-get)`.
    public func adminApiKeysGet(
        path: Operations.AdminApiKeysGet.Input.Path,
        headers: Operations.AdminApiKeysGet.Input.Headers = .init()
    ) async throws -> Operations.AdminApiKeysGet.Output {
        try await adminApiKeysGet(Operations.AdminApiKeysGet.Input(
            path: path,
            headers: headers
        ))
    }
    /// Delete an organization admin API key
    ///
    /// Delete the specified admin API key.
    ///
    /// - Remark: HTTP `DELETE /organization/admin_api_keys/{key_id}`.
    /// - Remark: Generated from `#/paths//organization/admin_api_keys/{key_id}/delete(admin-api-keys-delete)`.
    public func adminApiKeysDelete(
        path: Operations.AdminApiKeysDelete.Input.Path,
        headers: Operations.AdminApiKeysDelete.Input.Headers = .init()
    ) async throws -> Operations.AdminApiKeysDelete.Output {
        try await adminApiKeysDelete(Operations.AdminApiKeysDelete.Input(
            path: path,
            headers: headers
        ))
    }
    /// List user actions and configuration changes within this organization.
    ///
    /// - Remark: HTTP `GET /organization/audit_logs`.
    /// - Remark: Generated from `#/paths//organization/audit_logs/get(list-audit-logs)`.
    public func listAuditLogs(
        query: Operations.ListAuditLogs.Input.Query = .init(),
        headers: Operations.ListAuditLogs.Input.Headers = .init()
    ) async throws -> Operations.ListAuditLogs.Output {
        try await listAuditLogs(Operations.ListAuditLogs.Input(
            query: query,
            headers: headers
        ))
    }
    /// Get costs details for the organization.
    ///
    /// - Remark: HTTP `GET /organization/costs`.
    /// - Remark: Generated from `#/paths//organization/costs/get(usage-costs)`.
    public func usageCosts(
        query: Operations.UsageCosts.Input.Query,
        headers: Operations.UsageCosts.Input.Headers = .init()
    ) async throws -> Operations.UsageCosts.Output {
        try await usageCosts(Operations.UsageCosts.Input(
            query: query,
            headers: headers
        ))
    }
    /// Returns a list of invites in the organization.
    ///
    /// - Remark: HTTP `GET /organization/invites`.
    /// - Remark: Generated from `#/paths//organization/invites/get(list-invites)`.
    public func listInvites(
        query: Operations.ListInvites.Input.Query = .init(),
        headers: Operations.ListInvites.Input.Headers = .init()
    ) async throws -> Operations.ListInvites.Output {
        try await listInvites(Operations.ListInvites.Input(
            query: query,
            headers: headers
        ))
    }
    /// Create an invite for a user to the organization. The invite must be accepted by the user before they have access to the organization.
    ///
    /// - Remark: HTTP `POST /organization/invites`.
    /// - Remark: Generated from `#/paths//organization/invites/post(inviteUser)`.
    public func inviteUser(
        headers: Operations.InviteUser.Input.Headers = .init(),
        body: Operations.InviteUser.Input.Body
    ) async throws -> Operations.InviteUser.Output {
        try await inviteUser(Operations.InviteUser.Input(
            headers: headers,
            body: body
        ))
    }
    /// Retrieves an invite.
    ///
    /// - Remark: HTTP `GET /organization/invites/{invite_id}`.
    /// - Remark: Generated from `#/paths//organization/invites/{invite_id}/get(retrieve-invite)`.
    public func retrieveInvite(
        path: Operations.RetrieveInvite.Input.Path,
        headers: Operations.RetrieveInvite.Input.Headers = .init()
    ) async throws -> Operations.RetrieveInvite.Output {
        try await retrieveInvite(Operations.RetrieveInvite.Input(
            path: path,
            headers: headers
        ))
    }
    /// Delete an invite. If the invite has already been accepted, it cannot be deleted.
    ///
    /// - Remark: HTTP `DELETE /organization/invites/{invite_id}`.
    /// - Remark: Generated from `#/paths//organization/invites/{invite_id}/delete(delete-invite)`.
    public func deleteInvite(
        path: Operations.DeleteInvite.Input.Path,
        headers: Operations.DeleteInvite.Input.Headers = .init()
    ) async throws -> Operations.DeleteInvite.Output {
        try await deleteInvite(Operations.DeleteInvite.Input(
            path: path,
            headers: headers
        ))
    }
    /// Returns a list of projects.
    ///
    /// - Remark: HTTP `GET /organization/projects`.
    /// - Remark: Generated from `#/paths//organization/projects/get(list-projects)`.
    public func listProjects(
        query: Operations.ListProjects.Input.Query = .init(),
        headers: Operations.ListProjects.Input.Headers = .init()
    ) async throws -> Operations.ListProjects.Output {
        try await listProjects(Operations.ListProjects.Input(
            query: query,
            headers: headers
        ))
    }
    /// Create a new project in the organization. Projects can be created and archived, but cannot be deleted.
    ///
    /// - Remark: HTTP `POST /organization/projects`.
    /// - Remark: Generated from `#/paths//organization/projects/post(create-project)`.
    public func createProject(
        headers: Operations.CreateProject.Input.Headers = .init(),
        body: Operations.CreateProject.Input.Body
    ) async throws -> Operations.CreateProject.Output {
        try await createProject(Operations.CreateProject.Input(
            headers: headers,
            body: body
        ))
    }
    /// Retrieves a project.
    ///
    /// - Remark: HTTP `GET /organization/projects/{project_id}`.
    /// - Remark: Generated from `#/paths//organization/projects/{project_id}/get(retrieve-project)`.
    public func retrieveProject(
        path: Operations.RetrieveProject.Input.Path,
        headers: Operations.RetrieveProject.Input.Headers = .init()
    ) async throws -> Operations.RetrieveProject.Output {
        try await retrieveProject(Operations.RetrieveProject.Input(
            path: path,
            headers: headers
        ))
    }
    /// Modifies a project in the organization.
    ///
    /// - Remark: HTTP `POST /organization/projects/{project_id}`.
    /// - Remark: Generated from `#/paths//organization/projects/{project_id}/post(modify-project)`.
    public func modifyProject(
        path: Operations.ModifyProject.Input.Path,
        headers: Operations.ModifyProject.Input.Headers = .init(),
        body: Operations.ModifyProject.Input.Body
    ) async throws -> Operations.ModifyProject.Output {
        try await modifyProject(Operations.ModifyProject.Input(
            path: path,
            headers: headers,
            body: body
        ))
    }
    /// Returns a list of API keys in the project.
    ///
    /// - Remark: HTTP `GET /organization/projects/{project_id}/api_keys`.
    /// - Remark: Generated from `#/paths//organization/projects/{project_id}/api_keys/get(list-project-api-keys)`.
    public func listProjectApiKeys(
        path: Operations.ListProjectApiKeys.Input.Path,
        query: Operations.ListProjectApiKeys.Input.Query = .init(),
        headers: Operations.ListProjectApiKeys.Input.Headers = .init()
    ) async throws -> Operations.ListProjectApiKeys.Output {
        try await listProjectApiKeys(Operations.ListProjectApiKeys.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
    /// Retrieves an API key in the project.
    ///
    /// - Remark: HTTP `GET /organization/projects/{project_id}/api_keys/{key_id}`.
    /// - Remark: Generated from `#/paths//organization/projects/{project_id}/api_keys/{key_id}/get(retrieve-project-api-key)`.
    public func retrieveProjectApiKey(
        path: Operations.RetrieveProjectApiKey.Input.Path,
        headers: Operations.RetrieveProjectApiKey.Input.Headers = .init()
    ) async throws -> Operations.RetrieveProjectApiKey.Output {
        try await retrieveProjectApiKey(Operations.RetrieveProjectApiKey.Input(
            path: path,
            headers: headers
        ))
    }
    /// Deletes an API key from the project.
    ///
    /// - Remark: HTTP `DELETE /organization/projects/{project_id}/api_keys/{key_id}`.
    /// - Remark: Generated from `#/paths//organization/projects/{project_id}/api_keys/{key_id}/delete(delete-project-api-key)`.
    public func deleteProjectApiKey(
        path: Operations.DeleteProjectApiKey.Input.Path,
        headers: Operations.DeleteProjectApiKey.Input.Headers = .init()
    ) async throws -> Operations.DeleteProjectApiKey.Output {
        try await deleteProjectApiKey(Operations.DeleteProjectApiKey.Input(
            path: path,
            headers: headers
        ))
    }
    /// Archives a project in the organization. Archived projects cannot be used or updated.
    ///
    /// - Remark: HTTP `POST /organization/projects/{project_id}/archive`.
    /// - Remark: Generated from `#/paths//organization/projects/{project_id}/archive/post(archive-project)`.
    public func archiveProject(
        path: Operations.ArchiveProject.Input.Path,
        headers: Operations.ArchiveProject.Input.Headers = .init()
    ) async throws -> Operations.ArchiveProject.Output {
        try await archiveProject(Operations.ArchiveProject.Input(
            path: path,
            headers: headers
        ))
    }
    /// Returns the rate limits per model for a project.
    ///
    /// - Remark: HTTP `GET /organization/projects/{project_id}/rate_limits`.
    /// - Remark: Generated from `#/paths//organization/projects/{project_id}/rate_limits/get(list-project-rate-limits)`.
    public func listProjectRateLimits(
        path: Operations.ListProjectRateLimits.Input.Path,
        query: Operations.ListProjectRateLimits.Input.Query = .init(),
        headers: Operations.ListProjectRateLimits.Input.Headers = .init()
    ) async throws -> Operations.ListProjectRateLimits.Output {
        try await listProjectRateLimits(Operations.ListProjectRateLimits.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
    /// Updates a project rate limit.
    ///
    /// - Remark: HTTP `POST /organization/projects/{project_id}/rate_limits/{rate_limit_id}`.
    /// - Remark: Generated from `#/paths//organization/projects/{project_id}/rate_limits/{rate_limit_id}/post(update-project-rate-limits)`.
    public func updateProjectRateLimits(
        path: Operations.UpdateProjectRateLimits.Input.Path,
        headers: Operations.UpdateProjectRateLimits.Input.Headers = .init(),
        body: Operations.UpdateProjectRateLimits.Input.Body
    ) async throws -> Operations.UpdateProjectRateLimits.Output {
        try await updateProjectRateLimits(Operations.UpdateProjectRateLimits.Input(
            path: path,
            headers: headers,
            body: body
        ))
    }
    /// Returns a list of service accounts in the project.
    ///
    /// - Remark: HTTP `GET /organization/projects/{project_id}/service_accounts`.
    /// - Remark: Generated from `#/paths//organization/projects/{project_id}/service_accounts/get(list-project-service-accounts)`.
    public func listProjectServiceAccounts(
        path: Operations.ListProjectServiceAccounts.Input.Path,
        query: Operations.ListProjectServiceAccounts.Input.Query = .init(),
        headers: Operations.ListProjectServiceAccounts.Input.Headers = .init()
    ) async throws -> Operations.ListProjectServiceAccounts.Output {
        try await listProjectServiceAccounts(Operations.ListProjectServiceAccounts.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
    /// Creates a new service account in the project. This also returns an unredacted API key for the service account.
    ///
    /// - Remark: HTTP `POST /organization/projects/{project_id}/service_accounts`.
    /// - Remark: Generated from `#/paths//organization/projects/{project_id}/service_accounts/post(create-project-service-account)`.
    public func createProjectServiceAccount(
        path: Operations.CreateProjectServiceAccount.Input.Path,
        headers: Operations.CreateProjectServiceAccount.Input.Headers = .init(),
        body: Operations.CreateProjectServiceAccount.Input.Body
    ) async throws -> Operations.CreateProjectServiceAccount.Output {
        try await createProjectServiceAccount(Operations.CreateProjectServiceAccount.Input(
            path: path,
            headers: headers,
            body: body
        ))
    }
    /// Retrieves a service account in the project.
    ///
    /// - Remark: HTTP `GET /organization/projects/{project_id}/service_accounts/{service_account_id}`.
    /// - Remark: Generated from `#/paths//organization/projects/{project_id}/service_accounts/{service_account_id}/get(retrieve-project-service-account)`.
    public func retrieveProjectServiceAccount(
        path: Operations.RetrieveProjectServiceAccount.Input.Path,
        headers: Operations.RetrieveProjectServiceAccount.Input.Headers = .init()
    ) async throws -> Operations.RetrieveProjectServiceAccount.Output {
        try await retrieveProjectServiceAccount(Operations.RetrieveProjectServiceAccount.Input(
            path: path,
            headers: headers
        ))
    }
    /// Deletes a service account from the project.
    ///
    /// - Remark: HTTP `DELETE /organization/projects/{project_id}/service_accounts/{service_account_id}`.
    /// - Remark: Generated from `#/paths//organization/projects/{project_id}/service_accounts/{service_account_id}/delete(delete-project-service-account)`.
    public func deleteProjectServiceAccount(
        path: Operations.DeleteProjectServiceAccount.Input.Path,
        headers: Operations.DeleteProjectServiceAccount.Input.Headers = .init()
    ) async throws -> Operations.DeleteProjectServiceAccount.Output {
        try await deleteProjectServiceAccount(Operations.DeleteProjectServiceAccount.Input(
            path: path,
            headers: headers
        ))
    }
    /// Returns a list of users in the project.
    ///
    /// - Remark: HTTP `GET /organization/projects/{project_id}/users`.
    /// - Remark: Generated from `#/paths//organization/projects/{project_id}/users/get(list-project-users)`.
    public func listProjectUsers(
        path: Operations.ListProjectUsers.Input.Path,
        query: Operations.ListProjectUsers.Input.Query = .init(),
        headers: Operations.ListProjectUsers.Input.Headers = .init()
    ) async throws -> Operations.ListProjectUsers.Output {
        try await listProjectUsers(Operations.ListProjectUsers.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
    /// Adds a user to the project. Users must already be members of the organization to be added to a project.
    ///
    /// - Remark: HTTP `POST /organization/projects/{project_id}/users`.
    /// - Remark: Generated from `#/paths//organization/projects/{project_id}/users/post(create-project-user)`.
    public func createProjectUser(
        path: Operations.CreateProjectUser.Input.Path,
        headers: Operations.CreateProjectUser.Input.Headers = .init(),
        body: Operations.CreateProjectUser.Input.Body
    ) async throws -> Operations.CreateProjectUser.Output {
        try await createProjectUser(Operations.CreateProjectUser.Input(
            path: path,
            headers: headers,
            body: body
        ))
    }
    /// Retrieves a user in the project.
    ///
    /// - Remark: HTTP `GET /organization/projects/{project_id}/users/{user_id}`.
    /// - Remark: Generated from `#/paths//organization/projects/{project_id}/users/{user_id}/get(retrieve-project-user)`.
    public func retrieveProjectUser(
        path: Operations.RetrieveProjectUser.Input.Path,
        headers: Operations.RetrieveProjectUser.Input.Headers = .init()
    ) async throws -> Operations.RetrieveProjectUser.Output {
        try await retrieveProjectUser(Operations.RetrieveProjectUser.Input(
            path: path,
            headers: headers
        ))
    }
    /// Modifies a user's role in the project.
    ///
    /// - Remark: HTTP `POST /organization/projects/{project_id}/users/{user_id}`.
    /// - Remark: Generated from `#/paths//organization/projects/{project_id}/users/{user_id}/post(modify-project-user)`.
    public func modifyProjectUser(
        path: Operations.ModifyProjectUser.Input.Path,
        headers: Operations.ModifyProjectUser.Input.Headers = .init(),
        body: Operations.ModifyProjectUser.Input.Body
    ) async throws -> Operations.ModifyProjectUser.Output {
        try await modifyProjectUser(Operations.ModifyProjectUser.Input(
            path: path,
            headers: headers,
            body: body
        ))
    }
    /// Deletes a user from the project.
    ///
    /// - Remark: HTTP `DELETE /organization/projects/{project_id}/users/{user_id}`.
    /// - Remark: Generated from `#/paths//organization/projects/{project_id}/users/{user_id}/delete(delete-project-user)`.
    public func deleteProjectUser(
        path: Operations.DeleteProjectUser.Input.Path,
        headers: Operations.DeleteProjectUser.Input.Headers = .init()
    ) async throws -> Operations.DeleteProjectUser.Output {
        try await deleteProjectUser(Operations.DeleteProjectUser.Input(
            path: path,
            headers: headers
        ))
    }
    /// Get audio speeches usage details for the organization.
    ///
    /// - Remark: HTTP `GET /organization/usage/audio_speeches`.
    /// - Remark: Generated from `#/paths//organization/usage/audio_speeches/get(usage-audio-speeches)`.
    public func usageAudioSpeeches(
        query: Operations.UsageAudioSpeeches.Input.Query,
        headers: Operations.UsageAudioSpeeches.Input.Headers = .init()
    ) async throws -> Operations.UsageAudioSpeeches.Output {
        try await usageAudioSpeeches(Operations.UsageAudioSpeeches.Input(
            query: query,
            headers: headers
        ))
    }
    /// Get audio transcriptions usage details for the organization.
    ///
    /// - Remark: HTTP `GET /organization/usage/audio_transcriptions`.
    /// - Remark: Generated from `#/paths//organization/usage/audio_transcriptions/get(usage-audio-transcriptions)`.
    public func usageAudioTranscriptions(
        query: Operations.UsageAudioTranscriptions.Input.Query,
        headers: Operations.UsageAudioTranscriptions.Input.Headers = .init()
    ) async throws -> Operations.UsageAudioTranscriptions.Output {
        try await usageAudioTranscriptions(Operations.UsageAudioTranscriptions.Input(
            query: query,
            headers: headers
        ))
    }
    /// Get code interpreter sessions usage details for the organization.
    ///
    /// - Remark: HTTP `GET /organization/usage/code_interpreter_sessions`.
    /// - Remark: Generated from `#/paths//organization/usage/code_interpreter_sessions/get(usage-code-interpreter-sessions)`.
    public func usageCodeInterpreterSessions(
        query: Operations.UsageCodeInterpreterSessions.Input.Query,
        headers: Operations.UsageCodeInterpreterSessions.Input.Headers = .init()
    ) async throws -> Operations.UsageCodeInterpreterSessions.Output {
        try await usageCodeInterpreterSessions(Operations.UsageCodeInterpreterSessions.Input(
            query: query,
            headers: headers
        ))
    }
    /// Get completions usage details for the organization.
    ///
    /// - Remark: HTTP `GET /organization/usage/completions`.
    /// - Remark: Generated from `#/paths//organization/usage/completions/get(usage-completions)`.
    public func usageCompletions(
        query: Operations.UsageCompletions.Input.Query,
        headers: Operations.UsageCompletions.Input.Headers = .init()
    ) async throws -> Operations.UsageCompletions.Output {
        try await usageCompletions(Operations.UsageCompletions.Input(
            query: query,
            headers: headers
        ))
    }
    /// Get embeddings usage details for the organization.
    ///
    /// - Remark: HTTP `GET /organization/usage/embeddings`.
    /// - Remark: Generated from `#/paths//organization/usage/embeddings/get(usage-embeddings)`.
    public func usageEmbeddings(
        query: Operations.UsageEmbeddings.Input.Query,
        headers: Operations.UsageEmbeddings.Input.Headers = .init()
    ) async throws -> Operations.UsageEmbeddings.Output {
        try await usageEmbeddings(Operations.UsageEmbeddings.Input(
            query: query,
            headers: headers
        ))
    }
    /// Get images usage details for the organization.
    ///
    /// - Remark: HTTP `GET /organization/usage/images`.
    /// - Remark: Generated from `#/paths//organization/usage/images/get(usage-images)`.
    public func usageImages(
        query: Operations.UsageImages.Input.Query,
        headers: Operations.UsageImages.Input.Headers = .init()
    ) async throws -> Operations.UsageImages.Output {
        try await usageImages(Operations.UsageImages.Input(
            query: query,
            headers: headers
        ))
    }
    /// Get moderations usage details for the organization.
    ///
    /// - Remark: HTTP `GET /organization/usage/moderations`.
    /// - Remark: Generated from `#/paths//organization/usage/moderations/get(usage-moderations)`.
    public func usageModerations(
        query: Operations.UsageModerations.Input.Query,
        headers: Operations.UsageModerations.Input.Headers = .init()
    ) async throws -> Operations.UsageModerations.Output {
        try await usageModerations(Operations.UsageModerations.Input(
            query: query,
            headers: headers
        ))
    }
    /// Get vector stores usage details for the organization.
    ///
    /// - Remark: HTTP `GET /organization/usage/vector_stores`.
    /// - Remark: Generated from `#/paths//organization/usage/vector_stores/get(usage-vector-stores)`.
    public func usageVectorStores(
        query: Operations.UsageVectorStores.Input.Query,
        headers: Operations.UsageVectorStores.Input.Headers = .init()
    ) async throws -> Operations.UsageVectorStores.Output {
        try await usageVectorStores(Operations.UsageVectorStores.Input(
            query: query,
            headers: headers
        ))
    }
    /// Lists all of the users in the organization.
    ///
    /// - Remark: HTTP `GET /organization/users`.
    /// - Remark: Generated from `#/paths//organization/users/get(list-users)`.
    public func listUsers(
        query: Operations.ListUsers.Input.Query = .init(),
        headers: Operations.ListUsers.Input.Headers = .init()
    ) async throws -> Operations.ListUsers.Output {
        try await listUsers(Operations.ListUsers.Input(
            query: query,
            headers: headers
        ))
    }
    /// Retrieves a user by their identifier.
    ///
    /// - Remark: HTTP `GET /organization/users/{user_id}`.
    /// - Remark: Generated from `#/paths//organization/users/{user_id}/get(retrieve-user)`.
    public func retrieveUser(
        path: Operations.RetrieveUser.Input.Path,
        headers: Operations.RetrieveUser.Input.Headers = .init()
    ) async throws -> Operations.RetrieveUser.Output {
        try await retrieveUser(Operations.RetrieveUser.Input(
            path: path,
            headers: headers
        ))
    }
    /// Modifies a user's role in the organization.
    ///
    /// - Remark: HTTP `POST /organization/users/{user_id}`.
    /// - Remark: Generated from `#/paths//organization/users/{user_id}/post(modify-user)`.
    public func modifyUser(
        path: Operations.ModifyUser.Input.Path,
        headers: Operations.ModifyUser.Input.Headers = .init(),
        body: Operations.ModifyUser.Input.Body
    ) async throws -> Operations.ModifyUser.Output {
        try await modifyUser(Operations.ModifyUser.Input(
            path: path,
            headers: headers,
            body: body
        ))
    }
    /// Deletes a user from the organization.
    ///
    /// - Remark: HTTP `DELETE /organization/users/{user_id}`.
    /// - Remark: Generated from `#/paths//organization/users/{user_id}/delete(delete-user)`.
    public func deleteUser(
        path: Operations.DeleteUser.Input.Path,
        headers: Operations.DeleteUser.Input.Headers = .init()
    ) async throws -> Operations.DeleteUser.Output {
        try await deleteUser(Operations.DeleteUser.Input(
            path: path,
            headers: headers
        ))
    }
    /// Create an ephemeral API token for use in client-side applications with the
    /// Realtime API. Can be configured with the same session parameters as the
    /// `session.update` client event.
    ///
    /// It responds with a session object, plus a `client_secret` key which contains
    /// a usable ephemeral API token that can be used to authenticate browser clients
    /// for the Realtime API.
    ///
    ///
    /// - Remark: HTTP `POST /realtime/sessions`.
    /// - Remark: Generated from `#/paths//realtime/sessions/post(create-realtime-session)`.
    public func createRealtimeSession(
        headers: Operations.CreateRealtimeSession.Input.Headers = .init(),
        body: Operations.CreateRealtimeSession.Input.Body
    ) async throws -> Operations.CreateRealtimeSession.Output {
        try await createRealtimeSession(Operations.CreateRealtimeSession.Input(
            headers: headers,
            body: body
        ))
    }
    /// Create a thread.
    ///
    /// - Remark: HTTP `POST /threads`.
    /// - Remark: Generated from `#/paths//threads/post(createThread)`.
    public func createThread(
        headers: Operations.CreateThread.Input.Headers = .init(),
        body: Operations.CreateThread.Input.Body? = nil
    ) async throws -> Operations.CreateThread.Output {
        try await createThread(Operations.CreateThread.Input(
            headers: headers,
            body: body
        ))
    }
    /// Create a thread and run it in one request.
    ///
    /// - Remark: HTTP `POST /threads/runs`.
    /// - Remark: Generated from `#/paths//threads/runs/post(createThreadAndRun)`.
    public func createThreadAndRun(
        headers: Operations.CreateThreadAndRun.Input.Headers = .init(),
        body: Operations.CreateThreadAndRun.Input.Body
    ) async throws -> Operations.CreateThreadAndRun.Output {
        try await createThreadAndRun(Operations.CreateThreadAndRun.Input(
            headers: headers,
            body: body
        ))
    }
    /// Retrieves a thread.
    ///
    /// - Remark: HTTP `GET /threads/{thread_id}`.
    /// - Remark: Generated from `#/paths//threads/{thread_id}/get(getThread)`.
    public func getThread(
        path: Operations.GetThread.Input.Path,
        headers: Operations.GetThread.Input.Headers = .init()
    ) async throws -> Operations.GetThread.Output {
        try await getThread(Operations.GetThread.Input(
            path: path,
            headers: headers
        ))
    }
    /// Modifies a thread.
    ///
    /// - Remark: HTTP `POST /threads/{thread_id}`.
    /// - Remark: Generated from `#/paths//threads/{thread_id}/post(modifyThread)`.
    public func modifyThread(
        path: Operations.ModifyThread.Input.Path,
        headers: Operations.ModifyThread.Input.Headers = .init(),
        body: Operations.ModifyThread.Input.Body
    ) async throws -> Operations.ModifyThread.Output {
        try await modifyThread(Operations.ModifyThread.Input(
            path: path,
            headers: headers,
            body: body
        ))
    }
    /// Delete a thread.
    ///
    /// - Remark: HTTP `DELETE /threads/{thread_id}`.
    /// - Remark: Generated from `#/paths//threads/{thread_id}/delete(deleteThread)`.
    public func deleteThread(
        path: Operations.DeleteThread.Input.Path,
        headers: Operations.DeleteThread.Input.Headers = .init()
    ) async throws -> Operations.DeleteThread.Output {
        try await deleteThread(Operations.DeleteThread.Input(
            path: path,
            headers: headers
        ))
    }
    /// Returns a list of messages for a given thread.
    ///
    /// - Remark: HTTP `GET /threads/{thread_id}/messages`.
    /// - Remark: Generated from `#/paths//threads/{thread_id}/messages/get(listMessages)`.
    public func listMessages(
        path: Operations.ListMessages.Input.Path,
        query: Operations.ListMessages.Input.Query = .init(),
        headers: Operations.ListMessages.Input.Headers = .init()
    ) async throws -> Operations.ListMessages.Output {
        try await listMessages(Operations.ListMessages.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
    /// Create a message.
    ///
    /// - Remark: HTTP `POST /threads/{thread_id}/messages`.
    /// - Remark: Generated from `#/paths//threads/{thread_id}/messages/post(createMessage)`.
    public func createMessage(
        path: Operations.CreateMessage.Input.Path,
        headers: Operations.CreateMessage.Input.Headers = .init(),
        body: Operations.CreateMessage.Input.Body
    ) async throws -> Operations.CreateMessage.Output {
        try await createMessage(Operations.CreateMessage.Input(
            path: path,
            headers: headers,
            body: body
        ))
    }
    /// Retrieve a message.
    ///
    /// - Remark: HTTP `GET /threads/{thread_id}/messages/{message_id}`.
    /// - Remark: Generated from `#/paths//threads/{thread_id}/messages/{message_id}/get(getMessage)`.
    public func getMessage(
        path: Operations.GetMessage.Input.Path,
        headers: Operations.GetMessage.Input.Headers = .init()
    ) async throws -> Operations.GetMessage.Output {
        try await getMessage(Operations.GetMessage.Input(
            path: path,
            headers: headers
        ))
    }
    /// Modifies a message.
    ///
    /// - Remark: HTTP `POST /threads/{thread_id}/messages/{message_id}`.
    /// - Remark: Generated from `#/paths//threads/{thread_id}/messages/{message_id}/post(modifyMessage)`.
    public func modifyMessage(
        path: Operations.ModifyMessage.Input.Path,
        headers: Operations.ModifyMessage.Input.Headers = .init(),
        body: Operations.ModifyMessage.Input.Body
    ) async throws -> Operations.ModifyMessage.Output {
        try await modifyMessage(Operations.ModifyMessage.Input(
            path: path,
            headers: headers,
            body: body
        ))
    }
    /// Deletes a message.
    ///
    /// - Remark: HTTP `DELETE /threads/{thread_id}/messages/{message_id}`.
    /// - Remark: Generated from `#/paths//threads/{thread_id}/messages/{message_id}/delete(deleteMessage)`.
    public func deleteMessage(
        path: Operations.DeleteMessage.Input.Path,
        headers: Operations.DeleteMessage.Input.Headers = .init()
    ) async throws -> Operations.DeleteMessage.Output {
        try await deleteMessage(Operations.DeleteMessage.Input(
            path: path,
            headers: headers
        ))
    }
    /// Returns a list of runs belonging to a thread.
    ///
    /// - Remark: HTTP `GET /threads/{thread_id}/runs`.
    /// - Remark: Generated from `#/paths//threads/{thread_id}/runs/get(listRuns)`.
    public func listRuns(
        path: Operations.ListRuns.Input.Path,
        query: Operations.ListRuns.Input.Query = .init(),
        headers: Operations.ListRuns.Input.Headers = .init()
    ) async throws -> Operations.ListRuns.Output {
        try await listRuns(Operations.ListRuns.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
    /// Create a run.
    ///
    /// - Remark: HTTP `POST /threads/{thread_id}/runs`.
    /// - Remark: Generated from `#/paths//threads/{thread_id}/runs/post(createRun)`.
    public func createRun(
        path: Operations.CreateRun.Input.Path,
        query: Operations.CreateRun.Input.Query = .init(),
        headers: Operations.CreateRun.Input.Headers = .init(),
        body: Operations.CreateRun.Input.Body
    ) async throws -> Operations.CreateRun.Output {
        try await createRun(Operations.CreateRun.Input(
            path: path,
            query: query,
            headers: headers,
            body: body
        ))
    }
    /// Retrieves a run.
    ///
    /// - Remark: HTTP `GET /threads/{thread_id}/runs/{run_id}`.
    /// - Remark: Generated from `#/paths//threads/{thread_id}/runs/{run_id}/get(getRun)`.
    public func getRun(
        path: Operations.GetRun.Input.Path,
        headers: Operations.GetRun.Input.Headers = .init()
    ) async throws -> Operations.GetRun.Output {
        try await getRun(Operations.GetRun.Input(
            path: path,
            headers: headers
        ))
    }
    /// Modifies a run.
    ///
    /// - Remark: HTTP `POST /threads/{thread_id}/runs/{run_id}`.
    /// - Remark: Generated from `#/paths//threads/{thread_id}/runs/{run_id}/post(modifyRun)`.
    public func modifyRun(
        path: Operations.ModifyRun.Input.Path,
        headers: Operations.ModifyRun.Input.Headers = .init(),
        body: Operations.ModifyRun.Input.Body
    ) async throws -> Operations.ModifyRun.Output {
        try await modifyRun(Operations.ModifyRun.Input(
            path: path,
            headers: headers,
            body: body
        ))
    }
    /// Cancels a run that is `in_progress`.
    ///
    /// - Remark: HTTP `POST /threads/{thread_id}/runs/{run_id}/cancel`.
    /// - Remark: Generated from `#/paths//threads/{thread_id}/runs/{run_id}/cancel/post(cancelRun)`.
    public func cancelRun(
        path: Operations.CancelRun.Input.Path,
        headers: Operations.CancelRun.Input.Headers = .init()
    ) async throws -> Operations.CancelRun.Output {
        try await cancelRun(Operations.CancelRun.Input(
            path: path,
            headers: headers
        ))
    }
    /// Returns a list of run steps belonging to a run.
    ///
    /// - Remark: HTTP `GET /threads/{thread_id}/runs/{run_id}/steps`.
    /// - Remark: Generated from `#/paths//threads/{thread_id}/runs/{run_id}/steps/get(listRunSteps)`.
    public func listRunSteps(
        path: Operations.ListRunSteps.Input.Path,
        query: Operations.ListRunSteps.Input.Query = .init(),
        headers: Operations.ListRunSteps.Input.Headers = .init()
    ) async throws -> Operations.ListRunSteps.Output {
        try await listRunSteps(Operations.ListRunSteps.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
    /// Retrieves a run step.
    ///
    /// - Remark: HTTP `GET /threads/{thread_id}/runs/{run_id}/steps/{step_id}`.
    /// - Remark: Generated from `#/paths//threads/{thread_id}/runs/{run_id}/steps/{step_id}/get(getRunStep)`.
    public func getRunStep(
        path: Operations.GetRunStep.Input.Path,
        query: Operations.GetRunStep.Input.Query = .init(),
        headers: Operations.GetRunStep.Input.Headers = .init()
    ) async throws -> Operations.GetRunStep.Output {
        try await getRunStep(Operations.GetRunStep.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
    /// When a run has the `status: "requires_action"` and `required_action.type` is `submit_tool_outputs`, this endpoint can be used to submit the outputs from the tool calls once they're all completed. All outputs must be submitted in a single request.
    ///
    ///
    /// - Remark: HTTP `POST /threads/{thread_id}/runs/{run_id}/submit_tool_outputs`.
    /// - Remark: Generated from `#/paths//threads/{thread_id}/runs/{run_id}/submit_tool_outputs/post(submitToolOuputsToRun)`.
    public func submitToolOuputsToRun(
        path: Operations.SubmitToolOuputsToRun.Input.Path,
        headers: Operations.SubmitToolOuputsToRun.Input.Headers = .init(),
        body: Operations.SubmitToolOuputsToRun.Input.Body
    ) async throws -> Operations.SubmitToolOuputsToRun.Output {
        try await submitToolOuputsToRun(Operations.SubmitToolOuputsToRun.Input(
            path: path,
            headers: headers,
            body: body
        ))
    }
    /// Creates an intermediate [Upload](/docs/api-reference/uploads/object) object that you can add [Parts](/docs/api-reference/uploads/part-object) to. Currently, an Upload can accept at most 8 GB in total and expires after an hour after you create it.
    ///
    /// Once you complete the Upload, we will create a [File](/docs/api-reference/files/object) object that contains all the parts you uploaded. This File is usable in the rest of our platform as a regular File object.
    ///
    /// For certain `purpose`s, the correct `mime_type` must be specified. Please refer to documentation for the supported MIME types for your use case:
    /// - [Assistants](/docs/assistants/tools/file-search#supported-files)
    ///
    /// For guidance on the proper filename extensions for each purpose, please follow the documentation on [creating a File](/docs/api-reference/files/create).
    ///
    ///
    /// - Remark: HTTP `POST /uploads`.
    /// - Remark: Generated from `#/paths//uploads/post(createUpload)`.
    public func createUpload(
        headers: Operations.CreateUpload.Input.Headers = .init(),
        body: Operations.CreateUpload.Input.Body
    ) async throws -> Operations.CreateUpload.Output {
        try await createUpload(Operations.CreateUpload.Input(
            headers: headers,
            body: body
        ))
    }
    /// Cancels the Upload. No Parts may be added after an Upload is cancelled.
    ///
    ///
    /// - Remark: HTTP `POST /uploads/{upload_id}/cancel`.
    /// - Remark: Generated from `#/paths//uploads/{upload_id}/cancel/post(cancelUpload)`.
    public func cancelUpload(
        path: Operations.CancelUpload.Input.Path,
        headers: Operations.CancelUpload.Input.Headers = .init()
    ) async throws -> Operations.CancelUpload.Output {
        try await cancelUpload(Operations.CancelUpload.Input(
            path: path,
            headers: headers
        ))
    }
    /// Completes the [Upload](/docs/api-reference/uploads/object). 
    ///
    /// Within the returned Upload object, there is a nested [File](/docs/api-reference/files/object) object that is ready to use in the rest of the platform.
    ///
    /// You can specify the order of the Parts by passing in an ordered list of the Part IDs.
    ///
    /// The number of bytes uploaded upon completion must match the number of bytes initially specified when creating the Upload object. No Parts may be added after an Upload is completed.
    ///
    ///
    /// - Remark: HTTP `POST /uploads/{upload_id}/complete`.
    /// - Remark: Generated from `#/paths//uploads/{upload_id}/complete/post(completeUpload)`.
    public func completeUpload(
        path: Operations.CompleteUpload.Input.Path,
        headers: Operations.CompleteUpload.Input.Headers = .init(),
        body: Operations.CompleteUpload.Input.Body
    ) async throws -> Operations.CompleteUpload.Output {
        try await completeUpload(Operations.CompleteUpload.Input(
            path: path,
            headers: headers,
            body: body
        ))
    }
    /// Adds a [Part](/docs/api-reference/uploads/part-object) to an [Upload](/docs/api-reference/uploads/object) object. A Part represents a chunk of bytes from the file you are trying to upload. 
    ///
    /// Each Part can be at most 64 MB, and you can add Parts until you hit the Upload maximum of 8 GB.
    ///
    /// It is possible to add multiple Parts in parallel. You can decide the intended order of the Parts when you [complete the Upload](/docs/api-reference/uploads/complete).
    ///
    ///
    /// - Remark: HTTP `POST /uploads/{upload_id}/parts`.
    /// - Remark: Generated from `#/paths//uploads/{upload_id}/parts/post(addUploadPart)`.
    public func addUploadPart(
        path: Operations.AddUploadPart.Input.Path,
        headers: Operations.AddUploadPart.Input.Headers = .init(),
        body: Operations.AddUploadPart.Input.Body
    ) async throws -> Operations.AddUploadPart.Output {
        try await addUploadPart(Operations.AddUploadPart.Input(
            path: path,
            headers: headers,
            body: body
        ))
    }
    /// Returns a list of vector stores.
    ///
    /// - Remark: HTTP `GET /vector_stores`.
    /// - Remark: Generated from `#/paths//vector_stores/get(listVectorStores)`.
    public func listVectorStores(
        query: Operations.ListVectorStores.Input.Query = .init(),
        headers: Operations.ListVectorStores.Input.Headers = .init()
    ) async throws -> Operations.ListVectorStores.Output {
        try await listVectorStores(Operations.ListVectorStores.Input(
            query: query,
            headers: headers
        ))
    }
    /// Create a vector store.
    ///
    /// - Remark: HTTP `POST /vector_stores`.
    /// - Remark: Generated from `#/paths//vector_stores/post(createVectorStore)`.
    public func createVectorStore(
        headers: Operations.CreateVectorStore.Input.Headers = .init(),
        body: Operations.CreateVectorStore.Input.Body
    ) async throws -> Operations.CreateVectorStore.Output {
        try await createVectorStore(Operations.CreateVectorStore.Input(
            headers: headers,
            body: body
        ))
    }
    /// Retrieves a vector store.
    ///
    /// - Remark: HTTP `GET /vector_stores/{vector_store_id}`.
    /// - Remark: Generated from `#/paths//vector_stores/{vector_store_id}/get(getVectorStore)`.
    public func getVectorStore(
        path: Operations.GetVectorStore.Input.Path,
        headers: Operations.GetVectorStore.Input.Headers = .init()
    ) async throws -> Operations.GetVectorStore.Output {
        try await getVectorStore(Operations.GetVectorStore.Input(
            path: path,
            headers: headers
        ))
    }
    /// Modifies a vector store.
    ///
    /// - Remark: HTTP `POST /vector_stores/{vector_store_id}`.
    /// - Remark: Generated from `#/paths//vector_stores/{vector_store_id}/post(modifyVectorStore)`.
    public func modifyVectorStore(
        path: Operations.ModifyVectorStore.Input.Path,
        headers: Operations.ModifyVectorStore.Input.Headers = .init(),
        body: Operations.ModifyVectorStore.Input.Body
    ) async throws -> Operations.ModifyVectorStore.Output {
        try await modifyVectorStore(Operations.ModifyVectorStore.Input(
            path: path,
            headers: headers,
            body: body
        ))
    }
    /// Delete a vector store.
    ///
    /// - Remark: HTTP `DELETE /vector_stores/{vector_store_id}`.
    /// - Remark: Generated from `#/paths//vector_stores/{vector_store_id}/delete(deleteVectorStore)`.
    public func deleteVectorStore(
        path: Operations.DeleteVectorStore.Input.Path,
        headers: Operations.DeleteVectorStore.Input.Headers = .init()
    ) async throws -> Operations.DeleteVectorStore.Output {
        try await deleteVectorStore(Operations.DeleteVectorStore.Input(
            path: path,
            headers: headers
        ))
    }
    /// Create a vector store file batch.
    ///
    /// - Remark: HTTP `POST /vector_stores/{vector_store_id}/file_batches`.
    /// - Remark: Generated from `#/paths//vector_stores/{vector_store_id}/file_batches/post(createVectorStoreFileBatch)`.
    public func createVectorStoreFileBatch(
        path: Operations.CreateVectorStoreFileBatch.Input.Path,
        headers: Operations.CreateVectorStoreFileBatch.Input.Headers = .init(),
        body: Operations.CreateVectorStoreFileBatch.Input.Body
    ) async throws -> Operations.CreateVectorStoreFileBatch.Output {
        try await createVectorStoreFileBatch(Operations.CreateVectorStoreFileBatch.Input(
            path: path,
            headers: headers,
            body: body
        ))
    }
    /// Retrieves a vector store file batch.
    ///
    /// - Remark: HTTP `GET /vector_stores/{vector_store_id}/file_batches/{batch_id}`.
    /// - Remark: Generated from `#/paths//vector_stores/{vector_store_id}/file_batches/{batch_id}/get(getVectorStoreFileBatch)`.
    public func getVectorStoreFileBatch(
        path: Operations.GetVectorStoreFileBatch.Input.Path,
        headers: Operations.GetVectorStoreFileBatch.Input.Headers = .init()
    ) async throws -> Operations.GetVectorStoreFileBatch.Output {
        try await getVectorStoreFileBatch(Operations.GetVectorStoreFileBatch.Input(
            path: path,
            headers: headers
        ))
    }
    /// Cancel a vector store file batch. This attempts to cancel the processing of files in this batch as soon as possible.
    ///
    /// - Remark: HTTP `POST /vector_stores/{vector_store_id}/file_batches/{batch_id}/cancel`.
    /// - Remark: Generated from `#/paths//vector_stores/{vector_store_id}/file_batches/{batch_id}/cancel/post(cancelVectorStoreFileBatch)`.
    public func cancelVectorStoreFileBatch(
        path: Operations.CancelVectorStoreFileBatch.Input.Path,
        headers: Operations.CancelVectorStoreFileBatch.Input.Headers = .init()
    ) async throws -> Operations.CancelVectorStoreFileBatch.Output {
        try await cancelVectorStoreFileBatch(Operations.CancelVectorStoreFileBatch.Input(
            path: path,
            headers: headers
        ))
    }
    /// Returns a list of vector store files in a batch.
    ///
    /// - Remark: HTTP `GET /vector_stores/{vector_store_id}/file_batches/{batch_id}/files`.
    /// - Remark: Generated from `#/paths//vector_stores/{vector_store_id}/file_batches/{batch_id}/files/get(listFilesInVectorStoreBatch)`.
    public func listFilesInVectorStoreBatch(
        path: Operations.ListFilesInVectorStoreBatch.Input.Path,
        query: Operations.ListFilesInVectorStoreBatch.Input.Query = .init(),
        headers: Operations.ListFilesInVectorStoreBatch.Input.Headers = .init()
    ) async throws -> Operations.ListFilesInVectorStoreBatch.Output {
        try await listFilesInVectorStoreBatch(Operations.ListFilesInVectorStoreBatch.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
    /// Returns a list of vector store files.
    ///
    /// - Remark: HTTP `GET /vector_stores/{vector_store_id}/files`.
    /// - Remark: Generated from `#/paths//vector_stores/{vector_store_id}/files/get(listVectorStoreFiles)`.
    public func listVectorStoreFiles(
        path: Operations.ListVectorStoreFiles.Input.Path,
        query: Operations.ListVectorStoreFiles.Input.Query = .init(),
        headers: Operations.ListVectorStoreFiles.Input.Headers = .init()
    ) async throws -> Operations.ListVectorStoreFiles.Output {
        try await listVectorStoreFiles(Operations.ListVectorStoreFiles.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
    /// Create a vector store file by attaching a [File](/docs/api-reference/files) to a [vector store](/docs/api-reference/vector-stores/object).
    ///
    /// - Remark: HTTP `POST /vector_stores/{vector_store_id}/files`.
    /// - Remark: Generated from `#/paths//vector_stores/{vector_store_id}/files/post(createVectorStoreFile)`.
    public func createVectorStoreFile(
        path: Operations.CreateVectorStoreFile.Input.Path,
        headers: Operations.CreateVectorStoreFile.Input.Headers = .init(),
        body: Operations.CreateVectorStoreFile.Input.Body
    ) async throws -> Operations.CreateVectorStoreFile.Output {
        try await createVectorStoreFile(Operations.CreateVectorStoreFile.Input(
            path: path,
            headers: headers,
            body: body
        ))
    }
    /// Retrieves a vector store file.
    ///
    /// - Remark: HTTP `GET /vector_stores/{vector_store_id}/files/{file_id}`.
    /// - Remark: Generated from `#/paths//vector_stores/{vector_store_id}/files/{file_id}/get(getVectorStoreFile)`.
    public func getVectorStoreFile(
        path: Operations.GetVectorStoreFile.Input.Path,
        headers: Operations.GetVectorStoreFile.Input.Headers = .init()
    ) async throws -> Operations.GetVectorStoreFile.Output {
        try await getVectorStoreFile(Operations.GetVectorStoreFile.Input(
            path: path,
            headers: headers
        ))
    }
    /// Delete a vector store file. This will remove the file from the vector store but the file itself will not be deleted. To delete the file, use the [delete file](/docs/api-reference/files/delete) endpoint.
    ///
    /// - Remark: HTTP `DELETE /vector_stores/{vector_store_id}/files/{file_id}`.
    /// - Remark: Generated from `#/paths//vector_stores/{vector_store_id}/files/{file_id}/delete(deleteVectorStoreFile)`.
    public func deleteVectorStoreFile(
        path: Operations.DeleteVectorStoreFile.Input.Path,
        headers: Operations.DeleteVectorStoreFile.Input.Headers = .init()
    ) async throws -> Operations.DeleteVectorStoreFile.Output {
        try await deleteVectorStoreFile(Operations.DeleteVectorStoreFile.Input(
            path: path,
            headers: headers
        ))
    }
}

/// Server URLs defined in the OpenAPI document.
public enum Servers {
    public enum Server1 {
        public static func url() throws -> Foundation.URL {
            try Foundation.URL(
                validatingOpenAPIServerURL: "https://api.openai.com/v1",
                variables: []
            )
        }
    }
    @available(*, deprecated, renamed: "Servers.Server1.url")
    public static func server1() throws -> Foundation.URL {
        try Foundation.URL(
            validatingOpenAPIServerURL: "https://api.openai.com/v1",
            variables: []
        )
    }
}

/// Types generated from the components section of the OpenAPI document.
public enum Components {
    /// Types generated from the `#/components/schemas` section of the OpenAPI document.
    public enum Schemas {
        /// - Remark: Generated from `#/components/schemas/AddUploadPartRequest`.
        @frozen public enum AddUploadPartRequest: Sendable, Hashable {
            /// - Remark: Generated from `#/components/schemas/AddUploadPartRequest/data`.
            public struct DataPayload: Sendable, Hashable {
                public var body: OpenAPIRuntime.HTTPBody
                /// Creates a new `DataPayload`.
                ///
                /// - Parameters:
                ///   - body:
                public init(body: OpenAPIRuntime.HTTPBody) {
                    self.body = body
                }
            }
            case data(OpenAPIRuntime.MultipartPart<Components.Schemas.AddUploadPartRequest.DataPayload>)
        }
        /// - Remark: Generated from `#/components/schemas/AdminApiKey`.
        public struct AdminApiKey: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/AdminApiKey/object`.
            public var object: Swift.String?
            /// - Remark: Generated from `#/components/schemas/AdminApiKey/id`.
            public var id: Swift.String?
            /// - Remark: Generated from `#/components/schemas/AdminApiKey/name`.
            public var name: Swift.String?
            /// - Remark: Generated from `#/components/schemas/AdminApiKey/redacted_value`.
            public var redactedValue: Swift.String?
            /// - Remark: Generated from `#/components/schemas/AdminApiKey/value`.
            public var value: Swift.String?
            /// - Remark: Generated from `#/components/schemas/AdminApiKey/created_at`.
            public var createdAt: Swift.Int64?
            /// - Remark: Generated from `#/components/schemas/AdminApiKey/owner`.
            public struct OwnerPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/AdminApiKey/owner/type`.
                public var _type: Swift.String?
                /// - Remark: Generated from `#/components/schemas/AdminApiKey/owner/id`.
                public var id: Swift.String?
                /// - Remark: Generated from `#/components/schemas/AdminApiKey/owner/name`.
                public var name: Swift.String?
                /// - Remark: Generated from `#/components/schemas/AdminApiKey/owner/created_at`.
                public var createdAt: Swift.Int64?
                /// - Remark: Generated from `#/components/schemas/AdminApiKey/owner/role`.
                public var role: Swift.String?
                /// Creates a new `OwnerPayload`.
                ///
                /// - Parameters:
                ///   - _type:
                ///   - id:
                ///   - name:
                ///   - createdAt:
                ///   - role:
                public init(
                    _type: Swift.String? = nil,
                    id: Swift.String? = nil,
                    name: Swift.String? = nil,
                    createdAt: Swift.Int64? = nil,
                    role: Swift.String? = nil
                ) {
                    self._type = _type
                    self.id = id
                    self.name = name
                    self.createdAt = createdAt
                    self.role = role
                }
                public enum CodingKeys: String, CodingKey {
                    case _type = "type"
                    case id
                    case name
                    case createdAt = "created_at"
                    case role
                }
            }
            /// - Remark: Generated from `#/components/schemas/AdminApiKey/owner`.
            public var owner: Components.Schemas.AdminApiKey.OwnerPayload?
            /// Creates a new `AdminApiKey`.
            ///
            /// - Parameters:
            ///   - object:
            ///   - id:
            ///   - name:
            ///   - redactedValue:
            ///   - value:
            ///   - createdAt:
            ///   - owner:
            public init(
                object: Swift.String? = nil,
                id: Swift.String? = nil,
                name: Swift.String? = nil,
                redactedValue: Swift.String? = nil,
                value: Swift.String? = nil,
                createdAt: Swift.Int64? = nil,
                owner: Components.Schemas.AdminApiKey.OwnerPayload? = nil
            ) {
                self.object = object
                self.id = id
                self.name = name
                self.redactedValue = redactedValue
                self.value = value
                self.createdAt = createdAt
                self.owner = owner
            }
            public enum CodingKeys: String, CodingKey {
                case object
                case id
                case name
                case redactedValue = "redacted_value"
                case value
                case createdAt = "created_at"
                case owner
            }
        }
        /// - Remark: Generated from `#/components/schemas/ApiKeyList`.
        public struct ApiKeyList: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/ApiKeyList/object`.
            public var object: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ApiKeyList/data`.
            public var data: [Components.Schemas.AdminApiKey]?
            /// - Remark: Generated from `#/components/schemas/ApiKeyList/has_more`.
            public var hasMore: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/ApiKeyList/first_id`.
            public var firstId: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ApiKeyList/last_id`.
            public var lastId: Swift.String?
            /// Creates a new `ApiKeyList`.
            ///
            /// - Parameters:
            ///   - object:
            ///   - data:
            ///   - hasMore:
            ///   - firstId:
            ///   - lastId:
            public init(
                object: Swift.String? = nil,
                data: [Components.Schemas.AdminApiKey]? = nil,
                hasMore: Swift.Bool? = nil,
                firstId: Swift.String? = nil,
                lastId: Swift.String? = nil
            ) {
                self.object = object
                self.data = data
                self.hasMore = hasMore
                self.firstId = firstId
                self.lastId = lastId
            }
            public enum CodingKeys: String, CodingKey {
                case object
                case data
                case hasMore = "has_more"
                case firstId = "first_id"
                case lastId = "last_id"
            }
        }
        /// Represents an `assistant` that can call the model and use tools.
        ///
        /// - Remark: Generated from `#/components/schemas/AssistantObject`.
        public struct AssistantObject: Codable, Hashable, Sendable {
            /// The identifier, which can be referenced in API endpoints.
            ///
            /// - Remark: Generated from `#/components/schemas/AssistantObject/id`.
            public var id: Swift.String
            /// The object type, which is always `assistant`.
            ///
            /// - Remark: Generated from `#/components/schemas/AssistantObject/object`.
            @frozen public enum ObjectPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case assistant = "assistant"
            }
            /// The object type, which is always `assistant`.
            ///
            /// - Remark: Generated from `#/components/schemas/AssistantObject/object`.
            public var object: Components.Schemas.AssistantObject.ObjectPayload
            /// The Unix timestamp (in seconds) for when the assistant was created.
            ///
            /// - Remark: Generated from `#/components/schemas/AssistantObject/created_at`.
            public var createdAt: Swift.Int
            /// The name of the assistant. The maximum length is 256 characters.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/AssistantObject/name`.
            public var name: Swift.String?
            /// The description of the assistant. The maximum length is 512 characters.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/AssistantObject/description`.
            public var description: Swift.String?
            /// ID of the model to use. You can use the [List models](/docs/api-reference/models/list) API to see all of your available models, or see our [Model overview](/docs/models) for descriptions of them.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/AssistantObject/model`.
            public var model: Swift.String
            /// The system instructions that the assistant uses. The maximum length is 256,000 characters.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/AssistantObject/instructions`.
            public var instructions: Swift.String?
            /// - Remark: Generated from `#/components/schemas/AssistantObject/ToolsPayload`.
            @frozen public enum ToolsPayloadPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/AssistantObject/ToolsPayload/case1`.
                case AssistantToolsCode(Components.Schemas.AssistantToolsCode)
                /// - Remark: Generated from `#/components/schemas/AssistantObject/ToolsPayload/case2`.
                case AssistantToolsFileSearch(Components.Schemas.AssistantToolsFileSearch)
                /// - Remark: Generated from `#/components/schemas/AssistantObject/ToolsPayload/case3`.
                case AssistantToolsFunction(Components.Schemas.AssistantToolsFunction)
                public init(from decoder: any Decoder) throws {
                    var errors: [any Error] = []
                    do {
                        self = .AssistantToolsCode(try .init(from: decoder))
                        return
                    } catch {
                        errors.append(error)
                    }
                    do {
                        self = .AssistantToolsFileSearch(try .init(from: decoder))
                        return
                    } catch {
                        errors.append(error)
                    }
                    do {
                        self = .AssistantToolsFunction(try .init(from: decoder))
                        return
                    } catch {
                        errors.append(error)
                    }
                    throw Swift.DecodingError.failedToDecodeOneOfSchema(
                        type: Self.self,
                        codingPath: decoder.codingPath,
                        errors: errors
                    )
                }
                public func encode(to encoder: any Encoder) throws {
                    switch self {
                    case let .AssistantToolsCode(value):
                        try value.encode(to: encoder)
                    case let .AssistantToolsFileSearch(value):
                        try value.encode(to: encoder)
                    case let .AssistantToolsFunction(value):
                        try value.encode(to: encoder)
                    }
                }
            }
            /// A list of tool enabled on the assistant. There can be a maximum of 128 tools per assistant. Tools can be of types `code_interpreter`, `file_search`, or `function`.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/AssistantObject/tools`.
            public typealias ToolsPayload = [Components.Schemas.AssistantObject.ToolsPayloadPayload]
            /// A list of tool enabled on the assistant. There can be a maximum of 128 tools per assistant. Tools can be of types `code_interpreter`, `file_search`, or `function`.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/AssistantObject/tools`.
            public var tools: Components.Schemas.AssistantObject.ToolsPayload
            /// A set of resources that are used by the assistant's tools. The resources are specific to the type of tool. For example, the `code_interpreter` tool requires a list of file IDs, while the `file_search` tool requires a list of vector store IDs.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/AssistantObject/tool_resources`.
            public struct ToolResourcesPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/AssistantObject/tool_resources/code_interpreter`.
                public struct CodeInterpreterPayload: Codable, Hashable, Sendable {
                    /// A list of [file](/docs/api-reference/files) IDs made available to the `code_interpreter`` tool. There can be a maximum of 20 files associated with the tool.
                    ///
                    ///
                    /// - Remark: Generated from `#/components/schemas/AssistantObject/tool_resources/code_interpreter/file_ids`.
                    public var fileIds: [Swift.String]?
                    /// Creates a new `CodeInterpreterPayload`.
                    ///
                    /// - Parameters:
                    ///   - fileIds: A list of [file](/docs/api-reference/files) IDs made available to the `code_interpreter`` tool. There can be a maximum of 20 files associated with the tool.
                    public init(fileIds: [Swift.String]? = nil) {
                        self.fileIds = fileIds
                    }
                    public enum CodingKeys: String, CodingKey {
                        case fileIds = "file_ids"
                    }
                }
                /// - Remark: Generated from `#/components/schemas/AssistantObject/tool_resources/code_interpreter`.
                public var codeInterpreter: Components.Schemas.AssistantObject.ToolResourcesPayload.CodeInterpreterPayload?
                /// - Remark: Generated from `#/components/schemas/AssistantObject/tool_resources/file_search`.
                public struct FileSearchPayload: Codable, Hashable, Sendable {
                    /// The ID of the [vector store](/docs/api-reference/vector-stores/object) attached to this assistant. There can be a maximum of 1 vector store attached to the assistant.
                    ///
                    ///
                    /// - Remark: Generated from `#/components/schemas/AssistantObject/tool_resources/file_search/vector_store_ids`.
                    public var vectorStoreIds: [Swift.String]?
                    /// Creates a new `FileSearchPayload`.
                    ///
                    /// - Parameters:
                    ///   - vectorStoreIds: The ID of the [vector store](/docs/api-reference/vector-stores/object) attached to this assistant. There can be a maximum of 1 vector store attached to the assistant.
                    public init(vectorStoreIds: [Swift.String]? = nil) {
                        self.vectorStoreIds = vectorStoreIds
                    }
                    public enum CodingKeys: String, CodingKey {
                        case vectorStoreIds = "vector_store_ids"
                    }
                }
                /// - Remark: Generated from `#/components/schemas/AssistantObject/tool_resources/file_search`.
                public var fileSearch: Components.Schemas.AssistantObject.ToolResourcesPayload.FileSearchPayload?
                /// Creates a new `ToolResourcesPayload`.
                ///
                /// - Parameters:
                ///   - codeInterpreter:
                ///   - fileSearch:
                public init(
                    codeInterpreter: Components.Schemas.AssistantObject.ToolResourcesPayload.CodeInterpreterPayload? = nil,
                    fileSearch: Components.Schemas.AssistantObject.ToolResourcesPayload.FileSearchPayload? = nil
                ) {
                    self.codeInterpreter = codeInterpreter
                    self.fileSearch = fileSearch
                }
                public enum CodingKeys: String, CodingKey {
                    case codeInterpreter = "code_interpreter"
                    case fileSearch = "file_search"
                }
            }
            /// A set of resources that are used by the assistant's tools. The resources are specific to the type of tool. For example, the `code_interpreter` tool requires a list of file IDs, while the `file_search` tool requires a list of vector store IDs.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/AssistantObject/tool_resources`.
            public var toolResources: Components.Schemas.AssistantObject.ToolResourcesPayload?
            /// - Remark: Generated from `#/components/schemas/AssistantObject/metadata`.
            public var metadata: Components.Schemas.Metadata?
            /// What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/AssistantObject/temperature`.
            public var temperature: Swift.Double?
            /// An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered.
            ///
            /// We generally recommend altering this or temperature but not both.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/AssistantObject/top_p`.
            public var topP: Swift.Double?
            /// - Remark: Generated from `#/components/schemas/AssistantObject/response_format`.
            public struct ResponseFormatPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/AssistantObject/response_format/value1`.
                public var value1: Components.Schemas.AssistantsApiResponseFormatOption
                /// - Remark: Generated from `#/components/schemas/AssistantObject/response_format/value2`.
                public var value2: OpenAPIRuntime.OpenAPIValueContainer
                /// Creates a new `ResponseFormatPayload`.
                ///
                /// - Parameters:
                ///   - value1:
                ///   - value2:
                public init(
                    value1: Components.Schemas.AssistantsApiResponseFormatOption,
                    value2: OpenAPIRuntime.OpenAPIValueContainer
                ) {
                    self.value1 = value1
                    self.value2 = value2
                }
                public init(from decoder: any Decoder) throws {
                    self.value1 = try .init(from: decoder)
                    self.value2 = try .init(from: decoder)
                }
                public func encode(to encoder: any Encoder) throws {
                    try self.value1.encode(to: encoder)
                    try self.value2.encode(to: encoder)
                }
            }
            /// - Remark: Generated from `#/components/schemas/AssistantObject/response_format`.
            public var responseFormat: Components.Schemas.AssistantObject.ResponseFormatPayload?
            /// Creates a new `AssistantObject`.
            ///
            /// - Parameters:
            ///   - id: The identifier, which can be referenced in API endpoints.
            ///   - object: The object type, which is always `assistant`.
            ///   - createdAt: The Unix timestamp (in seconds) for when the assistant was created.
            ///   - name: The name of the assistant. The maximum length is 256 characters.
            ///   - description: The description of the assistant. The maximum length is 512 characters.
            ///   - model: ID of the model to use. You can use the [List models](/docs/api-reference/models/list) API to see all of your available models, or see our [Model overview](/docs/models) for descriptions of them.
            ///   - instructions: The system instructions that the assistant uses. The maximum length is 256,000 characters.
            ///   - tools: A list of tool enabled on the assistant. There can be a maximum of 128 tools per assistant. Tools can be of types `code_interpreter`, `file_search`, or `function`.
            ///   - toolResources: A set of resources that are used by the assistant's tools. The resources are specific to the type of tool. For example, the `code_interpreter` tool requires a list of file IDs, while the `file_search` tool requires a list of vector store IDs.
            ///   - metadata:
            ///   - temperature: What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic.
            ///   - topP: An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered.
            ///   - responseFormat:
            public init(
                id: Swift.String,
                object: Components.Schemas.AssistantObject.ObjectPayload,
                createdAt: Swift.Int,
                name: Swift.String? = nil,
                description: Swift.String? = nil,
                model: Swift.String,
                instructions: Swift.String? = nil,
                tools: Components.Schemas.AssistantObject.ToolsPayload,
                toolResources: Components.Schemas.AssistantObject.ToolResourcesPayload? = nil,
                metadata: Components.Schemas.Metadata? = nil,
                temperature: Swift.Double? = nil,
                topP: Swift.Double? = nil,
                responseFormat: Components.Schemas.AssistantObject.ResponseFormatPayload? = nil
            ) {
                self.id = id
                self.object = object
                self.createdAt = createdAt
                self.name = name
                self.description = description
                self.model = model
                self.instructions = instructions
                self.tools = tools
                self.toolResources = toolResources
                self.metadata = metadata
                self.temperature = temperature
                self.topP = topP
                self.responseFormat = responseFormat
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case object
                case createdAt = "created_at"
                case name
                case description
                case model
                case instructions
                case tools
                case toolResources = "tool_resources"
                case metadata
                case temperature
                case topP = "top_p"
                case responseFormat = "response_format"
            }
        }
        /// Represents an event emitted when streaming a Run.
        ///
        /// Each event in a server-sent events stream has an `event` and `data` property:
        ///
        /// ```
        /// event: thread.created
        /// data: {"id": "thread_123", "object": "thread", ...}
        /// ```
        ///
        /// We emit events whenever a new object is created, transitions to a new state, or is being
        /// streamed in parts (deltas). For example, we emit `thread.run.created` when a new run
        /// is created, `thread.run.completed` when a run completes, and so on. When an Assistant chooses
        /// to create a message during a run, we emit a `thread.message.created event`, a
        /// `thread.message.in_progress` event, many `thread.message.delta` events, and finally a
        /// `thread.message.completed` event.
        ///
        /// We may add additional events over time, so we recommend handling unknown events gracefully
        /// in your code. See the [Assistants API quickstart](/docs/assistants/overview) to learn how to
        /// integrate the Assistants API with streaming.
        ///
        ///
        /// - Remark: Generated from `#/components/schemas/AssistantStreamEvent`.
        @frozen public enum AssistantStreamEvent: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/AssistantStreamEvent/case1`.
            case ThreadStreamEvent(Components.Schemas.ThreadStreamEvent)
            /// - Remark: Generated from `#/components/schemas/AssistantStreamEvent/case2`.
            case RunStreamEvent(Components.Schemas.RunStreamEvent)
            /// - Remark: Generated from `#/components/schemas/AssistantStreamEvent/case3`.
            case RunStepStreamEvent(Components.Schemas.RunStepStreamEvent)
            /// - Remark: Generated from `#/components/schemas/AssistantStreamEvent/case4`.
            case MessageStreamEvent(Components.Schemas.MessageStreamEvent)
            /// - Remark: Generated from `#/components/schemas/AssistantStreamEvent/case5`.
            case ErrorEvent(Components.Schemas.ErrorEvent)
            /// - Remark: Generated from `#/components/schemas/AssistantStreamEvent/case6`.
            case DoneEvent(Components.Schemas.DoneEvent)
            public init(from decoder: any Decoder) throws {
                var errors: [any Error] = []
                do {
                    self = .ThreadStreamEvent(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                do {
                    self = .RunStreamEvent(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                do {
                    self = .RunStepStreamEvent(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                do {
                    self = .MessageStreamEvent(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                do {
                    self = .ErrorEvent(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                do {
                    self = .DoneEvent(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                throw Swift.DecodingError.failedToDecodeOneOfSchema(
                    type: Self.self,
                    codingPath: decoder.codingPath,
                    errors: errors
                )
            }
            public func encode(to encoder: any Encoder) throws {
                switch self {
                case let .ThreadStreamEvent(value):
                    try value.encode(to: encoder)
                case let .RunStreamEvent(value):
                    try value.encode(to: encoder)
                case let .RunStepStreamEvent(value):
                    try value.encode(to: encoder)
                case let .MessageStreamEvent(value):
                    try value.encode(to: encoder)
                case let .ErrorEvent(value):
                    try value.encode(to: encoder)
                case let .DoneEvent(value):
                    try value.encode(to: encoder)
                }
            }
        }
        /// - Remark: Generated from `#/components/schemas/AssistantToolsCode`.
        public struct AssistantToolsCode: Codable, Hashable, Sendable {
            /// The type of tool being defined: `code_interpreter`
            ///
            /// - Remark: Generated from `#/components/schemas/AssistantToolsCode/type`.
            @frozen public enum _TypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                case codeInterpreter = "code_interpreter"
            }
            /// The type of tool being defined: `code_interpreter`
            ///
            /// - Remark: Generated from `#/components/schemas/AssistantToolsCode/type`.
            public var _type: Components.Schemas.AssistantToolsCode._TypePayload
            /// Creates a new `AssistantToolsCode`.
            ///
            /// - Parameters:
            ///   - _type: The type of tool being defined: `code_interpreter`
            public init(_type: Components.Schemas.AssistantToolsCode._TypePayload) {
                self._type = _type
            }
            public enum CodingKeys: String, CodingKey {
                case _type = "type"
            }
        }
        /// - Remark: Generated from `#/components/schemas/AssistantToolsFileSearch`.
        public struct AssistantToolsFileSearch: Codable, Hashable, Sendable {
            /// The type of tool being defined: `file_search`
            ///
            /// - Remark: Generated from `#/components/schemas/AssistantToolsFileSearch/type`.
            @frozen public enum _TypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                case fileSearch = "file_search"
            }
            /// The type of tool being defined: `file_search`
            ///
            /// - Remark: Generated from `#/components/schemas/AssistantToolsFileSearch/type`.
            public var _type: Components.Schemas.AssistantToolsFileSearch._TypePayload
            /// Overrides for the file search tool.
            ///
            /// - Remark: Generated from `#/components/schemas/AssistantToolsFileSearch/file_search`.
            public struct FileSearchPayload: Codable, Hashable, Sendable {
                /// The maximum number of results the file search tool should output. The default is 20 for `gpt-4*` models and 5 for `gpt-3.5-turbo`. This number should be between 1 and 50 inclusive.
                ///
                /// Note that the file search tool may output fewer than `max_num_results` results. See the [file search tool documentation](/docs/assistants/tools/file-search#customizing-file-search-settings) for more information.
                ///
                ///
                /// - Remark: Generated from `#/components/schemas/AssistantToolsFileSearch/file_search/max_num_results`.
                public var maxNumResults: Swift.Int?
                /// - Remark: Generated from `#/components/schemas/AssistantToolsFileSearch/file_search/ranking_options`.
                public var rankingOptions: Components.Schemas.FileSearchRankingOptions?
                /// Creates a new `FileSearchPayload`.
                ///
                /// - Parameters:
                ///   - maxNumResults: The maximum number of results the file search tool should output. The default is 20 for `gpt-4*` models and 5 for `gpt-3.5-turbo`. This number should be between 1 and 50 inclusive.
                ///   - rankingOptions:
                public init(
                    maxNumResults: Swift.Int? = nil,
                    rankingOptions: Components.Schemas.FileSearchRankingOptions? = nil
                ) {
                    self.maxNumResults = maxNumResults
                    self.rankingOptions = rankingOptions
                }
                public enum CodingKeys: String, CodingKey {
                    case maxNumResults = "max_num_results"
                    case rankingOptions = "ranking_options"
                }
            }
            /// Overrides for the file search tool.
            ///
            /// - Remark: Generated from `#/components/schemas/AssistantToolsFileSearch/file_search`.
            public var fileSearch: Components.Schemas.AssistantToolsFileSearch.FileSearchPayload?
            /// Creates a new `AssistantToolsFileSearch`.
            ///
            /// - Parameters:
            ///   - _type: The type of tool being defined: `file_search`
            ///   - fileSearch: Overrides for the file search tool.
            public init(
                _type: Components.Schemas.AssistantToolsFileSearch._TypePayload,
                fileSearch: Components.Schemas.AssistantToolsFileSearch.FileSearchPayload? = nil
            ) {
                self._type = _type
                self.fileSearch = fileSearch
            }
            public enum CodingKeys: String, CodingKey {
                case _type = "type"
                case fileSearch = "file_search"
            }
        }
        /// - Remark: Generated from `#/components/schemas/AssistantToolsFileSearchTypeOnly`.
        public struct AssistantToolsFileSearchTypeOnly: Codable, Hashable, Sendable {
            /// The type of tool being defined: `file_search`
            ///
            /// - Remark: Generated from `#/components/schemas/AssistantToolsFileSearchTypeOnly/type`.
            @frozen public enum _TypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                case fileSearch = "file_search"
            }
            /// The type of tool being defined: `file_search`
            ///
            /// - Remark: Generated from `#/components/schemas/AssistantToolsFileSearchTypeOnly/type`.
            public var _type: Components.Schemas.AssistantToolsFileSearchTypeOnly._TypePayload
            /// Creates a new `AssistantToolsFileSearchTypeOnly`.
            ///
            /// - Parameters:
            ///   - _type: The type of tool being defined: `file_search`
            public init(_type: Components.Schemas.AssistantToolsFileSearchTypeOnly._TypePayload) {
                self._type = _type
            }
            public enum CodingKeys: String, CodingKey {
                case _type = "type"
            }
        }
        /// - Remark: Generated from `#/components/schemas/AssistantToolsFunction`.
        public struct AssistantToolsFunction: Codable, Hashable, Sendable {
            /// The type of tool being defined: `function`
            ///
            /// - Remark: Generated from `#/components/schemas/AssistantToolsFunction/type`.
            @frozen public enum _TypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                case function = "function"
            }
            /// The type of tool being defined: `function`
            ///
            /// - Remark: Generated from `#/components/schemas/AssistantToolsFunction/type`.
            public var _type: Components.Schemas.AssistantToolsFunction._TypePayload
            /// - Remark: Generated from `#/components/schemas/AssistantToolsFunction/function`.
            public var function: Components.Schemas.FunctionObject
            /// Creates a new `AssistantToolsFunction`.
            ///
            /// - Parameters:
            ///   - _type: The type of tool being defined: `function`
            ///   - function:
            public init(
                _type: Components.Schemas.AssistantToolsFunction._TypePayload,
                function: Components.Schemas.FunctionObject
            ) {
                self._type = _type
                self.function = function
            }
            public enum CodingKeys: String, CodingKey {
                case _type = "type"
                case function
            }
        }
        /// Specifies the format that the model must output. Compatible with [GPT-4o](/docs/models#gpt-4o), [GPT-4 Turbo](/docs/models#gpt-4-turbo-and-gpt-4), and all GPT-3.5 Turbo models since `gpt-3.5-turbo-1106`.
        ///
        /// Setting to `{ "type": "json_schema", "json_schema": {...} }` enables Structured Outputs which ensures the model will match your supplied JSON schema. Learn more in the [Structured Outputs guide](/docs/guides/structured-outputs).
        ///
        /// Setting to `{ "type": "json_object" }` enables JSON mode, which ensures the message the model generates is valid JSON.
        ///
        /// **Important:** when using JSON mode, you **must** also instruct the model to produce JSON yourself via a system or user message. Without this, the model may generate an unending stream of whitespace until the generation reaches the token limit, resulting in a long-running and seemingly "stuck" request. Also note that the message content may be partially cut off if `finish_reason="length"`, which indicates the generation exceeded `max_tokens` or the conversation exceeded the max context length.
        ///
        ///
        /// - Remark: Generated from `#/components/schemas/AssistantsApiResponseFormatOption`.
        @frozen public enum AssistantsApiResponseFormatOption: Codable, Hashable, Sendable {
            /// `auto` is the default value
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/AssistantsApiResponseFormatOption/case1`.
            @frozen public enum Case1Payload: String, Codable, Hashable, Sendable, CaseIterable {
                case auto = "auto"
            }
            /// `auto` is the default value
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/AssistantsApiResponseFormatOption/case1`.
            case case1(Components.Schemas.AssistantsApiResponseFormatOption.Case1Payload)
            /// - Remark: Generated from `#/components/schemas/AssistantsApiResponseFormatOption/case2`.
            case ResponseFormatText(Components.Schemas.ResponseFormatText)
            /// - Remark: Generated from `#/components/schemas/AssistantsApiResponseFormatOption/case3`.
            case ResponseFormatJsonObject(Components.Schemas.ResponseFormatJsonObject)
            /// - Remark: Generated from `#/components/schemas/AssistantsApiResponseFormatOption/case4`.
            case ResponseFormatJsonSchema(Components.Schemas.ResponseFormatJsonSchema)
            public init(from decoder: any Decoder) throws {
                var errors: [any Error] = []
                do {
                    self = .case1(try decoder.decodeFromSingleValueContainer())
                    return
                } catch {
                    errors.append(error)
                }
                do {
                    self = .ResponseFormatText(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                do {
                    self = .ResponseFormatJsonObject(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                do {
                    self = .ResponseFormatJsonSchema(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                throw Swift.DecodingError.failedToDecodeOneOfSchema(
                    type: Self.self,
                    codingPath: decoder.codingPath,
                    errors: errors
                )
            }
            public func encode(to encoder: any Encoder) throws {
                switch self {
                case let .case1(value):
                    try encoder.encodeToSingleValueContainer(value)
                case let .ResponseFormatText(value):
                    try value.encode(to: encoder)
                case let .ResponseFormatJsonObject(value):
                    try value.encode(to: encoder)
                case let .ResponseFormatJsonSchema(value):
                    try value.encode(to: encoder)
                }
            }
        }
        /// Controls which (if any) tool is called by the model.
        /// `none` means the model will not call any tools and instead generates a message.
        /// `auto` is the default value and means the model can pick between generating a message or calling one or more tools.
        /// `required` means the model must call one or more tools before responding to the user.
        /// Specifying a particular tool like `{"type": "file_search"}` or `{"type": "function", "function": {"name": "my_function"}}` forces the model to call that tool.
        ///
        ///
        /// - Remark: Generated from `#/components/schemas/AssistantsApiToolChoiceOption`.
        @frozen public enum AssistantsApiToolChoiceOption: Codable, Hashable, Sendable {
            /// `none` means the model will not call any tools and instead generates a message. `auto` means the model can pick between generating a message or calling one or more tools. `required` means the model must call one or more tools before responding to the user.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/AssistantsApiToolChoiceOption/case1`.
            @frozen public enum Case1Payload: String, Codable, Hashable, Sendable, CaseIterable {
                case none = "none"
                case auto = "auto"
                case required = "required"
            }
            /// `none` means the model will not call any tools and instead generates a message. `auto` means the model can pick between generating a message or calling one or more tools. `required` means the model must call one or more tools before responding to the user.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/AssistantsApiToolChoiceOption/case1`.
            case case1(Components.Schemas.AssistantsApiToolChoiceOption.Case1Payload)
            /// - Remark: Generated from `#/components/schemas/AssistantsApiToolChoiceOption/case2`.
            case AssistantsNamedToolChoice(Components.Schemas.AssistantsNamedToolChoice)
            public init(from decoder: any Decoder) throws {
                var errors: [any Error] = []
                do {
                    self = .case1(try decoder.decodeFromSingleValueContainer())
                    return
                } catch {
                    errors.append(error)
                }
                do {
                    self = .AssistantsNamedToolChoice(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                throw Swift.DecodingError.failedToDecodeOneOfSchema(
                    type: Self.self,
                    codingPath: decoder.codingPath,
                    errors: errors
                )
            }
            public func encode(to encoder: any Encoder) throws {
                switch self {
                case let .case1(value):
                    try encoder.encodeToSingleValueContainer(value)
                case let .AssistantsNamedToolChoice(value):
                    try value.encode(to: encoder)
                }
            }
        }
        /// Specifies a tool the model should use. Use to force the model to call a specific tool.
        ///
        /// - Remark: Generated from `#/components/schemas/AssistantsNamedToolChoice`.
        public struct AssistantsNamedToolChoice: Codable, Hashable, Sendable {
            /// The type of the tool. If type is `function`, the function name must be set
            ///
            /// - Remark: Generated from `#/components/schemas/AssistantsNamedToolChoice/type`.
            @frozen public enum _TypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                case function = "function"
                case codeInterpreter = "code_interpreter"
                case fileSearch = "file_search"
            }
            /// The type of the tool. If type is `function`, the function name must be set
            ///
            /// - Remark: Generated from `#/components/schemas/AssistantsNamedToolChoice/type`.
            public var _type: Components.Schemas.AssistantsNamedToolChoice._TypePayload
            /// - Remark: Generated from `#/components/schemas/AssistantsNamedToolChoice/function`.
            public struct FunctionPayload: Codable, Hashable, Sendable {
                /// The name of the function to call.
                ///
                /// - Remark: Generated from `#/components/schemas/AssistantsNamedToolChoice/function/name`.
                public var name: Swift.String
                /// Creates a new `FunctionPayload`.
                ///
                /// - Parameters:
                ///   - name: The name of the function to call.
                public init(name: Swift.String) {
                    self.name = name
                }
                public enum CodingKeys: String, CodingKey {
                    case name
                }
            }
            /// - Remark: Generated from `#/components/schemas/AssistantsNamedToolChoice/function`.
            public var function: Components.Schemas.AssistantsNamedToolChoice.FunctionPayload?
            /// Creates a new `AssistantsNamedToolChoice`.
            ///
            /// - Parameters:
            ///   - _type: The type of the tool. If type is `function`, the function name must be set
            ///   - function:
            public init(
                _type: Components.Schemas.AssistantsNamedToolChoice._TypePayload,
                function: Components.Schemas.AssistantsNamedToolChoice.FunctionPayload? = nil
            ) {
                self._type = _type
                self.function = function
            }
            public enum CodingKeys: String, CodingKey {
                case _type = "type"
                case function
            }
        }
        /// The format of the output, in one of these options: `json`, `text`, `srt`, `verbose_json`, or `vtt`.
        ///
        ///
        /// - Remark: Generated from `#/components/schemas/AudioResponseFormat`.
        @frozen public enum AudioResponseFormat: String, Codable, Hashable, Sendable, CaseIterable {
            case json = "json"
            case text = "text"
            case srt = "srt"
            case verboseJson = "verbose_json"
            case vtt = "vtt"
        }
        /// A log of a user action or configuration change within this organization.
        ///
        /// - Remark: Generated from `#/components/schemas/AuditLog`.
        public struct AuditLog: Codable, Hashable, Sendable {
            /// The ID of this log.
            ///
            /// - Remark: Generated from `#/components/schemas/AuditLog/id`.
            public var id: Swift.String
            /// - Remark: Generated from `#/components/schemas/AuditLog/type`.
            public var _type: Components.Schemas.AuditLogEventType
            /// The Unix timestamp (in seconds) of the event.
            ///
            /// - Remark: Generated from `#/components/schemas/AuditLog/effective_at`.
            public var effectiveAt: Swift.Int
            /// The project that the action was scoped to. Absent for actions not scoped to projects.
            ///
            /// - Remark: Generated from `#/components/schemas/AuditLog/project`.
            public struct ProjectPayload: Codable, Hashable, Sendable {
                /// The project ID.
                ///
                /// - Remark: Generated from `#/components/schemas/AuditLog/project/id`.
                public var id: Swift.String?
                /// The project title.
                ///
                /// - Remark: Generated from `#/components/schemas/AuditLog/project/name`.
                public var name: Swift.String?
                /// Creates a new `ProjectPayload`.
                ///
                /// - Parameters:
                ///   - id: The project ID.
                ///   - name: The project title.
                public init(
                    id: Swift.String? = nil,
                    name: Swift.String? = nil
                ) {
                    self.id = id
                    self.name = name
                }
                public enum CodingKeys: String, CodingKey {
                    case id
                    case name
                }
            }
            /// The project that the action was scoped to. Absent for actions not scoped to projects.
            ///
            /// - Remark: Generated from `#/components/schemas/AuditLog/project`.
            public var project: Components.Schemas.AuditLog.ProjectPayload?
            /// - Remark: Generated from `#/components/schemas/AuditLog/actor`.
            public var actor: Components.Schemas.AuditLogActor
            /// The details for events with this `type`.
            ///
            /// - Remark: Generated from `#/components/schemas/AuditLog/api_key.created`.
            public struct ApiKey_createdPayload: Codable, Hashable, Sendable {
                /// The tracking ID of the API key.
                ///
                /// - Remark: Generated from `#/components/schemas/AuditLog/api_key.created/id`.
                public var id: Swift.String?
                /// The payload used to create the API key.
                ///
                /// - Remark: Generated from `#/components/schemas/AuditLog/api_key.created/data`.
                public struct DataPayload: Codable, Hashable, Sendable {
                    /// A list of scopes allowed for the API key, e.g. `["api.model.request"]`
                    ///
                    /// - Remark: Generated from `#/components/schemas/AuditLog/api_key.created/data/scopes`.
                    public var scopes: [Swift.String]?
                    /// Creates a new `DataPayload`.
                    ///
                    /// - Parameters:
                    ///   - scopes: A list of scopes allowed for the API key, e.g. `["api.model.request"]`
                    public init(scopes: [Swift.String]? = nil) {
                        self.scopes = scopes
                    }
                    public enum CodingKeys: String, CodingKey {
                        case scopes
                    }
                }
                /// The payload used to create the API key.
                ///
                /// - Remark: Generated from `#/components/schemas/AuditLog/api_key.created/data`.
                public var data: Components.Schemas.AuditLog.ApiKey_createdPayload.DataPayload?
                /// Creates a new `ApiKey_createdPayload`.
                ///
                /// - Parameters:
                ///   - id: The tracking ID of the API key.
                ///   - data: The payload used to create the API key.
                public init(
                    id: Swift.String? = nil,
                    data: Components.Schemas.AuditLog.ApiKey_createdPayload.DataPayload? = nil
                ) {
                    self.id = id
                    self.data = data
                }
                public enum CodingKeys: String, CodingKey {
                    case id
                    case data
                }
            }
            /// The details for events with this `type`.
            ///
            /// - Remark: Generated from `#/components/schemas/AuditLog/api_key.created`.
            public var apiKey_created: Components.Schemas.AuditLog.ApiKey_createdPayload?
            /// The details for events with this `type`.
            ///
            /// - Remark: Generated from `#/components/schemas/AuditLog/api_key.updated`.
            public struct ApiKey_updatedPayload: Codable, Hashable, Sendable {
                /// The tracking ID of the API key.
                ///
                /// - Remark: Generated from `#/components/schemas/AuditLog/api_key.updated/id`.
                public var id: Swift.String?
                /// The payload used to update the API key.
                ///
                /// - Remark: Generated from `#/components/schemas/AuditLog/api_key.updated/changes_requested`.
                public struct ChangesRequestedPayload: Codable, Hashable, Sendable {
                    /// A list of scopes allowed for the API key, e.g. `["api.model.request"]`
                    ///
                    /// - Remark: Generated from `#/components/schemas/AuditLog/api_key.updated/changes_requested/scopes`.
                    public var scopes: [Swift.String]?
                    /// Creates a new `ChangesRequestedPayload`.
                    ///
                    /// - Parameters:
                    ///   - scopes: A list of scopes allowed for the API key, e.g. `["api.model.request"]`
                    public init(scopes: [Swift.String]? = nil) {
                        self.scopes = scopes
                    }
                    public enum CodingKeys: String, CodingKey {
                        case scopes
                    }
                }
                /// The payload used to update the API key.
                ///
                /// - Remark: Generated from `#/components/schemas/AuditLog/api_key.updated/changes_requested`.
                public var changesRequested: Components.Schemas.AuditLog.ApiKey_updatedPayload.ChangesRequestedPayload?
                /// Creates a new `ApiKey_updatedPayload`.
                ///
                /// - Parameters:
                ///   - id: The tracking ID of the API key.
                ///   - changesRequested: The payload used to update the API key.
                public init(
                    id: Swift.String? = nil,
                    changesRequested: Components.Schemas.AuditLog.ApiKey_updatedPayload.ChangesRequestedPayload? = nil
                ) {
                    self.id = id
                    self.changesRequested = changesRequested
                }
                public enum CodingKeys: String, CodingKey {
                    case id
                    case changesRequested = "changes_requested"
                }
            }
            /// The details for events with this `type`.
            ///
            /// - Remark: Generated from `#/components/schemas/AuditLog/api_key.updated`.
            public var apiKey_updated: Components.Schemas.AuditLog.ApiKey_updatedPayload?
            /// The details for events with this `type`.
            ///
            /// - Remark: Generated from `#/components/schemas/AuditLog/api_key.deleted`.
            public struct ApiKey_deletedPayload: Codable, Hashable, Sendable {
                /// The tracking ID of the API key.
                ///
                /// - Remark: Generated from `#/components/schemas/AuditLog/api_key.deleted/id`.
                public var id: Swift.String?
                /// Creates a new `ApiKey_deletedPayload`.
                ///
                /// - Parameters:
                ///   - id: The tracking ID of the API key.
                public init(id: Swift.String? = nil) {
                    self.id = id
                }
                public enum CodingKeys: String, CodingKey {
                    case id
                }
            }
            /// The details for events with this `type`.
            ///
            /// - Remark: Generated from `#/components/schemas/AuditLog/api_key.deleted`.
            public var apiKey_deleted: Components.Schemas.AuditLog.ApiKey_deletedPayload?
            /// The details for events with this `type`.
            ///
            /// - Remark: Generated from `#/components/schemas/AuditLog/invite.sent`.
            public struct Invite_sentPayload: Codable, Hashable, Sendable {
                /// The ID of the invite.
                ///
                /// - Remark: Generated from `#/components/schemas/AuditLog/invite.sent/id`.
                public var id: Swift.String?
                /// The payload used to create the invite.
                ///
                /// - Remark: Generated from `#/components/schemas/AuditLog/invite.sent/data`.
                public struct DataPayload: Codable, Hashable, Sendable {
                    /// The email invited to the organization.
                    ///
                    /// - Remark: Generated from `#/components/schemas/AuditLog/invite.sent/data/email`.
                    public var email: Swift.String?
                    /// The role the email was invited to be. Is either `owner` or `member`.
                    ///
                    /// - Remark: Generated from `#/components/schemas/AuditLog/invite.sent/data/role`.
                    public var role: Swift.String?
                    /// Creates a new `DataPayload`.
                    ///
                    /// - Parameters:
                    ///   - email: The email invited to the organization.
                    ///   - role: The role the email was invited to be. Is either `owner` or `member`.
                    public init(
                        email: Swift.String? = nil,
                        role: Swift.String? = nil
                    ) {
                        self.email = email
                        self.role = role
                    }
                    public enum CodingKeys: String, CodingKey {
                        case email
                        case role
                    }
                }
                /// The payload used to create the invite.
                ///
                /// - Remark: Generated from `#/components/schemas/AuditLog/invite.sent/data`.
                public var data: Components.Schemas.AuditLog.Invite_sentPayload.DataPayload?
                /// Creates a new `Invite_sentPayload`.
                ///
                /// - Parameters:
                ///   - id: The ID of the invite.
                ///   - data: The payload used to create the invite.
                public init(
                    id: Swift.String? = nil,
                    data: Components.Schemas.AuditLog.Invite_sentPayload.DataPayload? = nil
                ) {
                    self.id = id
                    self.data = data
                }
                public enum CodingKeys: String, CodingKey {
                    case id
                    case data
                }
            }
            /// The details for events with this `type`.
            ///
            /// - Remark: Generated from `#/components/schemas/AuditLog/invite.sent`.
            public var invite_sent: Components.Schemas.AuditLog.Invite_sentPayload?
            /// The details for events with this `type`.
            ///
            /// - Remark: Generated from `#/components/schemas/AuditLog/invite.accepted`.
            public struct Invite_acceptedPayload: Codable, Hashable, Sendable {
                /// The ID of the invite.
                ///
                /// - Remark: Generated from `#/components/schemas/AuditLog/invite.accepted/id`.
                public var id: Swift.String?
                /// Creates a new `Invite_acceptedPayload`.
                ///
                /// - Parameters:
                ///   - id: The ID of the invite.
                public init(id: Swift.String? = nil) {
                    self.id = id
                }
                public enum CodingKeys: String, CodingKey {
                    case id
                }
            }
            /// The details for events with this `type`.
            ///
            /// - Remark: Generated from `#/components/schemas/AuditLog/invite.accepted`.
            public var invite_accepted: Components.Schemas.AuditLog.Invite_acceptedPayload?
            /// The details for events with this `type`.
            ///
            /// - Remark: Generated from `#/components/schemas/AuditLog/invite.deleted`.
            public struct Invite_deletedPayload: Codable, Hashable, Sendable {
                /// The ID of the invite.
                ///
                /// - Remark: Generated from `#/components/schemas/AuditLog/invite.deleted/id`.
                public var id: Swift.String?
                /// Creates a new `Invite_deletedPayload`.
                ///
                /// - Parameters:
                ///   - id: The ID of the invite.
                public init(id: Swift.String? = nil) {
                    self.id = id
                }
                public enum CodingKeys: String, CodingKey {
                    case id
                }
            }
            /// The details for events with this `type`.
            ///
            /// - Remark: Generated from `#/components/schemas/AuditLog/invite.deleted`.
            public var invite_deleted: Components.Schemas.AuditLog.Invite_deletedPayload?
            /// The details for events with this `type`.
            ///
            /// - Remark: Generated from `#/components/schemas/AuditLog/login.failed`.
            public struct Login_failedPayload: Codable, Hashable, Sendable {
                /// The error code of the failure.
                ///
                /// - Remark: Generated from `#/components/schemas/AuditLog/login.failed/error_code`.
                public var errorCode: Swift.String?
                /// The error message of the failure.
                ///
                /// - Remark: Generated from `#/components/schemas/AuditLog/login.failed/error_message`.
                public var errorMessage: Swift.String?
                /// Creates a new `Login_failedPayload`.
                ///
                /// - Parameters:
                ///   - errorCode: The error code of the failure.
                ///   - errorMessage: The error message of the failure.
                public init(
                    errorCode: Swift.String? = nil,
                    errorMessage: Swift.String? = nil
                ) {
                    self.errorCode = errorCode
                    self.errorMessage = errorMessage
                }
                public enum CodingKeys: String, CodingKey {
                    case errorCode = "error_code"
                    case errorMessage = "error_message"
                }
            }
            /// The details for events with this `type`.
            ///
            /// - Remark: Generated from `#/components/schemas/AuditLog/login.failed`.
            public var login_failed: Components.Schemas.AuditLog.Login_failedPayload?
            /// The details for events with this `type`.
            ///
            /// - Remark: Generated from `#/components/schemas/AuditLog/logout.failed`.
            public struct Logout_failedPayload: Codable, Hashable, Sendable {
                /// The error code of the failure.
                ///
                /// - Remark: Generated from `#/components/schemas/AuditLog/logout.failed/error_code`.
                public var errorCode: Swift.String?
                /// The error message of the failure.
                ///
                /// - Remark: Generated from `#/components/schemas/AuditLog/logout.failed/error_message`.
                public var errorMessage: Swift.String?
                /// Creates a new `Logout_failedPayload`.
                ///
                /// - Parameters:
                ///   - errorCode: The error code of the failure.
                ///   - errorMessage: The error message of the failure.
                public init(
                    errorCode: Swift.String? = nil,
                    errorMessage: Swift.String? = nil
                ) {
                    self.errorCode = errorCode
                    self.errorMessage = errorMessage
                }
                public enum CodingKeys: String, CodingKey {
                    case errorCode = "error_code"
                    case errorMessage = "error_message"
                }
            }
            /// The details for events with this `type`.
            ///
            /// - Remark: Generated from `#/components/schemas/AuditLog/logout.failed`.
            public var logout_failed: Components.Schemas.AuditLog.Logout_failedPayload?
            /// The details for events with this `type`.
            ///
            /// - Remark: Generated from `#/components/schemas/AuditLog/organization.updated`.
            public struct Organization_updatedPayload: Codable, Hashable, Sendable {
                /// The organization ID.
                ///
                /// - Remark: Generated from `#/components/schemas/AuditLog/organization.updated/id`.
                public var id: Swift.String?
                /// The payload used to update the organization settings.
                ///
                /// - Remark: Generated from `#/components/schemas/AuditLog/organization.updated/changes_requested`.
                public struct ChangesRequestedPayload: Codable, Hashable, Sendable {
                    /// The organization title.
                    ///
                    /// - Remark: Generated from `#/components/schemas/AuditLog/organization.updated/changes_requested/title`.
                    public var title: Swift.String?
                    /// The organization description.
                    ///
                    /// - Remark: Generated from `#/components/schemas/AuditLog/organization.updated/changes_requested/description`.
                    public var description: Swift.String?
                    /// The organization name.
                    ///
                    /// - Remark: Generated from `#/components/schemas/AuditLog/organization.updated/changes_requested/name`.
                    public var name: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/AuditLog/organization.updated/changes_requested/settings`.
                    public struct SettingsPayload: Codable, Hashable, Sendable {
                        /// Visibility of the threads page which shows messages created with the Assistants API and Playground. One of `ANY_ROLE`, `OWNERS`, or `NONE`.
                        ///
                        /// - Remark: Generated from `#/components/schemas/AuditLog/organization.updated/changes_requested/settings/threads_ui_visibility`.
                        public var threadsUiVisibility: Swift.String?
                        /// Visibility of the usage dashboard which shows activity and costs for your organization. One of `ANY_ROLE` or `OWNERS`.
                        ///
                        /// - Remark: Generated from `#/components/schemas/AuditLog/organization.updated/changes_requested/settings/usage_dashboard_visibility`.
                        public var usageDashboardVisibility: Swift.String?
                        /// Creates a new `SettingsPayload`.
                        ///
                        /// - Parameters:
                        ///   - threadsUiVisibility: Visibility of the threads page which shows messages created with the Assistants API and Playground. One of `ANY_ROLE`, `OWNERS`, or `NONE`.
                        ///   - usageDashboardVisibility: Visibility of the usage dashboard which shows activity and costs for your organization. One of `ANY_ROLE` or `OWNERS`.
                        public init(
                            threadsUiVisibility: Swift.String? = nil,
                            usageDashboardVisibility: Swift.String? = nil
                        ) {
                            self.threadsUiVisibility = threadsUiVisibility
                            self.usageDashboardVisibility = usageDashboardVisibility
                        }
                        public enum CodingKeys: String, CodingKey {
                            case threadsUiVisibility = "threads_ui_visibility"
                            case usageDashboardVisibility = "usage_dashboard_visibility"
                        }
                    }
                    /// - Remark: Generated from `#/components/schemas/AuditLog/organization.updated/changes_requested/settings`.
                    public var settings: Components.Schemas.AuditLog.Organization_updatedPayload.ChangesRequestedPayload.SettingsPayload?
                    /// Creates a new `ChangesRequestedPayload`.
                    ///
                    /// - Parameters:
                    ///   - title: The organization title.
                    ///   - description: The organization description.
                    ///   - name: The organization name.
                    ///   - settings:
                    public init(
                        title: Swift.String? = nil,
                        description: Swift.String? = nil,
                        name: Swift.String? = nil,
                        settings: Components.Schemas.AuditLog.Organization_updatedPayload.ChangesRequestedPayload.SettingsPayload? = nil
                    ) {
                        self.title = title
                        self.description = description
                        self.name = name
                        self.settings = settings
                    }
                    public enum CodingKeys: String, CodingKey {
                        case title
                        case description
                        case name
                        case settings
                    }
                }
                /// The payload used to update the organization settings.
                ///
                /// - Remark: Generated from `#/components/schemas/AuditLog/organization.updated/changes_requested`.
                public var changesRequested: Components.Schemas.AuditLog.Organization_updatedPayload.ChangesRequestedPayload?
                /// Creates a new `Organization_updatedPayload`.
                ///
                /// - Parameters:
                ///   - id: The organization ID.
                ///   - changesRequested: The payload used to update the organization settings.
                public init(
                    id: Swift.String? = nil,
                    changesRequested: Components.Schemas.AuditLog.Organization_updatedPayload.ChangesRequestedPayload? = nil
                ) {
                    self.id = id
                    self.changesRequested = changesRequested
                }
                public enum CodingKeys: String, CodingKey {
                    case id
                    case changesRequested = "changes_requested"
                }
            }
            /// The details for events with this `type`.
            ///
            /// - Remark: Generated from `#/components/schemas/AuditLog/organization.updated`.
            public var organization_updated: Components.Schemas.AuditLog.Organization_updatedPayload?
            /// The details for events with this `type`.
            ///
            /// - Remark: Generated from `#/components/schemas/AuditLog/project.created`.
            public struct Project_createdPayload: Codable, Hashable, Sendable {
                /// The project ID.
                ///
                /// - Remark: Generated from `#/components/schemas/AuditLog/project.created/id`.
                public var id: Swift.String?
                /// The payload used to create the project.
                ///
                /// - Remark: Generated from `#/components/schemas/AuditLog/project.created/data`.
                public struct DataPayload: Codable, Hashable, Sendable {
                    /// The project name.
                    ///
                    /// - Remark: Generated from `#/components/schemas/AuditLog/project.created/data/name`.
                    public var name: Swift.String?
                    /// The title of the project as seen on the dashboard.
                    ///
                    /// - Remark: Generated from `#/components/schemas/AuditLog/project.created/data/title`.
                    public var title: Swift.String?
                    /// Creates a new `DataPayload`.
                    ///
                    /// - Parameters:
                    ///   - name: The project name.
                    ///   - title: The title of the project as seen on the dashboard.
                    public init(
                        name: Swift.String? = nil,
                        title: Swift.String? = nil
                    ) {
                        self.name = name
                        self.title = title
                    }
                    public enum CodingKeys: String, CodingKey {
                        case name
                        case title
                    }
                }
                /// The payload used to create the project.
                ///
                /// - Remark: Generated from `#/components/schemas/AuditLog/project.created/data`.
                public var data: Components.Schemas.AuditLog.Project_createdPayload.DataPayload?
                /// Creates a new `Project_createdPayload`.
                ///
                /// - Parameters:
                ///   - id: The project ID.
                ///   - data: The payload used to create the project.
                public init(
                    id: Swift.String? = nil,
                    data: Components.Schemas.AuditLog.Project_createdPayload.DataPayload? = nil
                ) {
                    self.id = id
                    self.data = data
                }
                public enum CodingKeys: String, CodingKey {
                    case id
                    case data
                }
            }
            /// The details for events with this `type`.
            ///
            /// - Remark: Generated from `#/components/schemas/AuditLog/project.created`.
            public var project_created: Components.Schemas.AuditLog.Project_createdPayload?
            /// The details for events with this `type`.
            ///
            /// - Remark: Generated from `#/components/schemas/AuditLog/project.updated`.
            public struct Project_updatedPayload: Codable, Hashable, Sendable {
                /// The project ID.
                ///
                /// - Remark: Generated from `#/components/schemas/AuditLog/project.updated/id`.
                public var id: Swift.String?
                /// The payload used to update the project.
                ///
                /// - Remark: Generated from `#/components/schemas/AuditLog/project.updated/changes_requested`.
                public struct ChangesRequestedPayload: Codable, Hashable, Sendable {
                    /// The title of the project as seen on the dashboard.
                    ///
                    /// - Remark: Generated from `#/components/schemas/AuditLog/project.updated/changes_requested/title`.
                    public var title: Swift.String?
                    /// Creates a new `ChangesRequestedPayload`.
                    ///
                    /// - Parameters:
                    ///   - title: The title of the project as seen on the dashboard.
                    public init(title: Swift.String? = nil) {
                        self.title = title
                    }
                    public enum CodingKeys: String, CodingKey {
                        case title
                    }
                }
                /// The payload used to update the project.
                ///
                /// - Remark: Generated from `#/components/schemas/AuditLog/project.updated/changes_requested`.
                public var changesRequested: Components.Schemas.AuditLog.Project_updatedPayload.ChangesRequestedPayload?
                /// Creates a new `Project_updatedPayload`.
                ///
                /// - Parameters:
                ///   - id: The project ID.
                ///   - changesRequested: The payload used to update the project.
                public init(
                    id: Swift.String? = nil,
                    changesRequested: Components.Schemas.AuditLog.Project_updatedPayload.ChangesRequestedPayload? = nil
                ) {
                    self.id = id
                    self.changesRequested = changesRequested
                }
                public enum CodingKeys: String, CodingKey {
                    case id
                    case changesRequested = "changes_requested"
                }
            }
            /// The details for events with this `type`.
            ///
            /// - Remark: Generated from `#/components/schemas/AuditLog/project.updated`.
            public var project_updated: Components.Schemas.AuditLog.Project_updatedPayload?
            /// The details for events with this `type`.
            ///
            /// - Remark: Generated from `#/components/schemas/AuditLog/project.archived`.
            public struct Project_archivedPayload: Codable, Hashable, Sendable {
                /// The project ID.
                ///
                /// - Remark: Generated from `#/components/schemas/AuditLog/project.archived/id`.
                public var id: Swift.String?
                /// Creates a new `Project_archivedPayload`.
                ///
                /// - Parameters:
                ///   - id: The project ID.
                public init(id: Swift.String? = nil) {
                    self.id = id
                }
                public enum CodingKeys: String, CodingKey {
                    case id
                }
            }
            /// The details for events with this `type`.
            ///
            /// - Remark: Generated from `#/components/schemas/AuditLog/project.archived`.
            public var project_archived: Components.Schemas.AuditLog.Project_archivedPayload?
            /// The details for events with this `type`.
            ///
            /// - Remark: Generated from `#/components/schemas/AuditLog/rate_limit.updated`.
            public struct RateLimit_updatedPayload: Codable, Hashable, Sendable {
                /// The rate limit ID
                ///
                /// - Remark: Generated from `#/components/schemas/AuditLog/rate_limit.updated/id`.
                public var id: Swift.String?
                /// The payload used to update the rate limits.
                ///
                /// - Remark: Generated from `#/components/schemas/AuditLog/rate_limit.updated/changes_requested`.
                public struct ChangesRequestedPayload: Codable, Hashable, Sendable {
                    /// The maximum requests per minute.
                    ///
                    /// - Remark: Generated from `#/components/schemas/AuditLog/rate_limit.updated/changes_requested/max_requests_per_1_minute`.
                    public var maxRequestsPer1Minute: Swift.Int?
                    /// The maximum tokens per minute.
                    ///
                    /// - Remark: Generated from `#/components/schemas/AuditLog/rate_limit.updated/changes_requested/max_tokens_per_1_minute`.
                    public var maxTokensPer1Minute: Swift.Int?
                    /// The maximum images per minute. Only relevant for certain models.
                    ///
                    /// - Remark: Generated from `#/components/schemas/AuditLog/rate_limit.updated/changes_requested/max_images_per_1_minute`.
                    public var maxImagesPer1Minute: Swift.Int?
                    /// The maximum audio megabytes per minute. Only relevant for certain models.
                    ///
                    /// - Remark: Generated from `#/components/schemas/AuditLog/rate_limit.updated/changes_requested/max_audio_megabytes_per_1_minute`.
                    public var maxAudioMegabytesPer1Minute: Swift.Int?
                    /// The maximum requests per day. Only relevant for certain models.
                    ///
                    /// - Remark: Generated from `#/components/schemas/AuditLog/rate_limit.updated/changes_requested/max_requests_per_1_day`.
                    public var maxRequestsPer1Day: Swift.Int?
                    /// The maximum batch input tokens per day. Only relevant for certain models.
                    ///
                    /// - Remark: Generated from `#/components/schemas/AuditLog/rate_limit.updated/changes_requested/batch_1_day_max_input_tokens`.
                    public var batch1DayMaxInputTokens: Swift.Int?
                    /// Creates a new `ChangesRequestedPayload`.
                    ///
                    /// - Parameters:
                    ///   - maxRequestsPer1Minute: The maximum requests per minute.
                    ///   - maxTokensPer1Minute: The maximum tokens per minute.
                    ///   - maxImagesPer1Minute: The maximum images per minute. Only relevant for certain models.
                    ///   - maxAudioMegabytesPer1Minute: The maximum audio megabytes per minute. Only relevant for certain models.
                    ///   - maxRequestsPer1Day: The maximum requests per day. Only relevant for certain models.
                    ///   - batch1DayMaxInputTokens: The maximum batch input tokens per day. Only relevant for certain models.
                    public init(
                        maxRequestsPer1Minute: Swift.Int? = nil,
                        maxTokensPer1Minute: Swift.Int? = nil,
                        maxImagesPer1Minute: Swift.Int? = nil,
                        maxAudioMegabytesPer1Minute: Swift.Int? = nil,
                        maxRequestsPer1Day: Swift.Int? = nil,
                        batch1DayMaxInputTokens: Swift.Int? = nil
                    ) {
                        self.maxRequestsPer1Minute = maxRequestsPer1Minute
                        self.maxTokensPer1Minute = maxTokensPer1Minute
                        self.maxImagesPer1Minute = maxImagesPer1Minute
                        self.maxAudioMegabytesPer1Minute = maxAudioMegabytesPer1Minute
                        self.maxRequestsPer1Day = maxRequestsPer1Day
                        self.batch1DayMaxInputTokens = batch1DayMaxInputTokens
                    }
                    public enum CodingKeys: String, CodingKey {
                        case maxRequestsPer1Minute = "max_requests_per_1_minute"
                        case maxTokensPer1Minute = "max_tokens_per_1_minute"
                        case maxImagesPer1Minute = "max_images_per_1_minute"
                        case maxAudioMegabytesPer1Minute = "max_audio_megabytes_per_1_minute"
                        case maxRequestsPer1Day = "max_requests_per_1_day"
                        case batch1DayMaxInputTokens = "batch_1_day_max_input_tokens"
                    }
                }
                /// The payload used to update the rate limits.
                ///
                /// - Remark: Generated from `#/components/schemas/AuditLog/rate_limit.updated/changes_requested`.
                public var changesRequested: Components.Schemas.AuditLog.RateLimit_updatedPayload.ChangesRequestedPayload?
                /// Creates a new `RateLimit_updatedPayload`.
                ///
                /// - Parameters:
                ///   - id: The rate limit ID
                ///   - changesRequested: The payload used to update the rate limits.
                public init(
                    id: Swift.String? = nil,
                    changesRequested: Components.Schemas.AuditLog.RateLimit_updatedPayload.ChangesRequestedPayload? = nil
                ) {
                    self.id = id
                    self.changesRequested = changesRequested
                }
                public enum CodingKeys: String, CodingKey {
                    case id
                    case changesRequested = "changes_requested"
                }
            }
            /// The details for events with this `type`.
            ///
            /// - Remark: Generated from `#/components/schemas/AuditLog/rate_limit.updated`.
            public var rateLimit_updated: Components.Schemas.AuditLog.RateLimit_updatedPayload?
            /// The details for events with this `type`.
            ///
            /// - Remark: Generated from `#/components/schemas/AuditLog/rate_limit.deleted`.
            public struct RateLimit_deletedPayload: Codable, Hashable, Sendable {
                /// The rate limit ID
                ///
                /// - Remark: Generated from `#/components/schemas/AuditLog/rate_limit.deleted/id`.
                public var id: Swift.String?
                /// Creates a new `RateLimit_deletedPayload`.
                ///
                /// - Parameters:
                ///   - id: The rate limit ID
                public init(id: Swift.String? = nil) {
                    self.id = id
                }
                public enum CodingKeys: String, CodingKey {
                    case id
                }
            }
            /// The details for events with this `type`.
            ///
            /// - Remark: Generated from `#/components/schemas/AuditLog/rate_limit.deleted`.
            public var rateLimit_deleted: Components.Schemas.AuditLog.RateLimit_deletedPayload?
            /// The details for events with this `type`.
            ///
            /// - Remark: Generated from `#/components/schemas/AuditLog/service_account.created`.
            public struct ServiceAccount_createdPayload: Codable, Hashable, Sendable {
                /// The service account ID.
                ///
                /// - Remark: Generated from `#/components/schemas/AuditLog/service_account.created/id`.
                public var id: Swift.String?
                /// The payload used to create the service account.
                ///
                /// - Remark: Generated from `#/components/schemas/AuditLog/service_account.created/data`.
                public struct DataPayload: Codable, Hashable, Sendable {
                    /// The role of the service account. Is either `owner` or `member`.
                    ///
                    /// - Remark: Generated from `#/components/schemas/AuditLog/service_account.created/data/role`.
                    public var role: Swift.String?
                    /// Creates a new `DataPayload`.
                    ///
                    /// - Parameters:
                    ///   - role: The role of the service account. Is either `owner` or `member`.
                    public init(role: Swift.String? = nil) {
                        self.role = role
                    }
                    public enum CodingKeys: String, CodingKey {
                        case role
                    }
                }
                /// The payload used to create the service account.
                ///
                /// - Remark: Generated from `#/components/schemas/AuditLog/service_account.created/data`.
                public var data: Components.Schemas.AuditLog.ServiceAccount_createdPayload.DataPayload?
                /// Creates a new `ServiceAccount_createdPayload`.
                ///
                /// - Parameters:
                ///   - id: The service account ID.
                ///   - data: The payload used to create the service account.
                public init(
                    id: Swift.String? = nil,
                    data: Components.Schemas.AuditLog.ServiceAccount_createdPayload.DataPayload? = nil
                ) {
                    self.id = id
                    self.data = data
                }
                public enum CodingKeys: String, CodingKey {
                    case id
                    case data
                }
            }
            /// The details for events with this `type`.
            ///
            /// - Remark: Generated from `#/components/schemas/AuditLog/service_account.created`.
            public var serviceAccount_created: Components.Schemas.AuditLog.ServiceAccount_createdPayload?
            /// The details for events with this `type`.
            ///
            /// - Remark: Generated from `#/components/schemas/AuditLog/service_account.updated`.
            public struct ServiceAccount_updatedPayload: Codable, Hashable, Sendable {
                /// The service account ID.
                ///
                /// - Remark: Generated from `#/components/schemas/AuditLog/service_account.updated/id`.
                public var id: Swift.String?
                /// The payload used to updated the service account.
                ///
                /// - Remark: Generated from `#/components/schemas/AuditLog/service_account.updated/changes_requested`.
                public struct ChangesRequestedPayload: Codable, Hashable, Sendable {
                    /// The role of the service account. Is either `owner` or `member`.
                    ///
                    /// - Remark: Generated from `#/components/schemas/AuditLog/service_account.updated/changes_requested/role`.
                    public var role: Swift.String?
                    /// Creates a new `ChangesRequestedPayload`.
                    ///
                    /// - Parameters:
                    ///   - role: The role of the service account. Is either `owner` or `member`.
                    public init(role: Swift.String? = nil) {
                        self.role = role
                    }
                    public enum CodingKeys: String, CodingKey {
                        case role
                    }
                }
                /// The payload used to updated the service account.
                ///
                /// - Remark: Generated from `#/components/schemas/AuditLog/service_account.updated/changes_requested`.
                public var changesRequested: Components.Schemas.AuditLog.ServiceAccount_updatedPayload.ChangesRequestedPayload?
                /// Creates a new `ServiceAccount_updatedPayload`.
                ///
                /// - Parameters:
                ///   - id: The service account ID.
                ///   - changesRequested: The payload used to updated the service account.
                public init(
                    id: Swift.String? = nil,
                    changesRequested: Components.Schemas.AuditLog.ServiceAccount_updatedPayload.ChangesRequestedPayload? = nil
                ) {
                    self.id = id
                    self.changesRequested = changesRequested
                }
                public enum CodingKeys: String, CodingKey {
                    case id
                    case changesRequested = "changes_requested"
                }
            }
            /// The details for events with this `type`.
            ///
            /// - Remark: Generated from `#/components/schemas/AuditLog/service_account.updated`.
            public var serviceAccount_updated: Components.Schemas.AuditLog.ServiceAccount_updatedPayload?
            /// The details for events with this `type`.
            ///
            /// - Remark: Generated from `#/components/schemas/AuditLog/service_account.deleted`.
            public struct ServiceAccount_deletedPayload: Codable, Hashable, Sendable {
                /// The service account ID.
                ///
                /// - Remark: Generated from `#/components/schemas/AuditLog/service_account.deleted/id`.
                public var id: Swift.String?
                /// Creates a new `ServiceAccount_deletedPayload`.
                ///
                /// - Parameters:
                ///   - id: The service account ID.
                public init(id: Swift.String? = nil) {
                    self.id = id
                }
                public enum CodingKeys: String, CodingKey {
                    case id
                }
            }
            /// The details for events with this `type`.
            ///
            /// - Remark: Generated from `#/components/schemas/AuditLog/service_account.deleted`.
            public var serviceAccount_deleted: Components.Schemas.AuditLog.ServiceAccount_deletedPayload?
            /// The details for events with this `type`.
            ///
            /// - Remark: Generated from `#/components/schemas/AuditLog/user.added`.
            public struct User_addedPayload: Codable, Hashable, Sendable {
                /// The user ID.
                ///
                /// - Remark: Generated from `#/components/schemas/AuditLog/user.added/id`.
                public var id: Swift.String?
                /// The payload used to add the user to the project.
                ///
                /// - Remark: Generated from `#/components/schemas/AuditLog/user.added/data`.
                public struct DataPayload: Codable, Hashable, Sendable {
                    /// The role of the user. Is either `owner` or `member`.
                    ///
                    /// - Remark: Generated from `#/components/schemas/AuditLog/user.added/data/role`.
                    public var role: Swift.String?
                    /// Creates a new `DataPayload`.
                    ///
                    /// - Parameters:
                    ///   - role: The role of the user. Is either `owner` or `member`.
                    public init(role: Swift.String? = nil) {
                        self.role = role
                    }
                    public enum CodingKeys: String, CodingKey {
                        case role
                    }
                }
                /// The payload used to add the user to the project.
                ///
                /// - Remark: Generated from `#/components/schemas/AuditLog/user.added/data`.
                public var data: Components.Schemas.AuditLog.User_addedPayload.DataPayload?
                /// Creates a new `User_addedPayload`.
                ///
                /// - Parameters:
                ///   - id: The user ID.
                ///   - data: The payload used to add the user to the project.
                public init(
                    id: Swift.String? = nil,
                    data: Components.Schemas.AuditLog.User_addedPayload.DataPayload? = nil
                ) {
                    self.id = id
                    self.data = data
                }
                public enum CodingKeys: String, CodingKey {
                    case id
                    case data
                }
            }
            /// The details for events with this `type`.
            ///
            /// - Remark: Generated from `#/components/schemas/AuditLog/user.added`.
            public var user_added: Components.Schemas.AuditLog.User_addedPayload?
            /// The details for events with this `type`.
            ///
            /// - Remark: Generated from `#/components/schemas/AuditLog/user.updated`.
            public struct User_updatedPayload: Codable, Hashable, Sendable {
                /// The project ID.
                ///
                /// - Remark: Generated from `#/components/schemas/AuditLog/user.updated/id`.
                public var id: Swift.String?
                /// The payload used to update the user.
                ///
                /// - Remark: Generated from `#/components/schemas/AuditLog/user.updated/changes_requested`.
                public struct ChangesRequestedPayload: Codable, Hashable, Sendable {
                    /// The role of the user. Is either `owner` or `member`.
                    ///
                    /// - Remark: Generated from `#/components/schemas/AuditLog/user.updated/changes_requested/role`.
                    public var role: Swift.String?
                    /// Creates a new `ChangesRequestedPayload`.
                    ///
                    /// - Parameters:
                    ///   - role: The role of the user. Is either `owner` or `member`.
                    public init(role: Swift.String? = nil) {
                        self.role = role
                    }
                    public enum CodingKeys: String, CodingKey {
                        case role
                    }
                }
                /// The payload used to update the user.
                ///
                /// - Remark: Generated from `#/components/schemas/AuditLog/user.updated/changes_requested`.
                public var changesRequested: Components.Schemas.AuditLog.User_updatedPayload.ChangesRequestedPayload?
                /// Creates a new `User_updatedPayload`.
                ///
                /// - Parameters:
                ///   - id: The project ID.
                ///   - changesRequested: The payload used to update the user.
                public init(
                    id: Swift.String? = nil,
                    changesRequested: Components.Schemas.AuditLog.User_updatedPayload.ChangesRequestedPayload? = nil
                ) {
                    self.id = id
                    self.changesRequested = changesRequested
                }
                public enum CodingKeys: String, CodingKey {
                    case id
                    case changesRequested = "changes_requested"
                }
            }
            /// The details for events with this `type`.
            ///
            /// - Remark: Generated from `#/components/schemas/AuditLog/user.updated`.
            public var user_updated: Components.Schemas.AuditLog.User_updatedPayload?
            /// The details for events with this `type`.
            ///
            /// - Remark: Generated from `#/components/schemas/AuditLog/user.deleted`.
            public struct User_deletedPayload: Codable, Hashable, Sendable {
                /// The user ID.
                ///
                /// - Remark: Generated from `#/components/schemas/AuditLog/user.deleted/id`.
                public var id: Swift.String?
                /// Creates a new `User_deletedPayload`.
                ///
                /// - Parameters:
                ///   - id: The user ID.
                public init(id: Swift.String? = nil) {
                    self.id = id
                }
                public enum CodingKeys: String, CodingKey {
                    case id
                }
            }
            /// The details for events with this `type`.
            ///
            /// - Remark: Generated from `#/components/schemas/AuditLog/user.deleted`.
            public var user_deleted: Components.Schemas.AuditLog.User_deletedPayload?
            /// Creates a new `AuditLog`.
            ///
            /// - Parameters:
            ///   - id: The ID of this log.
            ///   - _type:
            ///   - effectiveAt: The Unix timestamp (in seconds) of the event.
            ///   - project: The project that the action was scoped to. Absent for actions not scoped to projects.
            ///   - actor:
            ///   - apiKey_created: The details for events with this `type`.
            ///   - apiKey_updated: The details for events with this `type`.
            ///   - apiKey_deleted: The details for events with this `type`.
            ///   - invite_sent: The details for events with this `type`.
            ///   - invite_accepted: The details for events with this `type`.
            ///   - invite_deleted: The details for events with this `type`.
            ///   - login_failed: The details for events with this `type`.
            ///   - logout_failed: The details for events with this `type`.
            ///   - organization_updated: The details for events with this `type`.
            ///   - project_created: The details for events with this `type`.
            ///   - project_updated: The details for events with this `type`.
            ///   - project_archived: The details for events with this `type`.
            ///   - rateLimit_updated: The details for events with this `type`.
            ///   - rateLimit_deleted: The details for events with this `type`.
            ///   - serviceAccount_created: The details for events with this `type`.
            ///   - serviceAccount_updated: The details for events with this `type`.
            ///   - serviceAccount_deleted: The details for events with this `type`.
            ///   - user_added: The details for events with this `type`.
            ///   - user_updated: The details for events with this `type`.
            ///   - user_deleted: The details for events with this `type`.
            public init(
                id: Swift.String,
                _type: Components.Schemas.AuditLogEventType,
                effectiveAt: Swift.Int,
                project: Components.Schemas.AuditLog.ProjectPayload? = nil,
                actor: Components.Schemas.AuditLogActor,
                apiKey_created: Components.Schemas.AuditLog.ApiKey_createdPayload? = nil,
                apiKey_updated: Components.Schemas.AuditLog.ApiKey_updatedPayload? = nil,
                apiKey_deleted: Components.Schemas.AuditLog.ApiKey_deletedPayload? = nil,
                invite_sent: Components.Schemas.AuditLog.Invite_sentPayload? = nil,
                invite_accepted: Components.Schemas.AuditLog.Invite_acceptedPayload? = nil,
                invite_deleted: Components.Schemas.AuditLog.Invite_deletedPayload? = nil,
                login_failed: Components.Schemas.AuditLog.Login_failedPayload? = nil,
                logout_failed: Components.Schemas.AuditLog.Logout_failedPayload? = nil,
                organization_updated: Components.Schemas.AuditLog.Organization_updatedPayload? = nil,
                project_created: Components.Schemas.AuditLog.Project_createdPayload? = nil,
                project_updated: Components.Schemas.AuditLog.Project_updatedPayload? = nil,
                project_archived: Components.Schemas.AuditLog.Project_archivedPayload? = nil,
                rateLimit_updated: Components.Schemas.AuditLog.RateLimit_updatedPayload? = nil,
                rateLimit_deleted: Components.Schemas.AuditLog.RateLimit_deletedPayload? = nil,
                serviceAccount_created: Components.Schemas.AuditLog.ServiceAccount_createdPayload? = nil,
                serviceAccount_updated: Components.Schemas.AuditLog.ServiceAccount_updatedPayload? = nil,
                serviceAccount_deleted: Components.Schemas.AuditLog.ServiceAccount_deletedPayload? = nil,
                user_added: Components.Schemas.AuditLog.User_addedPayload? = nil,
                user_updated: Components.Schemas.AuditLog.User_updatedPayload? = nil,
                user_deleted: Components.Schemas.AuditLog.User_deletedPayload? = nil
            ) {
                self.id = id
                self._type = _type
                self.effectiveAt = effectiveAt
                self.project = project
                self.actor = actor
                self.apiKey_created = apiKey_created
                self.apiKey_updated = apiKey_updated
                self.apiKey_deleted = apiKey_deleted
                self.invite_sent = invite_sent
                self.invite_accepted = invite_accepted
                self.invite_deleted = invite_deleted
                self.login_failed = login_failed
                self.logout_failed = logout_failed
                self.organization_updated = organization_updated
                self.project_created = project_created
                self.project_updated = project_updated
                self.project_archived = project_archived
                self.rateLimit_updated = rateLimit_updated
                self.rateLimit_deleted = rateLimit_deleted
                self.serviceAccount_created = serviceAccount_created
                self.serviceAccount_updated = serviceAccount_updated
                self.serviceAccount_deleted = serviceAccount_deleted
                self.user_added = user_added
                self.user_updated = user_updated
                self.user_deleted = user_deleted
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case _type = "type"
                case effectiveAt = "effective_at"
                case project
                case actor
                case apiKey_created = "api_key.created"
                case apiKey_updated = "api_key.updated"
                case apiKey_deleted = "api_key.deleted"
                case invite_sent = "invite.sent"
                case invite_accepted = "invite.accepted"
                case invite_deleted = "invite.deleted"
                case login_failed = "login.failed"
                case logout_failed = "logout.failed"
                case organization_updated = "organization.updated"
                case project_created = "project.created"
                case project_updated = "project.updated"
                case project_archived = "project.archived"
                case rateLimit_updated = "rate_limit.updated"
                case rateLimit_deleted = "rate_limit.deleted"
                case serviceAccount_created = "service_account.created"
                case serviceAccount_updated = "service_account.updated"
                case serviceAccount_deleted = "service_account.deleted"
                case user_added = "user.added"
                case user_updated = "user.updated"
                case user_deleted = "user.deleted"
            }
        }
        /// The actor who performed the audit logged action.
        ///
        /// - Remark: Generated from `#/components/schemas/AuditLogActor`.
        public struct AuditLogActor: Codable, Hashable, Sendable {
            /// The type of actor. Is either `session` or `api_key`.
            ///
            /// - Remark: Generated from `#/components/schemas/AuditLogActor/type`.
            @frozen public enum _TypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                case session = "session"
                case apiKey = "api_key"
            }
            /// The type of actor. Is either `session` or `api_key`.
            ///
            /// - Remark: Generated from `#/components/schemas/AuditLogActor/type`.
            public var _type: Components.Schemas.AuditLogActor._TypePayload?
            /// - Remark: Generated from `#/components/schemas/AuditLogActor/session`.
            public var session: Components.Schemas.AuditLogActorSession?
            /// - Remark: Generated from `#/components/schemas/AuditLogActor/api_key`.
            public var apiKey: Components.Schemas.AuditLogActorApiKey?
            /// Creates a new `AuditLogActor`.
            ///
            /// - Parameters:
            ///   - _type: The type of actor. Is either `session` or `api_key`.
            ///   - session:
            ///   - apiKey:
            public init(
                _type: Components.Schemas.AuditLogActor._TypePayload? = nil,
                session: Components.Schemas.AuditLogActorSession? = nil,
                apiKey: Components.Schemas.AuditLogActorApiKey? = nil
            ) {
                self._type = _type
                self.session = session
                self.apiKey = apiKey
            }
            public enum CodingKeys: String, CodingKey {
                case _type = "type"
                case session
                case apiKey = "api_key"
            }
        }
        /// The API Key used to perform the audit logged action.
        ///
        /// - Remark: Generated from `#/components/schemas/AuditLogActorApiKey`.
        public struct AuditLogActorApiKey: Codable, Hashable, Sendable {
            /// The tracking id of the API key.
            ///
            /// - Remark: Generated from `#/components/schemas/AuditLogActorApiKey/id`.
            public var id: Swift.String?
            /// The type of API key. Can be either `user` or `service_account`.
            ///
            /// - Remark: Generated from `#/components/schemas/AuditLogActorApiKey/type`.
            @frozen public enum _TypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                case user = "user"
                case serviceAccount = "service_account"
            }
            /// The type of API key. Can be either `user` or `service_account`.
            ///
            /// - Remark: Generated from `#/components/schemas/AuditLogActorApiKey/type`.
            public var _type: Components.Schemas.AuditLogActorApiKey._TypePayload?
            /// - Remark: Generated from `#/components/schemas/AuditLogActorApiKey/user`.
            public var user: Components.Schemas.AuditLogActorUser?
            /// - Remark: Generated from `#/components/schemas/AuditLogActorApiKey/service_account`.
            public var serviceAccount: Components.Schemas.AuditLogActorServiceAccount?
            /// Creates a new `AuditLogActorApiKey`.
            ///
            /// - Parameters:
            ///   - id: The tracking id of the API key.
            ///   - _type: The type of API key. Can be either `user` or `service_account`.
            ///   - user:
            ///   - serviceAccount:
            public init(
                id: Swift.String? = nil,
                _type: Components.Schemas.AuditLogActorApiKey._TypePayload? = nil,
                user: Components.Schemas.AuditLogActorUser? = nil,
                serviceAccount: Components.Schemas.AuditLogActorServiceAccount? = nil
            ) {
                self.id = id
                self._type = _type
                self.user = user
                self.serviceAccount = serviceAccount
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case _type = "type"
                case user
                case serviceAccount = "service_account"
            }
        }
        /// The service account that performed the audit logged action.
        ///
        /// - Remark: Generated from `#/components/schemas/AuditLogActorServiceAccount`.
        public struct AuditLogActorServiceAccount: Codable, Hashable, Sendable {
            /// The service account id.
            ///
            /// - Remark: Generated from `#/components/schemas/AuditLogActorServiceAccount/id`.
            public var id: Swift.String?
            /// Creates a new `AuditLogActorServiceAccount`.
            ///
            /// - Parameters:
            ///   - id: The service account id.
            public init(id: Swift.String? = nil) {
                self.id = id
            }
            public enum CodingKeys: String, CodingKey {
                case id
            }
        }
        /// The session in which the audit logged action was performed.
        ///
        /// - Remark: Generated from `#/components/schemas/AuditLogActorSession`.
        public struct AuditLogActorSession: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/AuditLogActorSession/user`.
            public var user: Components.Schemas.AuditLogActorUser?
            /// The IP address from which the action was performed.
            ///
            /// - Remark: Generated from `#/components/schemas/AuditLogActorSession/ip_address`.
            public var ipAddress: Swift.String?
            /// Creates a new `AuditLogActorSession`.
            ///
            /// - Parameters:
            ///   - user:
            ///   - ipAddress: The IP address from which the action was performed.
            public init(
                user: Components.Schemas.AuditLogActorUser? = nil,
                ipAddress: Swift.String? = nil
            ) {
                self.user = user
                self.ipAddress = ipAddress
            }
            public enum CodingKeys: String, CodingKey {
                case user
                case ipAddress = "ip_address"
            }
        }
        /// The user who performed the audit logged action.
        ///
        /// - Remark: Generated from `#/components/schemas/AuditLogActorUser`.
        public struct AuditLogActorUser: Codable, Hashable, Sendable {
            /// The user id.
            ///
            /// - Remark: Generated from `#/components/schemas/AuditLogActorUser/id`.
            public var id: Swift.String?
            /// The user email.
            ///
            /// - Remark: Generated from `#/components/schemas/AuditLogActorUser/email`.
            public var email: Swift.String?
            /// Creates a new `AuditLogActorUser`.
            ///
            /// - Parameters:
            ///   - id: The user id.
            ///   - email: The user email.
            public init(
                id: Swift.String? = nil,
                email: Swift.String? = nil
            ) {
                self.id = id
                self.email = email
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case email
            }
        }
        /// The event type.
        ///
        /// - Remark: Generated from `#/components/schemas/AuditLogEventType`.
        @frozen public enum AuditLogEventType: String, Codable, Hashable, Sendable, CaseIterable {
            case apiKey_created = "api_key.created"
            case apiKey_updated = "api_key.updated"
            case apiKey_deleted = "api_key.deleted"
            case invite_sent = "invite.sent"
            case invite_accepted = "invite.accepted"
            case invite_deleted = "invite.deleted"
            case login_succeeded = "login.succeeded"
            case login_failed = "login.failed"
            case logout_succeeded = "logout.succeeded"
            case logout_failed = "logout.failed"
            case organization_updated = "organization.updated"
            case project_created = "project.created"
            case project_updated = "project.updated"
            case project_archived = "project.archived"
            case serviceAccount_created = "service_account.created"
            case serviceAccount_updated = "service_account.updated"
            case serviceAccount_deleted = "service_account.deleted"
            case rateLimit_updated = "rate_limit.updated"
            case rateLimit_deleted = "rate_limit.deleted"
            case user_added = "user.added"
            case user_updated = "user.updated"
            case user_deleted = "user.deleted"
        }
        /// The default strategy. This strategy currently uses a `max_chunk_size_tokens` of `800` and `chunk_overlap_tokens` of `400`.
        ///
        /// - Remark: Generated from `#/components/schemas/AutoChunkingStrategyRequestParam`.
        public struct AutoChunkingStrategyRequestParam: Codable, Hashable, Sendable {
            /// Always `auto`.
            ///
            /// - Remark: Generated from `#/components/schemas/AutoChunkingStrategyRequestParam/type`.
            @frozen public enum _TypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                case auto = "auto"
            }
            /// Always `auto`.
            ///
            /// - Remark: Generated from `#/components/schemas/AutoChunkingStrategyRequestParam/type`.
            public var _type: Components.Schemas.AutoChunkingStrategyRequestParam._TypePayload
            /// Creates a new `AutoChunkingStrategyRequestParam`.
            ///
            /// - Parameters:
            ///   - _type: Always `auto`.
            public init(_type: Components.Schemas.AutoChunkingStrategyRequestParam._TypePayload) {
                self._type = _type
            }
            public enum CodingKeys: String, CodingKey {
                case _type = "type"
            }
            public init(from decoder: any Decoder) throws {
                let container = try decoder.container(keyedBy: CodingKeys.self)
                self._type = try container.decode(
                    Components.Schemas.AutoChunkingStrategyRequestParam._TypePayload.self,
                    forKey: ._type
                )
                try decoder.ensureNoAdditionalProperties(knownKeys: [
                    "type"
                ])
            }
        }
        /// - Remark: Generated from `#/components/schemas/Batch`.
        public struct Batch: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/Batch/id`.
            public var id: Swift.String
            /// The object type, which is always `batch`.
            ///
            /// - Remark: Generated from `#/components/schemas/Batch/object`.
            @frozen public enum ObjectPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case batch = "batch"
            }
            /// The object type, which is always `batch`.
            ///
            /// - Remark: Generated from `#/components/schemas/Batch/object`.
            public var object: Components.Schemas.Batch.ObjectPayload
            /// The OpenAI API endpoint used by the batch.
            ///
            /// - Remark: Generated from `#/components/schemas/Batch/endpoint`.
            public var endpoint: Swift.String
            /// - Remark: Generated from `#/components/schemas/Batch/errors`.
            public struct ErrorsPayload: Codable, Hashable, Sendable {
                /// The object type, which is always `list`.
                ///
                /// - Remark: Generated from `#/components/schemas/Batch/errors/object`.
                public var object: Swift.String?
                /// - Remark: Generated from `#/components/schemas/Batch/errors/DataPayload`.
                public struct DataPayloadPayload: Codable, Hashable, Sendable {
                    /// An error code identifying the error type.
                    ///
                    /// - Remark: Generated from `#/components/schemas/Batch/errors/DataPayload/code`.
                    public var code: Swift.String?
                    /// A human-readable message providing more details about the error.
                    ///
                    /// - Remark: Generated from `#/components/schemas/Batch/errors/DataPayload/message`.
                    public var message: Swift.String?
                    /// The name of the parameter that caused the error, if applicable.
                    ///
                    /// - Remark: Generated from `#/components/schemas/Batch/errors/DataPayload/param`.
                    public var param: Swift.String?
                    /// The line number of the input file where the error occurred, if applicable.
                    ///
                    /// - Remark: Generated from `#/components/schemas/Batch/errors/DataPayload/line`.
                    public var line: Swift.Int?
                    /// Creates a new `DataPayloadPayload`.
                    ///
                    /// - Parameters:
                    ///   - code: An error code identifying the error type.
                    ///   - message: A human-readable message providing more details about the error.
                    ///   - param: The name of the parameter that caused the error, if applicable.
                    ///   - line: The line number of the input file where the error occurred, if applicable.
                    public init(
                        code: Swift.String? = nil,
                        message: Swift.String? = nil,
                        param: Swift.String? = nil,
                        line: Swift.Int? = nil
                    ) {
                        self.code = code
                        self.message = message
                        self.param = param
                        self.line = line
                    }
                    public enum CodingKeys: String, CodingKey {
                        case code
                        case message
                        case param
                        case line
                    }
                }
                /// - Remark: Generated from `#/components/schemas/Batch/errors/data`.
                public typealias DataPayload = [Components.Schemas.Batch.ErrorsPayload.DataPayloadPayload]
                /// - Remark: Generated from `#/components/schemas/Batch/errors/data`.
                public var data: Components.Schemas.Batch.ErrorsPayload.DataPayload?
                /// Creates a new `ErrorsPayload`.
                ///
                /// - Parameters:
                ///   - object: The object type, which is always `list`.
                ///   - data:
                public init(
                    object: Swift.String? = nil,
                    data: Components.Schemas.Batch.ErrorsPayload.DataPayload? = nil
                ) {
                    self.object = object
                    self.data = data
                }
                public enum CodingKeys: String, CodingKey {
                    case object
                    case data
                }
            }
            /// - Remark: Generated from `#/components/schemas/Batch/errors`.
            public var errors: Components.Schemas.Batch.ErrorsPayload?
            /// The ID of the input file for the batch.
            ///
            /// - Remark: Generated from `#/components/schemas/Batch/input_file_id`.
            public var inputFileId: Swift.String
            /// The time frame within which the batch should be processed.
            ///
            /// - Remark: Generated from `#/components/schemas/Batch/completion_window`.
            public var completionWindow: Swift.String
            /// The current status of the batch.
            ///
            /// - Remark: Generated from `#/components/schemas/Batch/status`.
            @frozen public enum StatusPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case validating = "validating"
                case failed = "failed"
                case inProgress = "in_progress"
                case finalizing = "finalizing"
                case completed = "completed"
                case expired = "expired"
                case cancelling = "cancelling"
                case cancelled = "cancelled"
            }
            /// The current status of the batch.
            ///
            /// - Remark: Generated from `#/components/schemas/Batch/status`.
            public var status: Components.Schemas.Batch.StatusPayload
            /// The ID of the file containing the outputs of successfully executed requests.
            ///
            /// - Remark: Generated from `#/components/schemas/Batch/output_file_id`.
            public var outputFileId: Swift.String?
            /// The ID of the file containing the outputs of requests with errors.
            ///
            /// - Remark: Generated from `#/components/schemas/Batch/error_file_id`.
            public var errorFileId: Swift.String?
            /// The Unix timestamp (in seconds) for when the batch was created.
            ///
            /// - Remark: Generated from `#/components/schemas/Batch/created_at`.
            public var createdAt: Swift.Int
            /// The Unix timestamp (in seconds) for when the batch started processing.
            ///
            /// - Remark: Generated from `#/components/schemas/Batch/in_progress_at`.
            public var inProgressAt: Swift.Int?
            /// The Unix timestamp (in seconds) for when the batch will expire.
            ///
            /// - Remark: Generated from `#/components/schemas/Batch/expires_at`.
            public var expiresAt: Swift.Int?
            /// The Unix timestamp (in seconds) for when the batch started finalizing.
            ///
            /// - Remark: Generated from `#/components/schemas/Batch/finalizing_at`.
            public var finalizingAt: Swift.Int?
            /// The Unix timestamp (in seconds) for when the batch was completed.
            ///
            /// - Remark: Generated from `#/components/schemas/Batch/completed_at`.
            public var completedAt: Swift.Int?
            /// The Unix timestamp (in seconds) for when the batch failed.
            ///
            /// - Remark: Generated from `#/components/schemas/Batch/failed_at`.
            public var failedAt: Swift.Int?
            /// The Unix timestamp (in seconds) for when the batch expired.
            ///
            /// - Remark: Generated from `#/components/schemas/Batch/expired_at`.
            public var expiredAt: Swift.Int?
            /// The Unix timestamp (in seconds) for when the batch started cancelling.
            ///
            /// - Remark: Generated from `#/components/schemas/Batch/cancelling_at`.
            public var cancellingAt: Swift.Int?
            /// The Unix timestamp (in seconds) for when the batch was cancelled.
            ///
            /// - Remark: Generated from `#/components/schemas/Batch/cancelled_at`.
            public var cancelledAt: Swift.Int?
            /// The request counts for different statuses within the batch.
            ///
            /// - Remark: Generated from `#/components/schemas/Batch/request_counts`.
            public struct RequestCountsPayload: Codable, Hashable, Sendable {
                /// Total number of requests in the batch.
                ///
                /// - Remark: Generated from `#/components/schemas/Batch/request_counts/total`.
                public var total: Swift.Int
                /// Number of requests that have been completed successfully.
                ///
                /// - Remark: Generated from `#/components/schemas/Batch/request_counts/completed`.
                public var completed: Swift.Int
                /// Number of requests that have failed.
                ///
                /// - Remark: Generated from `#/components/schemas/Batch/request_counts/failed`.
                public var failed: Swift.Int
                /// Creates a new `RequestCountsPayload`.
                ///
                /// - Parameters:
                ///   - total: Total number of requests in the batch.
                ///   - completed: Number of requests that have been completed successfully.
                ///   - failed: Number of requests that have failed.
                public init(
                    total: Swift.Int,
                    completed: Swift.Int,
                    failed: Swift.Int
                ) {
                    self.total = total
                    self.completed = completed
                    self.failed = failed
                }
                public enum CodingKeys: String, CodingKey {
                    case total
                    case completed
                    case failed
                }
            }
            /// The request counts for different statuses within the batch.
            ///
            /// - Remark: Generated from `#/components/schemas/Batch/request_counts`.
            public var requestCounts: Components.Schemas.Batch.RequestCountsPayload?
            /// - Remark: Generated from `#/components/schemas/Batch/metadata`.
            public var metadata: Components.Schemas.Metadata?
            /// Creates a new `Batch`.
            ///
            /// - Parameters:
            ///   - id:
            ///   - object: The object type, which is always `batch`.
            ///   - endpoint: The OpenAI API endpoint used by the batch.
            ///   - errors:
            ///   - inputFileId: The ID of the input file for the batch.
            ///   - completionWindow: The time frame within which the batch should be processed.
            ///   - status: The current status of the batch.
            ///   - outputFileId: The ID of the file containing the outputs of successfully executed requests.
            ///   - errorFileId: The ID of the file containing the outputs of requests with errors.
            ///   - createdAt: The Unix timestamp (in seconds) for when the batch was created.
            ///   - inProgressAt: The Unix timestamp (in seconds) for when the batch started processing.
            ///   - expiresAt: The Unix timestamp (in seconds) for when the batch will expire.
            ///   - finalizingAt: The Unix timestamp (in seconds) for when the batch started finalizing.
            ///   - completedAt: The Unix timestamp (in seconds) for when the batch was completed.
            ///   - failedAt: The Unix timestamp (in seconds) for when the batch failed.
            ///   - expiredAt: The Unix timestamp (in seconds) for when the batch expired.
            ///   - cancellingAt: The Unix timestamp (in seconds) for when the batch started cancelling.
            ///   - cancelledAt: The Unix timestamp (in seconds) for when the batch was cancelled.
            ///   - requestCounts: The request counts for different statuses within the batch.
            ///   - metadata:
            public init(
                id: Swift.String,
                object: Components.Schemas.Batch.ObjectPayload,
                endpoint: Swift.String,
                errors: Components.Schemas.Batch.ErrorsPayload? = nil,
                inputFileId: Swift.String,
                completionWindow: Swift.String,
                status: Components.Schemas.Batch.StatusPayload,
                outputFileId: Swift.String? = nil,
                errorFileId: Swift.String? = nil,
                createdAt: Swift.Int,
                inProgressAt: Swift.Int? = nil,
                expiresAt: Swift.Int? = nil,
                finalizingAt: Swift.Int? = nil,
                completedAt: Swift.Int? = nil,
                failedAt: Swift.Int? = nil,
                expiredAt: Swift.Int? = nil,
                cancellingAt: Swift.Int? = nil,
                cancelledAt: Swift.Int? = nil,
                requestCounts: Components.Schemas.Batch.RequestCountsPayload? = nil,
                metadata: Components.Schemas.Metadata? = nil
            ) {
                self.id = id
                self.object = object
                self.endpoint = endpoint
                self.errors = errors
                self.inputFileId = inputFileId
                self.completionWindow = completionWindow
                self.status = status
                self.outputFileId = outputFileId
                self.errorFileId = errorFileId
                self.createdAt = createdAt
                self.inProgressAt = inProgressAt
                self.expiresAt = expiresAt
                self.finalizingAt = finalizingAt
                self.completedAt = completedAt
                self.failedAt = failedAt
                self.expiredAt = expiredAt
                self.cancellingAt = cancellingAt
                self.cancelledAt = cancelledAt
                self.requestCounts = requestCounts
                self.metadata = metadata
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case object
                case endpoint
                case errors
                case inputFileId = "input_file_id"
                case completionWindow = "completion_window"
                case status
                case outputFileId = "output_file_id"
                case errorFileId = "error_file_id"
                case createdAt = "created_at"
                case inProgressAt = "in_progress_at"
                case expiresAt = "expires_at"
                case finalizingAt = "finalizing_at"
                case completedAt = "completed_at"
                case failedAt = "failed_at"
                case expiredAt = "expired_at"
                case cancellingAt = "cancelling_at"
                case cancelledAt = "cancelled_at"
                case requestCounts = "request_counts"
                case metadata
            }
        }
        /// The per-line object of the batch input file
        ///
        /// - Remark: Generated from `#/components/schemas/BatchRequestInput`.
        public struct BatchRequestInput: Codable, Hashable, Sendable {
            /// A developer-provided per-request id that will be used to match outputs to inputs. Must be unique for each request in a batch.
            ///
            /// - Remark: Generated from `#/components/schemas/BatchRequestInput/custom_id`.
            public var customId: Swift.String?
            /// The HTTP method to be used for the request. Currently only `POST` is supported.
            ///
            /// - Remark: Generated from `#/components/schemas/BatchRequestInput/method`.
            @frozen public enum MethodPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case post = "POST"
            }
            /// The HTTP method to be used for the request. Currently only `POST` is supported.
            ///
            /// - Remark: Generated from `#/components/schemas/BatchRequestInput/method`.
            public var method: Components.Schemas.BatchRequestInput.MethodPayload?
            /// The OpenAI API relative URL to be used for the request. Currently `/v1/chat/completions`, `/v1/embeddings`, and `/v1/completions` are supported.
            ///
            /// - Remark: Generated from `#/components/schemas/BatchRequestInput/url`.
            public var url: Swift.String?
            /// Creates a new `BatchRequestInput`.
            ///
            /// - Parameters:
            ///   - customId: A developer-provided per-request id that will be used to match outputs to inputs. Must be unique for each request in a batch.
            ///   - method: The HTTP method to be used for the request. Currently only `POST` is supported.
            ///   - url: The OpenAI API relative URL to be used for the request. Currently `/v1/chat/completions`, `/v1/embeddings`, and `/v1/completions` are supported.
            public init(
                customId: Swift.String? = nil,
                method: Components.Schemas.BatchRequestInput.MethodPayload? = nil,
                url: Swift.String? = nil
            ) {
                self.customId = customId
                self.method = method
                self.url = url
            }
            public enum CodingKeys: String, CodingKey {
                case customId = "custom_id"
                case method
                case url
            }
        }
        /// The per-line object of the batch output and error files
        ///
        /// - Remark: Generated from `#/components/schemas/BatchRequestOutput`.
        public struct BatchRequestOutput: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/BatchRequestOutput/id`.
            public var id: Swift.String?
            /// A developer-provided per-request id that will be used to match outputs to inputs.
            ///
            /// - Remark: Generated from `#/components/schemas/BatchRequestOutput/custom_id`.
            public var customId: Swift.String?
            /// - Remark: Generated from `#/components/schemas/BatchRequestOutput/response`.
            public struct ResponsePayload: Codable, Hashable, Sendable {
                /// The HTTP status code of the response
                ///
                /// - Remark: Generated from `#/components/schemas/BatchRequestOutput/response/status_code`.
                public var statusCode: Swift.Int?
                /// An unique identifier for the OpenAI API request. Please include this request ID when contacting support.
                ///
                /// - Remark: Generated from `#/components/schemas/BatchRequestOutput/response/request_id`.
                public var requestId: Swift.String?
                /// The JSON body of the response
                ///
                /// - Remark: Generated from `#/components/schemas/BatchRequestOutput/response/body`.
                public var body: OpenAPIRuntime.OpenAPIObjectContainer?
                /// Creates a new `ResponsePayload`.
                ///
                /// - Parameters:
                ///   - statusCode: The HTTP status code of the response
                ///   - requestId: An unique identifier for the OpenAI API request. Please include this request ID when contacting support.
                ///   - body: The JSON body of the response
                public init(
                    statusCode: Swift.Int? = nil,
                    requestId: Swift.String? = nil,
                    body: OpenAPIRuntime.OpenAPIObjectContainer? = nil
                ) {
                    self.statusCode = statusCode
                    self.requestId = requestId
                    self.body = body
                }
                public enum CodingKeys: String, CodingKey {
                    case statusCode = "status_code"
                    case requestId = "request_id"
                    case body
                }
            }
            /// - Remark: Generated from `#/components/schemas/BatchRequestOutput/response`.
            public var response: Components.Schemas.BatchRequestOutput.ResponsePayload?
            /// For requests that failed with a non-HTTP error, this will contain more information on the cause of the failure.
            ///
            /// - Remark: Generated from `#/components/schemas/BatchRequestOutput/error`.
            public struct _ErrorPayload: Codable, Hashable, Sendable {
                /// A machine-readable error code.
                ///
                /// - Remark: Generated from `#/components/schemas/BatchRequestOutput/error/code`.
                public var code: Swift.String?
                /// A human-readable error message.
                ///
                /// - Remark: Generated from `#/components/schemas/BatchRequestOutput/error/message`.
                public var message: Swift.String?
                /// Creates a new `_ErrorPayload`.
                ///
                /// - Parameters:
                ///   - code: A machine-readable error code.
                ///   - message: A human-readable error message.
                public init(
                    code: Swift.String? = nil,
                    message: Swift.String? = nil
                ) {
                    self.code = code
                    self.message = message
                }
                public enum CodingKeys: String, CodingKey {
                    case code
                    case message
                }
            }
            /// For requests that failed with a non-HTTP error, this will contain more information on the cause of the failure.
            ///
            /// - Remark: Generated from `#/components/schemas/BatchRequestOutput/error`.
            public var error: Components.Schemas.BatchRequestOutput._ErrorPayload?
            /// Creates a new `BatchRequestOutput`.
            ///
            /// - Parameters:
            ///   - id:
            ///   - customId: A developer-provided per-request id that will be used to match outputs to inputs.
            ///   - response:
            ///   - error: For requests that failed with a non-HTTP error, this will contain more information on the cause of the failure.
            public init(
                id: Swift.String? = nil,
                customId: Swift.String? = nil,
                response: Components.Schemas.BatchRequestOutput.ResponsePayload? = nil,
                error: Components.Schemas.BatchRequestOutput._ErrorPayload? = nil
            ) {
                self.id = id
                self.customId = customId
                self.response = response
                self.error = error
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case customId = "custom_id"
                case response
                case error
            }
        }
        /// - Remark: Generated from `#/components/schemas/CancelUploadRequest`.
        public struct CancelUploadRequest: Codable, Hashable, Sendable {
            /// Creates a new `CancelUploadRequest`.
            public init() {}
            public init(from decoder: any Decoder) throws {
                try decoder.ensureNoAdditionalProperties(knownKeys: [])
            }
        }
        /// Specifying a particular function via `{"name": "my_function"}` forces the model to call that function.
        ///
        ///
        /// - Remark: Generated from `#/components/schemas/ChatCompletionFunctionCallOption`.
        public struct ChatCompletionFunctionCallOption: Codable, Hashable, Sendable {
            /// The name of the function to call.
            ///
            /// - Remark: Generated from `#/components/schemas/ChatCompletionFunctionCallOption/name`.
            public var name: Swift.String
            /// Creates a new `ChatCompletionFunctionCallOption`.
            ///
            /// - Parameters:
            ///   - name: The name of the function to call.
            public init(name: Swift.String) {
                self.name = name
            }
            public enum CodingKeys: String, CodingKey {
                case name
            }
        }
        /// - Remark: Generated from `#/components/schemas/ChatCompletionFunctions`.
        @available(*, deprecated)
        public struct ChatCompletionFunctions: Codable, Hashable, Sendable {
            /// A description of what the function does, used by the model to choose when and how to call the function.
            ///
            /// - Remark: Generated from `#/components/schemas/ChatCompletionFunctions/description`.
            public var description: Swift.String?
            /// The name of the function to be called. Must be a-z, A-Z, 0-9, or contain underscores and dashes, with a maximum length of 64.
            ///
            /// - Remark: Generated from `#/components/schemas/ChatCompletionFunctions/name`.
            public var name: Swift.String
            /// - Remark: Generated from `#/components/schemas/ChatCompletionFunctions/parameters`.
            public var parameters: Components.Schemas.FunctionParameters?
            /// Creates a new `ChatCompletionFunctions`.
            ///
            /// - Parameters:
            ///   - description: A description of what the function does, used by the model to choose when and how to call the function.
            ///   - name: The name of the function to be called. Must be a-z, A-Z, 0-9, or contain underscores and dashes, with a maximum length of 64.
            ///   - parameters:
            public init(
                description: Swift.String? = nil,
                name: Swift.String,
                parameters: Components.Schemas.FunctionParameters? = nil
            ) {
                self.description = description
                self.name = name
                self.parameters = parameters
            }
            public enum CodingKeys: String, CodingKey {
                case description
                case name
                case parameters
            }
        }
        /// - Remark: Generated from `#/components/schemas/ChatCompletionMessageToolCall`.
        public struct ChatCompletionMessageToolCall: Codable, Hashable, Sendable {
            /// The ID of the tool call.
            ///
            /// - Remark: Generated from `#/components/schemas/ChatCompletionMessageToolCall/id`.
            public var id: Swift.String
            /// The type of the tool. Currently, only `function` is supported.
            ///
            /// - Remark: Generated from `#/components/schemas/ChatCompletionMessageToolCall/type`.
            @frozen public enum _TypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                case function = "function"
            }
            /// The type of the tool. Currently, only `function` is supported.
            ///
            /// - Remark: Generated from `#/components/schemas/ChatCompletionMessageToolCall/type`.
            public var _type: Components.Schemas.ChatCompletionMessageToolCall._TypePayload
            /// The function that the model called.
            ///
            /// - Remark: Generated from `#/components/schemas/ChatCompletionMessageToolCall/function`.
            public struct FunctionPayload: Codable, Hashable, Sendable {
                /// The name of the function to call.
                ///
                /// - Remark: Generated from `#/components/schemas/ChatCompletionMessageToolCall/function/name`.
                public var name: Swift.String
                /// The arguments to call the function with, as generated by the model in JSON format. Note that the model does not always generate valid JSON, and may hallucinate parameters not defined by your function schema. Validate the arguments in your code before calling your function.
                ///
                /// - Remark: Generated from `#/components/schemas/ChatCompletionMessageToolCall/function/arguments`.
                public var arguments: Swift.String
                /// Creates a new `FunctionPayload`.
                ///
                /// - Parameters:
                ///   - name: The name of the function to call.
                ///   - arguments: The arguments to call the function with, as generated by the model in JSON format. Note that the model does not always generate valid JSON, and may hallucinate parameters not defined by your function schema. Validate the arguments in your code before calling your function.
                public init(
                    name: Swift.String,
                    arguments: Swift.String
                ) {
                    self.name = name
                    self.arguments = arguments
                }
                public enum CodingKeys: String, CodingKey {
                    case name
                    case arguments
                }
            }
            /// The function that the model called.
            ///
            /// - Remark: Generated from `#/components/schemas/ChatCompletionMessageToolCall/function`.
            public var function: Components.Schemas.ChatCompletionMessageToolCall.FunctionPayload
            /// Creates a new `ChatCompletionMessageToolCall`.
            ///
            /// - Parameters:
            ///   - id: The ID of the tool call.
            ///   - _type: The type of the tool. Currently, only `function` is supported.
            ///   - function: The function that the model called.
            public init(
                id: Swift.String,
                _type: Components.Schemas.ChatCompletionMessageToolCall._TypePayload,
                function: Components.Schemas.ChatCompletionMessageToolCall.FunctionPayload
            ) {
                self.id = id
                self._type = _type
                self.function = function
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case _type = "type"
                case function
            }
        }
        /// - Remark: Generated from `#/components/schemas/ChatCompletionMessageToolCallChunk`.
        public struct ChatCompletionMessageToolCallChunk: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/ChatCompletionMessageToolCallChunk/index`.
            public var index: Swift.Int
            /// The ID of the tool call.
            ///
            /// - Remark: Generated from `#/components/schemas/ChatCompletionMessageToolCallChunk/id`.
            public var id: Swift.String?
            /// The type of the tool. Currently, only `function` is supported.
            ///
            /// - Remark: Generated from `#/components/schemas/ChatCompletionMessageToolCallChunk/type`.
            @frozen public enum _TypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                case function = "function"
            }
            /// The type of the tool. Currently, only `function` is supported.
            ///
            /// - Remark: Generated from `#/components/schemas/ChatCompletionMessageToolCallChunk/type`.
            public var _type: Components.Schemas.ChatCompletionMessageToolCallChunk._TypePayload?
            /// - Remark: Generated from `#/components/schemas/ChatCompletionMessageToolCallChunk/function`.
            public struct FunctionPayload: Codable, Hashable, Sendable {
                /// The name of the function to call.
                ///
                /// - Remark: Generated from `#/components/schemas/ChatCompletionMessageToolCallChunk/function/name`.
                public var name: Swift.String?
                /// The arguments to call the function with, as generated by the model in JSON format. Note that the model does not always generate valid JSON, and may hallucinate parameters not defined by your function schema. Validate the arguments in your code before calling your function.
                ///
                /// - Remark: Generated from `#/components/schemas/ChatCompletionMessageToolCallChunk/function/arguments`.
                public var arguments: Swift.String?
                /// Creates a new `FunctionPayload`.
                ///
                /// - Parameters:
                ///   - name: The name of the function to call.
                ///   - arguments: The arguments to call the function with, as generated by the model in JSON format. Note that the model does not always generate valid JSON, and may hallucinate parameters not defined by your function schema. Validate the arguments in your code before calling your function.
                public init(
                    name: Swift.String? = nil,
                    arguments: Swift.String? = nil
                ) {
                    self.name = name
                    self.arguments = arguments
                }
                public enum CodingKeys: String, CodingKey {
                    case name
                    case arguments
                }
            }
            /// - Remark: Generated from `#/components/schemas/ChatCompletionMessageToolCallChunk/function`.
            public var function: Components.Schemas.ChatCompletionMessageToolCallChunk.FunctionPayload?
            /// Creates a new `ChatCompletionMessageToolCallChunk`.
            ///
            /// - Parameters:
            ///   - index:
            ///   - id: The ID of the tool call.
            ///   - _type: The type of the tool. Currently, only `function` is supported.
            ///   - function:
            public init(
                index: Swift.Int,
                id: Swift.String? = nil,
                _type: Components.Schemas.ChatCompletionMessageToolCallChunk._TypePayload? = nil,
                function: Components.Schemas.ChatCompletionMessageToolCallChunk.FunctionPayload? = nil
            ) {
                self.index = index
                self.id = id
                self._type = _type
                self.function = function
            }
            public enum CodingKeys: String, CodingKey {
                case index
                case id
                case _type = "type"
                case function
            }
        }
        /// The tool calls generated by the model, such as function calls.
        ///
        /// - Remark: Generated from `#/components/schemas/ChatCompletionMessageToolCalls`.
        public typealias ChatCompletionMessageToolCalls = [Components.Schemas.ChatCompletionMessageToolCall]
        /// - Remark: Generated from `#/components/schemas/ChatCompletionModalities`.
        @frozen public enum ChatCompletionModalitiesPayload: String, Codable, Hashable, Sendable, CaseIterable {
            case text = "text"
            case audio = "audio"
        }
        /// Output types that you would like the model to generate for this request.
        /// Most models are capable of generating text, which is the default:
        ///
        /// `["text"]`
        ///
        /// The `gpt-4o-audio-preview` model can also be used to [generate audio](/docs/guides/audio). To
        /// request that this model generate both text and audio responses, you can
        /// use:
        ///
        /// `["text", "audio"]`
        ///
        ///
        /// - Remark: Generated from `#/components/schemas/ChatCompletionModalities`.
        public typealias ChatCompletionModalities = [Components.Schemas.ChatCompletionModalitiesPayload]
        /// Specifies a tool the model should use. Use to force the model to call a specific function.
        ///
        /// - Remark: Generated from `#/components/schemas/ChatCompletionNamedToolChoice`.
        public struct ChatCompletionNamedToolChoice: Codable, Hashable, Sendable {
            /// The type of the tool. Currently, only `function` is supported.
            ///
            /// - Remark: Generated from `#/components/schemas/ChatCompletionNamedToolChoice/type`.
            @frozen public enum _TypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                case function = "function"
            }
            /// The type of the tool. Currently, only `function` is supported.
            ///
            /// - Remark: Generated from `#/components/schemas/ChatCompletionNamedToolChoice/type`.
            public var _type: Components.Schemas.ChatCompletionNamedToolChoice._TypePayload
            /// - Remark: Generated from `#/components/schemas/ChatCompletionNamedToolChoice/function`.
            public struct FunctionPayload: Codable, Hashable, Sendable {
                /// The name of the function to call.
                ///
                /// - Remark: Generated from `#/components/schemas/ChatCompletionNamedToolChoice/function/name`.
                public var name: Swift.String
                /// Creates a new `FunctionPayload`.
                ///
                /// - Parameters:
                ///   - name: The name of the function to call.
                public init(name: Swift.String) {
                    self.name = name
                }
                public enum CodingKeys: String, CodingKey {
                    case name
                }
            }
            /// - Remark: Generated from `#/components/schemas/ChatCompletionNamedToolChoice/function`.
            public var function: Components.Schemas.ChatCompletionNamedToolChoice.FunctionPayload
            /// Creates a new `ChatCompletionNamedToolChoice`.
            ///
            /// - Parameters:
            ///   - _type: The type of the tool. Currently, only `function` is supported.
            ///   - function:
            public init(
                _type: Components.Schemas.ChatCompletionNamedToolChoice._TypePayload,
                function: Components.Schemas.ChatCompletionNamedToolChoice.FunctionPayload
            ) {
                self._type = _type
                self.function = function
            }
            public enum CodingKeys: String, CodingKey {
                case _type = "type"
                case function
            }
        }
        /// Messages sent by the model in response to user messages.
        ///
        ///
        /// - Remark: Generated from `#/components/schemas/ChatCompletionRequestAssistantMessage`.
        public struct ChatCompletionRequestAssistantMessage: Codable, Hashable, Sendable {
            /// The contents of the assistant message. Required unless `tool_calls` or `function_call` is specified.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/ChatCompletionRequestAssistantMessage/content`.
            @frozen public enum ContentPayload: Codable, Hashable, Sendable {
                /// The contents of the assistant message.
                ///
                /// - Remark: Generated from `#/components/schemas/ChatCompletionRequestAssistantMessage/content/case1`.
                case case1(Swift.String)
                /// An array of content parts with a defined type. Can be one or more of type `text`, or exactly one of type `refusal`.
                ///
                /// - Remark: Generated from `#/components/schemas/ChatCompletionRequestAssistantMessage/content/case2`.
                case case2([Components.Schemas.ChatCompletionRequestAssistantMessageContentPart])
                public init(from decoder: any Decoder) throws {
                    var errors: [any Error] = []
                    do {
                        self = .case1(try decoder.decodeFromSingleValueContainer())
                        return
                    } catch {
                        errors.append(error)
                    }
                    do {
                        self = .case2(try decoder.decodeFromSingleValueContainer())
                        return
                    } catch {
                        errors.append(error)
                    }
                    throw Swift.DecodingError.failedToDecodeOneOfSchema(
                        type: Self.self,
                        codingPath: decoder.codingPath,
                        errors: errors
                    )
                }
                public func encode(to encoder: any Encoder) throws {
                    switch self {
                    case let .case1(value):
                        try encoder.encodeToSingleValueContainer(value)
                    case let .case2(value):
                        try encoder.encodeToSingleValueContainer(value)
                    }
                }
            }
            /// The contents of the assistant message. Required unless `tool_calls` or `function_call` is specified.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/ChatCompletionRequestAssistantMessage/content`.
            public var content: Components.Schemas.ChatCompletionRequestAssistantMessage.ContentPayload?
            /// The refusal message by the assistant.
            ///
            /// - Remark: Generated from `#/components/schemas/ChatCompletionRequestAssistantMessage/refusal`.
            public var refusal: Swift.String?
            /// The role of the messages author, in this case `assistant`.
            ///
            /// - Remark: Generated from `#/components/schemas/ChatCompletionRequestAssistantMessage/role`.
            @frozen public enum RolePayload: String, Codable, Hashable, Sendable, CaseIterable {
                case assistant = "assistant"
            }
            /// The role of the messages author, in this case `assistant`.
            ///
            /// - Remark: Generated from `#/components/schemas/ChatCompletionRequestAssistantMessage/role`.
            public var role: Components.Schemas.ChatCompletionRequestAssistantMessage.RolePayload
            /// An optional name for the participant. Provides the model information to differentiate between participants of the same role.
            ///
            /// - Remark: Generated from `#/components/schemas/ChatCompletionRequestAssistantMessage/name`.
            public var name: Swift.String?
            /// Data about a previous audio response from the model. 
            /// [Learn more](/docs/guides/audio).
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/ChatCompletionRequestAssistantMessage/audio`.
            public struct AudioPayload: Codable, Hashable, Sendable {
                /// Unique identifier for a previous audio response from the model.
                ///
                ///
                /// - Remark: Generated from `#/components/schemas/ChatCompletionRequestAssistantMessage/audio/id`.
                public var id: Swift.String
                /// Creates a new `AudioPayload`.
                ///
                /// - Parameters:
                ///   - id: Unique identifier for a previous audio response from the model.
                public init(id: Swift.String) {
                    self.id = id
                }
                public enum CodingKeys: String, CodingKey {
                    case id
                }
            }
            /// Data about a previous audio response from the model. 
            /// [Learn more](/docs/guides/audio).
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/ChatCompletionRequestAssistantMessage/audio`.
            public var audio: Components.Schemas.ChatCompletionRequestAssistantMessage.AudioPayload?
            /// - Remark: Generated from `#/components/schemas/ChatCompletionRequestAssistantMessage/tool_calls`.
            public var toolCalls: Components.Schemas.ChatCompletionMessageToolCalls?
            /// Deprecated and replaced by `tool_calls`. The name and arguments of a function that should be called, as generated by the model.
            ///
            /// - Remark: Generated from `#/components/schemas/ChatCompletionRequestAssistantMessage/function_call`.
            @available(*, deprecated)
            public struct FunctionCallPayload: Codable, Hashable, Sendable {
                /// The arguments to call the function with, as generated by the model in JSON format. Note that the model does not always generate valid JSON, and may hallucinate parameters not defined by your function schema. Validate the arguments in your code before calling your function.
                ///
                /// - Remark: Generated from `#/components/schemas/ChatCompletionRequestAssistantMessage/function_call/arguments`.
                public var arguments: Swift.String
                /// The name of the function to call.
                ///
                /// - Remark: Generated from `#/components/schemas/ChatCompletionRequestAssistantMessage/function_call/name`.
                public var name: Swift.String
                /// Creates a new `FunctionCallPayload`.
                ///
                /// - Parameters:
                ///   - arguments: The arguments to call the function with, as generated by the model in JSON format. Note that the model does not always generate valid JSON, and may hallucinate parameters not defined by your function schema. Validate the arguments in your code before calling your function.
                ///   - name: The name of the function to call.
                public init(
                    arguments: Swift.String,
                    name: Swift.String
                ) {
                    self.arguments = arguments
                    self.name = name
                }
                public enum CodingKeys: String, CodingKey {
                    case arguments
                    case name
                }
            }
            /// Deprecated and replaced by `tool_calls`. The name and arguments of a function that should be called, as generated by the model.
            ///
            /// - Remark: Generated from `#/components/schemas/ChatCompletionRequestAssistantMessage/function_call`.
            @available(*, deprecated)
            public var functionCall: Components.Schemas.ChatCompletionRequestAssistantMessage.FunctionCallPayload?
            /// Creates a new `ChatCompletionRequestAssistantMessage`.
            ///
            /// - Parameters:
            ///   - content: The contents of the assistant message. Required unless `tool_calls` or `function_call` is specified.
            ///   - refusal: The refusal message by the assistant.
            ///   - role: The role of the messages author, in this case `assistant`.
            ///   - name: An optional name for the participant. Provides the model information to differentiate between participants of the same role.
            ///   - audio: Data about a previous audio response from the model. 
            ///   - toolCalls:
            ///   - functionCall: Deprecated and replaced by `tool_calls`. The name and arguments of a function that should be called, as generated by the model.
            public init(
                content: Components.Schemas.ChatCompletionRequestAssistantMessage.ContentPayload? = nil,
                refusal: Swift.String? = nil,
                role: Components.Schemas.ChatCompletionRequestAssistantMessage.RolePayload,
                name: Swift.String? = nil,
                audio: Components.Schemas.ChatCompletionRequestAssistantMessage.AudioPayload? = nil,
                toolCalls: Components.Schemas.ChatCompletionMessageToolCalls? = nil,
                functionCall: Components.Schemas.ChatCompletionRequestAssistantMessage.FunctionCallPayload? = nil
            ) {
                self.content = content
                self.refusal = refusal
                self.role = role
                self.name = name
                self.audio = audio
                self.toolCalls = toolCalls
                self.functionCall = functionCall
            }
            public enum CodingKeys: String, CodingKey {
                case content
                case refusal
                case role
                case name
                case audio
                case toolCalls = "tool_calls"
                case functionCall = "function_call"
            }
        }
        /// - Remark: Generated from `#/components/schemas/ChatCompletionRequestAssistantMessageContentPart`.
        @frozen public enum ChatCompletionRequestAssistantMessageContentPart: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/ChatCompletionRequestAssistantMessageContentPart/case1`.
            case ChatCompletionRequestMessageContentPartText(Components.Schemas.ChatCompletionRequestMessageContentPartText)
            /// - Remark: Generated from `#/components/schemas/ChatCompletionRequestAssistantMessageContentPart/case2`.
            case ChatCompletionRequestMessageContentPartRefusal(Components.Schemas.ChatCompletionRequestMessageContentPartRefusal)
            public init(from decoder: any Decoder) throws {
                var errors: [any Error] = []
                do {
                    self = .ChatCompletionRequestMessageContentPartText(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                do {
                    self = .ChatCompletionRequestMessageContentPartRefusal(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                throw Swift.DecodingError.failedToDecodeOneOfSchema(
                    type: Self.self,
                    codingPath: decoder.codingPath,
                    errors: errors
                )
            }
            public func encode(to encoder: any Encoder) throws {
                switch self {
                case let .ChatCompletionRequestMessageContentPartText(value):
                    try value.encode(to: encoder)
                case let .ChatCompletionRequestMessageContentPartRefusal(value):
                    try value.encode(to: encoder)
                }
            }
        }
        /// Developer-provided instructions that the model should follow, regardless of
        /// messages sent by the user. With o1 models and newer, `developer` messages
        /// replace the previous `system` messages.
        ///
        ///
        /// - Remark: Generated from `#/components/schemas/ChatCompletionRequestDeveloperMessage`.
        public struct ChatCompletionRequestDeveloperMessage: Codable, Hashable, Sendable {
            /// The contents of the developer message.
            ///
            /// - Remark: Generated from `#/components/schemas/ChatCompletionRequestDeveloperMessage/content`.
            @frozen public enum ContentPayload: Codable, Hashable, Sendable {
                /// The contents of the developer message.
                ///
                /// - Remark: Generated from `#/components/schemas/ChatCompletionRequestDeveloperMessage/content/case1`.
                case case1(Swift.String)
                /// An array of content parts with a defined type. For developer messages, only type `text` is supported.
                ///
                /// - Remark: Generated from `#/components/schemas/ChatCompletionRequestDeveloperMessage/content/case2`.
                case case2([Components.Schemas.ChatCompletionRequestMessageContentPartText])
                public init(from decoder: any Decoder) throws {
                    var errors: [any Error] = []
                    do {
                        self = .case1(try decoder.decodeFromSingleValueContainer())
                        return
                    } catch {
                        errors.append(error)
                    }
                    do {
                        self = .case2(try decoder.decodeFromSingleValueContainer())
                        return
                    } catch {
                        errors.append(error)
                    }
                    throw Swift.DecodingError.failedToDecodeOneOfSchema(
                        type: Self.self,
                        codingPath: decoder.codingPath,
                        errors: errors
                    )
                }
                public func encode(to encoder: any Encoder) throws {
                    switch self {
                    case let .case1(value):
                        try encoder.encodeToSingleValueContainer(value)
                    case let .case2(value):
                        try encoder.encodeToSingleValueContainer(value)
                    }
                }
            }
            /// The contents of the developer message.
            ///
            /// - Remark: Generated from `#/components/schemas/ChatCompletionRequestDeveloperMessage/content`.
            public var content: Components.Schemas.ChatCompletionRequestDeveloperMessage.ContentPayload
            /// The role of the messages author, in this case `developer`.
            ///
            /// - Remark: Generated from `#/components/schemas/ChatCompletionRequestDeveloperMessage/role`.
            @frozen public enum RolePayload: String, Codable, Hashable, Sendable, CaseIterable {
                case developer = "developer"
            }
            /// The role of the messages author, in this case `developer`.
            ///
            /// - Remark: Generated from `#/components/schemas/ChatCompletionRequestDeveloperMessage/role`.
            public var role: Components.Schemas.ChatCompletionRequestDeveloperMessage.RolePayload
            /// An optional name for the participant. Provides the model information to differentiate between participants of the same role.
            ///
            /// - Remark: Generated from `#/components/schemas/ChatCompletionRequestDeveloperMessage/name`.
            public var name: Swift.String?
            /// Creates a new `ChatCompletionRequestDeveloperMessage`.
            ///
            /// - Parameters:
            ///   - content: The contents of the developer message.
            ///   - role: The role of the messages author, in this case `developer`.
            ///   - name: An optional name for the participant. Provides the model information to differentiate between participants of the same role.
            public init(
                content: Components.Schemas.ChatCompletionRequestDeveloperMessage.ContentPayload,
                role: Components.Schemas.ChatCompletionRequestDeveloperMessage.RolePayload,
                name: Swift.String? = nil
            ) {
                self.content = content
                self.role = role
                self.name = name
            }
            public enum CodingKeys: String, CodingKey {
                case content
                case role
                case name
            }
        }
        /// - Remark: Generated from `#/components/schemas/ChatCompletionRequestFunctionMessage`.
        @available(*, deprecated)
        public struct ChatCompletionRequestFunctionMessage: Codable, Hashable, Sendable {
            /// The role of the messages author, in this case `function`.
            ///
            /// - Remark: Generated from `#/components/schemas/ChatCompletionRequestFunctionMessage/role`.
            @frozen public enum RolePayload: String, Codable, Hashable, Sendable, CaseIterable {
                case function = "function"
            }
            /// The role of the messages author, in this case `function`.
            ///
            /// - Remark: Generated from `#/components/schemas/ChatCompletionRequestFunctionMessage/role`.
            public var role: Components.Schemas.ChatCompletionRequestFunctionMessage.RolePayload
            /// The contents of the function message.
            ///
            /// - Remark: Generated from `#/components/schemas/ChatCompletionRequestFunctionMessage/content`.
            public var content: Swift.String?
            /// The name of the function to call.
            ///
            /// - Remark: Generated from `#/components/schemas/ChatCompletionRequestFunctionMessage/name`.
            public var name: Swift.String
            /// Creates a new `ChatCompletionRequestFunctionMessage`.
            ///
            /// - Parameters:
            ///   - role: The role of the messages author, in this case `function`.
            ///   - content: The contents of the function message.
            ///   - name: The name of the function to call.
            public init(
                role: Components.Schemas.ChatCompletionRequestFunctionMessage.RolePayload,
                content: Swift.String? = nil,
                name: Swift.String
            ) {
                self.role = role
                self.content = content
                self.name = name
            }
            public enum CodingKeys: String, CodingKey {
                case role
                case content
                case name
            }
        }
        /// - Remark: Generated from `#/components/schemas/ChatCompletionRequestMessage`.
        @frozen public enum ChatCompletionRequestMessage: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/ChatCompletionRequestMessage/case1`.
            case ChatCompletionRequestDeveloperMessage(Components.Schemas.ChatCompletionRequestDeveloperMessage)
            /// - Remark: Generated from `#/components/schemas/ChatCompletionRequestMessage/case2`.
            case ChatCompletionRequestSystemMessage(Components.Schemas.ChatCompletionRequestSystemMessage)
            /// - Remark: Generated from `#/components/schemas/ChatCompletionRequestMessage/case3`.
            case ChatCompletionRequestUserMessage(Components.Schemas.ChatCompletionRequestUserMessage)
            /// - Remark: Generated from `#/components/schemas/ChatCompletionRequestMessage/case4`.
            case ChatCompletionRequestAssistantMessage(Components.Schemas.ChatCompletionRequestAssistantMessage)
            /// - Remark: Generated from `#/components/schemas/ChatCompletionRequestMessage/case5`.
            case ChatCompletionRequestToolMessage(Components.Schemas.ChatCompletionRequestToolMessage)
            /// - Remark: Generated from `#/components/schemas/ChatCompletionRequestMessage/case6`.
            case ChatCompletionRequestFunctionMessage(Components.Schemas.ChatCompletionRequestFunctionMessage)
            public init(from decoder: any Decoder) throws {
                var errors: [any Error] = []
                do {
                    self = .ChatCompletionRequestDeveloperMessage(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                do {
                    self = .ChatCompletionRequestSystemMessage(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                do {
                    self = .ChatCompletionRequestUserMessage(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                do {
                    self = .ChatCompletionRequestAssistantMessage(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                do {
                    self = .ChatCompletionRequestToolMessage(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                do {
                    self = .ChatCompletionRequestFunctionMessage(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                throw Swift.DecodingError.failedToDecodeOneOfSchema(
                    type: Self.self,
                    codingPath: decoder.codingPath,
                    errors: errors
                )
            }
            public func encode(to encoder: any Encoder) throws {
                switch self {
                case let .ChatCompletionRequestDeveloperMessage(value):
                    try value.encode(to: encoder)
                case let .ChatCompletionRequestSystemMessage(value):
                    try value.encode(to: encoder)
                case let .ChatCompletionRequestUserMessage(value):
                    try value.encode(to: encoder)
                case let .ChatCompletionRequestAssistantMessage(value):
                    try value.encode(to: encoder)
                case let .ChatCompletionRequestToolMessage(value):
                    try value.encode(to: encoder)
                case let .ChatCompletionRequestFunctionMessage(value):
                    try value.encode(to: encoder)
                }
            }
        }
        /// Learn about [audio inputs](/docs/guides/audio).
        ///
        ///
        /// - Remark: Generated from `#/components/schemas/ChatCompletionRequestMessageContentPartAudio`.
        public struct ChatCompletionRequestMessageContentPartAudio: Codable, Hashable, Sendable {
            /// The type of the content part. Always `input_audio`.
            ///
            /// - Remark: Generated from `#/components/schemas/ChatCompletionRequestMessageContentPartAudio/type`.
            @frozen public enum _TypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                case inputAudio = "input_audio"
            }
            /// The type of the content part. Always `input_audio`.
            ///
            /// - Remark: Generated from `#/components/schemas/ChatCompletionRequestMessageContentPartAudio/type`.
            public var _type: Components.Schemas.ChatCompletionRequestMessageContentPartAudio._TypePayload
            /// - Remark: Generated from `#/components/schemas/ChatCompletionRequestMessageContentPartAudio/input_audio`.
            public struct InputAudioPayload: Codable, Hashable, Sendable {
                /// Base64 encoded audio data.
                ///
                /// - Remark: Generated from `#/components/schemas/ChatCompletionRequestMessageContentPartAudio/input_audio/data`.
                public var data: Swift.String
                /// The format of the encoded audio data. Currently supports "wav" and "mp3".
                ///
                ///
                /// - Remark: Generated from `#/components/schemas/ChatCompletionRequestMessageContentPartAudio/input_audio/format`.
                @frozen public enum FormatPayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case wav = "wav"
                    case mp3 = "mp3"
                }
                /// The format of the encoded audio data. Currently supports "wav" and "mp3".
                ///
                ///
                /// - Remark: Generated from `#/components/schemas/ChatCompletionRequestMessageContentPartAudio/input_audio/format`.
                public var format: Components.Schemas.ChatCompletionRequestMessageContentPartAudio.InputAudioPayload.FormatPayload
                /// Creates a new `InputAudioPayload`.
                ///
                /// - Parameters:
                ///   - data: Base64 encoded audio data.
                ///   - format: The format of the encoded audio data. Currently supports "wav" and "mp3".
                public init(
                    data: Swift.String,
                    format: Components.Schemas.ChatCompletionRequestMessageContentPartAudio.InputAudioPayload.FormatPayload
                ) {
                    self.data = data
                    self.format = format
                }
                public enum CodingKeys: String, CodingKey {
                    case data
                    case format
                }
            }
            /// - Remark: Generated from `#/components/schemas/ChatCompletionRequestMessageContentPartAudio/input_audio`.
            public var inputAudio: Components.Schemas.ChatCompletionRequestMessageContentPartAudio.InputAudioPayload
            /// Creates a new `ChatCompletionRequestMessageContentPartAudio`.
            ///
            /// - Parameters:
            ///   - _type: The type of the content part. Always `input_audio`.
            ///   - inputAudio:
            public init(
                _type: Components.Schemas.ChatCompletionRequestMessageContentPartAudio._TypePayload,
                inputAudio: Components.Schemas.ChatCompletionRequestMessageContentPartAudio.InputAudioPayload
            ) {
                self._type = _type
                self.inputAudio = inputAudio
            }
            public enum CodingKeys: String, CodingKey {
                case _type = "type"
                case inputAudio = "input_audio"
            }
        }
        /// Learn about [image inputs](/docs/guides/vision).
        ///
        ///
        /// - Remark: Generated from `#/components/schemas/ChatCompletionRequestMessageContentPartImage`.
        public struct ChatCompletionRequestMessageContentPartImage: Codable, Hashable, Sendable {
            /// The type of the content part.
            ///
            /// - Remark: Generated from `#/components/schemas/ChatCompletionRequestMessageContentPartImage/type`.
            @frozen public enum _TypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                case imageUrl = "image_url"
            }
            /// The type of the content part.
            ///
            /// - Remark: Generated from `#/components/schemas/ChatCompletionRequestMessageContentPartImage/type`.
            public var _type: Components.Schemas.ChatCompletionRequestMessageContentPartImage._TypePayload
            /// - Remark: Generated from `#/components/schemas/ChatCompletionRequestMessageContentPartImage/image_url`.
            public struct ImageUrlPayload: Codable, Hashable, Sendable {
                /// Either a URL of the image or the base64 encoded image data.
                ///
                /// - Remark: Generated from `#/components/schemas/ChatCompletionRequestMessageContentPartImage/image_url/url`.
                public var url: Swift.String
                /// Specifies the detail level of the image. Learn more in the [Vision guide](/docs/guides/vision#low-or-high-fidelity-image-understanding).
                ///
                /// - Remark: Generated from `#/components/schemas/ChatCompletionRequestMessageContentPartImage/image_url/detail`.
                @frozen public enum DetailPayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case auto = "auto"
                    case low = "low"
                    case high = "high"
                }
                /// Specifies the detail level of the image. Learn more in the [Vision guide](/docs/guides/vision#low-or-high-fidelity-image-understanding).
                ///
                /// - Remark: Generated from `#/components/schemas/ChatCompletionRequestMessageContentPartImage/image_url/detail`.
                public var detail: Components.Schemas.ChatCompletionRequestMessageContentPartImage.ImageUrlPayload.DetailPayload?
                /// Creates a new `ImageUrlPayload`.
                ///
                /// - Parameters:
                ///   - url: Either a URL of the image or the base64 encoded image data.
                ///   - detail: Specifies the detail level of the image. Learn more in the [Vision guide](/docs/guides/vision#low-or-high-fidelity-image-understanding).
                public init(
                    url: Swift.String,
                    detail: Components.Schemas.ChatCompletionRequestMessageContentPartImage.ImageUrlPayload.DetailPayload? = nil
                ) {
                    self.url = url
                    self.detail = detail
                }
                public enum CodingKeys: String, CodingKey {
                    case url
                    case detail
                }
            }
            /// - Remark: Generated from `#/components/schemas/ChatCompletionRequestMessageContentPartImage/image_url`.
            public var imageUrl: Components.Schemas.ChatCompletionRequestMessageContentPartImage.ImageUrlPayload
            /// Creates a new `ChatCompletionRequestMessageContentPartImage`.
            ///
            /// - Parameters:
            ///   - _type: The type of the content part.
            ///   - imageUrl:
            public init(
                _type: Components.Schemas.ChatCompletionRequestMessageContentPartImage._TypePayload,
                imageUrl: Components.Schemas.ChatCompletionRequestMessageContentPartImage.ImageUrlPayload
            ) {
                self._type = _type
                self.imageUrl = imageUrl
            }
            public enum CodingKeys: String, CodingKey {
                case _type = "type"
                case imageUrl = "image_url"
            }
        }
        /// - Remark: Generated from `#/components/schemas/ChatCompletionRequestMessageContentPartRefusal`.
        public struct ChatCompletionRequestMessageContentPartRefusal: Codable, Hashable, Sendable {
            /// The type of the content part.
            ///
            /// - Remark: Generated from `#/components/schemas/ChatCompletionRequestMessageContentPartRefusal/type`.
            @frozen public enum _TypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                case refusal = "refusal"
            }
            /// The type of the content part.
            ///
            /// - Remark: Generated from `#/components/schemas/ChatCompletionRequestMessageContentPartRefusal/type`.
            public var _type: Components.Schemas.ChatCompletionRequestMessageContentPartRefusal._TypePayload
            /// The refusal message generated by the model.
            ///
            /// - Remark: Generated from `#/components/schemas/ChatCompletionRequestMessageContentPartRefusal/refusal`.
            public var refusal: Swift.String
            /// Creates a new `ChatCompletionRequestMessageContentPartRefusal`.
            ///
            /// - Parameters:
            ///   - _type: The type of the content part.
            ///   - refusal: The refusal message generated by the model.
            public init(
                _type: Components.Schemas.ChatCompletionRequestMessageContentPartRefusal._TypePayload,
                refusal: Swift.String
            ) {
                self._type = _type
                self.refusal = refusal
            }
            public enum CodingKeys: String, CodingKey {
                case _type = "type"
                case refusal
            }
        }
        /// Learn about [text inputs](/docs/guides/text-generation).
        ///
        ///
        /// - Remark: Generated from `#/components/schemas/ChatCompletionRequestMessageContentPartText`.
        public struct ChatCompletionRequestMessageContentPartText: Codable, Hashable, Sendable {
            /// The type of the content part.
            ///
            /// - Remark: Generated from `#/components/schemas/ChatCompletionRequestMessageContentPartText/type`.
            @frozen public enum _TypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                case text = "text"
            }
            /// The type of the content part.
            ///
            /// - Remark: Generated from `#/components/schemas/ChatCompletionRequestMessageContentPartText/type`.
            public var _type: Components.Schemas.ChatCompletionRequestMessageContentPartText._TypePayload
            /// The text content.
            ///
            /// - Remark: Generated from `#/components/schemas/ChatCompletionRequestMessageContentPartText/text`.
            public var text: Swift.String
            /// Creates a new `ChatCompletionRequestMessageContentPartText`.
            ///
            /// - Parameters:
            ///   - _type: The type of the content part.
            ///   - text: The text content.
            public init(
                _type: Components.Schemas.ChatCompletionRequestMessageContentPartText._TypePayload,
                text: Swift.String
            ) {
                self._type = _type
                self.text = text
            }
            public enum CodingKeys: String, CodingKey {
                case _type = "type"
                case text
            }
        }
        /// Developer-provided instructions that the model should follow, regardless of
        /// messages sent by the user. With o1 models and newer, use `developer` messages
        /// for this purpose instead.
        ///
        ///
        /// - Remark: Generated from `#/components/schemas/ChatCompletionRequestSystemMessage`.
        public struct ChatCompletionRequestSystemMessage: Codable, Hashable, Sendable {
            /// The contents of the system message.
            ///
            /// - Remark: Generated from `#/components/schemas/ChatCompletionRequestSystemMessage/content`.
            @frozen public enum ContentPayload: Codable, Hashable, Sendable {
                /// The contents of the system message.
                ///
                /// - Remark: Generated from `#/components/schemas/ChatCompletionRequestSystemMessage/content/case1`.
                case case1(Swift.String)
                /// An array of content parts with a defined type. For system messages, only type `text` is supported.
                ///
                /// - Remark: Generated from `#/components/schemas/ChatCompletionRequestSystemMessage/content/case2`.
                case case2([Components.Schemas.ChatCompletionRequestSystemMessageContentPart])
                public init(from decoder: any Decoder) throws {
                    var errors: [any Error] = []
                    do {
                        self = .case1(try decoder.decodeFromSingleValueContainer())
                        return
                    } catch {
                        errors.append(error)
                    }
                    do {
                        self = .case2(try decoder.decodeFromSingleValueContainer())
                        return
                    } catch {
                        errors.append(error)
                    }
                    throw Swift.DecodingError.failedToDecodeOneOfSchema(
                        type: Self.self,
                        codingPath: decoder.codingPath,
                        errors: errors
                    )
                }
                public func encode(to encoder: any Encoder) throws {
                    switch self {
                    case let .case1(value):
                        try encoder.encodeToSingleValueContainer(value)
                    case let .case2(value):
                        try encoder.encodeToSingleValueContainer(value)
                    }
                }
            }
            /// The contents of the system message.
            ///
            /// - Remark: Generated from `#/components/schemas/ChatCompletionRequestSystemMessage/content`.
            public var content: Components.Schemas.ChatCompletionRequestSystemMessage.ContentPayload
            /// The role of the messages author, in this case `system`.
            ///
            /// - Remark: Generated from `#/components/schemas/ChatCompletionRequestSystemMessage/role`.
            @frozen public enum RolePayload: String, Codable, Hashable, Sendable, CaseIterable {
                case system = "system"
            }
            /// The role of the messages author, in this case `system`.
            ///
            /// - Remark: Generated from `#/components/schemas/ChatCompletionRequestSystemMessage/role`.
            public var role: Components.Schemas.ChatCompletionRequestSystemMessage.RolePayload
            /// An optional name for the participant. Provides the model information to differentiate between participants of the same role.
            ///
            /// - Remark: Generated from `#/components/schemas/ChatCompletionRequestSystemMessage/name`.
            public var name: Swift.String?
            /// Creates a new `ChatCompletionRequestSystemMessage`.
            ///
            /// - Parameters:
            ///   - content: The contents of the system message.
            ///   - role: The role of the messages author, in this case `system`.
            ///   - name: An optional name for the participant. Provides the model information to differentiate between participants of the same role.
            public init(
                content: Components.Schemas.ChatCompletionRequestSystemMessage.ContentPayload,
                role: Components.Schemas.ChatCompletionRequestSystemMessage.RolePayload,
                name: Swift.String? = nil
            ) {
                self.content = content
                self.role = role
                self.name = name
            }
            public enum CodingKeys: String, CodingKey {
                case content
                case role
                case name
            }
        }
        /// - Remark: Generated from `#/components/schemas/ChatCompletionRequestSystemMessageContentPart`.
        @frozen public enum ChatCompletionRequestSystemMessageContentPart: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/ChatCompletionRequestSystemMessageContentPart/case1`.
            case ChatCompletionRequestMessageContentPartText(Components.Schemas.ChatCompletionRequestMessageContentPartText)
            public init(from decoder: any Decoder) throws {
                var errors: [any Error] = []
                do {
                    self = .ChatCompletionRequestMessageContentPartText(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                throw Swift.DecodingError.failedToDecodeOneOfSchema(
                    type: Self.self,
                    codingPath: decoder.codingPath,
                    errors: errors
                )
            }
            public func encode(to encoder: any Encoder) throws {
                switch self {
                case let .ChatCompletionRequestMessageContentPartText(value):
                    try value.encode(to: encoder)
                }
            }
        }
        /// - Remark: Generated from `#/components/schemas/ChatCompletionRequestToolMessage`.
        public struct ChatCompletionRequestToolMessage: Codable, Hashable, Sendable {
            /// The role of the messages author, in this case `tool`.
            ///
            /// - Remark: Generated from `#/components/schemas/ChatCompletionRequestToolMessage/role`.
            @frozen public enum RolePayload: String, Codable, Hashable, Sendable, CaseIterable {
                case tool = "tool"
            }
            /// The role of the messages author, in this case `tool`.
            ///
            /// - Remark: Generated from `#/components/schemas/ChatCompletionRequestToolMessage/role`.
            public var role: Components.Schemas.ChatCompletionRequestToolMessage.RolePayload
            /// The contents of the tool message.
            ///
            /// - Remark: Generated from `#/components/schemas/ChatCompletionRequestToolMessage/content`.
            @frozen public enum ContentPayload: Codable, Hashable, Sendable {
                /// The contents of the tool message.
                ///
                /// - Remark: Generated from `#/components/schemas/ChatCompletionRequestToolMessage/content/case1`.
                case case1(Swift.String)
                /// An array of content parts with a defined type. For tool messages, only type `text` is supported.
                ///
                /// - Remark: Generated from `#/components/schemas/ChatCompletionRequestToolMessage/content/case2`.
                case case2([Components.Schemas.ChatCompletionRequestToolMessageContentPart])
                public init(from decoder: any Decoder) throws {
                    var errors: [any Error] = []
                    do {
                        self = .case1(try decoder.decodeFromSingleValueContainer())
                        return
                    } catch {
                        errors.append(error)
                    }
                    do {
                        self = .case2(try decoder.decodeFromSingleValueContainer())
                        return
                    } catch {
                        errors.append(error)
                    }
                    throw Swift.DecodingError.failedToDecodeOneOfSchema(
                        type: Self.self,
                        codingPath: decoder.codingPath,
                        errors: errors
                    )
                }
                public func encode(to encoder: any Encoder) throws {
                    switch self {
                    case let .case1(value):
                        try encoder.encodeToSingleValueContainer(value)
                    case let .case2(value):
                        try encoder.encodeToSingleValueContainer(value)
                    }
                }
            }
            /// The contents of the tool message.
            ///
            /// - Remark: Generated from `#/components/schemas/ChatCompletionRequestToolMessage/content`.
            public var content: Components.Schemas.ChatCompletionRequestToolMessage.ContentPayload
            /// Tool call that this message is responding to.
            ///
            /// - Remark: Generated from `#/components/schemas/ChatCompletionRequestToolMessage/tool_call_id`.
            public var toolCallId: Swift.String
            /// Creates a new `ChatCompletionRequestToolMessage`.
            ///
            /// - Parameters:
            ///   - role: The role of the messages author, in this case `tool`.
            ///   - content: The contents of the tool message.
            ///   - toolCallId: Tool call that this message is responding to.
            public init(
                role: Components.Schemas.ChatCompletionRequestToolMessage.RolePayload,
                content: Components.Schemas.ChatCompletionRequestToolMessage.ContentPayload,
                toolCallId: Swift.String
            ) {
                self.role = role
                self.content = content
                self.toolCallId = toolCallId
            }
            public enum CodingKeys: String, CodingKey {
                case role
                case content
                case toolCallId = "tool_call_id"
            }
        }
        /// - Remark: Generated from `#/components/schemas/ChatCompletionRequestToolMessageContentPart`.
        @frozen public enum ChatCompletionRequestToolMessageContentPart: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/ChatCompletionRequestToolMessageContentPart/case1`.
            case ChatCompletionRequestMessageContentPartText(Components.Schemas.ChatCompletionRequestMessageContentPartText)
            public init(from decoder: any Decoder) throws {
                var errors: [any Error] = []
                do {
                    self = .ChatCompletionRequestMessageContentPartText(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                throw Swift.DecodingError.failedToDecodeOneOfSchema(
                    type: Self.self,
                    codingPath: decoder.codingPath,
                    errors: errors
                )
            }
            public func encode(to encoder: any Encoder) throws {
                switch self {
                case let .ChatCompletionRequestMessageContentPartText(value):
                    try value.encode(to: encoder)
                }
            }
        }
        /// Messages sent by an end user, containing prompts or additional context
        /// information.
        ///
        ///
        /// - Remark: Generated from `#/components/schemas/ChatCompletionRequestUserMessage`.
        public struct ChatCompletionRequestUserMessage: Codable, Hashable, Sendable {
            /// The contents of the user message.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/ChatCompletionRequestUserMessage/content`.
            @frozen public enum ContentPayload: Codable, Hashable, Sendable {
                /// The text contents of the message.
                ///
                /// - Remark: Generated from `#/components/schemas/ChatCompletionRequestUserMessage/content/case1`.
                case case1(Swift.String)
                /// An array of content parts with a defined type. Supported options differ based on the [model](/docs/models) being used to generate the response. Can contain text, image, or audio inputs.
                ///
                /// - Remark: Generated from `#/components/schemas/ChatCompletionRequestUserMessage/content/case2`.
                case case2([Components.Schemas.ChatCompletionRequestUserMessageContentPart])
                public init(from decoder: any Decoder) throws {
                    var errors: [any Error] = []
                    do {
                        self = .case1(try decoder.decodeFromSingleValueContainer())
                        return
                    } catch {
                        errors.append(error)
                    }
                    do {
                        self = .case2(try decoder.decodeFromSingleValueContainer())
                        return
                    } catch {
                        errors.append(error)
                    }
                    throw Swift.DecodingError.failedToDecodeOneOfSchema(
                        type: Self.self,
                        codingPath: decoder.codingPath,
                        errors: errors
                    )
                }
                public func encode(to encoder: any Encoder) throws {
                    switch self {
                    case let .case1(value):
                        try encoder.encodeToSingleValueContainer(value)
                    case let .case2(value):
                        try encoder.encodeToSingleValueContainer(value)
                    }
                }
            }
            /// The contents of the user message.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/ChatCompletionRequestUserMessage/content`.
            public var content: Components.Schemas.ChatCompletionRequestUserMessage.ContentPayload
            /// The role of the messages author, in this case `user`.
            ///
            /// - Remark: Generated from `#/components/schemas/ChatCompletionRequestUserMessage/role`.
            @frozen public enum RolePayload: String, Codable, Hashable, Sendable, CaseIterable {
                case user = "user"
            }
            /// The role of the messages author, in this case `user`.
            ///
            /// - Remark: Generated from `#/components/schemas/ChatCompletionRequestUserMessage/role`.
            public var role: Components.Schemas.ChatCompletionRequestUserMessage.RolePayload
            /// An optional name for the participant. Provides the model information to differentiate between participants of the same role.
            ///
            /// - Remark: Generated from `#/components/schemas/ChatCompletionRequestUserMessage/name`.
            public var name: Swift.String?
            /// Creates a new `ChatCompletionRequestUserMessage`.
            ///
            /// - Parameters:
            ///   - content: The contents of the user message.
            ///   - role: The role of the messages author, in this case `user`.
            ///   - name: An optional name for the participant. Provides the model information to differentiate between participants of the same role.
            public init(
                content: Components.Schemas.ChatCompletionRequestUserMessage.ContentPayload,
                role: Components.Schemas.ChatCompletionRequestUserMessage.RolePayload,
                name: Swift.String? = nil
            ) {
                self.content = content
                self.role = role
                self.name = name
            }
            public enum CodingKeys: String, CodingKey {
                case content
                case role
                case name
            }
        }
        /// - Remark: Generated from `#/components/schemas/ChatCompletionRequestUserMessageContentPart`.
        @frozen public enum ChatCompletionRequestUserMessageContentPart: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/ChatCompletionRequestUserMessageContentPart/case1`.
            case ChatCompletionRequestMessageContentPartText(Components.Schemas.ChatCompletionRequestMessageContentPartText)
            /// - Remark: Generated from `#/components/schemas/ChatCompletionRequestUserMessageContentPart/case2`.
            case ChatCompletionRequestMessageContentPartImage(Components.Schemas.ChatCompletionRequestMessageContentPartImage)
            /// - Remark: Generated from `#/components/schemas/ChatCompletionRequestUserMessageContentPart/case3`.
            case ChatCompletionRequestMessageContentPartAudio(Components.Schemas.ChatCompletionRequestMessageContentPartAudio)
            public init(from decoder: any Decoder) throws {
                var errors: [any Error] = []
                do {
                    self = .ChatCompletionRequestMessageContentPartText(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                do {
                    self = .ChatCompletionRequestMessageContentPartImage(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                do {
                    self = .ChatCompletionRequestMessageContentPartAudio(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                throw Swift.DecodingError.failedToDecodeOneOfSchema(
                    type: Self.self,
                    codingPath: decoder.codingPath,
                    errors: errors
                )
            }
            public func encode(to encoder: any Encoder) throws {
                switch self {
                case let .ChatCompletionRequestMessageContentPartText(value):
                    try value.encode(to: encoder)
                case let .ChatCompletionRequestMessageContentPartImage(value):
                    try value.encode(to: encoder)
                case let .ChatCompletionRequestMessageContentPartAudio(value):
                    try value.encode(to: encoder)
                }
            }
        }
        /// A chat completion message generated by the model.
        ///
        /// - Remark: Generated from `#/components/schemas/ChatCompletionResponseMessage`.
        public struct ChatCompletionResponseMessage: Codable, Hashable, Sendable {
            /// The contents of the message.
            ///
            /// - Remark: Generated from `#/components/schemas/ChatCompletionResponseMessage/content`.
            public var content: Swift.String?
            /// The refusal message generated by the model.
            ///
            /// - Remark: Generated from `#/components/schemas/ChatCompletionResponseMessage/refusal`.
            public var refusal: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ChatCompletionResponseMessage/tool_calls`.
            public var toolCalls: Components.Schemas.ChatCompletionMessageToolCalls?
            /// The role of the author of this message.
            ///
            /// - Remark: Generated from `#/components/schemas/ChatCompletionResponseMessage/role`.
            @frozen public enum RolePayload: String, Codable, Hashable, Sendable, CaseIterable {
                case assistant = "assistant"
            }
            /// The role of the author of this message.
            ///
            /// - Remark: Generated from `#/components/schemas/ChatCompletionResponseMessage/role`.
            public var role: Components.Schemas.ChatCompletionResponseMessage.RolePayload
            /// Deprecated and replaced by `tool_calls`. The name and arguments of a function that should be called, as generated by the model.
            ///
            /// - Remark: Generated from `#/components/schemas/ChatCompletionResponseMessage/function_call`.
            @available(*, deprecated)
            public struct FunctionCallPayload: Codable, Hashable, Sendable {
                /// The arguments to call the function with, as generated by the model in JSON format. Note that the model does not always generate valid JSON, and may hallucinate parameters not defined by your function schema. Validate the arguments in your code before calling your function.
                ///
                /// - Remark: Generated from `#/components/schemas/ChatCompletionResponseMessage/function_call/arguments`.
                public var arguments: Swift.String
                /// The name of the function to call.
                ///
                /// - Remark: Generated from `#/components/schemas/ChatCompletionResponseMessage/function_call/name`.
                public var name: Swift.String
                /// Creates a new `FunctionCallPayload`.
                ///
                /// - Parameters:
                ///   - arguments: The arguments to call the function with, as generated by the model in JSON format. Note that the model does not always generate valid JSON, and may hallucinate parameters not defined by your function schema. Validate the arguments in your code before calling your function.
                ///   - name: The name of the function to call.
                public init(
                    arguments: Swift.String,
                    name: Swift.String
                ) {
                    self.arguments = arguments
                    self.name = name
                }
                public enum CodingKeys: String, CodingKey {
                    case arguments
                    case name
                }
            }
            /// Deprecated and replaced by `tool_calls`. The name and arguments of a function that should be called, as generated by the model.
            ///
            /// - Remark: Generated from `#/components/schemas/ChatCompletionResponseMessage/function_call`.
            @available(*, deprecated)
            public var functionCall: Components.Schemas.ChatCompletionResponseMessage.FunctionCallPayload?
            /// If the audio output modality is requested, this object contains data
            /// about the audio response from the model. [Learn more](/docs/guides/audio).
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/ChatCompletionResponseMessage/audio`.
            public struct AudioPayload: Codable, Hashable, Sendable {
                /// Unique identifier for this audio response.
                ///
                /// - Remark: Generated from `#/components/schemas/ChatCompletionResponseMessage/audio/id`.
                public var id: Swift.String
                /// The Unix timestamp (in seconds) for when this audio response will
                /// no longer be accessible on the server for use in multi-turn
                /// conversations.
                ///
                ///
                /// - Remark: Generated from `#/components/schemas/ChatCompletionResponseMessage/audio/expires_at`.
                public var expiresAt: Swift.Int
                /// Base64 encoded audio bytes generated by the model, in the format
                /// specified in the request.
                ///
                ///
                /// - Remark: Generated from `#/components/schemas/ChatCompletionResponseMessage/audio/data`.
                public var data: Swift.String
                /// Transcript of the audio generated by the model.
                ///
                /// - Remark: Generated from `#/components/schemas/ChatCompletionResponseMessage/audio/transcript`.
                public var transcript: Swift.String
                /// Creates a new `AudioPayload`.
                ///
                /// - Parameters:
                ///   - id: Unique identifier for this audio response.
                ///   - expiresAt: The Unix timestamp (in seconds) for when this audio response will
                ///   - data: Base64 encoded audio bytes generated by the model, in the format
                ///   - transcript: Transcript of the audio generated by the model.
                public init(
                    id: Swift.String,
                    expiresAt: Swift.Int,
                    data: Swift.String,
                    transcript: Swift.String
                ) {
                    self.id = id
                    self.expiresAt = expiresAt
                    self.data = data
                    self.transcript = transcript
                }
                public enum CodingKeys: String, CodingKey {
                    case id
                    case expiresAt = "expires_at"
                    case data
                    case transcript
                }
            }
            /// If the audio output modality is requested, this object contains data
            /// about the audio response from the model. [Learn more](/docs/guides/audio).
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/ChatCompletionResponseMessage/audio`.
            public var audio: Components.Schemas.ChatCompletionResponseMessage.AudioPayload?
            /// Creates a new `ChatCompletionResponseMessage`.
            ///
            /// - Parameters:
            ///   - content: The contents of the message.
            ///   - refusal: The refusal message generated by the model.
            ///   - toolCalls:
            ///   - role: The role of the author of this message.
            ///   - functionCall: Deprecated and replaced by `tool_calls`. The name and arguments of a function that should be called, as generated by the model.
            ///   - audio: If the audio output modality is requested, this object contains data
            public init(
                content: Swift.String? = nil,
                refusal: Swift.String? = nil,
                toolCalls: Components.Schemas.ChatCompletionMessageToolCalls? = nil,
                role: Components.Schemas.ChatCompletionResponseMessage.RolePayload,
                functionCall: Components.Schemas.ChatCompletionResponseMessage.FunctionCallPayload? = nil,
                audio: Components.Schemas.ChatCompletionResponseMessage.AudioPayload? = nil
            ) {
                self.content = content
                self.refusal = refusal
                self.toolCalls = toolCalls
                self.role = role
                self.functionCall = functionCall
                self.audio = audio
            }
            public enum CodingKeys: String, CodingKey {
                case content
                case refusal
                case toolCalls = "tool_calls"
                case role
                case functionCall = "function_call"
                case audio
            }
        }
        /// The role of the author of a message
        ///
        /// - Remark: Generated from `#/components/schemas/ChatCompletionRole`.
        @frozen public enum ChatCompletionRole: String, Codable, Hashable, Sendable, CaseIterable {
            case system = "system"
            case user = "user"
            case assistant = "assistant"
            case tool = "tool"
            case function = "function"
        }
        /// Options for streaming response. Only set this when you set `stream: true`.
        ///
        ///
        /// - Remark: Generated from `#/components/schemas/ChatCompletionStreamOptions`.
        public struct ChatCompletionStreamOptions: Codable, Hashable, Sendable {
            /// If set, an additional chunk will be streamed before the `data: [DONE]` message. The `usage` field on this chunk shows the token usage statistics for the entire request, and the `choices` field will always be an empty array. All other chunks will also include a `usage` field, but with a null value.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/ChatCompletionStreamOptions/include_usage`.
            public var includeUsage: Swift.Bool?
            /// Creates a new `ChatCompletionStreamOptions`.
            ///
            /// - Parameters:
            ///   - includeUsage: If set, an additional chunk will be streamed before the `data: [DONE]` message. The `usage` field on this chunk shows the token usage statistics for the entire request, and the `choices` field will always be an empty array. All other chunks will also include a `usage` field, but with a null value.
            public init(includeUsage: Swift.Bool? = nil) {
                self.includeUsage = includeUsage
            }
            public enum CodingKeys: String, CodingKey {
                case includeUsage = "include_usage"
            }
        }
        /// A chat completion delta generated by streamed model responses.
        ///
        /// - Remark: Generated from `#/components/schemas/ChatCompletionStreamResponseDelta`.
        public struct ChatCompletionStreamResponseDelta: Codable, Hashable, Sendable {
            /// The contents of the chunk message.
            ///
            /// - Remark: Generated from `#/components/schemas/ChatCompletionStreamResponseDelta/content`.
            public var content: Swift.String?
            /// Deprecated and replaced by `tool_calls`. The name and arguments of a function that should be called, as generated by the model.
            ///
            /// - Remark: Generated from `#/components/schemas/ChatCompletionStreamResponseDelta/function_call`.
            @available(*, deprecated)
            public struct FunctionCallPayload: Codable, Hashable, Sendable {
                /// The arguments to call the function with, as generated by the model in JSON format. Note that the model does not always generate valid JSON, and may hallucinate parameters not defined by your function schema. Validate the arguments in your code before calling your function.
                ///
                /// - Remark: Generated from `#/components/schemas/ChatCompletionStreamResponseDelta/function_call/arguments`.
                public var arguments: Swift.String?
                /// The name of the function to call.
                ///
                /// - Remark: Generated from `#/components/schemas/ChatCompletionStreamResponseDelta/function_call/name`.
                public var name: Swift.String?
                /// Creates a new `FunctionCallPayload`.
                ///
                /// - Parameters:
                ///   - arguments: The arguments to call the function with, as generated by the model in JSON format. Note that the model does not always generate valid JSON, and may hallucinate parameters not defined by your function schema. Validate the arguments in your code before calling your function.
                ///   - name: The name of the function to call.
                public init(
                    arguments: Swift.String? = nil,
                    name: Swift.String? = nil
                ) {
                    self.arguments = arguments
                    self.name = name
                }
                public enum CodingKeys: String, CodingKey {
                    case arguments
                    case name
                }
            }
            /// Deprecated and replaced by `tool_calls`. The name and arguments of a function that should be called, as generated by the model.
            ///
            /// - Remark: Generated from `#/components/schemas/ChatCompletionStreamResponseDelta/function_call`.
            @available(*, deprecated)
            public var functionCall: Components.Schemas.ChatCompletionStreamResponseDelta.FunctionCallPayload?
            /// - Remark: Generated from `#/components/schemas/ChatCompletionStreamResponseDelta/tool_calls`.
            public var toolCalls: [Components.Schemas.ChatCompletionMessageToolCallChunk]?
            /// The role of the author of this message.
            ///
            /// - Remark: Generated from `#/components/schemas/ChatCompletionStreamResponseDelta/role`.
            @frozen public enum RolePayload: String, Codable, Hashable, Sendable, CaseIterable {
                case system = "system"
                case user = "user"
                case assistant = "assistant"
                case tool = "tool"
            }
            /// The role of the author of this message.
            ///
            /// - Remark: Generated from `#/components/schemas/ChatCompletionStreamResponseDelta/role`.
            public var role: Components.Schemas.ChatCompletionStreamResponseDelta.RolePayload?
            /// The refusal message generated by the model.
            ///
            /// - Remark: Generated from `#/components/schemas/ChatCompletionStreamResponseDelta/refusal`.
            public var refusal: Swift.String?
            /// Creates a new `ChatCompletionStreamResponseDelta`.
            ///
            /// - Parameters:
            ///   - content: The contents of the chunk message.
            ///   - functionCall: Deprecated and replaced by `tool_calls`. The name and arguments of a function that should be called, as generated by the model.
            ///   - toolCalls:
            ///   - role: The role of the author of this message.
            ///   - refusal: The refusal message generated by the model.
            public init(
                content: Swift.String? = nil,
                functionCall: Components.Schemas.ChatCompletionStreamResponseDelta.FunctionCallPayload? = nil,
                toolCalls: [Components.Schemas.ChatCompletionMessageToolCallChunk]? = nil,
                role: Components.Schemas.ChatCompletionStreamResponseDelta.RolePayload? = nil,
                refusal: Swift.String? = nil
            ) {
                self.content = content
                self.functionCall = functionCall
                self.toolCalls = toolCalls
                self.role = role
                self.refusal = refusal
            }
            public enum CodingKeys: String, CodingKey {
                case content
                case functionCall = "function_call"
                case toolCalls = "tool_calls"
                case role
                case refusal
            }
        }
        /// - Remark: Generated from `#/components/schemas/ChatCompletionTokenLogprob`.
        public struct ChatCompletionTokenLogprob: Codable, Hashable, Sendable {
            /// The token.
            ///
            /// - Remark: Generated from `#/components/schemas/ChatCompletionTokenLogprob/token`.
            public var token: Swift.String
            /// The log probability of this token, if it is within the top 20 most likely tokens. Otherwise, the value `-9999.0` is used to signify that the token is very unlikely.
            ///
            /// - Remark: Generated from `#/components/schemas/ChatCompletionTokenLogprob/logprob`.
            public var logprob: Swift.Double
            /// A list of integers representing the UTF-8 bytes representation of the token. Useful in instances where characters are represented by multiple tokens and their byte representations must be combined to generate the correct text representation. Can be `null` if there is no bytes representation for the token.
            ///
            /// - Remark: Generated from `#/components/schemas/ChatCompletionTokenLogprob/bytes`.
            public var bytes: [Swift.Int]?
            /// - Remark: Generated from `#/components/schemas/ChatCompletionTokenLogprob/TopLogprobsPayload`.
            public struct TopLogprobsPayloadPayload: Codable, Hashable, Sendable {
                /// The token.
                ///
                /// - Remark: Generated from `#/components/schemas/ChatCompletionTokenLogprob/TopLogprobsPayload/token`.
                public var token: Swift.String
                /// The log probability of this token, if it is within the top 20 most likely tokens. Otherwise, the value `-9999.0` is used to signify that the token is very unlikely.
                ///
                /// - Remark: Generated from `#/components/schemas/ChatCompletionTokenLogprob/TopLogprobsPayload/logprob`.
                public var logprob: Swift.Double
                /// A list of integers representing the UTF-8 bytes representation of the token. Useful in instances where characters are represented by multiple tokens and their byte representations must be combined to generate the correct text representation. Can be `null` if there is no bytes representation for the token.
                ///
                /// - Remark: Generated from `#/components/schemas/ChatCompletionTokenLogprob/TopLogprobsPayload/bytes`.
                public var bytes: [Swift.Int]?
                /// Creates a new `TopLogprobsPayloadPayload`.
                ///
                /// - Parameters:
                ///   - token: The token.
                ///   - logprob: The log probability of this token, if it is within the top 20 most likely tokens. Otherwise, the value `-9999.0` is used to signify that the token is very unlikely.
                ///   - bytes: A list of integers representing the UTF-8 bytes representation of the token. Useful in instances where characters are represented by multiple tokens and their byte representations must be combined to generate the correct text representation. Can be `null` if there is no bytes representation for the token.
                public init(
                    token: Swift.String,
                    logprob: Swift.Double,
                    bytes: [Swift.Int]? = nil
                ) {
                    self.token = token
                    self.logprob = logprob
                    self.bytes = bytes
                }
                public enum CodingKeys: String, CodingKey {
                    case token
                    case logprob
                    case bytes
                }
            }
            /// List of the most likely tokens and their log probability, at this token position. In rare cases, there may be fewer than the number of requested `top_logprobs` returned.
            ///
            /// - Remark: Generated from `#/components/schemas/ChatCompletionTokenLogprob/top_logprobs`.
            public typealias TopLogprobsPayload = [Components.Schemas.ChatCompletionTokenLogprob.TopLogprobsPayloadPayload]
            /// List of the most likely tokens and their log probability, at this token position. In rare cases, there may be fewer than the number of requested `top_logprobs` returned.
            ///
            /// - Remark: Generated from `#/components/schemas/ChatCompletionTokenLogprob/top_logprobs`.
            public var topLogprobs: Components.Schemas.ChatCompletionTokenLogprob.TopLogprobsPayload
            /// Creates a new `ChatCompletionTokenLogprob`.
            ///
            /// - Parameters:
            ///   - token: The token.
            ///   - logprob: The log probability of this token, if it is within the top 20 most likely tokens. Otherwise, the value `-9999.0` is used to signify that the token is very unlikely.
            ///   - bytes: A list of integers representing the UTF-8 bytes representation of the token. Useful in instances where characters are represented by multiple tokens and their byte representations must be combined to generate the correct text representation. Can be `null` if there is no bytes representation for the token.
            ///   - topLogprobs: List of the most likely tokens and their log probability, at this token position. In rare cases, there may be fewer than the number of requested `top_logprobs` returned.
            public init(
                token: Swift.String,
                logprob: Swift.Double,
                bytes: [Swift.Int]? = nil,
                topLogprobs: Components.Schemas.ChatCompletionTokenLogprob.TopLogprobsPayload
            ) {
                self.token = token
                self.logprob = logprob
                self.bytes = bytes
                self.topLogprobs = topLogprobs
            }
            public enum CodingKeys: String, CodingKey {
                case token
                case logprob
                case bytes
                case topLogprobs = "top_logprobs"
            }
        }
        /// - Remark: Generated from `#/components/schemas/ChatCompletionTool`.
        public struct ChatCompletionTool: Codable, Hashable, Sendable {
            /// The type of the tool. Currently, only `function` is supported.
            ///
            /// - Remark: Generated from `#/components/schemas/ChatCompletionTool/type`.
            @frozen public enum _TypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                case function = "function"
            }
            /// The type of the tool. Currently, only `function` is supported.
            ///
            /// - Remark: Generated from `#/components/schemas/ChatCompletionTool/type`.
            public var _type: Components.Schemas.ChatCompletionTool._TypePayload
            /// - Remark: Generated from `#/components/schemas/ChatCompletionTool/function`.
            public var function: Components.Schemas.FunctionObject
            /// Creates a new `ChatCompletionTool`.
            ///
            /// - Parameters:
            ///   - _type: The type of the tool. Currently, only `function` is supported.
            ///   - function:
            public init(
                _type: Components.Schemas.ChatCompletionTool._TypePayload,
                function: Components.Schemas.FunctionObject
            ) {
                self._type = _type
                self.function = function
            }
            public enum CodingKeys: String, CodingKey {
                case _type = "type"
                case function
            }
        }
        /// Controls which (if any) tool is called by the model.
        /// `none` means the model will not call any tool and instead generates a message.
        /// `auto` means the model can pick between generating a message or calling one or more tools.
        /// `required` means the model must call one or more tools.
        /// Specifying a particular tool via `{"type": "function", "function": {"name": "my_function"}}` forces the model to call that tool.
        ///
        /// `none` is the default when no tools are present. `auto` is the default if tools are present.
        ///
        ///
        /// - Remark: Generated from `#/components/schemas/ChatCompletionToolChoiceOption`.
        @frozen public enum ChatCompletionToolChoiceOption: Codable, Hashable, Sendable {
            /// `none` means the model will not call any tool and instead generates a message. `auto` means the model can pick between generating a message or calling one or more tools. `required` means the model must call one or more tools.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/ChatCompletionToolChoiceOption/case1`.
            @frozen public enum Case1Payload: String, Codable, Hashable, Sendable, CaseIterable {
                case none = "none"
                case auto = "auto"
                case required = "required"
            }
            /// `none` means the model will not call any tool and instead generates a message. `auto` means the model can pick between generating a message or calling one or more tools. `required` means the model must call one or more tools.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/ChatCompletionToolChoiceOption/case1`.
            case case1(Components.Schemas.ChatCompletionToolChoiceOption.Case1Payload)
            /// - Remark: Generated from `#/components/schemas/ChatCompletionToolChoiceOption/case2`.
            case ChatCompletionNamedToolChoice(Components.Schemas.ChatCompletionNamedToolChoice)
            public init(from decoder: any Decoder) throws {
                var errors: [any Error] = []
                do {
                    self = .case1(try decoder.decodeFromSingleValueContainer())
                    return
                } catch {
                    errors.append(error)
                }
                do {
                    self = .ChatCompletionNamedToolChoice(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                throw Swift.DecodingError.failedToDecodeOneOfSchema(
                    type: Self.self,
                    codingPath: decoder.codingPath,
                    errors: errors
                )
            }
            public func encode(to encoder: any Encoder) throws {
                switch self {
                case let .case1(value):
                    try encoder.encodeToSingleValueContainer(value)
                case let .ChatCompletionNamedToolChoice(value):
                    try value.encode(to: encoder)
                }
            }
        }
        /// The chunking strategy used to chunk the file(s). If not set, will use the `auto` strategy.
        ///
        /// - Remark: Generated from `#/components/schemas/ChunkingStrategyRequestParam`.
        @frozen public enum ChunkingStrategyRequestParam: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/ChunkingStrategyRequestParam/case1`.
            case AutoChunkingStrategyRequestParam(Components.Schemas.AutoChunkingStrategyRequestParam)
            /// - Remark: Generated from `#/components/schemas/ChunkingStrategyRequestParam/case2`.
            case StaticChunkingStrategyRequestParam(Components.Schemas.StaticChunkingStrategyRequestParam)
            public init(from decoder: any Decoder) throws {
                var errors: [any Error] = []
                do {
                    self = .AutoChunkingStrategyRequestParam(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                do {
                    self = .StaticChunkingStrategyRequestParam(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                throw Swift.DecodingError.failedToDecodeOneOfSchema(
                    type: Self.self,
                    codingPath: decoder.codingPath,
                    errors: errors
                )
            }
            public func encode(to encoder: any Encoder) throws {
                switch self {
                case let .AutoChunkingStrategyRequestParam(value):
                    try value.encode(to: encoder)
                case let .StaticChunkingStrategyRequestParam(value):
                    try value.encode(to: encoder)
                }
            }
        }
        /// - Remark: Generated from `#/components/schemas/CompleteUploadRequest`.
        public struct CompleteUploadRequest: Codable, Hashable, Sendable {
            /// The ordered list of Part IDs.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/CompleteUploadRequest/part_ids`.
            public var partIds: [Swift.String]
            /// The optional md5 checksum for the file contents to verify if the bytes uploaded matches what you expect.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/CompleteUploadRequest/md5`.
            public var md5: Swift.String?
            /// Creates a new `CompleteUploadRequest`.
            ///
            /// - Parameters:
            ///   - partIds: The ordered list of Part IDs.
            ///   - md5: The optional md5 checksum for the file contents to verify if the bytes uploaded matches what you expect.
            public init(
                partIds: [Swift.String],
                md5: Swift.String? = nil
            ) {
                self.partIds = partIds
                self.md5 = md5
            }
            public enum CodingKeys: String, CodingKey {
                case partIds = "part_ids"
                case md5
            }
            public init(from decoder: any Decoder) throws {
                let container = try decoder.container(keyedBy: CodingKeys.self)
                self.partIds = try container.decode(
                    [Swift.String].self,
                    forKey: .partIds
                )
                self.md5 = try container.decodeIfPresent(
                    Swift.String.self,
                    forKey: .md5
                )
                try decoder.ensureNoAdditionalProperties(knownKeys: [
                    "part_ids",
                    "md5"
                ])
            }
        }
        /// Usage statistics for the completion request.
        ///
        /// - Remark: Generated from `#/components/schemas/CompletionUsage`.
        public struct CompletionUsage: Codable, Hashable, Sendable {
            /// Number of tokens in the generated completion.
            ///
            /// - Remark: Generated from `#/components/schemas/CompletionUsage/completion_tokens`.
            public var completionTokens: Swift.Int
            /// Number of tokens in the prompt.
            ///
            /// - Remark: Generated from `#/components/schemas/CompletionUsage/prompt_tokens`.
            public var promptTokens: Swift.Int
            /// Total number of tokens used in the request (prompt + completion).
            ///
            /// - Remark: Generated from `#/components/schemas/CompletionUsage/total_tokens`.
            public var totalTokens: Swift.Int
            /// Breakdown of tokens used in a completion.
            ///
            /// - Remark: Generated from `#/components/schemas/CompletionUsage/completion_tokens_details`.
            public struct CompletionTokensDetailsPayload: Codable, Hashable, Sendable {
                /// When using Predicted Outputs, the number of tokens in the
                /// prediction that appeared in the completion.
                ///
                ///
                /// - Remark: Generated from `#/components/schemas/CompletionUsage/completion_tokens_details/accepted_prediction_tokens`.
                public var acceptedPredictionTokens: Swift.Int?
                /// Audio input tokens generated by the model.
                ///
                /// - Remark: Generated from `#/components/schemas/CompletionUsage/completion_tokens_details/audio_tokens`.
                public var audioTokens: Swift.Int?
                /// Tokens generated by the model for reasoning.
                ///
                /// - Remark: Generated from `#/components/schemas/CompletionUsage/completion_tokens_details/reasoning_tokens`.
                public var reasoningTokens: Swift.Int?
                /// When using Predicted Outputs, the number of tokens in the
                /// prediction that did not appear in the completion. However, like
                /// reasoning tokens, these tokens are still counted in the total
                /// completion tokens for purposes of billing, output, and context window
                /// limits.
                ///
                ///
                /// - Remark: Generated from `#/components/schemas/CompletionUsage/completion_tokens_details/rejected_prediction_tokens`.
                public var rejectedPredictionTokens: Swift.Int?
                /// Creates a new `CompletionTokensDetailsPayload`.
                ///
                /// - Parameters:
                ///   - acceptedPredictionTokens: When using Predicted Outputs, the number of tokens in the
                ///   - audioTokens: Audio input tokens generated by the model.
                ///   - reasoningTokens: Tokens generated by the model for reasoning.
                ///   - rejectedPredictionTokens: When using Predicted Outputs, the number of tokens in the
                public init(
                    acceptedPredictionTokens: Swift.Int? = nil,
                    audioTokens: Swift.Int? = nil,
                    reasoningTokens: Swift.Int? = nil,
                    rejectedPredictionTokens: Swift.Int? = nil
                ) {
                    self.acceptedPredictionTokens = acceptedPredictionTokens
                    self.audioTokens = audioTokens
                    self.reasoningTokens = reasoningTokens
                    self.rejectedPredictionTokens = rejectedPredictionTokens
                }
                public enum CodingKeys: String, CodingKey {
                    case acceptedPredictionTokens = "accepted_prediction_tokens"
                    case audioTokens = "audio_tokens"
                    case reasoningTokens = "reasoning_tokens"
                    case rejectedPredictionTokens = "rejected_prediction_tokens"
                }
            }
            /// Breakdown of tokens used in a completion.
            ///
            /// - Remark: Generated from `#/components/schemas/CompletionUsage/completion_tokens_details`.
            public var completionTokensDetails: Components.Schemas.CompletionUsage.CompletionTokensDetailsPayload?
            /// Breakdown of tokens used in the prompt.
            ///
            /// - Remark: Generated from `#/components/schemas/CompletionUsage/prompt_tokens_details`.
            public struct PromptTokensDetailsPayload: Codable, Hashable, Sendable {
                /// Audio input tokens present in the prompt.
                ///
                /// - Remark: Generated from `#/components/schemas/CompletionUsage/prompt_tokens_details/audio_tokens`.
                public var audioTokens: Swift.Int?
                /// Cached tokens present in the prompt.
                ///
                /// - Remark: Generated from `#/components/schemas/CompletionUsage/prompt_tokens_details/cached_tokens`.
                public var cachedTokens: Swift.Int?
                /// Creates a new `PromptTokensDetailsPayload`.
                ///
                /// - Parameters:
                ///   - audioTokens: Audio input tokens present in the prompt.
                ///   - cachedTokens: Cached tokens present in the prompt.
                public init(
                    audioTokens: Swift.Int? = nil,
                    cachedTokens: Swift.Int? = nil
                ) {
                    self.audioTokens = audioTokens
                    self.cachedTokens = cachedTokens
                }
                public enum CodingKeys: String, CodingKey {
                    case audioTokens = "audio_tokens"
                    case cachedTokens = "cached_tokens"
                }
            }
            /// Breakdown of tokens used in the prompt.
            ///
            /// - Remark: Generated from `#/components/schemas/CompletionUsage/prompt_tokens_details`.
            public var promptTokensDetails: Components.Schemas.CompletionUsage.PromptTokensDetailsPayload?
            /// Creates a new `CompletionUsage`.
            ///
            /// - Parameters:
            ///   - completionTokens: Number of tokens in the generated completion.
            ///   - promptTokens: Number of tokens in the prompt.
            ///   - totalTokens: Total number of tokens used in the request (prompt + completion).
            ///   - completionTokensDetails: Breakdown of tokens used in a completion.
            ///   - promptTokensDetails: Breakdown of tokens used in the prompt.
            public init(
                completionTokens: Swift.Int,
                promptTokens: Swift.Int,
                totalTokens: Swift.Int,
                completionTokensDetails: Components.Schemas.CompletionUsage.CompletionTokensDetailsPayload? = nil,
                promptTokensDetails: Components.Schemas.CompletionUsage.PromptTokensDetailsPayload? = nil
            ) {
                self.completionTokens = completionTokens
                self.promptTokens = promptTokens
                self.totalTokens = totalTokens
                self.completionTokensDetails = completionTokensDetails
                self.promptTokensDetails = promptTokensDetails
            }
            public enum CodingKeys: String, CodingKey {
                case completionTokens = "completion_tokens"
                case promptTokens = "prompt_tokens"
                case totalTokens = "total_tokens"
                case completionTokensDetails = "completion_tokens_details"
                case promptTokensDetails = "prompt_tokens_details"
            }
        }
        /// The aggregated costs details of the specific time bucket.
        ///
        /// - Remark: Generated from `#/components/schemas/CostsResult`.
        public struct CostsResult: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/CostsResult/object`.
            @frozen public enum ObjectPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case organization_costs_result = "organization.costs.result"
            }
            /// - Remark: Generated from `#/components/schemas/CostsResult/object`.
            public var object: Components.Schemas.CostsResult.ObjectPayload
            /// The monetary value in its associated currency.
            ///
            /// - Remark: Generated from `#/components/schemas/CostsResult/amount`.
            public struct AmountPayload: Codable, Hashable, Sendable {
                /// The numeric value of the cost.
                ///
                /// - Remark: Generated from `#/components/schemas/CostsResult/amount/value`.
                public var value: Swift.Double?
                /// Lowercase ISO-4217 currency e.g. "usd"
                ///
                /// - Remark: Generated from `#/components/schemas/CostsResult/amount/currency`.
                public var currency: Swift.String?
                /// Creates a new `AmountPayload`.
                ///
                /// - Parameters:
                ///   - value: The numeric value of the cost.
                ///   - currency: Lowercase ISO-4217 currency e.g. "usd"
                public init(
                    value: Swift.Double? = nil,
                    currency: Swift.String? = nil
                ) {
                    self.value = value
                    self.currency = currency
                }
                public enum CodingKeys: String, CodingKey {
                    case value
                    case currency
                }
            }
            /// The monetary value in its associated currency.
            ///
            /// - Remark: Generated from `#/components/schemas/CostsResult/amount`.
            public var amount: Components.Schemas.CostsResult.AmountPayload?
            /// When `group_by=line_item`, this field provides the line item of the grouped costs result.
            ///
            /// - Remark: Generated from `#/components/schemas/CostsResult/line_item`.
            public var lineItem: Swift.String?
            /// When `group_by=project_id`, this field provides the project ID of the grouped costs result.
            ///
            /// - Remark: Generated from `#/components/schemas/CostsResult/project_id`.
            public var projectId: Swift.String?
            /// Creates a new `CostsResult`.
            ///
            /// - Parameters:
            ///   - object:
            ///   - amount: The monetary value in its associated currency.
            ///   - lineItem: When `group_by=line_item`, this field provides the line item of the grouped costs result.
            ///   - projectId: When `group_by=project_id`, this field provides the project ID of the grouped costs result.
            public init(
                object: Components.Schemas.CostsResult.ObjectPayload,
                amount: Components.Schemas.CostsResult.AmountPayload? = nil,
                lineItem: Swift.String? = nil,
                projectId: Swift.String? = nil
            ) {
                self.object = object
                self.amount = amount
                self.lineItem = lineItem
                self.projectId = projectId
            }
            public enum CodingKeys: String, CodingKey {
                case object
                case amount
                case lineItem = "line_item"
                case projectId = "project_id"
            }
        }
        /// - Remark: Generated from `#/components/schemas/CreateAssistantRequest`.
        public struct CreateAssistantRequest: Codable, Hashable, Sendable {
            /// ID of the model to use. You can use the [List models](/docs/api-reference/models/list) API to see all of your available models, or see our [Model overview](/docs/models) for descriptions of them.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/CreateAssistantRequest/model`.
            public struct ModelPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/CreateAssistantRequest/model/value1`.
                public var value1: Swift.String?
                /// - Remark: Generated from `#/components/schemas/CreateAssistantRequest/model/value2`.
                @frozen public enum Value2Payload: String, Codable, Hashable, Sendable, CaseIterable {
                    case gpt4o = "gpt-4o"
                    case gpt4o20241120 = "gpt-4o-2024-11-20"
                    case gpt4o20240806 = "gpt-4o-2024-08-06"
                    case gpt4o20240513 = "gpt-4o-2024-05-13"
                    case gpt4oMini = "gpt-4o-mini"
                    case gpt4oMini20240718 = "gpt-4o-mini-2024-07-18"
                    case gpt4Turbo = "gpt-4-turbo"
                    case gpt4Turbo20240409 = "gpt-4-turbo-2024-04-09"
                    case gpt40125Preview = "gpt-4-0125-preview"
                    case gpt4TurboPreview = "gpt-4-turbo-preview"
                    case gpt41106Preview = "gpt-4-1106-preview"
                    case gpt4VisionPreview = "gpt-4-vision-preview"
                    case gpt4 = "gpt-4"
                    case gpt40314 = "gpt-4-0314"
                    case gpt40613 = "gpt-4-0613"
                    case gpt432k = "gpt-4-32k"
                    case gpt432k0314 = "gpt-4-32k-0314"
                    case gpt432k0613 = "gpt-4-32k-0613"
                    case gpt3_5Turbo = "gpt-3.5-turbo"
                    case gpt3_5Turbo16k = "gpt-3.5-turbo-16k"
                    case gpt3_5Turbo0613 = "gpt-3.5-turbo-0613"
                    case gpt3_5Turbo1106 = "gpt-3.5-turbo-1106"
                    case gpt3_5Turbo0125 = "gpt-3.5-turbo-0125"
                    case gpt3_5Turbo16k0613 = "gpt-3.5-turbo-16k-0613"
                }
                /// - Remark: Generated from `#/components/schemas/CreateAssistantRequest/model/value2`.
                public var value2: Components.Schemas.CreateAssistantRequest.ModelPayload.Value2Payload?
                /// Creates a new `ModelPayload`.
                ///
                /// - Parameters:
                ///   - value1:
                ///   - value2:
                public init(
                    value1: Swift.String? = nil,
                    value2: Components.Schemas.CreateAssistantRequest.ModelPayload.Value2Payload? = nil
                ) {
                    self.value1 = value1
                    self.value2 = value2
                }
                public init(from decoder: any Decoder) throws {
                    var errors: [any Error] = []
                    do {
                        self.value1 = try decoder.decodeFromSingleValueContainer()
                    } catch {
                        errors.append(error)
                    }
                    do {
                        self.value2 = try decoder.decodeFromSingleValueContainer()
                    } catch {
                        errors.append(error)
                    }
                    try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                        [
                            self.value1,
                            self.value2
                        ],
                        type: Self.self,
                        codingPath: decoder.codingPath,
                        errors: errors
                    )
                }
                public func encode(to encoder: any Encoder) throws {
                    try encoder.encodeFirstNonNilValueToSingleValueContainer([
                        self.value1,
                        self.value2
                    ])
                }
            }
            /// ID of the model to use. You can use the [List models](/docs/api-reference/models/list) API to see all of your available models, or see our [Model overview](/docs/models) for descriptions of them.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/CreateAssistantRequest/model`.
            public var model: Components.Schemas.CreateAssistantRequest.ModelPayload
            /// The name of the assistant. The maximum length is 256 characters.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/CreateAssistantRequest/name`.
            public var name: Swift.String?
            /// The description of the assistant. The maximum length is 512 characters.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/CreateAssistantRequest/description`.
            public var description: Swift.String?
            /// The system instructions that the assistant uses. The maximum length is 256,000 characters.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/CreateAssistantRequest/instructions`.
            public var instructions: Swift.String?
            /// - Remark: Generated from `#/components/schemas/CreateAssistantRequest/ToolsPayload`.
            @frozen public enum ToolsPayloadPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/CreateAssistantRequest/ToolsPayload/case1`.
                case AssistantToolsCode(Components.Schemas.AssistantToolsCode)
                /// - Remark: Generated from `#/components/schemas/CreateAssistantRequest/ToolsPayload/case2`.
                case AssistantToolsFileSearch(Components.Schemas.AssistantToolsFileSearch)
                /// - Remark: Generated from `#/components/schemas/CreateAssistantRequest/ToolsPayload/case3`.
                case AssistantToolsFunction(Components.Schemas.AssistantToolsFunction)
                public init(from decoder: any Decoder) throws {
                    var errors: [any Error] = []
                    do {
                        self = .AssistantToolsCode(try .init(from: decoder))
                        return
                    } catch {
                        errors.append(error)
                    }
                    do {
                        self = .AssistantToolsFileSearch(try .init(from: decoder))
                        return
                    } catch {
                        errors.append(error)
                    }
                    do {
                        self = .AssistantToolsFunction(try .init(from: decoder))
                        return
                    } catch {
                        errors.append(error)
                    }
                    throw Swift.DecodingError.failedToDecodeOneOfSchema(
                        type: Self.self,
                        codingPath: decoder.codingPath,
                        errors: errors
                    )
                }
                public func encode(to encoder: any Encoder) throws {
                    switch self {
                    case let .AssistantToolsCode(value):
                        try value.encode(to: encoder)
                    case let .AssistantToolsFileSearch(value):
                        try value.encode(to: encoder)
                    case let .AssistantToolsFunction(value):
                        try value.encode(to: encoder)
                    }
                }
            }
            /// A list of tool enabled on the assistant. There can be a maximum of 128 tools per assistant. Tools can be of types `code_interpreter`, `file_search`, or `function`.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/CreateAssistantRequest/tools`.
            public typealias ToolsPayload = [Components.Schemas.CreateAssistantRequest.ToolsPayloadPayload]
            /// A list of tool enabled on the assistant. There can be a maximum of 128 tools per assistant. Tools can be of types `code_interpreter`, `file_search`, or `function`.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/CreateAssistantRequest/tools`.
            public var tools: Components.Schemas.CreateAssistantRequest.ToolsPayload?
            /// A set of resources that are used by the assistant's tools. The resources are specific to the type of tool. For example, the `code_interpreter` tool requires a list of file IDs, while the `file_search` tool requires a list of vector store IDs.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/CreateAssistantRequest/tool_resources`.
            public struct ToolResourcesPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/CreateAssistantRequest/tool_resources/code_interpreter`.
                public struct CodeInterpreterPayload: Codable, Hashable, Sendable {
                    /// A list of [file](/docs/api-reference/files) IDs made available to the `code_interpreter` tool. There can be a maximum of 20 files associated with the tool.
                    ///
                    ///
                    /// - Remark: Generated from `#/components/schemas/CreateAssistantRequest/tool_resources/code_interpreter/file_ids`.
                    public var fileIds: [Swift.String]?
                    /// Creates a new `CodeInterpreterPayload`.
                    ///
                    /// - Parameters:
                    ///   - fileIds: A list of [file](/docs/api-reference/files) IDs made available to the `code_interpreter` tool. There can be a maximum of 20 files associated with the tool.
                    public init(fileIds: [Swift.String]? = nil) {
                        self.fileIds = fileIds
                    }
                    public enum CodingKeys: String, CodingKey {
                        case fileIds = "file_ids"
                    }
                }
                /// - Remark: Generated from `#/components/schemas/CreateAssistantRequest/tool_resources/code_interpreter`.
                public var codeInterpreter: Components.Schemas.CreateAssistantRequest.ToolResourcesPayload.CodeInterpreterPayload?
                /// - Remark: Generated from `#/components/schemas/CreateAssistantRequest/tool_resources/file_search`.
                @frozen public enum FileSearchPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/CreateAssistantRequest/tool_resources/file_search/case1`.
                    public struct Case1Payload: Codable, Hashable, Sendable {
                        /// Creates a new `Case1Payload`.
                        public init() {}
                    }
                    /// - Remark: Generated from `#/components/schemas/CreateAssistantRequest/tool_resources/file_search/case1`.
                    case case1(Components.Schemas.CreateAssistantRequest.ToolResourcesPayload.FileSearchPayload.Case1Payload)
                    /// - Remark: Generated from `#/components/schemas/CreateAssistantRequest/tool_resources/file_search/case2`.
                    public struct Case2Payload: Codable, Hashable, Sendable {
                        /// Creates a new `Case2Payload`.
                        public init() {}
                    }
                    /// - Remark: Generated from `#/components/schemas/CreateAssistantRequest/tool_resources/file_search/case2`.
                    case case2(Components.Schemas.CreateAssistantRequest.ToolResourcesPayload.FileSearchPayload.Case2Payload)
                    public init(from decoder: any Decoder) throws {
                        var errors: [any Error] = []
                        do {
                            self = .case1(try .init(from: decoder))
                            return
                        } catch {
                            errors.append(error)
                        }
                        do {
                            self = .case2(try .init(from: decoder))
                            return
                        } catch {
                            errors.append(error)
                        }
                        throw Swift.DecodingError.failedToDecodeOneOfSchema(
                            type: Self.self,
                            codingPath: decoder.codingPath,
                            errors: errors
                        )
                    }
                    public func encode(to encoder: any Encoder) throws {
                        switch self {
                        case let .case1(value):
                            try value.encode(to: encoder)
                        case let .case2(value):
                            try value.encode(to: encoder)
                        }
                    }
                }
                /// - Remark: Generated from `#/components/schemas/CreateAssistantRequest/tool_resources/file_search`.
                public var fileSearch: Components.Schemas.CreateAssistantRequest.ToolResourcesPayload.FileSearchPayload?
                /// Creates a new `ToolResourcesPayload`.
                ///
                /// - Parameters:
                ///   - codeInterpreter:
                ///   - fileSearch:
                public init(
                    codeInterpreter: Components.Schemas.CreateAssistantRequest.ToolResourcesPayload.CodeInterpreterPayload? = nil,
                    fileSearch: Components.Schemas.CreateAssistantRequest.ToolResourcesPayload.FileSearchPayload? = nil
                ) {
                    self.codeInterpreter = codeInterpreter
                    self.fileSearch = fileSearch
                }
                public enum CodingKeys: String, CodingKey {
                    case codeInterpreter = "code_interpreter"
                    case fileSearch = "file_search"
                }
            }
            /// A set of resources that are used by the assistant's tools. The resources are specific to the type of tool. For example, the `code_interpreter` tool requires a list of file IDs, while the `file_search` tool requires a list of vector store IDs.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/CreateAssistantRequest/tool_resources`.
            public var toolResources: Components.Schemas.CreateAssistantRequest.ToolResourcesPayload?
            /// - Remark: Generated from `#/components/schemas/CreateAssistantRequest/metadata`.
            public var metadata: Components.Schemas.Metadata?
            /// What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/CreateAssistantRequest/temperature`.
            public var temperature: Swift.Double?
            /// An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered.
            ///
            /// We generally recommend altering this or temperature but not both.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/CreateAssistantRequest/top_p`.
            public var topP: Swift.Double?
            /// - Remark: Generated from `#/components/schemas/CreateAssistantRequest/response_format`.
            public struct ResponseFormatPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/CreateAssistantRequest/response_format/value1`.
                public var value1: Components.Schemas.AssistantsApiResponseFormatOption
                /// - Remark: Generated from `#/components/schemas/CreateAssistantRequest/response_format/value2`.
                public var value2: OpenAPIRuntime.OpenAPIValueContainer
                /// Creates a new `ResponseFormatPayload`.
                ///
                /// - Parameters:
                ///   - value1:
                ///   - value2:
                public init(
                    value1: Components.Schemas.AssistantsApiResponseFormatOption,
                    value2: OpenAPIRuntime.OpenAPIValueContainer
                ) {
                    self.value1 = value1
                    self.value2 = value2
                }
                public init(from decoder: any Decoder) throws {
                    self.value1 = try .init(from: decoder)
                    self.value2 = try .init(from: decoder)
                }
                public func encode(to encoder: any Encoder) throws {
                    try self.value1.encode(to: encoder)
                    try self.value2.encode(to: encoder)
                }
            }
            /// - Remark: Generated from `#/components/schemas/CreateAssistantRequest/response_format`.
            public var responseFormat: Components.Schemas.CreateAssistantRequest.ResponseFormatPayload?
            /// Creates a new `CreateAssistantRequest`.
            ///
            /// - Parameters:
            ///   - model: ID of the model to use. You can use the [List models](/docs/api-reference/models/list) API to see all of your available models, or see our [Model overview](/docs/models) for descriptions of them.
            ///   - name: The name of the assistant. The maximum length is 256 characters.
            ///   - description: The description of the assistant. The maximum length is 512 characters.
            ///   - instructions: The system instructions that the assistant uses. The maximum length is 256,000 characters.
            ///   - tools: A list of tool enabled on the assistant. There can be a maximum of 128 tools per assistant. Tools can be of types `code_interpreter`, `file_search`, or `function`.
            ///   - toolResources: A set of resources that are used by the assistant's tools. The resources are specific to the type of tool. For example, the `code_interpreter` tool requires a list of file IDs, while the `file_search` tool requires a list of vector store IDs.
            ///   - metadata:
            ///   - temperature: What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic.
            ///   - topP: An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered.
            ///   - responseFormat:
            public init(
                model: Components.Schemas.CreateAssistantRequest.ModelPayload,
                name: Swift.String? = nil,
                description: Swift.String? = nil,
                instructions: Swift.String? = nil,
                tools: Components.Schemas.CreateAssistantRequest.ToolsPayload? = nil,
                toolResources: Components.Schemas.CreateAssistantRequest.ToolResourcesPayload? = nil,
                metadata: Components.Schemas.Metadata? = nil,
                temperature: Swift.Double? = nil,
                topP: Swift.Double? = nil,
                responseFormat: Components.Schemas.CreateAssistantRequest.ResponseFormatPayload? = nil
            ) {
                self.model = model
                self.name = name
                self.description = description
                self.instructions = instructions
                self.tools = tools
                self.toolResources = toolResources
                self.metadata = metadata
                self.temperature = temperature
                self.topP = topP
                self.responseFormat = responseFormat
            }
            public enum CodingKeys: String, CodingKey {
                case model
                case name
                case description
                case instructions
                case tools
                case toolResources = "tool_resources"
                case metadata
                case temperature
                case topP = "top_p"
                case responseFormat = "response_format"
            }
            public init(from decoder: any Decoder) throws {
                let container = try decoder.container(keyedBy: CodingKeys.self)
                self.model = try container.decode(
                    Components.Schemas.CreateAssistantRequest.ModelPayload.self,
                    forKey: .model
                )
                self.name = try container.decodeIfPresent(
                    Swift.String.self,
                    forKey: .name
                )
                self.description = try container.decodeIfPresent(
                    Swift.String.self,
                    forKey: .description
                )
                self.instructions = try container.decodeIfPresent(
                    Swift.String.self,
                    forKey: .instructions
                )
                self.tools = try container.decodeIfPresent(
                    Components.Schemas.CreateAssistantRequest.ToolsPayload.self,
                    forKey: .tools
                )
                self.toolResources = try container.decodeIfPresent(
                    Components.Schemas.CreateAssistantRequest.ToolResourcesPayload.self,
                    forKey: .toolResources
                )
                self.metadata = try container.decodeIfPresent(
                    Components.Schemas.Metadata.self,
                    forKey: .metadata
                )
                self.temperature = try container.decodeIfPresent(
                    Swift.Double.self,
                    forKey: .temperature
                )
                self.topP = try container.decodeIfPresent(
                    Swift.Double.self,
                    forKey: .topP
                )
                self.responseFormat = try container.decodeIfPresent(
                    Components.Schemas.CreateAssistantRequest.ResponseFormatPayload.self,
                    forKey: .responseFormat
                )
                try decoder.ensureNoAdditionalProperties(knownKeys: [
                    "model",
                    "name",
                    "description",
                    "instructions",
                    "tools",
                    "tool_resources",
                    "metadata",
                    "temperature",
                    "top_p",
                    "response_format"
                ])
            }
        }
        /// Represents a chat completion response returned by model, based on the provided input.
        ///
        /// - Remark: Generated from `#/components/schemas/CreateChatCompletionFunctionResponse`.
        public struct CreateChatCompletionFunctionResponse: Codable, Hashable, Sendable {
            /// A unique identifier for the chat completion.
            ///
            /// - Remark: Generated from `#/components/schemas/CreateChatCompletionFunctionResponse/id`.
            public var id: Swift.String
            /// - Remark: Generated from `#/components/schemas/CreateChatCompletionFunctionResponse/ChoicesPayload`.
            public struct ChoicesPayloadPayload: Codable, Hashable, Sendable {
                /// The reason the model stopped generating tokens. This will be `stop` if the model hit a natural stop point or a provided stop sequence, `length` if the maximum number of tokens specified in the request was reached, `content_filter` if content was omitted due to a flag from our content filters, or `function_call` if the model called a function.
                ///
                ///
                /// - Remark: Generated from `#/components/schemas/CreateChatCompletionFunctionResponse/ChoicesPayload/finish_reason`.
                @frozen public enum FinishReasonPayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case stop = "stop"
                    case length = "length"
                    case functionCall = "function_call"
                    case contentFilter = "content_filter"
                }
                /// The reason the model stopped generating tokens. This will be `stop` if the model hit a natural stop point or a provided stop sequence, `length` if the maximum number of tokens specified in the request was reached, `content_filter` if content was omitted due to a flag from our content filters, or `function_call` if the model called a function.
                ///
                ///
                /// - Remark: Generated from `#/components/schemas/CreateChatCompletionFunctionResponse/ChoicesPayload/finish_reason`.
                public var finishReason: Components.Schemas.CreateChatCompletionFunctionResponse.ChoicesPayloadPayload.FinishReasonPayload
                /// The index of the choice in the list of choices.
                ///
                /// - Remark: Generated from `#/components/schemas/CreateChatCompletionFunctionResponse/ChoicesPayload/index`.
                public var index: Swift.Int
                /// - Remark: Generated from `#/components/schemas/CreateChatCompletionFunctionResponse/ChoicesPayload/message`.
                public var message: Components.Schemas.ChatCompletionResponseMessage
                /// Creates a new `ChoicesPayloadPayload`.
                ///
                /// - Parameters:
                ///   - finishReason: The reason the model stopped generating tokens. This will be `stop` if the model hit a natural stop point or a provided stop sequence, `length` if the maximum number of tokens specified in the request was reached, `content_filter` if content was omitted due to a flag from our content filters, or `function_call` if the model called a function.
                ///   - index: The index of the choice in the list of choices.
                ///   - message:
                public init(
                    finishReason: Components.Schemas.CreateChatCompletionFunctionResponse.ChoicesPayloadPayload.FinishReasonPayload,
                    index: Swift.Int,
                    message: Components.Schemas.ChatCompletionResponseMessage
                ) {
                    self.finishReason = finishReason
                    self.index = index
                    self.message = message
                }
                public enum CodingKeys: String, CodingKey {
                    case finishReason = "finish_reason"
                    case index
                    case message
                }
            }
            /// A list of chat completion choices. Can be more than one if `n` is greater than 1.
            ///
            /// - Remark: Generated from `#/components/schemas/CreateChatCompletionFunctionResponse/choices`.
            public typealias ChoicesPayload = [Components.Schemas.CreateChatCompletionFunctionResponse.ChoicesPayloadPayload]
            /// A list of chat completion choices. Can be more than one if `n` is greater than 1.
            ///
            /// - Remark: Generated from `#/components/schemas/CreateChatCompletionFunctionResponse/choices`.
            public var choices: Components.Schemas.CreateChatCompletionFunctionResponse.ChoicesPayload
            /// The Unix timestamp (in seconds) of when the chat completion was created.
            ///
            /// - Remark: Generated from `#/components/schemas/CreateChatCompletionFunctionResponse/created`.
            public var created: Swift.Int
            /// The model used for the chat completion.
            ///
            /// - Remark: Generated from `#/components/schemas/CreateChatCompletionFunctionResponse/model`.
            public var model: Swift.String
            /// This fingerprint represents the backend configuration that the model runs with.
            ///
            /// Can be used in conjunction with the `seed` request parameter to understand when backend changes have been made that might impact determinism.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/CreateChatCompletionFunctionResponse/system_fingerprint`.
            public var systemFingerprint: Swift.String?
            /// The object type, which is always `chat.completion`.
            ///
            /// - Remark: Generated from `#/components/schemas/CreateChatCompletionFunctionResponse/object`.
            @frozen public enum ObjectPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case chat_completion = "chat.completion"
            }
            /// The object type, which is always `chat.completion`.
            ///
            /// - Remark: Generated from `#/components/schemas/CreateChatCompletionFunctionResponse/object`.
            public var object: Components.Schemas.CreateChatCompletionFunctionResponse.ObjectPayload
            /// - Remark: Generated from `#/components/schemas/CreateChatCompletionFunctionResponse/usage`.
            public var usage: Components.Schemas.CompletionUsage?
            /// Creates a new `CreateChatCompletionFunctionResponse`.
            ///
            /// - Parameters:
            ///   - id: A unique identifier for the chat completion.
            ///   - choices: A list of chat completion choices. Can be more than one if `n` is greater than 1.
            ///   - created: The Unix timestamp (in seconds) of when the chat completion was created.
            ///   - model: The model used for the chat completion.
            ///   - systemFingerprint: This fingerprint represents the backend configuration that the model runs with.
            ///   - object: The object type, which is always `chat.completion`.
            ///   - usage:
            public init(
                id: Swift.String,
                choices: Components.Schemas.CreateChatCompletionFunctionResponse.ChoicesPayload,
                created: Swift.Int,
                model: Swift.String,
                systemFingerprint: Swift.String? = nil,
                object: Components.Schemas.CreateChatCompletionFunctionResponse.ObjectPayload,
                usage: Components.Schemas.CompletionUsage? = nil
            ) {
                self.id = id
                self.choices = choices
                self.created = created
                self.model = model
                self.systemFingerprint = systemFingerprint
                self.object = object
                self.usage = usage
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case choices
                case created
                case model
                case systemFingerprint = "system_fingerprint"
                case object
                case usage
            }
        }
        /// Represents a streamed chunk of a chat completion response returned by model, based on the provided input.
        ///
        /// - Remark: Generated from `#/components/schemas/CreateChatCompletionImageResponse`.
        public typealias CreateChatCompletionImageResponse = OpenAPIRuntime.OpenAPIObjectContainer
        /// - Remark: Generated from `#/components/schemas/CreateChatCompletionRequest`.
        public struct CreateChatCompletionRequest: Codable, Hashable, Sendable {
            /// A list of messages comprising the conversation so far. Depending on the
            /// [model](/docs/models) you use, different message types (modalities) are
            /// supported, like [text](/docs/guides/text-generation),
            /// [images](/docs/guides/vision), and [audio](/docs/guides/audio).
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/CreateChatCompletionRequest/messages`.
            public var messages: [Components.Schemas.ChatCompletionRequestMessage]
            /// ID of the model to use. See the [model endpoint compatibility](/docs/models#model-endpoint-compatibility) table for details on which models work with the Chat API.
            ///
            /// - Remark: Generated from `#/components/schemas/CreateChatCompletionRequest/model`.
            public struct ModelPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/CreateChatCompletionRequest/model/value1`.
                public var value1: Swift.String?
                /// - Remark: Generated from `#/components/schemas/CreateChatCompletionRequest/model/value2`.
                @frozen public enum Value2Payload: String, Codable, Hashable, Sendable, CaseIterable {
                    case o3Mini = "o3-mini"
                    case o3Mini20250131 = "o3-mini-2025-01-31"
                    case o1 = "o1"
                    case o120241217 = "o1-2024-12-17"
                    case o1Preview = "o1-preview"
                    case o1Preview20240912 = "o1-preview-2024-09-12"
                    case o1Mini = "o1-mini"
                    case o1Mini20240912 = "o1-mini-2024-09-12"
                    case gpt4o = "gpt-4o"
                    case gpt4o20241120 = "gpt-4o-2024-11-20"
                    case gpt4o20240806 = "gpt-4o-2024-08-06"
                    case gpt4o20240513 = "gpt-4o-2024-05-13"
                    case gpt4oAudioPreview = "gpt-4o-audio-preview"
                    case gpt4oAudioPreview20241001 = "gpt-4o-audio-preview-2024-10-01"
                    case gpt4oAudioPreview20241217 = "gpt-4o-audio-preview-2024-12-17"
                    case gpt4oMiniAudioPreview = "gpt-4o-mini-audio-preview"
                    case gpt4oMiniAudioPreview20241217 = "gpt-4o-mini-audio-preview-2024-12-17"
                    case chatgpt4oLatest = "chatgpt-4o-latest"
                    case gpt4oMini = "gpt-4o-mini"
                    case gpt4oMini20240718 = "gpt-4o-mini-2024-07-18"
                    case gpt4Turbo = "gpt-4-turbo"
                    case gpt4Turbo20240409 = "gpt-4-turbo-2024-04-09"
                    case gpt40125Preview = "gpt-4-0125-preview"
                    case gpt4TurboPreview = "gpt-4-turbo-preview"
                    case gpt41106Preview = "gpt-4-1106-preview"
                    case gpt4VisionPreview = "gpt-4-vision-preview"
                    case gpt4 = "gpt-4"
                    case gpt40314 = "gpt-4-0314"
                    case gpt40613 = "gpt-4-0613"
                    case gpt432k = "gpt-4-32k"
                    case gpt432k0314 = "gpt-4-32k-0314"
                    case gpt432k0613 = "gpt-4-32k-0613"
                    case gpt3_5Turbo = "gpt-3.5-turbo"
                    case gpt3_5Turbo16k = "gpt-3.5-turbo-16k"
                    case gpt3_5Turbo0301 = "gpt-3.5-turbo-0301"
                    case gpt3_5Turbo0613 = "gpt-3.5-turbo-0613"
                    case gpt3_5Turbo1106 = "gpt-3.5-turbo-1106"
                    case gpt3_5Turbo0125 = "gpt-3.5-turbo-0125"
                    case gpt3_5Turbo16k0613 = "gpt-3.5-turbo-16k-0613"
                }
                /// - Remark: Generated from `#/components/schemas/CreateChatCompletionRequest/model/value2`.
                public var value2: Components.Schemas.CreateChatCompletionRequest.ModelPayload.Value2Payload?
                /// Creates a new `ModelPayload`.
                ///
                /// - Parameters:
                ///   - value1:
                ///   - value2:
                public init(
                    value1: Swift.String? = nil,
                    value2: Components.Schemas.CreateChatCompletionRequest.ModelPayload.Value2Payload? = nil
                ) {
                    self.value1 = value1
                    self.value2 = value2
                }
                public init(from decoder: any Decoder) throws {
                    var errors: [any Error] = []
                    do {
                        self.value1 = try decoder.decodeFromSingleValueContainer()
                    } catch {
                        errors.append(error)
                    }
                    do {
                        self.value2 = try decoder.decodeFromSingleValueContainer()
                    } catch {
                        errors.append(error)
                    }
                    try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                        [
                            self.value1,
                            self.value2
                        ],
                        type: Self.self,
                        codingPath: decoder.codingPath,
                        errors: errors
                    )
                }
                public func encode(to encoder: any Encoder) throws {
                    try encoder.encodeFirstNonNilValueToSingleValueContainer([
                        self.value1,
                        self.value2
                    ])
                }
            }
            /// ID of the model to use. See the [model endpoint compatibility](/docs/models#model-endpoint-compatibility) table for details on which models work with the Chat API.
            ///
            /// - Remark: Generated from `#/components/schemas/CreateChatCompletionRequest/model`.
            public var model: Components.Schemas.CreateChatCompletionRequest.ModelPayload
            /// Whether or not to store the output of this chat completion request for 
            /// use in our [model distillation](/docs/guides/distillation) or
            /// [evals](/docs/guides/evals) products.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/CreateChatCompletionRequest/store`.
            public var store: Swift.Bool?
            /// **o1 models only** 
            ///
            /// Constrains effort on reasoning for 
            /// [reasoning models](https://platform.openai.com/docs/guides/reasoning).
            /// Currently supported values are `low`, `medium`, and `high`. Reducing
            /// reasoning effort can result in faster responses and fewer tokens used
            /// on reasoning in a response.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/CreateChatCompletionRequest/reasoning_effort`.
            @frozen public enum ReasoningEffortPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case low = "low"
                case medium = "medium"
                case high = "high"
            }
            /// **o1 models only** 
            ///
            /// Constrains effort on reasoning for 
            /// [reasoning models](https://platform.openai.com/docs/guides/reasoning).
            /// Currently supported values are `low`, `medium`, and `high`. Reducing
            /// reasoning effort can result in faster responses and fewer tokens used
            /// on reasoning in a response.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/CreateChatCompletionRequest/reasoning_effort`.
            public var reasoningEffort: Components.Schemas.CreateChatCompletionRequest.ReasoningEffortPayload?
            /// - Remark: Generated from `#/components/schemas/CreateChatCompletionRequest/metadata`.
            public var metadata: Components.Schemas.Metadata?
            /// Number between -2.0 and 2.0. Positive values penalize new tokens based on
            /// their existing frequency in the text so far, decreasing the model's
            /// likelihood to repeat the same line verbatim.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/CreateChatCompletionRequest/frequency_penalty`.
            public var frequencyPenalty: Swift.Double?
            /// Modify the likelihood of specified tokens appearing in the completion.
            ///
            /// Accepts a JSON object that maps tokens (specified by their token ID in the
            /// tokenizer) to an associated bias value from -100 to 100. Mathematically,
            /// the bias is added to the logits generated by the model prior to sampling.
            /// The exact effect will vary per model, but values between -1 and 1 should
            /// decrease or increase likelihood of selection; values like -100 or 100
            /// should result in a ban or exclusive selection of the relevant token.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/CreateChatCompletionRequest/logit_bias`.
            public struct LogitBiasPayload: Codable, Hashable, Sendable {
                /// A container of undocumented properties.
                public var additionalProperties: [String: Swift.Int]
                /// Creates a new `LogitBiasPayload`.
                ///
                /// - Parameters:
                ///   - additionalProperties: A container of undocumented properties.
                public init(additionalProperties: [String: Swift.Int] = .init()) {
                    self.additionalProperties = additionalProperties
                }
                public init(from decoder: any Decoder) throws {
                    additionalProperties = try decoder.decodeAdditionalProperties(knownKeys: [])
                }
                public func encode(to encoder: any Encoder) throws {
                    try encoder.encodeAdditionalProperties(additionalProperties)
                }
            }
            /// Modify the likelihood of specified tokens appearing in the completion.
            ///
            /// Accepts a JSON object that maps tokens (specified by their token ID in the
            /// tokenizer) to an associated bias value from -100 to 100. Mathematically,
            /// the bias is added to the logits generated by the model prior to sampling.
            /// The exact effect will vary per model, but values between -1 and 1 should
            /// decrease or increase likelihood of selection; values like -100 or 100
            /// should result in a ban or exclusive selection of the relevant token.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/CreateChatCompletionRequest/logit_bias`.
            public var logitBias: Components.Schemas.CreateChatCompletionRequest.LogitBiasPayload?
            /// Whether to return log probabilities of the output tokens or not. If true,
            /// returns the log probabilities of each output token returned in the
            /// `content` of `message`.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/CreateChatCompletionRequest/logprobs`.
            public var logprobs: Swift.Bool?
            /// An integer between 0 and 20 specifying the number of most likely tokens to
            /// return at each token position, each with an associated log probability.
            /// `logprobs` must be set to `true` if this parameter is used.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/CreateChatCompletionRequest/top_logprobs`.
            public var topLogprobs: Swift.Int?
            /// The maximum number of [tokens](/tokenizer) that can be generated in the
            /// chat completion. This value can be used to control
            /// [costs](https://openai.com/api/pricing/) for text generated via API.
            ///
            /// This value is now deprecated in favor of `max_completion_tokens`, and is
            /// not compatible with [o1 series models](/docs/guides/reasoning).
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/CreateChatCompletionRequest/max_tokens`.
            @available(*, deprecated)
            public var maxTokens: Swift.Int?
            /// An upper bound for the number of tokens that can be generated for a completion, including visible output tokens and [reasoning tokens](/docs/guides/reasoning).
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/CreateChatCompletionRequest/max_completion_tokens`.
            public var maxCompletionTokens: Swift.Int?
            /// How many chat completion choices to generate for each input message. Note that you will be charged based on the number of generated tokens across all of the choices. Keep `n` as `1` to minimize costs.
            ///
            /// - Remark: Generated from `#/components/schemas/CreateChatCompletionRequest/n`.
            public var n: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/CreateChatCompletionRequest/modalities`.
            public var modalities: Components.Schemas.ChatCompletionModalities?
            /// Configuration for a [Predicted Output](/docs/guides/predicted-outputs),
            /// which can greatly improve response times when large parts of the model
            /// response are known ahead of time. This is most common when you are
            /// regenerating a file with only minor changes to most of the content.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/CreateChatCompletionRequest/prediction`.
            @frozen public enum PredictionPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/CreateChatCompletionRequest/prediction/case1`.
                case PredictionContent(Components.Schemas.PredictionContent)
                public init(from decoder: any Decoder) throws {
                    var errors: [any Error] = []
                    do {
                        self = .PredictionContent(try .init(from: decoder))
                        return
                    } catch {
                        errors.append(error)
                    }
                    throw Swift.DecodingError.failedToDecodeOneOfSchema(
                        type: Self.self,
                        codingPath: decoder.codingPath,
                        errors: errors
                    )
                }
                public func encode(to encoder: any Encoder) throws {
                    switch self {
                    case let .PredictionContent(value):
                        try value.encode(to: encoder)
                    }
                }
            }
            /// Configuration for a [Predicted Output](/docs/guides/predicted-outputs),
            /// which can greatly improve response times when large parts of the model
            /// response are known ahead of time. This is most common when you are
            /// regenerating a file with only minor changes to most of the content.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/CreateChatCompletionRequest/prediction`.
            public var prediction: Components.Schemas.CreateChatCompletionRequest.PredictionPayload?
            /// Parameters for audio output. Required when audio output is requested with
            /// `modalities: ["audio"]`. [Learn more](/docs/guides/audio).
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/CreateChatCompletionRequest/audio`.
            public struct AudioPayload: Codable, Hashable, Sendable {
                /// The voice the model uses to respond. Supported voices are `ash`, `ballad`, `coral`, `sage`, and `verse` (also supported but not recommended are `alloy`, `echo`, and `shimmer`; these voices are less expressive).
                ///
                ///
                /// - Remark: Generated from `#/components/schemas/CreateChatCompletionRequest/audio/voice`.
                @frozen public enum VoicePayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case alloy = "alloy"
                    case ash = "ash"
                    case ballad = "ballad"
                    case coral = "coral"
                    case echo = "echo"
                    case sage = "sage"
                    case shimmer = "shimmer"
                    case verse = "verse"
                }
                /// The voice the model uses to respond. Supported voices are `ash`, `ballad`, `coral`, `sage`, and `verse` (also supported but not recommended are `alloy`, `echo`, and `shimmer`; these voices are less expressive).
                ///
                ///
                /// - Remark: Generated from `#/components/schemas/CreateChatCompletionRequest/audio/voice`.
                public var voice: Components.Schemas.CreateChatCompletionRequest.AudioPayload.VoicePayload
                /// Specifies the output audio format. Must be one of `wav`, `mp3`, `flac`,
                /// `opus`, or `pcm16`.
                ///
                ///
                /// - Remark: Generated from `#/components/schemas/CreateChatCompletionRequest/audio/format`.
                @frozen public enum FormatPayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case wav = "wav"
                    case mp3 = "mp3"
                    case flac = "flac"
                    case opus = "opus"
                    case pcm16 = "pcm16"
                }
                /// Specifies the output audio format. Must be one of `wav`, `mp3`, `flac`,
                /// `opus`, or `pcm16`.
                ///
                ///
                /// - Remark: Generated from `#/components/schemas/CreateChatCompletionRequest/audio/format`.
                public var format: Components.Schemas.CreateChatCompletionRequest.AudioPayload.FormatPayload
                /// Creates a new `AudioPayload`.
                ///
                /// - Parameters:
                ///   - voice: The voice the model uses to respond. Supported voices are `ash`, `ballad`, `coral`, `sage`, and `verse` (also supported but not recommended are `alloy`, `echo`, and `shimmer`; these voices are less expressive).
                ///   - format: Specifies the output audio format. Must be one of `wav`, `mp3`, `flac`,
                public init(
                    voice: Components.Schemas.CreateChatCompletionRequest.AudioPayload.VoicePayload,
                    format: Components.Schemas.CreateChatCompletionRequest.AudioPayload.FormatPayload
                ) {
                    self.voice = voice
                    self.format = format
                }
                public enum CodingKeys: String, CodingKey {
                    case voice
                    case format
                }
            }
            /// Parameters for audio output. Required when audio output is requested with
            /// `modalities: ["audio"]`. [Learn more](/docs/guides/audio).
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/CreateChatCompletionRequest/audio`.
            public var audio: Components.Schemas.CreateChatCompletionRequest.AudioPayload?
            /// Number between -2.0 and 2.0. Positive values penalize new tokens based on
            /// whether they appear in the text so far, increasing the model's likelihood
            /// to talk about new topics.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/CreateChatCompletionRequest/presence_penalty`.
            public var presencePenalty: Swift.Double?
            /// An object specifying the format that the model must output.
            ///
            /// Setting to `{ "type": "json_schema", "json_schema": {...} }` enables
            /// Structured Outputs which ensures the model will match your supplied JSON
            /// schema. Learn more in the [Structured Outputs
            /// guide](/docs/guides/structured-outputs).
            ///
            /// Setting to `{ "type": "json_object" }` enables JSON mode, which ensures
            /// the message the model generates is valid JSON.
            ///
            /// **Important:** when using JSON mode, you **must** also instruct the model
            /// to produce JSON yourself via a system or user message. Without this, the
            /// model may generate an unending stream of whitespace until the generation
            /// reaches the token limit, resulting in a long-running and seemingly "stuck"
            /// request. Also note that the message content may be partially cut off if
            /// `finish_reason="length"`, which indicates the generation exceeded
            /// `max_tokens` or the conversation exceeded the max context length.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/CreateChatCompletionRequest/response_format`.
            @frozen public enum ResponseFormatPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/CreateChatCompletionRequest/response_format/case1`.
                case ResponseFormatText(Components.Schemas.ResponseFormatText)
                /// - Remark: Generated from `#/components/schemas/CreateChatCompletionRequest/response_format/case2`.
                case ResponseFormatJsonObject(Components.Schemas.ResponseFormatJsonObject)
                /// - Remark: Generated from `#/components/schemas/CreateChatCompletionRequest/response_format/case3`.
                case ResponseFormatJsonSchema(Components.Schemas.ResponseFormatJsonSchema)
                public init(from decoder: any Decoder) throws {
                    var errors: [any Error] = []
                    do {
                        self = .ResponseFormatText(try .init(from: decoder))
                        return
                    } catch {
                        errors.append(error)
                    }
                    do {
                        self = .ResponseFormatJsonObject(try .init(from: decoder))
                        return
                    } catch {
                        errors.append(error)
                    }
                    do {
                        self = .ResponseFormatJsonSchema(try .init(from: decoder))
                        return
                    } catch {
                        errors.append(error)
                    }
                    throw Swift.DecodingError.failedToDecodeOneOfSchema(
                        type: Self.self,
                        codingPath: decoder.codingPath,
                        errors: errors
                    )
                }
                public func encode(to encoder: any Encoder) throws {
                    switch self {
                    case let .ResponseFormatText(value):
                        try value.encode(to: encoder)
                    case let .ResponseFormatJsonObject(value):
                        try value.encode(to: encoder)
                    case let .ResponseFormatJsonSchema(value):
                        try value.encode(to: encoder)
                    }
                }
            }
            /// An object specifying the format that the model must output.
            ///
            /// Setting to `{ "type": "json_schema", "json_schema": {...} }` enables
            /// Structured Outputs which ensures the model will match your supplied JSON
            /// schema. Learn more in the [Structured Outputs
            /// guide](/docs/guides/structured-outputs).
            ///
            /// Setting to `{ "type": "json_object" }` enables JSON mode, which ensures
            /// the message the model generates is valid JSON.
            ///
            /// **Important:** when using JSON mode, you **must** also instruct the model
            /// to produce JSON yourself via a system or user message. Without this, the
            /// model may generate an unending stream of whitespace until the generation
            /// reaches the token limit, resulting in a long-running and seemingly "stuck"
            /// request. Also note that the message content may be partially cut off if
            /// `finish_reason="length"`, which indicates the generation exceeded
            /// `max_tokens` or the conversation exceeded the max context length.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/CreateChatCompletionRequest/response_format`.
            public var responseFormat: Components.Schemas.CreateChatCompletionRequest.ResponseFormatPayload?
            /// This feature is in Beta.
            /// If specified, our system will make a best effort to sample deterministically, such that repeated requests with the same `seed` and parameters should return the same result.
            /// Determinism is not guaranteed, and you should refer to the `system_fingerprint` response parameter to monitor changes in the backend.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/CreateChatCompletionRequest/seed`.
            public var seed: Swift.Int64?
            /// Specifies the latency tier to use for processing the request. This parameter is relevant for customers subscribed to the scale tier service:
            ///   - If set to 'auto', and the Project is Scale tier enabled, the system will utilize scale tier credits until they are exhausted.
            ///   - If set to 'auto', and the Project is not Scale tier enabled, the request will be processed using the default service tier with a lower uptime SLA and no latency guarantee.
            ///   - If set to 'default', the request will be processed using the default service tier with a lower uptime SLA and no latency guarantee.
            ///   - When not set, the default behavior is 'auto'.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/CreateChatCompletionRequest/service_tier`.
            @frozen public enum ServiceTierPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case auto = "auto"
                case _default = "default"
            }
            /// Specifies the latency tier to use for processing the request. This parameter is relevant for customers subscribed to the scale tier service:
            ///   - If set to 'auto', and the Project is Scale tier enabled, the system will utilize scale tier credits until they are exhausted.
            ///   - If set to 'auto', and the Project is not Scale tier enabled, the request will be processed using the default service tier with a lower uptime SLA and no latency guarantee.
            ///   - If set to 'default', the request will be processed using the default service tier with a lower uptime SLA and no latency guarantee.
            ///   - When not set, the default behavior is 'auto'.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/CreateChatCompletionRequest/service_tier`.
            public var serviceTier: Components.Schemas.CreateChatCompletionRequest.ServiceTierPayload?
            /// Up to 4 sequences where the API will stop generating further tokens.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/CreateChatCompletionRequest/stop`.
            @frozen public enum StopPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/CreateChatCompletionRequest/stop/case1`.
                case case1(Swift.String?)
                /// - Remark: Generated from `#/components/schemas/CreateChatCompletionRequest/stop/case2`.
                case case2([Swift.String])
                public init(from decoder: any Decoder) throws {
                    var errors: [any Error] = []
                    do {
                        self = .case1(try decoder.decodeFromSingleValueContainer())
                        return
                    } catch {
                        errors.append(error)
                    }
                    do {
                        self = .case2(try decoder.decodeFromSingleValueContainer())
                        return
                    } catch {
                        errors.append(error)
                    }
                    throw Swift.DecodingError.failedToDecodeOneOfSchema(
                        type: Self.self,
                        codingPath: decoder.codingPath,
                        errors: errors
                    )
                }
                public func encode(to encoder: any Encoder) throws {
                    switch self {
                    case let .case1(value):
                        try encoder.encodeToSingleValueContainer(value)
                    case let .case2(value):
                        try encoder.encodeToSingleValueContainer(value)
                    }
                }
            }
            /// Up to 4 sequences where the API will stop generating further tokens.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/CreateChatCompletionRequest/stop`.
            public var stop: Components.Schemas.CreateChatCompletionRequest.StopPayload?
            /// If set, partial message deltas will be sent, like in ChatGPT. Tokens will be sent as data-only [server-sent events](https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events#Event_stream_format) as they become available, with the stream terminated by a `data: [DONE]` message. [Example Python code](https://cookbook.openai.com/examples/how_to_stream_completions).
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/CreateChatCompletionRequest/stream`.
            public var stream: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/CreateChatCompletionRequest/stream_options`.
            public var streamOptions: Components.Schemas.ChatCompletionStreamOptions?
            /// What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic.
            /// We generally recommend altering this or `top_p` but not both.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/CreateChatCompletionRequest/temperature`.
            public var temperature: Swift.Double?
            /// An alternative to sampling with temperature, called nucleus sampling,
            /// where the model considers the results of the tokens with top_p probability
            /// mass. So 0.1 means only the tokens comprising the top 10% probability mass
            /// are considered.
            ///
            /// We generally recommend altering this or `temperature` but not both.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/CreateChatCompletionRequest/top_p`.
            public var topP: Swift.Double?
            /// A list of tools the model may call. Currently, only functions are supported as a tool. Use this to provide a list of functions the model may generate JSON inputs for. A max of 128 functions are supported.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/CreateChatCompletionRequest/tools`.
            public var tools: [Components.Schemas.ChatCompletionTool]?
            /// - Remark: Generated from `#/components/schemas/CreateChatCompletionRequest/tool_choice`.
            public var toolChoice: Components.Schemas.ChatCompletionToolChoiceOption?
            /// - Remark: Generated from `#/components/schemas/CreateChatCompletionRequest/parallel_tool_calls`.
            public var parallelToolCalls: Components.Schemas.ParallelToolCalls?
            /// A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse. [Learn more](/docs/guides/safety-best-practices#end-user-ids).
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/CreateChatCompletionRequest/user`.
            public var user: Swift.String?
            /// Deprecated in favor of `tool_choice`.
            ///
            /// Controls which (if any) function is called by the model.
            ///
            /// `none` means the model will not call a function and instead generates a
            /// message.
            ///
            /// `auto` means the model can pick between generating a message or calling a
            /// function.
            ///
            /// Specifying a particular function via `{"name": "my_function"}` forces the
            /// model to call that function.
            ///
            /// `none` is the default when no functions are present. `auto` is the default
            /// if functions are present.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/CreateChatCompletionRequest/function_call`.
            @frozen public enum FunctionCallPayload: Codable, Hashable, Sendable {
                /// `none` means the model will not call a function and instead generates a message. `auto` means the model can pick between generating a message or calling a function.
                ///
                ///
                /// - Remark: Generated from `#/components/schemas/CreateChatCompletionRequest/function_call/case1`.
                @frozen public enum Case1Payload: String, Codable, Hashable, Sendable, CaseIterable {
                    case none = "none"
                    case auto = "auto"
                }
                /// `none` means the model will not call a function and instead generates a message. `auto` means the model can pick between generating a message or calling a function.
                ///
                ///
                /// - Remark: Generated from `#/components/schemas/CreateChatCompletionRequest/function_call/case1`.
                case case1(Components.Schemas.CreateChatCompletionRequest.FunctionCallPayload.Case1Payload)
                /// - Remark: Generated from `#/components/schemas/CreateChatCompletionRequest/function_call/case2`.
                case ChatCompletionFunctionCallOption(Components.Schemas.ChatCompletionFunctionCallOption)
                public init(from decoder: any Decoder) throws {
                    var errors: [any Error] = []
                    do {
                        self = .case1(try decoder.decodeFromSingleValueContainer())
                        return
                    } catch {
                        errors.append(error)
                    }
                    do {
                        self = .ChatCompletionFunctionCallOption(try .init(from: decoder))
                        return
                    } catch {
                        errors.append(error)
                    }
                    throw Swift.DecodingError.failedToDecodeOneOfSchema(
                        type: Self.self,
                        codingPath: decoder.codingPath,
                        errors: errors
                    )
                }
                public func encode(to encoder: any Encoder) throws {
                    switch self {
                    case let .case1(value):
                        try encoder.encodeToSingleValueContainer(value)
                    case let .ChatCompletionFunctionCallOption(value):
                        try value.encode(to: encoder)
                    }
                }
            }
            /// Deprecated in favor of `tool_choice`.
            ///
            /// Controls which (if any) function is called by the model.
            ///
            /// `none` means the model will not call a function and instead generates a
            /// message.
            ///
            /// `auto` means the model can pick between generating a message or calling a
            /// function.
            ///
            /// Specifying a particular function via `{"name": "my_function"}` forces the
            /// model to call that function.
            ///
            /// `none` is the default when no functions are present. `auto` is the default
            /// if functions are present.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/CreateChatCompletionRequest/function_call`.
            @available(*, deprecated)
            public var functionCall: Components.Schemas.CreateChatCompletionRequest.FunctionCallPayload?
            /// Deprecated in favor of `tools`.
            ///
            /// A list of functions the model may generate JSON inputs for.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/CreateChatCompletionRequest/functions`.
            @available(*, deprecated)
            public var functions: [Components.Schemas.ChatCompletionFunctions]?
            /// Creates a new `CreateChatCompletionRequest`.
            ///
            /// - Parameters:
            ///   - messages: A list of messages comprising the conversation so far. Depending on the
            ///   - model: ID of the model to use. See the [model endpoint compatibility](/docs/models#model-endpoint-compatibility) table for details on which models work with the Chat API.
            ///   - store: Whether or not to store the output of this chat completion request for 
            ///   - reasoningEffort: **o1 models only** 
            ///   - metadata:
            ///   - frequencyPenalty: Number between -2.0 and 2.0. Positive values penalize new tokens based on
            ///   - logitBias: Modify the likelihood of specified tokens appearing in the completion.
            ///   - logprobs: Whether to return log probabilities of the output tokens or not. If true,
            ///   - topLogprobs: An integer between 0 and 20 specifying the number of most likely tokens to
            ///   - maxTokens: The maximum number of [tokens](/tokenizer) that can be generated in the
            ///   - maxCompletionTokens: An upper bound for the number of tokens that can be generated for a completion, including visible output tokens and [reasoning tokens](/docs/guides/reasoning).
            ///   - n: How many chat completion choices to generate for each input message. Note that you will be charged based on the number of generated tokens across all of the choices. Keep `n` as `1` to minimize costs.
            ///   - modalities:
            ///   - prediction: Configuration for a [Predicted Output](/docs/guides/predicted-outputs),
            ///   - audio: Parameters for audio output. Required when audio output is requested with
            ///   - presencePenalty: Number between -2.0 and 2.0. Positive values penalize new tokens based on
            ///   - responseFormat: An object specifying the format that the model must output.
            ///   - seed: This feature is in Beta.
            ///   - serviceTier: Specifies the latency tier to use for processing the request. This parameter is relevant for customers subscribed to the scale tier service:
            ///   - stop: Up to 4 sequences where the API will stop generating further tokens.
            ///   - stream: If set, partial message deltas will be sent, like in ChatGPT. Tokens will be sent as data-only [server-sent events](https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events#Event_stream_format) as they become available, with the stream terminated by a `data: [DONE]` message. [Example Python code](https://cookbook.openai.com/examples/how_to_stream_completions).
            ///   - streamOptions:
            ///   - temperature: What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic.
            ///   - topP: An alternative to sampling with temperature, called nucleus sampling,
            ///   - tools: A list of tools the model may call. Currently, only functions are supported as a tool. Use this to provide a list of functions the model may generate JSON inputs for. A max of 128 functions are supported.
            ///   - toolChoice:
            ///   - parallelToolCalls:
            ///   - user: A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse. [Learn more](/docs/guides/safety-best-practices#end-user-ids).
            ///   - functionCall: Deprecated in favor of `tool_choice`.
            ///   - functions: Deprecated in favor of `tools`.
            public init(
                messages: [Components.Schemas.ChatCompletionRequestMessage],
                model: Components.Schemas.CreateChatCompletionRequest.ModelPayload,
                store: Swift.Bool? = nil,
                reasoningEffort: Components.Schemas.CreateChatCompletionRequest.ReasoningEffortPayload? = nil,
                metadata: Components.Schemas.Metadata? = nil,
                frequencyPenalty: Swift.Double? = nil,
                logitBias: Components.Schemas.CreateChatCompletionRequest.LogitBiasPayload? = nil,
                logprobs: Swift.Bool? = nil,
                topLogprobs: Swift.Int? = nil,
                maxTokens: Swift.Int? = nil,
                maxCompletionTokens: Swift.Int? = nil,
                n: Swift.Int? = nil,
                modalities: Components.Schemas.ChatCompletionModalities? = nil,
                prediction: Components.Schemas.CreateChatCompletionRequest.PredictionPayload? = nil,
                audio: Components.Schemas.CreateChatCompletionRequest.AudioPayload? = nil,
                presencePenalty: Swift.Double? = nil,
                responseFormat: Components.Schemas.CreateChatCompletionRequest.ResponseFormatPayload? = nil,
                seed: Swift.Int64? = nil,
                serviceTier: Components.Schemas.CreateChatCompletionRequest.ServiceTierPayload? = nil,
                stop: Components.Schemas.CreateChatCompletionRequest.StopPayload? = nil,
                stream: Swift.Bool? = nil,
                streamOptions: Components.Schemas.ChatCompletionStreamOptions? = nil,
                temperature: Swift.Double? = nil,
                topP: Swift.Double? = nil,
                tools: [Components.Schemas.ChatCompletionTool]? = nil,
                toolChoice: Components.Schemas.ChatCompletionToolChoiceOption? = nil,
                parallelToolCalls: Components.Schemas.ParallelToolCalls? = nil,
                user: Swift.String? = nil,
                functionCall: Components.Schemas.CreateChatCompletionRequest.FunctionCallPayload? = nil,
                functions: [Components.Schemas.ChatCompletionFunctions]? = nil
            ) {
                self.messages = messages
                self.model = model
                self.store = store
                self.reasoningEffort = reasoningEffort
                self.metadata = metadata
                self.frequencyPenalty = frequencyPenalty
                self.logitBias = logitBias
                self.logprobs = logprobs
                self.topLogprobs = topLogprobs
                self.maxTokens = maxTokens
                self.maxCompletionTokens = maxCompletionTokens
                self.n = n
                self.modalities = modalities
                self.prediction = prediction
                self.audio = audio
                self.presencePenalty = presencePenalty
                self.responseFormat = responseFormat
                self.seed = seed
                self.serviceTier = serviceTier
                self.stop = stop
                self.stream = stream
                self.streamOptions = streamOptions
                self.temperature = temperature
                self.topP = topP
                self.tools = tools
                self.toolChoice = toolChoice
                self.parallelToolCalls = parallelToolCalls
                self.user = user
                self.functionCall = functionCall
                self.functions = functions
            }
            public enum CodingKeys: String, CodingKey {
                case messages
                case model
                case store
                case reasoningEffort = "reasoning_effort"
                case metadata
                case frequencyPenalty = "frequency_penalty"
                case logitBias = "logit_bias"
                case logprobs
                case topLogprobs = "top_logprobs"
                case maxTokens = "max_tokens"
                case maxCompletionTokens = "max_completion_tokens"
                case n
                case modalities
                case prediction
                case audio
                case presencePenalty = "presence_penalty"
                case responseFormat = "response_format"
                case seed
                case serviceTier = "service_tier"
                case stop
                case stream
                case streamOptions = "stream_options"
                case temperature
                case topP = "top_p"
                case tools
                case toolChoice = "tool_choice"
                case parallelToolCalls = "parallel_tool_calls"
                case user
                case functionCall = "function_call"
                case functions
            }
        }
        /// Represents a chat completion response returned by model, based on the provided input.
        ///
        /// - Remark: Generated from `#/components/schemas/CreateChatCompletionResponse`.
        public struct CreateChatCompletionResponse: Codable, Hashable, Sendable {
            /// A unique identifier for the chat completion.
            ///
            /// - Remark: Generated from `#/components/schemas/CreateChatCompletionResponse/id`.
            public var id: Swift.String
            /// - Remark: Generated from `#/components/schemas/CreateChatCompletionResponse/ChoicesPayload`.
            public struct ChoicesPayloadPayload: Codable, Hashable, Sendable {
                /// The reason the model stopped generating tokens. This will be `stop` if the model hit a natural stop point or a provided stop sequence,
                /// `length` if the maximum number of tokens specified in the request was reached,
                /// `content_filter` if content was omitted due to a flag from our content filters,
                /// `tool_calls` if the model called a tool, or `function_call` (deprecated) if the model called a function.
                ///
                ///
                /// - Remark: Generated from `#/components/schemas/CreateChatCompletionResponse/ChoicesPayload/finish_reason`.
                @frozen public enum FinishReasonPayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case stop = "stop"
                    case length = "length"
                    case toolCalls = "tool_calls"
                    case contentFilter = "content_filter"
                    case functionCall = "function_call"
                }
                /// The reason the model stopped generating tokens. This will be `stop` if the model hit a natural stop point or a provided stop sequence,
                /// `length` if the maximum number of tokens specified in the request was reached,
                /// `content_filter` if content was omitted due to a flag from our content filters,
                /// `tool_calls` if the model called a tool, or `function_call` (deprecated) if the model called a function.
                ///
                ///
                /// - Remark: Generated from `#/components/schemas/CreateChatCompletionResponse/ChoicesPayload/finish_reason`.
                public var finishReason: Components.Schemas.CreateChatCompletionResponse.ChoicesPayloadPayload.FinishReasonPayload
                /// The index of the choice in the list of choices.
                ///
                /// - Remark: Generated from `#/components/schemas/CreateChatCompletionResponse/ChoicesPayload/index`.
                public var index: Swift.Int
                /// - Remark: Generated from `#/components/schemas/CreateChatCompletionResponse/ChoicesPayload/message`.
                public var message: Components.Schemas.ChatCompletionResponseMessage
                /// Log probability information for the choice.
                ///
                /// - Remark: Generated from `#/components/schemas/CreateChatCompletionResponse/ChoicesPayload/logprobs`.
                public struct LogprobsPayload: Codable, Hashable, Sendable {
                    /// A list of message content tokens with log probability information.
                    ///
                    /// - Remark: Generated from `#/components/schemas/CreateChatCompletionResponse/ChoicesPayload/logprobs/content`.
                    public var content: [Components.Schemas.ChatCompletionTokenLogprob]?
                    /// A list of message refusal tokens with log probability information.
                    ///
                    /// - Remark: Generated from `#/components/schemas/CreateChatCompletionResponse/ChoicesPayload/logprobs/refusal`.
                    public var refusal: [Components.Schemas.ChatCompletionTokenLogprob]?
                    /// Creates a new `LogprobsPayload`.
                    ///
                    /// - Parameters:
                    ///   - content: A list of message content tokens with log probability information.
                    ///   - refusal: A list of message refusal tokens with log probability information.
                    public init(
                        content: [Components.Schemas.ChatCompletionTokenLogprob]? = nil,
                        refusal: [Components.Schemas.ChatCompletionTokenLogprob]? = nil
                    ) {
                        self.content = content
                        self.refusal = refusal
                    }
                    public enum CodingKeys: String, CodingKey {
                        case content
                        case refusal
                    }
                }
                /// Log probability information for the choice.
                ///
                /// - Remark: Generated from `#/components/schemas/CreateChatCompletionResponse/ChoicesPayload/logprobs`.
                public var logprobs: Components.Schemas.CreateChatCompletionResponse.ChoicesPayloadPayload.LogprobsPayload?
                /// Creates a new `ChoicesPayloadPayload`.
                ///
                /// - Parameters:
                ///   - finishReason: The reason the model stopped generating tokens. This will be `stop` if the model hit a natural stop point or a provided stop sequence,
                ///   - index: The index of the choice in the list of choices.
                ///   - message:
                ///   - logprobs: Log probability information for the choice.
                public init(
                    finishReason: Components.Schemas.CreateChatCompletionResponse.ChoicesPayloadPayload.FinishReasonPayload,
                    index: Swift.Int,
                    message: Components.Schemas.ChatCompletionResponseMessage,
                    logprobs: Components.Schemas.CreateChatCompletionResponse.ChoicesPayloadPayload.LogprobsPayload? = nil
                ) {
                    self.finishReason = finishReason
                    self.index = index
                    self.message = message
                    self.logprobs = logprobs
                }
                public enum CodingKeys: String, CodingKey {
                    case finishReason = "finish_reason"
                    case index
                    case message
                    case logprobs
                }
            }
            /// A list of chat completion choices. Can be more than one if `n` is greater than 1.
            ///
            /// - Remark: Generated from `#/components/schemas/CreateChatCompletionResponse/choices`.
            public typealias ChoicesPayload = [Components.Schemas.CreateChatCompletionResponse.ChoicesPayloadPayload]
            /// A list of chat completion choices. Can be more than one if `n` is greater than 1.
            ///
            /// - Remark: Generated from `#/components/schemas/CreateChatCompletionResponse/choices`.
            public var choices: Components.Schemas.CreateChatCompletionResponse.ChoicesPayload
            /// The Unix timestamp (in seconds) of when the chat completion was created.
            ///
            /// - Remark: Generated from `#/components/schemas/CreateChatCompletionResponse/created`.
            public var created: Swift.Int
            /// The model used for the chat completion.
            ///
            /// - Remark: Generated from `#/components/schemas/CreateChatCompletionResponse/model`.
            public var model: Swift.String
            /// The service tier used for processing the request.
            ///
            /// - Remark: Generated from `#/components/schemas/CreateChatCompletionResponse/service_tier`.
            @frozen public enum ServiceTierPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case scale = "scale"
                case _default = "default"
            }
            /// The service tier used for processing the request.
            ///
            /// - Remark: Generated from `#/components/schemas/CreateChatCompletionResponse/service_tier`.
            public var serviceTier: Components.Schemas.CreateChatCompletionResponse.ServiceTierPayload?
            /// This fingerprint represents the backend configuration that the model runs with.
            ///
            /// Can be used in conjunction with the `seed` request parameter to understand when backend changes have been made that might impact determinism.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/CreateChatCompletionResponse/system_fingerprint`.
            public var systemFingerprint: Swift.String?
            /// The object type, which is always `chat.completion`.
            ///
            /// - Remark: Generated from `#/components/schemas/CreateChatCompletionResponse/object`.
            @frozen public enum ObjectPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case chat_completion = "chat.completion"
            }
            /// The object type, which is always `chat.completion`.
            ///
            /// - Remark: Generated from `#/components/schemas/CreateChatCompletionResponse/object`.
            public var object: Components.Schemas.CreateChatCompletionResponse.ObjectPayload
            /// - Remark: Generated from `#/components/schemas/CreateChatCompletionResponse/usage`.
            public var usage: Components.Schemas.CompletionUsage?
            /// Creates a new `CreateChatCompletionResponse`.
            ///
            /// - Parameters:
            ///   - id: A unique identifier for the chat completion.
            ///   - choices: A list of chat completion choices. Can be more than one if `n` is greater than 1.
            ///   - created: The Unix timestamp (in seconds) of when the chat completion was created.
            ///   - model: The model used for the chat completion.
            ///   - serviceTier: The service tier used for processing the request.
            ///   - systemFingerprint: This fingerprint represents the backend configuration that the model runs with.
            ///   - object: The object type, which is always `chat.completion`.
            ///   - usage:
            public init(
                id: Swift.String,
                choices: Components.Schemas.CreateChatCompletionResponse.ChoicesPayload,
                created: Swift.Int,
                model: Swift.String,
                serviceTier: Components.Schemas.CreateChatCompletionResponse.ServiceTierPayload? = nil,
                systemFingerprint: Swift.String? = nil,
                object: Components.Schemas.CreateChatCompletionResponse.ObjectPayload,
                usage: Components.Schemas.CompletionUsage? = nil
            ) {
                self.id = id
                self.choices = choices
                self.created = created
                self.model = model
                self.serviceTier = serviceTier
                self.systemFingerprint = systemFingerprint
                self.object = object
                self.usage = usage
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case choices
                case created
                case model
                case serviceTier = "service_tier"
                case systemFingerprint = "system_fingerprint"
                case object
                case usage
            }
        }
        /// Represents a streamed chunk of a chat completion response returned by model, based on the provided input.
        ///
        /// - Remark: Generated from `#/components/schemas/CreateChatCompletionStreamResponse`.
        public struct CreateChatCompletionStreamResponse: Codable, Hashable, Sendable {
            /// A unique identifier for the chat completion. Each chunk has the same ID.
            ///
            /// - Remark: Generated from `#/components/schemas/CreateChatCompletionStreamResponse/id`.
            public var id: Swift.String
            /// - Remark: Generated from `#/components/schemas/CreateChatCompletionStreamResponse/ChoicesPayload`.
            public struct ChoicesPayloadPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/CreateChatCompletionStreamResponse/ChoicesPayload/delta`.
                public var delta: Components.Schemas.ChatCompletionStreamResponseDelta
                /// Log probability information for the choice.
                ///
                /// - Remark: Generated from `#/components/schemas/CreateChatCompletionStreamResponse/ChoicesPayload/logprobs`.
                public struct LogprobsPayload: Codable, Hashable, Sendable {
                    /// A list of message content tokens with log probability information.
                    ///
                    /// - Remark: Generated from `#/components/schemas/CreateChatCompletionStreamResponse/ChoicesPayload/logprobs/content`.
                    public var content: [Components.Schemas.ChatCompletionTokenLogprob]?
                    /// A list of message refusal tokens with log probability information.
                    ///
                    /// - Remark: Generated from `#/components/schemas/CreateChatCompletionStreamResponse/ChoicesPayload/logprobs/refusal`.
                    public var refusal: [Components.Schemas.ChatCompletionTokenLogprob]?
                    /// Creates a new `LogprobsPayload`.
                    ///
                    /// - Parameters:
                    ///   - content: A list of message content tokens with log probability information.
                    ///   - refusal: A list of message refusal tokens with log probability information.
                    public init(
                        content: [Components.Schemas.ChatCompletionTokenLogprob]? = nil,
                        refusal: [Components.Schemas.ChatCompletionTokenLogprob]? = nil
                    ) {
                        self.content = content
                        self.refusal = refusal
                    }
                    public enum CodingKeys: String, CodingKey {
                        case content
                        case refusal
                    }
                }
                /// Log probability information for the choice.
                ///
                /// - Remark: Generated from `#/components/schemas/CreateChatCompletionStreamResponse/ChoicesPayload/logprobs`.
                public var logprobs: Components.Schemas.CreateChatCompletionStreamResponse.ChoicesPayloadPayload.LogprobsPayload?
                /// The reason the model stopped generating tokens. This will be `stop` if the model hit a natural stop point or a provided stop sequence,
                /// `length` if the maximum number of tokens specified in the request was reached,
                /// `content_filter` if content was omitted due to a flag from our content filters,
                /// `tool_calls` if the model called a tool, or `function_call` (deprecated) if the model called a function.
                ///
                ///
                /// - Remark: Generated from `#/components/schemas/CreateChatCompletionStreamResponse/ChoicesPayload/finish_reason`.
                @frozen public enum FinishReasonPayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case stop = "stop"
                    case length = "length"
                    case toolCalls = "tool_calls"
                    case contentFilter = "content_filter"
                    case functionCall = "function_call"
                }
                /// The reason the model stopped generating tokens. This will be `stop` if the model hit a natural stop point or a provided stop sequence,
                /// `length` if the maximum number of tokens specified in the request was reached,
                /// `content_filter` if content was omitted due to a flag from our content filters,
                /// `tool_calls` if the model called a tool, or `function_call` (deprecated) if the model called a function.
                ///
                ///
                /// - Remark: Generated from `#/components/schemas/CreateChatCompletionStreamResponse/ChoicesPayload/finish_reason`.
                public var finishReason: Components.Schemas.CreateChatCompletionStreamResponse.ChoicesPayloadPayload.FinishReasonPayload?
                /// The index of the choice in the list of choices.
                ///
                /// - Remark: Generated from `#/components/schemas/CreateChatCompletionStreamResponse/ChoicesPayload/index`.
                public var index: Swift.Int
                /// Creates a new `ChoicesPayloadPayload`.
                ///
                /// - Parameters:
                ///   - delta:
                ///   - logprobs: Log probability information for the choice.
                ///   - finishReason: The reason the model stopped generating tokens. This will be `stop` if the model hit a natural stop point or a provided stop sequence,
                ///   - index: The index of the choice in the list of choices.
                public init(
                    delta: Components.Schemas.ChatCompletionStreamResponseDelta,
                    logprobs: Components.Schemas.CreateChatCompletionStreamResponse.ChoicesPayloadPayload.LogprobsPayload? = nil,
                    finishReason: Components.Schemas.CreateChatCompletionStreamResponse.ChoicesPayloadPayload.FinishReasonPayload? = nil,
                    index: Swift.Int
                ) {
                    self.delta = delta
                    self.logprobs = logprobs
                    self.finishReason = finishReason
                    self.index = index
                }
                public enum CodingKeys: String, CodingKey {
                    case delta
                    case logprobs
                    case finishReason = "finish_reason"
                    case index
                }
            }
            /// A list of chat completion choices. Can contain more than one elements if `n` is greater than 1. Can also be empty for the
            /// last chunk if you set `stream_options: {"include_usage": true}`.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/CreateChatCompletionStreamResponse/choices`.
            public typealias ChoicesPayload = [Components.Schemas.CreateChatCompletionStreamResponse.ChoicesPayloadPayload]
            /// A list of chat completion choices. Can contain more than one elements if `n` is greater than 1. Can also be empty for the
            /// last chunk if you set `stream_options: {"include_usage": true}`.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/CreateChatCompletionStreamResponse/choices`.
            public var choices: Components.Schemas.CreateChatCompletionStreamResponse.ChoicesPayload
            /// The Unix timestamp (in seconds) of when the chat completion was created. Each chunk has the same timestamp.
            ///
            /// - Remark: Generated from `#/components/schemas/CreateChatCompletionStreamResponse/created`.
            public var created: Swift.Int
            /// The model to generate the completion.
            ///
            /// - Remark: Generated from `#/components/schemas/CreateChatCompletionStreamResponse/model`.
            public var model: Swift.String
            /// The service tier used for processing the request.
            ///
            /// - Remark: Generated from `#/components/schemas/CreateChatCompletionStreamResponse/service_tier`.
            @frozen public enum ServiceTierPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case scale = "scale"
                case _default = "default"
            }
            /// The service tier used for processing the request.
            ///
            /// - Remark: Generated from `#/components/schemas/CreateChatCompletionStreamResponse/service_tier`.
            public var serviceTier: Components.Schemas.CreateChatCompletionStreamResponse.ServiceTierPayload?
            /// This fingerprint represents the backend configuration that the model runs with.
            /// Can be used in conjunction with the `seed` request parameter to understand when backend changes have been made that might impact determinism.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/CreateChatCompletionStreamResponse/system_fingerprint`.
            public var systemFingerprint: Swift.String?
            /// The object type, which is always `chat.completion.chunk`.
            ///
            /// - Remark: Generated from `#/components/schemas/CreateChatCompletionStreamResponse/object`.
            @frozen public enum ObjectPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case chat_completion_chunk = "chat.completion.chunk"
            }
            /// The object type, which is always `chat.completion.chunk`.
            ///
            /// - Remark: Generated from `#/components/schemas/CreateChatCompletionStreamResponse/object`.
            public var object: Components.Schemas.CreateChatCompletionStreamResponse.ObjectPayload
            /// An optional field that will only be present when you set `stream_options: {"include_usage": true}` in your request.
            /// When present, it contains a null value except for the last chunk which contains the token usage statistics for the entire request.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/CreateChatCompletionStreamResponse/usage`.
            public struct UsagePayload: Codable, Hashable, Sendable {
                /// Number of tokens in the generated completion.
                ///
                /// - Remark: Generated from `#/components/schemas/CreateChatCompletionStreamResponse/usage/completion_tokens`.
                public var completionTokens: Swift.Int
                /// Number of tokens in the prompt.
                ///
                /// - Remark: Generated from `#/components/schemas/CreateChatCompletionStreamResponse/usage/prompt_tokens`.
                public var promptTokens: Swift.Int
                /// Total number of tokens used in the request (prompt + completion).
                ///
                /// - Remark: Generated from `#/components/schemas/CreateChatCompletionStreamResponse/usage/total_tokens`.
                public var totalTokens: Swift.Int
                /// Creates a new `UsagePayload`.
                ///
                /// - Parameters:
                ///   - completionTokens: Number of tokens in the generated completion.
                ///   - promptTokens: Number of tokens in the prompt.
                ///   - totalTokens: Total number of tokens used in the request (prompt + completion).
                public init(
                    completionTokens: Swift.Int,
                    promptTokens: Swift.Int,
                    totalTokens: Swift.Int
                ) {
                    self.completionTokens = completionTokens
                    self.promptTokens = promptTokens
                    self.totalTokens = totalTokens
                }
                public enum CodingKeys: String, CodingKey {
                    case completionTokens = "completion_tokens"
                    case promptTokens = "prompt_tokens"
                    case totalTokens = "total_tokens"
                }
            }
            /// An optional field that will only be present when you set `stream_options: {"include_usage": true}` in your request.
            /// When present, it contains a null value except for the last chunk which contains the token usage statistics for the entire request.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/CreateChatCompletionStreamResponse/usage`.
            public var usage: Components.Schemas.CreateChatCompletionStreamResponse.UsagePayload?
            /// Creates a new `CreateChatCompletionStreamResponse`.
            ///
            /// - Parameters:
            ///   - id: A unique identifier for the chat completion. Each chunk has the same ID.
            ///   - choices: A list of chat completion choices. Can contain more than one elements if `n` is greater than 1. Can also be empty for the
            ///   - created: The Unix timestamp (in seconds) of when the chat completion was created. Each chunk has the same timestamp.
            ///   - model: The model to generate the completion.
            ///   - serviceTier: The service tier used for processing the request.
            ///   - systemFingerprint: This fingerprint represents the backend configuration that the model runs with.
            ///   - object: The object type, which is always `chat.completion.chunk`.
            ///   - usage: An optional field that will only be present when you set `stream_options: {"include_usage": true}` in your request.
            public init(
                id: Swift.String,
                choices: Components.Schemas.CreateChatCompletionStreamResponse.ChoicesPayload,
                created: Swift.Int,
                model: Swift.String,
                serviceTier: Components.Schemas.CreateChatCompletionStreamResponse.ServiceTierPayload? = nil,
                systemFingerprint: Swift.String? = nil,
                object: Components.Schemas.CreateChatCompletionStreamResponse.ObjectPayload,
                usage: Components.Schemas.CreateChatCompletionStreamResponse.UsagePayload? = nil
            ) {
                self.id = id
                self.choices = choices
                self.created = created
                self.model = model
                self.serviceTier = serviceTier
                self.systemFingerprint = systemFingerprint
                self.object = object
                self.usage = usage
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case choices
                case created
                case model
                case serviceTier = "service_tier"
                case systemFingerprint = "system_fingerprint"
                case object
                case usage
            }
        }
        /// - Remark: Generated from `#/components/schemas/CreateCompletionRequest`.
        public struct CreateCompletionRequest: Codable, Hashable, Sendable {
            /// ID of the model to use. You can use the [List models](/docs/api-reference/models/list) API to see all of your available models, or see our [Model overview](/docs/models) for descriptions of them.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/CreateCompletionRequest/model`.
            public struct ModelPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/CreateCompletionRequest/model/value1`.
                public var value1: Swift.String?
                /// - Remark: Generated from `#/components/schemas/CreateCompletionRequest/model/value2`.
                @frozen public enum Value2Payload: String, Codable, Hashable, Sendable, CaseIterable {
                    case gpt3_5TurboInstruct = "gpt-3.5-turbo-instruct"
                    case davinci002 = "davinci-002"
                    case babbage002 = "babbage-002"
                }
                /// - Remark: Generated from `#/components/schemas/CreateCompletionRequest/model/value2`.
                public var value2: Components.Schemas.CreateCompletionRequest.ModelPayload.Value2Payload?
                /// Creates a new `ModelPayload`.
                ///
                /// - Parameters:
                ///   - value1:
                ///   - value2:
                public init(
                    value1: Swift.String? = nil,
                    value2: Components.Schemas.CreateCompletionRequest.ModelPayload.Value2Payload? = nil
                ) {
                    self.value1 = value1
                    self.value2 = value2
                }
                public init(from decoder: any Decoder) throws {
                    var errors: [any Error] = []
                    do {
                        self.value1 = try decoder.decodeFromSingleValueContainer()
                    } catch {
                        errors.append(error)
                    }
                    do {
                        self.value2 = try decoder.decodeFromSingleValueContainer()
                    } catch {
                        errors.append(error)
                    }
                    try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                        [
                            self.value1,
                            self.value2
                        ],
                        type: Self.self,
                        codingPath: decoder.codingPath,
                        errors: errors
                    )
                }
                public func encode(to encoder: any Encoder) throws {
                    try encoder.encodeFirstNonNilValueToSingleValueContainer([
                        self.value1,
                        self.value2
                    ])
                }
            }
            /// ID of the model to use. You can use the [List models](/docs/api-reference/models/list) API to see all of your available models, or see our [Model overview](/docs/models) for descriptions of them.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/CreateCompletionRequest/model`.
            public var model: Components.Schemas.CreateCompletionRequest.ModelPayload
            /// The prompt(s) to generate completions for, encoded as a string, array of strings, array of tokens, or array of token arrays.
            ///
            /// Note that <|endoftext|> is the document separator that the model sees during training, so if a prompt is not specified the model will generate as if from the beginning of a new document.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/CreateCompletionRequest/prompt`.
            @frozen public enum PromptPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/CreateCompletionRequest/prompt/case1`.
                case case1(Swift.String)
                /// - Remark: Generated from `#/components/schemas/CreateCompletionRequest/prompt/case2`.
                case case2([Swift.String])
                /// - Remark: Generated from `#/components/schemas/CreateCompletionRequest/prompt/case3`.
                case case3([Swift.Int])
                /// - Remark: Generated from `#/components/schemas/CreateCompletionRequest/prompt/case4`.
                case case4([[Swift.Int]])
                public init(from decoder: any Decoder) throws {
                    var errors: [any Error] = []
                    do {
                        self = .case1(try decoder.decodeFromSingleValueContainer())
                        return
                    } catch {
                        errors.append(error)
                    }
                    do {
                        self = .case2(try decoder.decodeFromSingleValueContainer())
                        return
                    } catch {
                        errors.append(error)
                    }
                    do {
                        self = .case3(try decoder.decodeFromSingleValueContainer())
                        return
                    } catch {
                        errors.append(error)
                    }
                    do {
                        self = .case4(try decoder.decodeFromSingleValueContainer())
                        return
                    } catch {
                        errors.append(error)
                    }
                    throw Swift.DecodingError.failedToDecodeOneOfSchema(
                        type: Self.self,
                        codingPath: decoder.codingPath,
                        errors: errors
                    )
                }
                public func encode(to encoder: any Encoder) throws {
                    switch self {
                    case let .case1(value):
                        try encoder.encodeToSingleValueContainer(value)
                    case let .case2(value):
                        try encoder.encodeToSingleValueContainer(value)
                    case let .case3(value):
                        try encoder.encodeToSingleValueContainer(value)
                    case let .case4(value):
                        try encoder.encodeToSingleValueContainer(value)
                    }
                }
            }
            /// The prompt(s) to generate completions for, encoded as a string, array of strings, array of tokens, or array of token arrays.
            ///
            /// Note that <|endoftext|> is the document separator that the model sees during training, so if a prompt is not specified the model will generate as if from the beginning of a new document.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/CreateCompletionRequest/prompt`.
            public var prompt: Components.Schemas.CreateCompletionRequest.PromptPayload?
            /// Generates `best_of` completions server-side and returns the "best" (the one with the highest log probability per token). Results cannot be streamed.
            ///
            /// When used with `n`, `best_of` controls the number of candidate completions and `n` specifies how many to return – `best_of` must be greater than `n`.
            ///
            /// **Note:** Because this parameter generates many completions, it can quickly consume your token quota. Use carefully and ensure that you have reasonable settings for `max_tokens` and `stop`.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/CreateCompletionRequest/best_of`.
            public var bestOf: Swift.Int?
            /// Echo back the prompt in addition to the completion
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/CreateCompletionRequest/echo`.
            public var echo: Swift.Bool?
            /// Number between -2.0 and 2.0. Positive values penalize new tokens based on their existing frequency in the text so far, decreasing the model's likelihood to repeat the same line verbatim.
            ///
            /// [See more information about frequency and presence penalties.](/docs/guides/text-generation)
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/CreateCompletionRequest/frequency_penalty`.
            public var frequencyPenalty: Swift.Double?
            /// Modify the likelihood of specified tokens appearing in the completion.
            ///
            /// Accepts a JSON object that maps tokens (specified by their token ID in the GPT tokenizer) to an associated bias value from -100 to 100. You can use this [tokenizer tool](/tokenizer?view=bpe) to convert text to token IDs. Mathematically, the bias is added to the logits generated by the model prior to sampling. The exact effect will vary per model, but values between -1 and 1 should decrease or increase likelihood of selection; values like -100 or 100 should result in a ban or exclusive selection of the relevant token.
            ///
            /// As an example, you can pass `{"50256": -100}` to prevent the <|endoftext|> token from being generated.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/CreateCompletionRequest/logit_bias`.
            public struct LogitBiasPayload: Codable, Hashable, Sendable {
                /// A container of undocumented properties.
                public var additionalProperties: [String: Swift.Int]
                /// Creates a new `LogitBiasPayload`.
                ///
                /// - Parameters:
                ///   - additionalProperties: A container of undocumented properties.
                public init(additionalProperties: [String: Swift.Int] = .init()) {
                    self.additionalProperties = additionalProperties
                }
                public init(from decoder: any Decoder) throws {
                    additionalProperties = try decoder.decodeAdditionalProperties(knownKeys: [])
                }
                public func encode(to encoder: any Encoder) throws {
                    try encoder.encodeAdditionalProperties(additionalProperties)
                }
            }
            /// Modify the likelihood of specified tokens appearing in the completion.
            ///
            /// Accepts a JSON object that maps tokens (specified by their token ID in the GPT tokenizer) to an associated bias value from -100 to 100. You can use this [tokenizer tool](/tokenizer?view=bpe) to convert text to token IDs. Mathematically, the bias is added to the logits generated by the model prior to sampling. The exact effect will vary per model, but values between -1 and 1 should decrease or increase likelihood of selection; values like -100 or 100 should result in a ban or exclusive selection of the relevant token.
            ///
            /// As an example, you can pass `{"50256": -100}` to prevent the <|endoftext|> token from being generated.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/CreateCompletionRequest/logit_bias`.
            public var logitBias: Components.Schemas.CreateCompletionRequest.LogitBiasPayload?
            /// Include the log probabilities on the `logprobs` most likely output tokens, as well the chosen tokens. For example, if `logprobs` is 5, the API will return a list of the 5 most likely tokens. The API will always return the `logprob` of the sampled token, so there may be up to `logprobs+1` elements in the response.
            ///
            /// The maximum value for `logprobs` is 5.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/CreateCompletionRequest/logprobs`.
            public var logprobs: Swift.Int?
            /// The maximum number of [tokens](/tokenizer) that can be generated in the completion.
            ///
            /// The token count of your prompt plus `max_tokens` cannot exceed the model's context length. [Example Python code](https://cookbook.openai.com/examples/how_to_count_tokens_with_tiktoken) for counting tokens.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/CreateCompletionRequest/max_tokens`.
            public var maxTokens: Swift.Int?
            /// How many completions to generate for each prompt.
            ///
            /// **Note:** Because this parameter generates many completions, it can quickly consume your token quota. Use carefully and ensure that you have reasonable settings for `max_tokens` and `stop`.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/CreateCompletionRequest/n`.
            public var n: Swift.Int?
            /// Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far, increasing the model's likelihood to talk about new topics.
            ///
            /// [See more information about frequency and presence penalties.](/docs/guides/text-generation)
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/CreateCompletionRequest/presence_penalty`.
            public var presencePenalty: Swift.Double?
            /// If specified, our system will make a best effort to sample deterministically, such that repeated requests with the same `seed` and parameters should return the same result.
            ///
            /// Determinism is not guaranteed, and you should refer to the `system_fingerprint` response parameter to monitor changes in the backend.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/CreateCompletionRequest/seed`.
            public var seed: Swift.Int64?
            /// Up to 4 sequences where the API will stop generating further tokens. The returned text will not contain the stop sequence.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/CreateCompletionRequest/stop`.
            @frozen public enum StopPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/CreateCompletionRequest/stop/case1`.
                case case1(Swift.String?)
                /// - Remark: Generated from `#/components/schemas/CreateCompletionRequest/stop/case2`.
                case case2([Swift.String])
                public init(from decoder: any Decoder) throws {
                    var errors: [any Error] = []
                    do {
                        self = .case1(try decoder.decodeFromSingleValueContainer())
                        return
                    } catch {
                        errors.append(error)
                    }
                    do {
                        self = .case2(try decoder.decodeFromSingleValueContainer())
                        return
                    } catch {
                        errors.append(error)
                    }
                    throw Swift.DecodingError.failedToDecodeOneOfSchema(
                        type: Self.self,
                        codingPath: decoder.codingPath,
                        errors: errors
                    )
                }
                public func encode(to encoder: any Encoder) throws {
                    switch self {
                    case let .case1(value):
                        try encoder.encodeToSingleValueContainer(value)
                    case let .case2(value):
                        try encoder.encodeToSingleValueContainer(value)
                    }
                }
            }
            /// Up to 4 sequences where the API will stop generating further tokens. The returned text will not contain the stop sequence.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/CreateCompletionRequest/stop`.
            public var stop: Components.Schemas.CreateCompletionRequest.StopPayload?
            /// Whether to stream back partial progress. If set, tokens will be sent as data-only [server-sent events](https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events#Event_stream_format) as they become available, with the stream terminated by a `data: [DONE]` message. [Example Python code](https://cookbook.openai.com/examples/how_to_stream_completions).
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/CreateCompletionRequest/stream`.
            public var stream: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/CreateCompletionRequest/stream_options`.
            public var streamOptions: Components.Schemas.ChatCompletionStreamOptions?
            /// The suffix that comes after a completion of inserted text.
            ///
            /// This parameter is only supported for `gpt-3.5-turbo-instruct`.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/CreateCompletionRequest/suffix`.
            public var suffix: Swift.String?
            /// What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic.
            ///
            /// We generally recommend altering this or `top_p` but not both.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/CreateCompletionRequest/temperature`.
            public var temperature: Swift.Double?
            /// An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered.
            ///
            /// We generally recommend altering this or `temperature` but not both.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/CreateCompletionRequest/top_p`.
            public var topP: Swift.Double?
            /// A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse. [Learn more](/docs/guides/safety-best-practices#end-user-ids).
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/CreateCompletionRequest/user`.
            public var user: Swift.String?
            /// Creates a new `CreateCompletionRequest`.
            ///
            /// - Parameters:
            ///   - model: ID of the model to use. You can use the [List models](/docs/api-reference/models/list) API to see all of your available models, or see our [Model overview](/docs/models) for descriptions of them.
            ///   - prompt: The prompt(s) to generate completions for, encoded as a string, array of strings, array of tokens, or array of token arrays.
            ///   - bestOf: Generates `best_of` completions server-side and returns the "best" (the one with the highest log probability per token). Results cannot be streamed.
            ///   - echo: Echo back the prompt in addition to the completion
            ///   - frequencyPenalty: Number between -2.0 and 2.0. Positive values penalize new tokens based on their existing frequency in the text so far, decreasing the model's likelihood to repeat the same line verbatim.
            ///   - logitBias: Modify the likelihood of specified tokens appearing in the completion.
            ///   - logprobs: Include the log probabilities on the `logprobs` most likely output tokens, as well the chosen tokens. For example, if `logprobs` is 5, the API will return a list of the 5 most likely tokens. The API will always return the `logprob` of the sampled token, so there may be up to `logprobs+1` elements in the response.
            ///   - maxTokens: The maximum number of [tokens](/tokenizer) that can be generated in the completion.
            ///   - n: How many completions to generate for each prompt.
            ///   - presencePenalty: Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far, increasing the model's likelihood to talk about new topics.
            ///   - seed: If specified, our system will make a best effort to sample deterministically, such that repeated requests with the same `seed` and parameters should return the same result.
            ///   - stop: Up to 4 sequences where the API will stop generating further tokens. The returned text will not contain the stop sequence.
            ///   - stream: Whether to stream back partial progress. If set, tokens will be sent as data-only [server-sent events](https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events#Event_stream_format) as they become available, with the stream terminated by a `data: [DONE]` message. [Example Python code](https://cookbook.openai.com/examples/how_to_stream_completions).
            ///   - streamOptions:
            ///   - suffix: The suffix that comes after a completion of inserted text.
            ///   - temperature: What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic.
            ///   - topP: An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered.
            ///   - user: A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse. [Learn more](/docs/guides/safety-best-practices#end-user-ids).
            public init(
                model: Components.Schemas.CreateCompletionRequest.ModelPayload,
                prompt: Components.Schemas.CreateCompletionRequest.PromptPayload? = nil,
                bestOf: Swift.Int? = nil,
                echo: Swift.Bool? = nil,
                frequencyPenalty: Swift.Double? = nil,
                logitBias: Components.Schemas.CreateCompletionRequest.LogitBiasPayload? = nil,
                logprobs: Swift.Int? = nil,
                maxTokens: Swift.Int? = nil,
                n: Swift.Int? = nil,
                presencePenalty: Swift.Double? = nil,
                seed: Swift.Int64? = nil,
                stop: Components.Schemas.CreateCompletionRequest.StopPayload? = nil,
                stream: Swift.Bool? = nil,
                streamOptions: Components.Schemas.ChatCompletionStreamOptions? = nil,
                suffix: Swift.String? = nil,
                temperature: Swift.Double? = nil,
                topP: Swift.Double? = nil,
                user: Swift.String? = nil
            ) {
                self.model = model
                self.prompt = prompt
                self.bestOf = bestOf
                self.echo = echo
                self.frequencyPenalty = frequencyPenalty
                self.logitBias = logitBias
                self.logprobs = logprobs
                self.maxTokens = maxTokens
                self.n = n
                self.presencePenalty = presencePenalty
                self.seed = seed
                self.stop = stop
                self.stream = stream
                self.streamOptions = streamOptions
                self.suffix = suffix
                self.temperature = temperature
                self.topP = topP
                self.user = user
            }
            public enum CodingKeys: String, CodingKey {
                case model
                case prompt
                case bestOf = "best_of"
                case echo
                case frequencyPenalty = "frequency_penalty"
                case logitBias = "logit_bias"
                case logprobs
                case maxTokens = "max_tokens"
                case n
                case presencePenalty = "presence_penalty"
                case seed
                case stop
                case stream
                case streamOptions = "stream_options"
                case suffix
                case temperature
                case topP = "top_p"
                case user
            }
        }
        /// Represents a completion response from the API. Note: both the streamed and non-streamed response objects share the same shape (unlike the chat endpoint).
        ///
        ///
        /// - Remark: Generated from `#/components/schemas/CreateCompletionResponse`.
        public struct CreateCompletionResponse: Codable, Hashable, Sendable {
            /// A unique identifier for the completion.
            ///
            /// - Remark: Generated from `#/components/schemas/CreateCompletionResponse/id`.
            public var id: Swift.String
            /// - Remark: Generated from `#/components/schemas/CreateCompletionResponse/ChoicesPayload`.
            public struct ChoicesPayloadPayload: Codable, Hashable, Sendable {
                /// The reason the model stopped generating tokens. This will be `stop` if the model hit a natural stop point or a provided stop sequence,
                /// `length` if the maximum number of tokens specified in the request was reached,
                /// or `content_filter` if content was omitted due to a flag from our content filters.
                ///
                ///
                /// - Remark: Generated from `#/components/schemas/CreateCompletionResponse/ChoicesPayload/finish_reason`.
                @frozen public enum FinishReasonPayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case stop = "stop"
                    case length = "length"
                    case contentFilter = "content_filter"
                }
                /// The reason the model stopped generating tokens. This will be `stop` if the model hit a natural stop point or a provided stop sequence,
                /// `length` if the maximum number of tokens specified in the request was reached,
                /// or `content_filter` if content was omitted due to a flag from our content filters.
                ///
                ///
                /// - Remark: Generated from `#/components/schemas/CreateCompletionResponse/ChoicesPayload/finish_reason`.
                public var finishReason: Components.Schemas.CreateCompletionResponse.ChoicesPayloadPayload.FinishReasonPayload
                /// - Remark: Generated from `#/components/schemas/CreateCompletionResponse/ChoicesPayload/index`.
                public var index: Swift.Int
                /// - Remark: Generated from `#/components/schemas/CreateCompletionResponse/ChoicesPayload/logprobs`.
                public struct LogprobsPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/CreateCompletionResponse/ChoicesPayload/logprobs/text_offset`.
                    public var textOffset: [Swift.Int]?
                    /// - Remark: Generated from `#/components/schemas/CreateCompletionResponse/ChoicesPayload/logprobs/token_logprobs`.
                    public var tokenLogprobs: [Swift.Double]?
                    /// - Remark: Generated from `#/components/schemas/CreateCompletionResponse/ChoicesPayload/logprobs/tokens`.
                    public var tokens: [Swift.String]?
                    /// - Remark: Generated from `#/components/schemas/CreateCompletionResponse/ChoicesPayload/logprobs/TopLogprobsPayload`.
                    public struct TopLogprobsPayloadPayload: Codable, Hashable, Sendable {
                        /// A container of undocumented properties.
                        public var additionalProperties: [String: Swift.Double]
                        /// Creates a new `TopLogprobsPayloadPayload`.
                        ///
                        /// - Parameters:
                        ///   - additionalProperties: A container of undocumented properties.
                        public init(additionalProperties: [String: Swift.Double] = .init()) {
                            self.additionalProperties = additionalProperties
                        }
                        public init(from decoder: any Decoder) throws {
                            additionalProperties = try decoder.decodeAdditionalProperties(knownKeys: [])
                        }
                        public func encode(to encoder: any Encoder) throws {
                            try encoder.encodeAdditionalProperties(additionalProperties)
                        }
                    }
                    /// - Remark: Generated from `#/components/schemas/CreateCompletionResponse/ChoicesPayload/logprobs/top_logprobs`.
                    public typealias TopLogprobsPayload = [Components.Schemas.CreateCompletionResponse.ChoicesPayloadPayload.LogprobsPayload.TopLogprobsPayloadPayload]
                    /// - Remark: Generated from `#/components/schemas/CreateCompletionResponse/ChoicesPayload/logprobs/top_logprobs`.
                    public var topLogprobs: Components.Schemas.CreateCompletionResponse.ChoicesPayloadPayload.LogprobsPayload.TopLogprobsPayload?
                    /// Creates a new `LogprobsPayload`.
                    ///
                    /// - Parameters:
                    ///   - textOffset:
                    ///   - tokenLogprobs:
                    ///   - tokens:
                    ///   - topLogprobs:
                    public init(
                        textOffset: [Swift.Int]? = nil,
                        tokenLogprobs: [Swift.Double]? = nil,
                        tokens: [Swift.String]? = nil,
                        topLogprobs: Components.Schemas.CreateCompletionResponse.ChoicesPayloadPayload.LogprobsPayload.TopLogprobsPayload? = nil
                    ) {
                        self.textOffset = textOffset
                        self.tokenLogprobs = tokenLogprobs
                        self.tokens = tokens
                        self.topLogprobs = topLogprobs
                    }
                    public enum CodingKeys: String, CodingKey {
                        case textOffset = "text_offset"
                        case tokenLogprobs = "token_logprobs"
                        case tokens
                        case topLogprobs = "top_logprobs"
                    }
                }
                /// - Remark: Generated from `#/components/schemas/CreateCompletionResponse/ChoicesPayload/logprobs`.
                public var logprobs: Components.Schemas.CreateCompletionResponse.ChoicesPayloadPayload.LogprobsPayload?
                /// - Remark: Generated from `#/components/schemas/CreateCompletionResponse/ChoicesPayload/text`.
                public var text: Swift.String
                /// Creates a new `ChoicesPayloadPayload`.
                ///
                /// - Parameters:
                ///   - finishReason: The reason the model stopped generating tokens. This will be `stop` if the model hit a natural stop point or a provided stop sequence,
                ///   - index:
                ///   - logprobs:
                ///   - text:
                public init(
                    finishReason: Components.Schemas.CreateCompletionResponse.ChoicesPayloadPayload.FinishReasonPayload,
                    index: Swift.Int,
                    logprobs: Components.Schemas.CreateCompletionResponse.ChoicesPayloadPayload.LogprobsPayload? = nil,
                    text: Swift.String
                ) {
                    self.finishReason = finishReason
                    self.index = index
                    self.logprobs = logprobs
                    self.text = text
                }
                public enum CodingKeys: String, CodingKey {
                    case finishReason = "finish_reason"
                    case index
                    case logprobs
                    case text
                }
            }
            /// The list of completion choices the model generated for the input prompt.
            ///
            /// - Remark: Generated from `#/components/schemas/CreateCompletionResponse/choices`.
            public typealias ChoicesPayload = [Components.Schemas.CreateCompletionResponse.ChoicesPayloadPayload]
            /// The list of completion choices the model generated for the input prompt.
            ///
            /// - Remark: Generated from `#/components/schemas/CreateCompletionResponse/choices`.
            public var choices: Components.Schemas.CreateCompletionResponse.ChoicesPayload
            /// The Unix timestamp (in seconds) of when the completion was created.
            ///
            /// - Remark: Generated from `#/components/schemas/CreateCompletionResponse/created`.
            public var created: Swift.Int
            /// The model used for completion.
            ///
            /// - Remark: Generated from `#/components/schemas/CreateCompletionResponse/model`.
            public var model: Swift.String
            /// This fingerprint represents the backend configuration that the model runs with.
            ///
            /// Can be used in conjunction with the `seed` request parameter to understand when backend changes have been made that might impact determinism.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/CreateCompletionResponse/system_fingerprint`.
            public var systemFingerprint: Swift.String?
            /// The object type, which is always "text_completion"
            ///
            /// - Remark: Generated from `#/components/schemas/CreateCompletionResponse/object`.
            @frozen public enum ObjectPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case textCompletion = "text_completion"
            }
            /// The object type, which is always "text_completion"
            ///
            /// - Remark: Generated from `#/components/schemas/CreateCompletionResponse/object`.
            public var object: Components.Schemas.CreateCompletionResponse.ObjectPayload
            /// - Remark: Generated from `#/components/schemas/CreateCompletionResponse/usage`.
            public var usage: Components.Schemas.CompletionUsage?
            /// Creates a new `CreateCompletionResponse`.
            ///
            /// - Parameters:
            ///   - id: A unique identifier for the completion.
            ///   - choices: The list of completion choices the model generated for the input prompt.
            ///   - created: The Unix timestamp (in seconds) of when the completion was created.
            ///   - model: The model used for completion.
            ///   - systemFingerprint: This fingerprint represents the backend configuration that the model runs with.
            ///   - object: The object type, which is always "text_completion"
            ///   - usage:
            public init(
                id: Swift.String,
                choices: Components.Schemas.CreateCompletionResponse.ChoicesPayload,
                created: Swift.Int,
                model: Swift.String,
                systemFingerprint: Swift.String? = nil,
                object: Components.Schemas.CreateCompletionResponse.ObjectPayload,
                usage: Components.Schemas.CompletionUsage? = nil
            ) {
                self.id = id
                self.choices = choices
                self.created = created
                self.model = model
                self.systemFingerprint = systemFingerprint
                self.object = object
                self.usage = usage
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case choices
                case created
                case model
                case systemFingerprint = "system_fingerprint"
                case object
                case usage
            }
        }
        /// - Remark: Generated from `#/components/schemas/CreateEmbeddingRequest`.
        public struct CreateEmbeddingRequest: Codable, Hashable, Sendable {
            /// Input text to embed, encoded as a string or array of tokens. To embed multiple inputs in a single request, pass an array of strings or array of token arrays. The input must not exceed the max input tokens for the model (8192 tokens for `text-embedding-ada-002`), cannot be an empty string, and any array must be 2048 dimensions or less. [Example Python code](https://cookbook.openai.com/examples/how_to_count_tokens_with_tiktoken) for counting tokens. Some models may also impose a limit on total number of tokens summed across inputs.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/CreateEmbeddingRequest/input`.
            @frozen public enum InputPayload: Codable, Hashable, Sendable {
                /// The string that will be turned into an embedding.
                ///
                /// - Remark: Generated from `#/components/schemas/CreateEmbeddingRequest/input/case1`.
                case case1(Swift.String)
                /// The array of strings that will be turned into an embedding.
                ///
                /// - Remark: Generated from `#/components/schemas/CreateEmbeddingRequest/input/case2`.
                case case2([Swift.String])
                /// The array of integers that will be turned into an embedding.
                ///
                /// - Remark: Generated from `#/components/schemas/CreateEmbeddingRequest/input/case3`.
                case case3([Swift.Int])
                /// The array of arrays containing integers that will be turned into an embedding.
                ///
                /// - Remark: Generated from `#/components/schemas/CreateEmbeddingRequest/input/case4`.
                case case4([[Swift.Int]])
                public init(from decoder: any Decoder) throws {
                    var errors: [any Error] = []
                    do {
                        self = .case1(try decoder.decodeFromSingleValueContainer())
                        return
                    } catch {
                        errors.append(error)
                    }
                    do {
                        self = .case2(try decoder.decodeFromSingleValueContainer())
                        return
                    } catch {
                        errors.append(error)
                    }
                    do {
                        self = .case3(try decoder.decodeFromSingleValueContainer())
                        return
                    } catch {
                        errors.append(error)
                    }
                    do {
                        self = .case4(try decoder.decodeFromSingleValueContainer())
                        return
                    } catch {
                        errors.append(error)
                    }
                    throw Swift.DecodingError.failedToDecodeOneOfSchema(
                        type: Self.self,
                        codingPath: decoder.codingPath,
                        errors: errors
                    )
                }
                public func encode(to encoder: any Encoder) throws {
                    switch self {
                    case let .case1(value):
                        try encoder.encodeToSingleValueContainer(value)
                    case let .case2(value):
                        try encoder.encodeToSingleValueContainer(value)
                    case let .case3(value):
                        try encoder.encodeToSingleValueContainer(value)
                    case let .case4(value):
                        try encoder.encodeToSingleValueContainer(value)
                    }
                }
            }
            /// Input text to embed, encoded as a string or array of tokens. To embed multiple inputs in a single request, pass an array of strings or array of token arrays. The input must not exceed the max input tokens for the model (8192 tokens for `text-embedding-ada-002`), cannot be an empty string, and any array must be 2048 dimensions or less. [Example Python code](https://cookbook.openai.com/examples/how_to_count_tokens_with_tiktoken) for counting tokens. Some models may also impose a limit on total number of tokens summed across inputs.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/CreateEmbeddingRequest/input`.
            public var input: Components.Schemas.CreateEmbeddingRequest.InputPayload
            /// ID of the model to use. You can use the [List models](/docs/api-reference/models/list) API to see all of your available models, or see our [Model overview](/docs/models) for descriptions of them.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/CreateEmbeddingRequest/model`.
            public struct ModelPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/CreateEmbeddingRequest/model/value1`.
                public var value1: Swift.String?
                /// - Remark: Generated from `#/components/schemas/CreateEmbeddingRequest/model/value2`.
                @frozen public enum Value2Payload: String, Codable, Hashable, Sendable, CaseIterable {
                    case textEmbeddingAda002 = "text-embedding-ada-002"
                    case textEmbedding3Small = "text-embedding-3-small"
                    case textEmbedding3Large = "text-embedding-3-large"
                }
                /// - Remark: Generated from `#/components/schemas/CreateEmbeddingRequest/model/value2`.
                public var value2: Components.Schemas.CreateEmbeddingRequest.ModelPayload.Value2Payload?
                /// Creates a new `ModelPayload`.
                ///
                /// - Parameters:
                ///   - value1:
                ///   - value2:
                public init(
                    value1: Swift.String? = nil,
                    value2: Components.Schemas.CreateEmbeddingRequest.ModelPayload.Value2Payload? = nil
                ) {
                    self.value1 = value1
                    self.value2 = value2
                }
                public init(from decoder: any Decoder) throws {
                    var errors: [any Error] = []
                    do {
                        self.value1 = try decoder.decodeFromSingleValueContainer()
                    } catch {
                        errors.append(error)
                    }
                    do {
                        self.value2 = try decoder.decodeFromSingleValueContainer()
                    } catch {
                        errors.append(error)
                    }
                    try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                        [
                            self.value1,
                            self.value2
                        ],
                        type: Self.self,
                        codingPath: decoder.codingPath,
                        errors: errors
                    )
                }
                public func encode(to encoder: any Encoder) throws {
                    try encoder.encodeFirstNonNilValueToSingleValueContainer([
                        self.value1,
                        self.value2
                    ])
                }
            }
            /// ID of the model to use. You can use the [List models](/docs/api-reference/models/list) API to see all of your available models, or see our [Model overview](/docs/models) for descriptions of them.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/CreateEmbeddingRequest/model`.
            public var model: Components.Schemas.CreateEmbeddingRequest.ModelPayload
            /// The format to return the embeddings in. Can be either `float` or [`base64`](https://pypi.org/project/pybase64/).
            ///
            /// - Remark: Generated from `#/components/schemas/CreateEmbeddingRequest/encoding_format`.
            @frozen public enum EncodingFormatPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case float = "float"
                case base64 = "base64"
            }
            /// The format to return the embeddings in. Can be either `float` or [`base64`](https://pypi.org/project/pybase64/).
            ///
            /// - Remark: Generated from `#/components/schemas/CreateEmbeddingRequest/encoding_format`.
            public var encodingFormat: Components.Schemas.CreateEmbeddingRequest.EncodingFormatPayload?
            /// The number of dimensions the resulting output embeddings should have. Only supported in `text-embedding-3` and later models.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/CreateEmbeddingRequest/dimensions`.
            public var dimensions: Swift.Int?
            /// A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse. [Learn more](/docs/guides/safety-best-practices#end-user-ids).
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/CreateEmbeddingRequest/user`.
            public var user: Swift.String?
            /// Creates a new `CreateEmbeddingRequest`.
            ///
            /// - Parameters:
            ///   - input: Input text to embed, encoded as a string or array of tokens. To embed multiple inputs in a single request, pass an array of strings or array of token arrays. The input must not exceed the max input tokens for the model (8192 tokens for `text-embedding-ada-002`), cannot be an empty string, and any array must be 2048 dimensions or less. [Example Python code](https://cookbook.openai.com/examples/how_to_count_tokens_with_tiktoken) for counting tokens. Some models may also impose a limit on total number of tokens summed across inputs.
            ///   - model: ID of the model to use. You can use the [List models](/docs/api-reference/models/list) API to see all of your available models, or see our [Model overview](/docs/models) for descriptions of them.
            ///   - encodingFormat: The format to return the embeddings in. Can be either `float` or [`base64`](https://pypi.org/project/pybase64/).
            ///   - dimensions: The number of dimensions the resulting output embeddings should have. Only supported in `text-embedding-3` and later models.
            ///   - user: A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse. [Learn more](/docs/guides/safety-best-practices#end-user-ids).
            public init(
                input: Components.Schemas.CreateEmbeddingRequest.InputPayload,
                model: Components.Schemas.CreateEmbeddingRequest.ModelPayload,
                encodingFormat: Components.Schemas.CreateEmbeddingRequest.EncodingFormatPayload? = nil,
                dimensions: Swift.Int? = nil,
                user: Swift.String? = nil
            ) {
                self.input = input
                self.model = model
                self.encodingFormat = encodingFormat
                self.dimensions = dimensions
                self.user = user
            }
            public enum CodingKeys: String, CodingKey {
                case input
                case model
                case encodingFormat = "encoding_format"
                case dimensions
                case user
            }
            public init(from decoder: any Decoder) throws {
                let container = try decoder.container(keyedBy: CodingKeys.self)
                self.input = try container.decode(
                    Components.Schemas.CreateEmbeddingRequest.InputPayload.self,
                    forKey: .input
                )
                self.model = try container.decode(
                    Components.Schemas.CreateEmbeddingRequest.ModelPayload.self,
                    forKey: .model
                )
                self.encodingFormat = try container.decodeIfPresent(
                    Components.Schemas.CreateEmbeddingRequest.EncodingFormatPayload.self,
                    forKey: .encodingFormat
                )
                self.dimensions = try container.decodeIfPresent(
                    Swift.Int.self,
                    forKey: .dimensions
                )
                self.user = try container.decodeIfPresent(
                    Swift.String.self,
                    forKey: .user
                )
                try decoder.ensureNoAdditionalProperties(knownKeys: [
                    "input",
                    "model",
                    "encoding_format",
                    "dimensions",
                    "user"
                ])
            }
        }
        /// - Remark: Generated from `#/components/schemas/CreateEmbeddingResponse`.
        public struct CreateEmbeddingResponse: Codable, Hashable, Sendable {
            /// The list of embeddings generated by the model.
            ///
            /// - Remark: Generated from `#/components/schemas/CreateEmbeddingResponse/data`.
            public var data: [Components.Schemas.Embedding]
            /// The name of the model used to generate the embedding.
            ///
            /// - Remark: Generated from `#/components/schemas/CreateEmbeddingResponse/model`.
            public var model: Swift.String
            /// The object type, which is always "list".
            ///
            /// - Remark: Generated from `#/components/schemas/CreateEmbeddingResponse/object`.
            @frozen public enum ObjectPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case list = "list"
            }
            /// The object type, which is always "list".
            ///
            /// - Remark: Generated from `#/components/schemas/CreateEmbeddingResponse/object`.
            public var object: Components.Schemas.CreateEmbeddingResponse.ObjectPayload
            /// The usage information for the request.
            ///
            /// - Remark: Generated from `#/components/schemas/CreateEmbeddingResponse/usage`.
            public struct UsagePayload: Codable, Hashable, Sendable {
                /// The number of tokens used by the prompt.
                ///
                /// - Remark: Generated from `#/components/schemas/CreateEmbeddingResponse/usage/prompt_tokens`.
                public var promptTokens: Swift.Int
                /// The total number of tokens used by the request.
                ///
                /// - Remark: Generated from `#/components/schemas/CreateEmbeddingResponse/usage/total_tokens`.
                public var totalTokens: Swift.Int
                /// Creates a new `UsagePayload`.
                ///
                /// - Parameters:
                ///   - promptTokens: The number of tokens used by the prompt.
                ///   - totalTokens: The total number of tokens used by the request.
                public init(
                    promptTokens: Swift.Int,
                    totalTokens: Swift.Int
                ) {
                    self.promptTokens = promptTokens
                    self.totalTokens = totalTokens
                }
                public enum CodingKeys: String, CodingKey {
                    case promptTokens = "prompt_tokens"
                    case totalTokens = "total_tokens"
                }
            }
            /// The usage information for the request.
            ///
            /// - Remark: Generated from `#/components/schemas/CreateEmbeddingResponse/usage`.
            public var usage: Components.Schemas.CreateEmbeddingResponse.UsagePayload
            /// Creates a new `CreateEmbeddingResponse`.
            ///
            /// - Parameters:
            ///   - data: The list of embeddings generated by the model.
            ///   - model: The name of the model used to generate the embedding.
            ///   - object: The object type, which is always "list".
            ///   - usage: The usage information for the request.
            public init(
                data: [Components.Schemas.Embedding],
                model: Swift.String,
                object: Components.Schemas.CreateEmbeddingResponse.ObjectPayload,
                usage: Components.Schemas.CreateEmbeddingResponse.UsagePayload
            ) {
                self.data = data
                self.model = model
                self.object = object
                self.usage = usage
            }
            public enum CodingKeys: String, CodingKey {
                case data
                case model
                case object
                case usage
            }
        }
        /// - Remark: Generated from `#/components/schemas/CreateFileRequest`.
        @frozen public enum CreateFileRequest: Sendable, Hashable {
            /// - Remark: Generated from `#/components/schemas/CreateFileRequest/file`.
            public struct FilePayload: Sendable, Hashable {
                public var body: OpenAPIRuntime.HTTPBody
                /// Creates a new `FilePayload`.
                ///
                /// - Parameters:
                ///   - body:
                public init(body: OpenAPIRuntime.HTTPBody) {
                    self.body = body
                }
            }
            case file(OpenAPIRuntime.MultipartPart<Components.Schemas.CreateFileRequest.FilePayload>)
            /// - Remark: Generated from `#/components/schemas/CreateFileRequest/purpose`.
            public struct PurposePayload: Sendable, Hashable {
                public var body: OpenAPIRuntime.HTTPBody
                /// Creates a new `PurposePayload`.
                ///
                /// - Parameters:
                ///   - body:
                public init(body: OpenAPIRuntime.HTTPBody) {
                    self.body = body
                }
            }
            case purpose(OpenAPIRuntime.MultipartPart<Components.Schemas.CreateFileRequest.PurposePayload>)
        }
        /// - Remark: Generated from `#/components/schemas/CreateFineTuningJobRequest`.
        public struct CreateFineTuningJobRequest: Codable, Hashable, Sendable {
            /// The name of the model to fine-tune. You can select one of the
            /// [supported models](/docs/guides/fine-tuning#which-models-can-be-fine-tuned).
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/CreateFineTuningJobRequest/model`.
            public struct ModelPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/CreateFineTuningJobRequest/model/value1`.
                public var value1: Swift.String?
                /// - Remark: Generated from `#/components/schemas/CreateFineTuningJobRequest/model/value2`.
                @frozen public enum Value2Payload: String, Codable, Hashable, Sendable, CaseIterable {
                    case babbage002 = "babbage-002"
                    case davinci002 = "davinci-002"
                    case gpt3_5Turbo = "gpt-3.5-turbo"
                    case gpt4oMini = "gpt-4o-mini"
                }
                /// - Remark: Generated from `#/components/schemas/CreateFineTuningJobRequest/model/value2`.
                public var value2: Components.Schemas.CreateFineTuningJobRequest.ModelPayload.Value2Payload?
                /// Creates a new `ModelPayload`.
                ///
                /// - Parameters:
                ///   - value1:
                ///   - value2:
                public init(
                    value1: Swift.String? = nil,
                    value2: Components.Schemas.CreateFineTuningJobRequest.ModelPayload.Value2Payload? = nil
                ) {
                    self.value1 = value1
                    self.value2 = value2
                }
                public init(from decoder: any Decoder) throws {
                    var errors: [any Error] = []
                    do {
                        self.value1 = try decoder.decodeFromSingleValueContainer()
                    } catch {
                        errors.append(error)
                    }
                    do {
                        self.value2 = try decoder.decodeFromSingleValueContainer()
                    } catch {
                        errors.append(error)
                    }
                    try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                        [
                            self.value1,
                            self.value2
                        ],
                        type: Self.self,
                        codingPath: decoder.codingPath,
                        errors: errors
                    )
                }
                public func encode(to encoder: any Encoder) throws {
                    try encoder.encodeFirstNonNilValueToSingleValueContainer([
                        self.value1,
                        self.value2
                    ])
                }
            }
            /// The name of the model to fine-tune. You can select one of the
            /// [supported models](/docs/guides/fine-tuning#which-models-can-be-fine-tuned).
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/CreateFineTuningJobRequest/model`.
            public var model: Components.Schemas.CreateFineTuningJobRequest.ModelPayload
            /// The ID of an uploaded file that contains training data.
            ///
            /// See [upload file](/docs/api-reference/files/create) for how to upload a file.
            ///
            /// Your dataset must be formatted as a JSONL file. Additionally, you must upload your file with the purpose `fine-tune`.
            ///
            /// The contents of the file should differ depending on if the model uses the [chat](/docs/api-reference/fine-tuning/chat-input), [completions](/docs/api-reference/fine-tuning/completions-input) format, or if the fine-tuning method uses the [preference](/docs/api-reference/fine-tuning/preference-input) format.
            ///
            /// See the [fine-tuning guide](/docs/guides/fine-tuning) for more details.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/CreateFineTuningJobRequest/training_file`.
            public var trainingFile: Swift.String
            /// The hyperparameters used for the fine-tuning job.
            /// This value is now deprecated in favor of `method`, and should be passed in under the `method` parameter.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/CreateFineTuningJobRequest/hyperparameters`.
            @available(*, deprecated)
            public struct HyperparametersPayload: Codable, Hashable, Sendable {
                /// Number of examples in each batch. A larger batch size means that model parameters
                /// are updated less frequently, but with lower variance.
                ///
                ///
                /// - Remark: Generated from `#/components/schemas/CreateFineTuningJobRequest/hyperparameters/batch_size`.
                @frozen public enum BatchSizePayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/CreateFineTuningJobRequest/hyperparameters/batch_size/case1`.
                    @frozen public enum Case1Payload: String, Codable, Hashable, Sendable, CaseIterable {
                        case auto = "auto"
                    }
                    /// - Remark: Generated from `#/components/schemas/CreateFineTuningJobRequest/hyperparameters/batch_size/case1`.
                    case case1(Components.Schemas.CreateFineTuningJobRequest.HyperparametersPayload.BatchSizePayload.Case1Payload)
                    /// - Remark: Generated from `#/components/schemas/CreateFineTuningJobRequest/hyperparameters/batch_size/case2`.
                    case case2(Swift.Int)
                    public init(from decoder: any Decoder) throws {
                        var errors: [any Error] = []
                        do {
                            self = .case1(try decoder.decodeFromSingleValueContainer())
                            return
                        } catch {
                            errors.append(error)
                        }
                        do {
                            self = .case2(try decoder.decodeFromSingleValueContainer())
                            return
                        } catch {
                            errors.append(error)
                        }
                        throw Swift.DecodingError.failedToDecodeOneOfSchema(
                            type: Self.self,
                            codingPath: decoder.codingPath,
                            errors: errors
                        )
                    }
                    public func encode(to encoder: any Encoder) throws {
                        switch self {
                        case let .case1(value):
                            try encoder.encodeToSingleValueContainer(value)
                        case let .case2(value):
                            try encoder.encodeToSingleValueContainer(value)
                        }
                    }
                }
                /// Number of examples in each batch. A larger batch size means that model parameters
                /// are updated less frequently, but with lower variance.
                ///
                ///
                /// - Remark: Generated from `#/components/schemas/CreateFineTuningJobRequest/hyperparameters/batch_size`.
                public var batchSize: Components.Schemas.CreateFineTuningJobRequest.HyperparametersPayload.BatchSizePayload?
                /// Scaling factor for the learning rate. A smaller learning rate may be useful to avoid
                /// overfitting.
                ///
                ///
                /// - Remark: Generated from `#/components/schemas/CreateFineTuningJobRequest/hyperparameters/learning_rate_multiplier`.
                @frozen public enum LearningRateMultiplierPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/CreateFineTuningJobRequest/hyperparameters/learning_rate_multiplier/case1`.
                    @frozen public enum Case1Payload: String, Codable, Hashable, Sendable, CaseIterable {
                        case auto = "auto"
                    }
                    /// - Remark: Generated from `#/components/schemas/CreateFineTuningJobRequest/hyperparameters/learning_rate_multiplier/case1`.
                    case case1(Components.Schemas.CreateFineTuningJobRequest.HyperparametersPayload.LearningRateMultiplierPayload.Case1Payload)
                    /// - Remark: Generated from `#/components/schemas/CreateFineTuningJobRequest/hyperparameters/learning_rate_multiplier/case2`.
                    case case2(Swift.Double)
                    public init(from decoder: any Decoder) throws {
                        var errors: [any Error] = []
                        do {
                            self = .case1(try decoder.decodeFromSingleValueContainer())
                            return
                        } catch {
                            errors.append(error)
                        }
                        do {
                            self = .case2(try decoder.decodeFromSingleValueContainer())
                            return
                        } catch {
                            errors.append(error)
                        }
                        throw Swift.DecodingError.failedToDecodeOneOfSchema(
                            type: Self.self,
                            codingPath: decoder.codingPath,
                            errors: errors
                        )
                    }
                    public func encode(to encoder: any Encoder) throws {
                        switch self {
                        case let .case1(value):
                            try encoder.encodeToSingleValueContainer(value)
                        case let .case2(value):
                            try encoder.encodeToSingleValueContainer(value)
                        }
                    }
                }
                /// Scaling factor for the learning rate. A smaller learning rate may be useful to avoid
                /// overfitting.
                ///
                ///
                /// - Remark: Generated from `#/components/schemas/CreateFineTuningJobRequest/hyperparameters/learning_rate_multiplier`.
                public var learningRateMultiplier: Components.Schemas.CreateFineTuningJobRequest.HyperparametersPayload.LearningRateMultiplierPayload?
                /// The number of epochs to train the model for. An epoch refers to one full cycle
                /// through the training dataset.
                ///
                ///
                /// - Remark: Generated from `#/components/schemas/CreateFineTuningJobRequest/hyperparameters/n_epochs`.
                @frozen public enum NEpochsPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/CreateFineTuningJobRequest/hyperparameters/n_epochs/case1`.
                    @frozen public enum Case1Payload: String, Codable, Hashable, Sendable, CaseIterable {
                        case auto = "auto"
                    }
                    /// - Remark: Generated from `#/components/schemas/CreateFineTuningJobRequest/hyperparameters/n_epochs/case1`.
                    case case1(Components.Schemas.CreateFineTuningJobRequest.HyperparametersPayload.NEpochsPayload.Case1Payload)
                    /// - Remark: Generated from `#/components/schemas/CreateFineTuningJobRequest/hyperparameters/n_epochs/case2`.
                    case case2(Swift.Int)
                    public init(from decoder: any Decoder) throws {
                        var errors: [any Error] = []
                        do {
                            self = .case1(try decoder.decodeFromSingleValueContainer())
                            return
                        } catch {
                            errors.append(error)
                        }
                        do {
                            self = .case2(try decoder.decodeFromSingleValueContainer())
                            return
                        } catch {
                            errors.append(error)
                        }
                        throw Swift.DecodingError.failedToDecodeOneOfSchema(
                            type: Self.self,
                            codingPath: decoder.codingPath,
                            errors: errors
                        )
                    }
                    public func encode(to encoder: any Encoder) throws {
                        switch self {
                        case let .case1(value):
                            try encoder.encodeToSingleValueContainer(value)
                        case let .case2(value):
                            try encoder.encodeToSingleValueContainer(value)
                        }
                    }
                }
                /// The number of epochs to train the model for. An epoch refers to one full cycle
                /// through the training dataset.
                ///
                ///
                /// - Remark: Generated from `#/components/schemas/CreateFineTuningJobRequest/hyperparameters/n_epochs`.
                public var nEpochs: Components.Schemas.CreateFineTuningJobRequest.HyperparametersPayload.NEpochsPayload?
                /// Creates a new `HyperparametersPayload`.
                ///
                /// - Parameters:
                ///   - batchSize: Number of examples in each batch. A larger batch size means that model parameters
                ///   - learningRateMultiplier: Scaling factor for the learning rate. A smaller learning rate may be useful to avoid
                ///   - nEpochs: The number of epochs to train the model for. An epoch refers to one full cycle
                public init(
                    batchSize: Components.Schemas.CreateFineTuningJobRequest.HyperparametersPayload.BatchSizePayload? = nil,
                    learningRateMultiplier: Components.Schemas.CreateFineTuningJobRequest.HyperparametersPayload.LearningRateMultiplierPayload? = nil,
                    nEpochs: Components.Schemas.CreateFineTuningJobRequest.HyperparametersPayload.NEpochsPayload? = nil
                ) {
                    self.batchSize = batchSize
                    self.learningRateMultiplier = learningRateMultiplier
                    self.nEpochs = nEpochs
                }
                public enum CodingKeys: String, CodingKey {
                    case batchSize = "batch_size"
                    case learningRateMultiplier = "learning_rate_multiplier"
                    case nEpochs = "n_epochs"
                }
            }
            /// The hyperparameters used for the fine-tuning job.
            /// This value is now deprecated in favor of `method`, and should be passed in under the `method` parameter.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/CreateFineTuningJobRequest/hyperparameters`.
            @available(*, deprecated)
            public var hyperparameters: Components.Schemas.CreateFineTuningJobRequest.HyperparametersPayload?
            /// A string of up to 64 characters that will be added to your fine-tuned model name.
            ///
            /// For example, a `suffix` of "custom-model-name" would produce a model name like `ft:gpt-4o-mini:openai:custom-model-name:7p4lURel`.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/CreateFineTuningJobRequest/suffix`.
            public var suffix: Swift.String?
            /// The ID of an uploaded file that contains validation data.
            ///
            /// If you provide this file, the data is used to generate validation
            /// metrics periodically during fine-tuning. These metrics can be viewed in
            /// the fine-tuning results file.
            /// The same data should not be present in both train and validation files.
            ///
            /// Your dataset must be formatted as a JSONL file. You must upload your file with the purpose `fine-tune`.
            ///
            /// See the [fine-tuning guide](/docs/guides/fine-tuning) for more details.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/CreateFineTuningJobRequest/validation_file`.
            public var validationFile: Swift.String?
            /// - Remark: Generated from `#/components/schemas/CreateFineTuningJobRequest/IntegrationsPayload`.
            public struct IntegrationsPayloadPayload: Codable, Hashable, Sendable {
                /// The type of integration to enable. Currently, only "wandb" (Weights and Biases) is supported.
                ///
                ///
                /// - Remark: Generated from `#/components/schemas/CreateFineTuningJobRequest/IntegrationsPayload/type`.
                @frozen public enum _TypePayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/CreateFineTuningJobRequest/IntegrationsPayload/type/case1`.
                    @frozen public enum Case1Payload: String, Codable, Hashable, Sendable, CaseIterable {
                        case wandb = "wandb"
                    }
                    /// - Remark: Generated from `#/components/schemas/CreateFineTuningJobRequest/IntegrationsPayload/type/case1`.
                    case case1(Components.Schemas.CreateFineTuningJobRequest.IntegrationsPayloadPayload._TypePayload.Case1Payload)
                    public init(from decoder: any Decoder) throws {
                        var errors: [any Error] = []
                        do {
                            self = .case1(try decoder.decodeFromSingleValueContainer())
                            return
                        } catch {
                            errors.append(error)
                        }
                        throw Swift.DecodingError.failedToDecodeOneOfSchema(
                            type: Self.self,
                            codingPath: decoder.codingPath,
                            errors: errors
                        )
                    }
                    public func encode(to encoder: any Encoder) throws {
                        switch self {
                        case let .case1(value):
                            try encoder.encodeToSingleValueContainer(value)
                        }
                    }
                }
                /// The type of integration to enable. Currently, only "wandb" (Weights and Biases) is supported.
                ///
                ///
                /// - Remark: Generated from `#/components/schemas/CreateFineTuningJobRequest/IntegrationsPayload/type`.
                public var _type: Components.Schemas.CreateFineTuningJobRequest.IntegrationsPayloadPayload._TypePayload
                /// The settings for your integration with Weights and Biases. This payload specifies the project that
                /// metrics will be sent to. Optionally, you can set an explicit display name for your run, add tags
                /// to your run, and set a default entity (team, username, etc) to be associated with your run.
                ///
                ///
                /// - Remark: Generated from `#/components/schemas/CreateFineTuningJobRequest/IntegrationsPayload/wandb`.
                public struct WandbPayload: Codable, Hashable, Sendable {
                    /// The name of the project that the new run will be created under.
                    ///
                    ///
                    /// - Remark: Generated from `#/components/schemas/CreateFineTuningJobRequest/IntegrationsPayload/wandb/project`.
                    public var project: Swift.String
                    /// A display name to set for the run. If not set, we will use the Job ID as the name.
                    ///
                    ///
                    /// - Remark: Generated from `#/components/schemas/CreateFineTuningJobRequest/IntegrationsPayload/wandb/name`.
                    public var name: Swift.String?
                    /// The entity to use for the run. This allows you to set the team or username of the WandB user that you would
                    /// like associated with the run. If not set, the default entity for the registered WandB API key is used.
                    ///
                    ///
                    /// - Remark: Generated from `#/components/schemas/CreateFineTuningJobRequest/IntegrationsPayload/wandb/entity`.
                    public var entity: Swift.String?
                    /// A list of tags to be attached to the newly created run. These tags are passed through directly to WandB. Some
                    /// default tags are generated by OpenAI: "openai/finetune", "openai/{base-model}", "openai/{ftjob-abcdef}".
                    ///
                    ///
                    /// - Remark: Generated from `#/components/schemas/CreateFineTuningJobRequest/IntegrationsPayload/wandb/tags`.
                    public var tags: [Swift.String]?
                    /// Creates a new `WandbPayload`.
                    ///
                    /// - Parameters:
                    ///   - project: The name of the project that the new run will be created under.
                    ///   - name: A display name to set for the run. If not set, we will use the Job ID as the name.
                    ///   - entity: The entity to use for the run. This allows you to set the team or username of the WandB user that you would
                    ///   - tags: A list of tags to be attached to the newly created run. These tags are passed through directly to WandB. Some
                    public init(
                        project: Swift.String,
                        name: Swift.String? = nil,
                        entity: Swift.String? = nil,
                        tags: [Swift.String]? = nil
                    ) {
                        self.project = project
                        self.name = name
                        self.entity = entity
                        self.tags = tags
                    }
                    public enum CodingKeys: String, CodingKey {
                        case project
                        case name
                        case entity
                        case tags
                    }
                }
                /// The settings for your integration with Weights and Biases. This payload specifies the project that
                /// metrics will be sent to. Optionally, you can set an explicit display name for your run, add tags
                /// to your run, and set a default entity (team, username, etc) to be associated with your run.
                ///
                ///
                /// - Remark: Generated from `#/components/schemas/CreateFineTuningJobRequest/IntegrationsPayload/wandb`.
                public var wandb: Components.Schemas.CreateFineTuningJobRequest.IntegrationsPayloadPayload.WandbPayload
                /// Creates a new `IntegrationsPayloadPayload`.
                ///
                /// - Parameters:
                ///   - _type: The type of integration to enable. Currently, only "wandb" (Weights and Biases) is supported.
                ///   - wandb: The settings for your integration with Weights and Biases. This payload specifies the project that
                public init(
                    _type: Components.Schemas.CreateFineTuningJobRequest.IntegrationsPayloadPayload._TypePayload,
                    wandb: Components.Schemas.CreateFineTuningJobRequest.IntegrationsPayloadPayload.WandbPayload
                ) {
                    self._type = _type
                    self.wandb = wandb
                }
                public enum CodingKeys: String, CodingKey {
                    case _type = "type"
                    case wandb
                }
            }
            /// A list of integrations to enable for your fine-tuning job.
            ///
            /// - Remark: Generated from `#/components/schemas/CreateFineTuningJobRequest/integrations`.
            public typealias IntegrationsPayload = [Components.Schemas.CreateFineTuningJobRequest.IntegrationsPayloadPayload]
            /// A list of integrations to enable for your fine-tuning job.
            ///
            /// - Remark: Generated from `#/components/schemas/CreateFineTuningJobRequest/integrations`.
            public var integrations: Components.Schemas.CreateFineTuningJobRequest.IntegrationsPayload?
            /// The seed controls the reproducibility of the job. Passing in the same seed and job parameters should produce the same results, but may differ in rare cases.
            /// If a seed is not specified, one will be generated for you.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/CreateFineTuningJobRequest/seed`.
            public var seed: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/CreateFineTuningJobRequest/method`.
            public var method: Components.Schemas.FineTuneMethod?
            /// Creates a new `CreateFineTuningJobRequest`.
            ///
            /// - Parameters:
            ///   - model: The name of the model to fine-tune. You can select one of the
            ///   - trainingFile: The ID of an uploaded file that contains training data.
            ///   - hyperparameters: The hyperparameters used for the fine-tuning job.
            ///   - suffix: A string of up to 64 characters that will be added to your fine-tuned model name.
            ///   - validationFile: The ID of an uploaded file that contains validation data.
            ///   - integrations: A list of integrations to enable for your fine-tuning job.
            ///   - seed: The seed controls the reproducibility of the job. Passing in the same seed and job parameters should produce the same results, but may differ in rare cases.
            ///   - method:
            public init(
                model: Components.Schemas.CreateFineTuningJobRequest.ModelPayload,
                trainingFile: Swift.String,
                hyperparameters: Components.Schemas.CreateFineTuningJobRequest.HyperparametersPayload? = nil,
                suffix: Swift.String? = nil,
                validationFile: Swift.String? = nil,
                integrations: Components.Schemas.CreateFineTuningJobRequest.IntegrationsPayload? = nil,
                seed: Swift.Int? = nil,
                method: Components.Schemas.FineTuneMethod? = nil
            ) {
                self.model = model
                self.trainingFile = trainingFile
                self.hyperparameters = hyperparameters
                self.suffix = suffix
                self.validationFile = validationFile
                self.integrations = integrations
                self.seed = seed
                self.method = method
            }
            public enum CodingKeys: String, CodingKey {
                case model
                case trainingFile = "training_file"
                case hyperparameters
                case suffix
                case validationFile = "validation_file"
                case integrations
                case seed
                case method
            }
        }
        /// - Remark: Generated from `#/components/schemas/CreateImageEditRequest`.
        @frozen public enum CreateImageEditRequest: Sendable, Hashable {
            /// - Remark: Generated from `#/components/schemas/CreateImageEditRequest/image`.
            public struct ImagePayload: Sendable, Hashable {
                public var body: OpenAPIRuntime.HTTPBody
                /// Creates a new `ImagePayload`.
                ///
                /// - Parameters:
                ///   - body:
                public init(body: OpenAPIRuntime.HTTPBody) {
                    self.body = body
                }
            }
            case image(OpenAPIRuntime.MultipartPart<Components.Schemas.CreateImageEditRequest.ImagePayload>)
            /// - Remark: Generated from `#/components/schemas/CreateImageEditRequest/prompt`.
            public struct PromptPayload: Sendable, Hashable {
                public var body: OpenAPIRuntime.HTTPBody
                /// Creates a new `PromptPayload`.
                ///
                /// - Parameters:
                ///   - body:
                public init(body: OpenAPIRuntime.HTTPBody) {
                    self.body = body
                }
            }
            case prompt(OpenAPIRuntime.MultipartPart<Components.Schemas.CreateImageEditRequest.PromptPayload>)
            /// - Remark: Generated from `#/components/schemas/CreateImageEditRequest/mask`.
            public struct MaskPayload: Sendable, Hashable {
                public var body: OpenAPIRuntime.HTTPBody
                /// Creates a new `MaskPayload`.
                ///
                /// - Parameters:
                ///   - body:
                public init(body: OpenAPIRuntime.HTTPBody) {
                    self.body = body
                }
            }
            case mask(OpenAPIRuntime.MultipartPart<Components.Schemas.CreateImageEditRequest.MaskPayload>)
            /// - Remark: Generated from `#/components/schemas/CreateImageEditRequest/model`.
            public struct ModelPayload: Sendable, Hashable {
                public var body: OpenAPIRuntime.HTTPBody
                /// Creates a new `ModelPayload`.
                ///
                /// - Parameters:
                ///   - body:
                public init(body: OpenAPIRuntime.HTTPBody) {
                    self.body = body
                }
            }
            case model(OpenAPIRuntime.MultipartPart<Components.Schemas.CreateImageEditRequest.ModelPayload>)
            /// - Remark: Generated from `#/components/schemas/CreateImageEditRequest/n`.
            public struct NPayload: Sendable, Hashable {
                public var body: OpenAPIRuntime.HTTPBody
                /// Creates a new `NPayload`.
                ///
                /// - Parameters:
                ///   - body:
                public init(body: OpenAPIRuntime.HTTPBody) {
                    self.body = body
                }
            }
            case n(OpenAPIRuntime.MultipartPart<Components.Schemas.CreateImageEditRequest.NPayload>)
            /// - Remark: Generated from `#/components/schemas/CreateImageEditRequest/size`.
            public struct SizePayload: Sendable, Hashable {
                public var body: OpenAPIRuntime.HTTPBody
                /// Creates a new `SizePayload`.
                ///
                /// - Parameters:
                ///   - body:
                public init(body: OpenAPIRuntime.HTTPBody) {
                    self.body = body
                }
            }
            case size(OpenAPIRuntime.MultipartPart<Components.Schemas.CreateImageEditRequest.SizePayload>)
            /// - Remark: Generated from `#/components/schemas/CreateImageEditRequest/response_format`.
            public struct ResponseFormatPayload: Sendable, Hashable {
                public var body: OpenAPIRuntime.HTTPBody
                /// Creates a new `ResponseFormatPayload`.
                ///
                /// - Parameters:
                ///   - body:
                public init(body: OpenAPIRuntime.HTTPBody) {
                    self.body = body
                }
            }
            case responseFormat(OpenAPIRuntime.MultipartPart<Components.Schemas.CreateImageEditRequest.ResponseFormatPayload>)
            /// - Remark: Generated from `#/components/schemas/CreateImageEditRequest/user`.
            public struct UserPayload: Sendable, Hashable {
                public var body: OpenAPIRuntime.HTTPBody
                /// Creates a new `UserPayload`.
                ///
                /// - Parameters:
                ///   - body:
                public init(body: OpenAPIRuntime.HTTPBody) {
                    self.body = body
                }
            }
            case user(OpenAPIRuntime.MultipartPart<Components.Schemas.CreateImageEditRequest.UserPayload>)
            case undocumented(OpenAPIRuntime.MultipartRawPart)
        }
        /// - Remark: Generated from `#/components/schemas/CreateImageRequest`.
        public struct CreateImageRequest: Codable, Hashable, Sendable {
            /// A text description of the desired image(s). The maximum length is 1000 characters for `dall-e-2` and 4000 characters for `dall-e-3`.
            ///
            /// - Remark: Generated from `#/components/schemas/CreateImageRequest/prompt`.
            public var prompt: Swift.String
            /// The model to use for image generation.
            ///
            /// - Remark: Generated from `#/components/schemas/CreateImageRequest/model`.
            public struct ModelPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/CreateImageRequest/model/value1`.
                public var value1: Swift.String?
                /// - Remark: Generated from `#/components/schemas/CreateImageRequest/model/value2`.
                @frozen public enum Value2Payload: String, Codable, Hashable, Sendable, CaseIterable {
                    case dallE2 = "dall-e-2"
                    case dallE3 = "dall-e-3"
                }
                /// - Remark: Generated from `#/components/schemas/CreateImageRequest/model/value2`.
                public var value2: Components.Schemas.CreateImageRequest.ModelPayload.Value2Payload?
                /// Creates a new `ModelPayload`.
                ///
                /// - Parameters:
                ///   - value1:
                ///   - value2:
                public init(
                    value1: Swift.String? = nil,
                    value2: Components.Schemas.CreateImageRequest.ModelPayload.Value2Payload? = nil
                ) {
                    self.value1 = value1
                    self.value2 = value2
                }
                public init(from decoder: any Decoder) throws {
                    var errors: [any Error] = []
                    do {
                        self.value1 = try decoder.decodeFromSingleValueContainer()
                    } catch {
                        errors.append(error)
                    }
                    do {
                        self.value2 = try decoder.decodeFromSingleValueContainer()
                    } catch {
                        errors.append(error)
                    }
                    try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                        [
                            self.value1,
                            self.value2
                        ],
                        type: Self.self,
                        codingPath: decoder.codingPath,
                        errors: errors
                    )
                }
                public func encode(to encoder: any Encoder) throws {
                    try encoder.encodeFirstNonNilValueToSingleValueContainer([
                        self.value1,
                        self.value2
                    ])
                }
            }
            /// The model to use for image generation.
            ///
            /// - Remark: Generated from `#/components/schemas/CreateImageRequest/model`.
            public var model: Components.Schemas.CreateImageRequest.ModelPayload?
            /// The number of images to generate. Must be between 1 and 10. For `dall-e-3`, only `n=1` is supported.
            ///
            /// - Remark: Generated from `#/components/schemas/CreateImageRequest/n`.
            public var n: Swift.Int?
            /// The quality of the image that will be generated. `hd` creates images with finer details and greater consistency across the image. This param is only supported for `dall-e-3`.
            ///
            /// - Remark: Generated from `#/components/schemas/CreateImageRequest/quality`.
            @frozen public enum QualityPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case standard = "standard"
                case hd = "hd"
            }
            /// The quality of the image that will be generated. `hd` creates images with finer details and greater consistency across the image. This param is only supported for `dall-e-3`.
            ///
            /// - Remark: Generated from `#/components/schemas/CreateImageRequest/quality`.
            public var quality: Components.Schemas.CreateImageRequest.QualityPayload?
            /// The format in which the generated images are returned. Must be one of `url` or `b64_json`. URLs are only valid for 60 minutes after the image has been generated.
            ///
            /// - Remark: Generated from `#/components/schemas/CreateImageRequest/response_format`.
            @frozen public enum ResponseFormatPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case url = "url"
                case b64Json = "b64_json"
            }
            /// The format in which the generated images are returned. Must be one of `url` or `b64_json`. URLs are only valid for 60 minutes after the image has been generated.
            ///
            /// - Remark: Generated from `#/components/schemas/CreateImageRequest/response_format`.
            public var responseFormat: Components.Schemas.CreateImageRequest.ResponseFormatPayload?
            /// The size of the generated images. Must be one of `256x256`, `512x512`, or `1024x1024` for `dall-e-2`. Must be one of `1024x1024`, `1792x1024`, or `1024x1792` for `dall-e-3` models.
            ///
            /// - Remark: Generated from `#/components/schemas/CreateImageRequest/size`.
            @frozen public enum SizePayload: String, Codable, Hashable, Sendable, CaseIterable {
                case _256x256 = "256x256"
                case _512x512 = "512x512"
                case _1024x1024 = "1024x1024"
                case _1792x1024 = "1792x1024"
                case _1024x1792 = "1024x1792"
            }
            /// The size of the generated images. Must be one of `256x256`, `512x512`, or `1024x1024` for `dall-e-2`. Must be one of `1024x1024`, `1792x1024`, or `1024x1792` for `dall-e-3` models.
            ///
            /// - Remark: Generated from `#/components/schemas/CreateImageRequest/size`.
            public var size: Components.Schemas.CreateImageRequest.SizePayload?
            /// The style of the generated images. Must be one of `vivid` or `natural`. Vivid causes the model to lean towards generating hyper-real and dramatic images. Natural causes the model to produce more natural, less hyper-real looking images. This param is only supported for `dall-e-3`.
            ///
            /// - Remark: Generated from `#/components/schemas/CreateImageRequest/style`.
            @frozen public enum StylePayload: String, Codable, Hashable, Sendable, CaseIterable {
                case vivid = "vivid"
                case natural = "natural"
            }
            /// The style of the generated images. Must be one of `vivid` or `natural`. Vivid causes the model to lean towards generating hyper-real and dramatic images. Natural causes the model to produce more natural, less hyper-real looking images. This param is only supported for `dall-e-3`.
            ///
            /// - Remark: Generated from `#/components/schemas/CreateImageRequest/style`.
            public var style: Components.Schemas.CreateImageRequest.StylePayload?
            /// A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse. [Learn more](/docs/guides/safety-best-practices#end-user-ids).
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/CreateImageRequest/user`.
            public var user: Swift.String?
            /// Creates a new `CreateImageRequest`.
            ///
            /// - Parameters:
            ///   - prompt: A text description of the desired image(s). The maximum length is 1000 characters for `dall-e-2` and 4000 characters for `dall-e-3`.
            ///   - model: The model to use for image generation.
            ///   - n: The number of images to generate. Must be between 1 and 10. For `dall-e-3`, only `n=1` is supported.
            ///   - quality: The quality of the image that will be generated. `hd` creates images with finer details and greater consistency across the image. This param is only supported for `dall-e-3`.
            ///   - responseFormat: The format in which the generated images are returned. Must be one of `url` or `b64_json`. URLs are only valid for 60 minutes after the image has been generated.
            ///   - size: The size of the generated images. Must be one of `256x256`, `512x512`, or `1024x1024` for `dall-e-2`. Must be one of `1024x1024`, `1792x1024`, or `1024x1792` for `dall-e-3` models.
            ///   - style: The style of the generated images. Must be one of `vivid` or `natural`. Vivid causes the model to lean towards generating hyper-real and dramatic images. Natural causes the model to produce more natural, less hyper-real looking images. This param is only supported for `dall-e-3`.
            ///   - user: A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse. [Learn more](/docs/guides/safety-best-practices#end-user-ids).
            public init(
                prompt: Swift.String,
                model: Components.Schemas.CreateImageRequest.ModelPayload? = nil,
                n: Swift.Int? = nil,
                quality: Components.Schemas.CreateImageRequest.QualityPayload? = nil,
                responseFormat: Components.Schemas.CreateImageRequest.ResponseFormatPayload? = nil,
                size: Components.Schemas.CreateImageRequest.SizePayload? = nil,
                style: Components.Schemas.CreateImageRequest.StylePayload? = nil,
                user: Swift.String? = nil
            ) {
                self.prompt = prompt
                self.model = model
                self.n = n
                self.quality = quality
                self.responseFormat = responseFormat
                self.size = size
                self.style = style
                self.user = user
            }
            public enum CodingKeys: String, CodingKey {
                case prompt
                case model
                case n
                case quality
                case responseFormat = "response_format"
                case size
                case style
                case user
            }
        }
        /// - Remark: Generated from `#/components/schemas/CreateImageVariationRequest`.
        @frozen public enum CreateImageVariationRequest: Sendable, Hashable {
            /// - Remark: Generated from `#/components/schemas/CreateImageVariationRequest/image`.
            public struct ImagePayload: Sendable, Hashable {
                public var body: OpenAPIRuntime.HTTPBody
                /// Creates a new `ImagePayload`.
                ///
                /// - Parameters:
                ///   - body:
                public init(body: OpenAPIRuntime.HTTPBody) {
                    self.body = body
                }
            }
            case image(OpenAPIRuntime.MultipartPart<Components.Schemas.CreateImageVariationRequest.ImagePayload>)
            /// - Remark: Generated from `#/components/schemas/CreateImageVariationRequest/model`.
            public struct ModelPayload: Sendable, Hashable {
                public var body: OpenAPIRuntime.HTTPBody
                /// Creates a new `ModelPayload`.
                ///
                /// - Parameters:
                ///   - body:
                public init(body: OpenAPIRuntime.HTTPBody) {
                    self.body = body
                }
            }
            case model(OpenAPIRuntime.MultipartPart<Components.Schemas.CreateImageVariationRequest.ModelPayload>)
            /// - Remark: Generated from `#/components/schemas/CreateImageVariationRequest/n`.
            public struct NPayload: Sendable, Hashable {
                public var body: OpenAPIRuntime.HTTPBody
                /// Creates a new `NPayload`.
                ///
                /// - Parameters:
                ///   - body:
                public init(body: OpenAPIRuntime.HTTPBody) {
                    self.body = body
                }
            }
            case n(OpenAPIRuntime.MultipartPart<Components.Schemas.CreateImageVariationRequest.NPayload>)
            /// - Remark: Generated from `#/components/schemas/CreateImageVariationRequest/response_format`.
            public struct ResponseFormatPayload: Sendable, Hashable {
                public var body: OpenAPIRuntime.HTTPBody
                /// Creates a new `ResponseFormatPayload`.
                ///
                /// - Parameters:
                ///   - body:
                public init(body: OpenAPIRuntime.HTTPBody) {
                    self.body = body
                }
            }
            case responseFormat(OpenAPIRuntime.MultipartPart<Components.Schemas.CreateImageVariationRequest.ResponseFormatPayload>)
            /// - Remark: Generated from `#/components/schemas/CreateImageVariationRequest/size`.
            public struct SizePayload: Sendable, Hashable {
                public var body: OpenAPIRuntime.HTTPBody
                /// Creates a new `SizePayload`.
                ///
                /// - Parameters:
                ///   - body:
                public init(body: OpenAPIRuntime.HTTPBody) {
                    self.body = body
                }
            }
            case size(OpenAPIRuntime.MultipartPart<Components.Schemas.CreateImageVariationRequest.SizePayload>)
            /// - Remark: Generated from `#/components/schemas/CreateImageVariationRequest/user`.
            public struct UserPayload: Sendable, Hashable {
                public var body: OpenAPIRuntime.HTTPBody
                /// Creates a new `UserPayload`.
                ///
                /// - Parameters:
                ///   - body:
                public init(body: OpenAPIRuntime.HTTPBody) {
                    self.body = body
                }
            }
            case user(OpenAPIRuntime.MultipartPart<Components.Schemas.CreateImageVariationRequest.UserPayload>)
            case undocumented(OpenAPIRuntime.MultipartRawPart)
        }
        /// - Remark: Generated from `#/components/schemas/CreateMessageRequest`.
        public struct CreateMessageRequest: Codable, Hashable, Sendable {
            /// The role of the entity that is creating the message. Allowed values include:
            /// - `user`: Indicates the message is sent by an actual user and should be used in most cases to represent user-generated messages.
            /// - `assistant`: Indicates the message is generated by the assistant. Use this value to insert messages from the assistant into the conversation.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/CreateMessageRequest/role`.
            @frozen public enum RolePayload: String, Codable, Hashable, Sendable, CaseIterable {
                case user = "user"
                case assistant = "assistant"
            }
            /// The role of the entity that is creating the message. Allowed values include:
            /// - `user`: Indicates the message is sent by an actual user and should be used in most cases to represent user-generated messages.
            /// - `assistant`: Indicates the message is generated by the assistant. Use this value to insert messages from the assistant into the conversation.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/CreateMessageRequest/role`.
            public var role: Components.Schemas.CreateMessageRequest.RolePayload
            /// - Remark: Generated from `#/components/schemas/CreateMessageRequest/content`.
            @frozen public enum ContentPayload: Codable, Hashable, Sendable {
                /// The text contents of the message.
                ///
                /// - Remark: Generated from `#/components/schemas/CreateMessageRequest/content/case1`.
                case case1(Swift.String)
                /// - Remark: Generated from `#/components/schemas/CreateMessageRequest/content/Case2Payload`.
                @frozen public enum Case2PayloadPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/CreateMessageRequest/content/Case2Payload/case1`.
                    case MessageContentImageFileObject(Components.Schemas.MessageContentImageFileObject)
                    /// - Remark: Generated from `#/components/schemas/CreateMessageRequest/content/Case2Payload/case2`.
                    case MessageContentImageUrlObject(Components.Schemas.MessageContentImageUrlObject)
                    /// - Remark: Generated from `#/components/schemas/CreateMessageRequest/content/Case2Payload/case3`.
                    case MessageRequestContentTextObject(Components.Schemas.MessageRequestContentTextObject)
                    public init(from decoder: any Decoder) throws {
                        var errors: [any Error] = []
                        do {
                            self = .MessageContentImageFileObject(try .init(from: decoder))
                            return
                        } catch {
                            errors.append(error)
                        }
                        do {
                            self = .MessageContentImageUrlObject(try .init(from: decoder))
                            return
                        } catch {
                            errors.append(error)
                        }
                        do {
                            self = .MessageRequestContentTextObject(try .init(from: decoder))
                            return
                        } catch {
                            errors.append(error)
                        }
                        throw Swift.DecodingError.failedToDecodeOneOfSchema(
                            type: Self.self,
                            codingPath: decoder.codingPath,
                            errors: errors
                        )
                    }
                    public func encode(to encoder: any Encoder) throws {
                        switch self {
                        case let .MessageContentImageFileObject(value):
                            try value.encode(to: encoder)
                        case let .MessageContentImageUrlObject(value):
                            try value.encode(to: encoder)
                        case let .MessageRequestContentTextObject(value):
                            try value.encode(to: encoder)
                        }
                    }
                }
                /// An array of content parts with a defined type, each can be of type `text` or images can be passed with `image_url` or `image_file`. Image types are only supported on [Vision-compatible models](/docs/models).
                ///
                /// - Remark: Generated from `#/components/schemas/CreateMessageRequest/content/case2`.
                public typealias Case2Payload = [Components.Schemas.CreateMessageRequest.ContentPayload.Case2PayloadPayload]
                /// An array of content parts with a defined type, each can be of type `text` or images can be passed with `image_url` or `image_file`. Image types are only supported on [Vision-compatible models](/docs/models).
                ///
                /// - Remark: Generated from `#/components/schemas/CreateMessageRequest/content/case2`.
                case case2(Components.Schemas.CreateMessageRequest.ContentPayload.Case2Payload)
                public init(from decoder: any Decoder) throws {
                    var errors: [any Error] = []
                    do {
                        self = .case1(try decoder.decodeFromSingleValueContainer())
                        return
                    } catch {
                        errors.append(error)
                    }
                    do {
                        self = .case2(try decoder.decodeFromSingleValueContainer())
                        return
                    } catch {
                        errors.append(error)
                    }
                    throw Swift.DecodingError.failedToDecodeOneOfSchema(
                        type: Self.self,
                        codingPath: decoder.codingPath,
                        errors: errors
                    )
                }
                public func encode(to encoder: any Encoder) throws {
                    switch self {
                    case let .case1(value):
                        try encoder.encodeToSingleValueContainer(value)
                    case let .case2(value):
                        try encoder.encodeToSingleValueContainer(value)
                    }
                }
            }
            /// - Remark: Generated from `#/components/schemas/CreateMessageRequest/content`.
            public var content: Components.Schemas.CreateMessageRequest.ContentPayload
            /// - Remark: Generated from `#/components/schemas/CreateMessageRequest/AttachmentsPayload`.
            public struct AttachmentsPayloadPayload: Codable, Hashable, Sendable {
                /// The ID of the file to attach to the message.
                ///
                /// - Remark: Generated from `#/components/schemas/CreateMessageRequest/AttachmentsPayload/file_id`.
                public var fileId: Swift.String?
                /// - Remark: Generated from `#/components/schemas/CreateMessageRequest/AttachmentsPayload/ToolsPayload`.
                @frozen public enum ToolsPayloadPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/CreateMessageRequest/AttachmentsPayload/ToolsPayload/case1`.
                    case AssistantToolsCode(Components.Schemas.AssistantToolsCode)
                    /// - Remark: Generated from `#/components/schemas/CreateMessageRequest/AttachmentsPayload/ToolsPayload/case2`.
                    case AssistantToolsFileSearchTypeOnly(Components.Schemas.AssistantToolsFileSearchTypeOnly)
                    public init(from decoder: any Decoder) throws {
                        var errors: [any Error] = []
                        do {
                            self = .AssistantToolsCode(try .init(from: decoder))
                            return
                        } catch {
                            errors.append(error)
                        }
                        do {
                            self = .AssistantToolsFileSearchTypeOnly(try .init(from: decoder))
                            return
                        } catch {
                            errors.append(error)
                        }
                        throw Swift.DecodingError.failedToDecodeOneOfSchema(
                            type: Self.self,
                            codingPath: decoder.codingPath,
                            errors: errors
                        )
                    }
                    public func encode(to encoder: any Encoder) throws {
                        switch self {
                        case let .AssistantToolsCode(value):
                            try value.encode(to: encoder)
                        case let .AssistantToolsFileSearchTypeOnly(value):
                            try value.encode(to: encoder)
                        }
                    }
                }
                /// The tools to add this file to.
                ///
                /// - Remark: Generated from `#/components/schemas/CreateMessageRequest/AttachmentsPayload/tools`.
                public typealias ToolsPayload = [Components.Schemas.CreateMessageRequest.AttachmentsPayloadPayload.ToolsPayloadPayload]
                /// The tools to add this file to.
                ///
                /// - Remark: Generated from `#/components/schemas/CreateMessageRequest/AttachmentsPayload/tools`.
                public var tools: Components.Schemas.CreateMessageRequest.AttachmentsPayloadPayload.ToolsPayload?
                /// Creates a new `AttachmentsPayloadPayload`.
                ///
                /// - Parameters:
                ///   - fileId: The ID of the file to attach to the message.
                ///   - tools: The tools to add this file to.
                public init(
                    fileId: Swift.String? = nil,
                    tools: Components.Schemas.CreateMessageRequest.AttachmentsPayloadPayload.ToolsPayload? = nil
                ) {
                    self.fileId = fileId
                    self.tools = tools
                }
                public enum CodingKeys: String, CodingKey {
                    case fileId = "file_id"
                    case tools
                }
            }
            /// A list of files attached to the message, and the tools they should be added to.
            ///
            /// - Remark: Generated from `#/components/schemas/CreateMessageRequest/attachments`.
            public typealias AttachmentsPayload = [Components.Schemas.CreateMessageRequest.AttachmentsPayloadPayload]
            /// A list of files attached to the message, and the tools they should be added to.
            ///
            /// - Remark: Generated from `#/components/schemas/CreateMessageRequest/attachments`.
            public var attachments: Components.Schemas.CreateMessageRequest.AttachmentsPayload?
            /// - Remark: Generated from `#/components/schemas/CreateMessageRequest/metadata`.
            public var metadata: Components.Schemas.Metadata?
            /// Creates a new `CreateMessageRequest`.
            ///
            /// - Parameters:
            ///   - role: The role of the entity that is creating the message. Allowed values include:
            ///   - content:
            ///   - attachments: A list of files attached to the message, and the tools they should be added to.
            ///   - metadata:
            public init(
                role: Components.Schemas.CreateMessageRequest.RolePayload,
                content: Components.Schemas.CreateMessageRequest.ContentPayload,
                attachments: Components.Schemas.CreateMessageRequest.AttachmentsPayload? = nil,
                metadata: Components.Schemas.Metadata? = nil
            ) {
                self.role = role
                self.content = content
                self.attachments = attachments
                self.metadata = metadata
            }
            public enum CodingKeys: String, CodingKey {
                case role
                case content
                case attachments
                case metadata
            }
            public init(from decoder: any Decoder) throws {
                let container = try decoder.container(keyedBy: CodingKeys.self)
                self.role = try container.decode(
                    Components.Schemas.CreateMessageRequest.RolePayload.self,
                    forKey: .role
                )
                self.content = try container.decode(
                    Components.Schemas.CreateMessageRequest.ContentPayload.self,
                    forKey: .content
                )
                self.attachments = try container.decodeIfPresent(
                    Components.Schemas.CreateMessageRequest.AttachmentsPayload.self,
                    forKey: .attachments
                )
                self.metadata = try container.decodeIfPresent(
                    Components.Schemas.Metadata.self,
                    forKey: .metadata
                )
                try decoder.ensureNoAdditionalProperties(knownKeys: [
                    "role",
                    "content",
                    "attachments",
                    "metadata"
                ])
            }
        }
        /// - Remark: Generated from `#/components/schemas/CreateModerationRequest`.
        public struct CreateModerationRequest: Codable, Hashable, Sendable {
            /// Input (or inputs) to classify. Can be a single string, an array of strings, or
            /// an array of multi-modal input objects similar to other models.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/CreateModerationRequest/input`.
            @frozen public enum InputPayload: Codable, Hashable, Sendable {
                /// A string of text to classify for moderation.
                ///
                /// - Remark: Generated from `#/components/schemas/CreateModerationRequest/input/case1`.
                case case1(Swift.String)
                /// An array of strings to classify for moderation.
                ///
                /// - Remark: Generated from `#/components/schemas/CreateModerationRequest/input/case2`.
                case case2([Swift.String])
                /// - Remark: Generated from `#/components/schemas/CreateModerationRequest/input/Case3Payload`.
                @frozen public enum Case3PayloadPayload: Codable, Hashable, Sendable {
                    /// An object describing an image to classify.
                    ///
                    /// - Remark: Generated from `#/components/schemas/CreateModerationRequest/input/Case3Payload/case1`.
                    public struct Case1Payload: Codable, Hashable, Sendable {
                        /// Always `image_url`.
                        ///
                        /// - Remark: Generated from `#/components/schemas/CreateModerationRequest/input/Case3Payload/case1/type`.
                        @frozen public enum _TypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case imageUrl = "image_url"
                        }
                        /// Always `image_url`.
                        ///
                        /// - Remark: Generated from `#/components/schemas/CreateModerationRequest/input/Case3Payload/case1/type`.
                        public var _type: Components.Schemas.CreateModerationRequest.InputPayload.Case3PayloadPayload.Case1Payload._TypePayload
                        /// Contains either an image URL or a data URL for a base64 encoded image.
                        ///
                        /// - Remark: Generated from `#/components/schemas/CreateModerationRequest/input/Case3Payload/case1/image_url`.
                        public struct ImageUrlPayload: Codable, Hashable, Sendable {
                            /// Either a URL of the image or the base64 encoded image data.
                            ///
                            /// - Remark: Generated from `#/components/schemas/CreateModerationRequest/input/Case3Payload/case1/image_url/url`.
                            public var url: Swift.String
                            /// Creates a new `ImageUrlPayload`.
                            ///
                            /// - Parameters:
                            ///   - url: Either a URL of the image or the base64 encoded image data.
                            public init(url: Swift.String) {
                                self.url = url
                            }
                            public enum CodingKeys: String, CodingKey {
                                case url
                            }
                        }
                        /// Contains either an image URL or a data URL for a base64 encoded image.
                        ///
                        /// - Remark: Generated from `#/components/schemas/CreateModerationRequest/input/Case3Payload/case1/image_url`.
                        public var imageUrl: Components.Schemas.CreateModerationRequest.InputPayload.Case3PayloadPayload.Case1Payload.ImageUrlPayload
                        /// Creates a new `Case1Payload`.
                        ///
                        /// - Parameters:
                        ///   - _type: Always `image_url`.
                        ///   - imageUrl: Contains either an image URL or a data URL for a base64 encoded image.
                        public init(
                            _type: Components.Schemas.CreateModerationRequest.InputPayload.Case3PayloadPayload.Case1Payload._TypePayload,
                            imageUrl: Components.Schemas.CreateModerationRequest.InputPayload.Case3PayloadPayload.Case1Payload.ImageUrlPayload
                        ) {
                            self._type = _type
                            self.imageUrl = imageUrl
                        }
                        public enum CodingKeys: String, CodingKey {
                            case _type = "type"
                            case imageUrl = "image_url"
                        }
                    }
                    /// An object describing an image to classify.
                    ///
                    /// - Remark: Generated from `#/components/schemas/CreateModerationRequest/input/Case3Payload/case1`.
                    case case1(Components.Schemas.CreateModerationRequest.InputPayload.Case3PayloadPayload.Case1Payload)
                    /// An object describing text to classify.
                    ///
                    /// - Remark: Generated from `#/components/schemas/CreateModerationRequest/input/Case3Payload/case2`.
                    public struct Case2Payload: Codable, Hashable, Sendable {
                        /// Always `text`.
                        ///
                        /// - Remark: Generated from `#/components/schemas/CreateModerationRequest/input/Case3Payload/case2/type`.
                        @frozen public enum _TypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case text = "text"
                        }
                        /// Always `text`.
                        ///
                        /// - Remark: Generated from `#/components/schemas/CreateModerationRequest/input/Case3Payload/case2/type`.
                        public var _type: Components.Schemas.CreateModerationRequest.InputPayload.Case3PayloadPayload.Case2Payload._TypePayload
                        /// A string of text to classify.
                        ///
                        /// - Remark: Generated from `#/components/schemas/CreateModerationRequest/input/Case3Payload/case2/text`.
                        public var text: Swift.String
                        /// Creates a new `Case2Payload`.
                        ///
                        /// - Parameters:
                        ///   - _type: Always `text`.
                        ///   - text: A string of text to classify.
                        public init(
                            _type: Components.Schemas.CreateModerationRequest.InputPayload.Case3PayloadPayload.Case2Payload._TypePayload,
                            text: Swift.String
                        ) {
                            self._type = _type
                            self.text = text
                        }
                        public enum CodingKeys: String, CodingKey {
                            case _type = "type"
                            case text
                        }
                    }
                    /// An object describing text to classify.
                    ///
                    /// - Remark: Generated from `#/components/schemas/CreateModerationRequest/input/Case3Payload/case2`.
                    case case2(Components.Schemas.CreateModerationRequest.InputPayload.Case3PayloadPayload.Case2Payload)
                    public init(from decoder: any Decoder) throws {
                        var errors: [any Error] = []
                        do {
                            self = .case1(try .init(from: decoder))
                            return
                        } catch {
                            errors.append(error)
                        }
                        do {
                            self = .case2(try .init(from: decoder))
                            return
                        } catch {
                            errors.append(error)
                        }
                        throw Swift.DecodingError.failedToDecodeOneOfSchema(
                            type: Self.self,
                            codingPath: decoder.codingPath,
                            errors: errors
                        )
                    }
                    public func encode(to encoder: any Encoder) throws {
                        switch self {
                        case let .case1(value):
                            try value.encode(to: encoder)
                        case let .case2(value):
                            try value.encode(to: encoder)
                        }
                    }
                }
                /// An array of multi-modal inputs to the moderation model.
                ///
                /// - Remark: Generated from `#/components/schemas/CreateModerationRequest/input/case3`.
                public typealias Case3Payload = [Components.Schemas.CreateModerationRequest.InputPayload.Case3PayloadPayload]
                /// An array of multi-modal inputs to the moderation model.
                ///
                /// - Remark: Generated from `#/components/schemas/CreateModerationRequest/input/case3`.
                case case3(Components.Schemas.CreateModerationRequest.InputPayload.Case3Payload)
                public init(from decoder: any Decoder) throws {
                    var errors: [any Error] = []
                    do {
                        self = .case1(try decoder.decodeFromSingleValueContainer())
                        return
                    } catch {
                        errors.append(error)
                    }
                    do {
                        self = .case2(try decoder.decodeFromSingleValueContainer())
                        return
                    } catch {
                        errors.append(error)
                    }
                    do {
                        self = .case3(try decoder.decodeFromSingleValueContainer())
                        return
                    } catch {
                        errors.append(error)
                    }
                    throw Swift.DecodingError.failedToDecodeOneOfSchema(
                        type: Self.self,
                        codingPath: decoder.codingPath,
                        errors: errors
                    )
                }
                public func encode(to encoder: any Encoder) throws {
                    switch self {
                    case let .case1(value):
                        try encoder.encodeToSingleValueContainer(value)
                    case let .case2(value):
                        try encoder.encodeToSingleValueContainer(value)
                    case let .case3(value):
                        try encoder.encodeToSingleValueContainer(value)
                    }
                }
            }
            /// Input (or inputs) to classify. Can be a single string, an array of strings, or
            /// an array of multi-modal input objects similar to other models.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/CreateModerationRequest/input`.
            public var input: Components.Schemas.CreateModerationRequest.InputPayload
            /// The content moderation model you would like to use. Learn more in
            /// [the moderation guide](/docs/guides/moderation), and learn about
            /// available models [here](/docs/models#moderation).
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/CreateModerationRequest/model`.
            public struct ModelPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/CreateModerationRequest/model/value1`.
                public var value1: Swift.String?
                /// - Remark: Generated from `#/components/schemas/CreateModerationRequest/model/value2`.
                @frozen public enum Value2Payload: String, Codable, Hashable, Sendable, CaseIterable {
                    case omniModerationLatest = "omni-moderation-latest"
                    case omniModeration20240926 = "omni-moderation-2024-09-26"
                    case textModerationLatest = "text-moderation-latest"
                    case textModerationStable = "text-moderation-stable"
                }
                /// - Remark: Generated from `#/components/schemas/CreateModerationRequest/model/value2`.
                public var value2: Components.Schemas.CreateModerationRequest.ModelPayload.Value2Payload?
                /// Creates a new `ModelPayload`.
                ///
                /// - Parameters:
                ///   - value1:
                ///   - value2:
                public init(
                    value1: Swift.String? = nil,
                    value2: Components.Schemas.CreateModerationRequest.ModelPayload.Value2Payload? = nil
                ) {
                    self.value1 = value1
                    self.value2 = value2
                }
                public init(from decoder: any Decoder) throws {
                    var errors: [any Error] = []
                    do {
                        self.value1 = try decoder.decodeFromSingleValueContainer()
                    } catch {
                        errors.append(error)
                    }
                    do {
                        self.value2 = try decoder.decodeFromSingleValueContainer()
                    } catch {
                        errors.append(error)
                    }
                    try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                        [
                            self.value1,
                            self.value2
                        ],
                        type: Self.self,
                        codingPath: decoder.codingPath,
                        errors: errors
                    )
                }
                public func encode(to encoder: any Encoder) throws {
                    try encoder.encodeFirstNonNilValueToSingleValueContainer([
                        self.value1,
                        self.value2
                    ])
                }
            }
            /// The content moderation model you would like to use. Learn more in
            /// [the moderation guide](/docs/guides/moderation), and learn about
            /// available models [here](/docs/models#moderation).
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/CreateModerationRequest/model`.
            public var model: Components.Schemas.CreateModerationRequest.ModelPayload?
            /// Creates a new `CreateModerationRequest`.
            ///
            /// - Parameters:
            ///   - input: Input (or inputs) to classify. Can be a single string, an array of strings, or
            ///   - model: The content moderation model you would like to use. Learn more in
            public init(
                input: Components.Schemas.CreateModerationRequest.InputPayload,
                model: Components.Schemas.CreateModerationRequest.ModelPayload? = nil
            ) {
                self.input = input
                self.model = model
            }
            public enum CodingKeys: String, CodingKey {
                case input
                case model
            }
        }
        /// Represents if a given text input is potentially harmful.
        ///
        /// - Remark: Generated from `#/components/schemas/CreateModerationResponse`.
        public struct CreateModerationResponse: Codable, Hashable, Sendable {
            /// The unique identifier for the moderation request.
            ///
            /// - Remark: Generated from `#/components/schemas/CreateModerationResponse/id`.
            public var id: Swift.String
            /// The model used to generate the moderation results.
            ///
            /// - Remark: Generated from `#/components/schemas/CreateModerationResponse/model`.
            public var model: Swift.String
            /// - Remark: Generated from `#/components/schemas/CreateModerationResponse/ResultsPayload`.
            public struct ResultsPayloadPayload: Codable, Hashable, Sendable {
                /// Whether any of the below categories are flagged.
                ///
                /// - Remark: Generated from `#/components/schemas/CreateModerationResponse/ResultsPayload/flagged`.
                public var flagged: Swift.Bool
                /// A list of the categories, and whether they are flagged or not.
                ///
                /// - Remark: Generated from `#/components/schemas/CreateModerationResponse/ResultsPayload/categories`.
                public struct CategoriesPayload: Codable, Hashable, Sendable {
                    /// Content that expresses, incites, or promotes hate based on race, gender, ethnicity, religion, nationality, sexual orientation, disability status, or caste. Hateful content aimed at non-protected groups (e.g., chess players) is harassment.
                    ///
                    /// - Remark: Generated from `#/components/schemas/CreateModerationResponse/ResultsPayload/categories/hate`.
                    public var hate: Swift.Bool
                    /// Hateful content that also includes violence or serious harm towards the targeted group based on race, gender, ethnicity, religion, nationality, sexual orientation, disability status, or caste.
                    ///
                    /// - Remark: Generated from `#/components/schemas/CreateModerationResponse/ResultsPayload/categories/hate/threatening`.
                    public var hateThreatening: Swift.Bool
                    /// Content that expresses, incites, or promotes harassing language towards any target.
                    ///
                    /// - Remark: Generated from `#/components/schemas/CreateModerationResponse/ResultsPayload/categories/harassment`.
                    public var harassment: Swift.Bool
                    /// Harassment content that also includes violence or serious harm towards any target.
                    ///
                    /// - Remark: Generated from `#/components/schemas/CreateModerationResponse/ResultsPayload/categories/harassment/threatening`.
                    public var harassmentThreatening: Swift.Bool
                    /// Content that includes instructions or advice that facilitate the planning or execution of wrongdoing, or that gives advice or instruction on how to commit illicit acts. For example, "how to shoplift" would fit this category.
                    ///
                    /// - Remark: Generated from `#/components/schemas/CreateModerationResponse/ResultsPayload/categories/illicit`.
                    public var illicit: Swift.Bool
                    /// Content that includes instructions or advice that facilitate the planning or execution of wrongdoing that also includes violence, or that gives advice or instruction on the procurement of any weapon.
                    ///
                    /// - Remark: Generated from `#/components/schemas/CreateModerationResponse/ResultsPayload/categories/illicit/violent`.
                    public var illicitViolent: Swift.Bool
                    /// Content that promotes, encourages, or depicts acts of self-harm, such as suicide, cutting, and eating disorders.
                    ///
                    /// - Remark: Generated from `#/components/schemas/CreateModerationResponse/ResultsPayload/categories/self-harm`.
                    public var selfHarm: Swift.Bool
                    /// Content where the speaker expresses that they are engaging or intend to engage in acts of self-harm, such as suicide, cutting, and eating disorders.
                    ///
                    /// - Remark: Generated from `#/components/schemas/CreateModerationResponse/ResultsPayload/categories/self-harm/intent`.
                    public var selfHarmIntent: Swift.Bool
                    /// Content that encourages performing acts of self-harm, such as suicide, cutting, and eating disorders, or that gives instructions or advice on how to commit such acts.
                    ///
                    /// - Remark: Generated from `#/components/schemas/CreateModerationResponse/ResultsPayload/categories/self-harm/instructions`.
                    public var selfHarmInstructions: Swift.Bool
                    /// Content meant to arouse sexual excitement, such as the description of sexual activity, or that promotes sexual services (excluding sex education and wellness).
                    ///
                    /// - Remark: Generated from `#/components/schemas/CreateModerationResponse/ResultsPayload/categories/sexual`.
                    public var sexual: Swift.Bool
                    /// Sexual content that includes an individual who is under 18 years old.
                    ///
                    /// - Remark: Generated from `#/components/schemas/CreateModerationResponse/ResultsPayload/categories/sexual/minors`.
                    public var sexualMinors: Swift.Bool
                    /// Content that depicts death, violence, or physical injury.
                    ///
                    /// - Remark: Generated from `#/components/schemas/CreateModerationResponse/ResultsPayload/categories/violence`.
                    public var violence: Swift.Bool
                    /// Content that depicts death, violence, or physical injury in graphic detail.
                    ///
                    /// - Remark: Generated from `#/components/schemas/CreateModerationResponse/ResultsPayload/categories/violence/graphic`.
                    public var violenceGraphic: Swift.Bool
                    /// Creates a new `CategoriesPayload`.
                    ///
                    /// - Parameters:
                    ///   - hate: Content that expresses, incites, or promotes hate based on race, gender, ethnicity, religion, nationality, sexual orientation, disability status, or caste. Hateful content aimed at non-protected groups (e.g., chess players) is harassment.
                    ///   - hateThreatening: Hateful content that also includes violence or serious harm towards the targeted group based on race, gender, ethnicity, religion, nationality, sexual orientation, disability status, or caste.
                    ///   - harassment: Content that expresses, incites, or promotes harassing language towards any target.
                    ///   - harassmentThreatening: Harassment content that also includes violence or serious harm towards any target.
                    ///   - illicit: Content that includes instructions or advice that facilitate the planning or execution of wrongdoing, or that gives advice or instruction on how to commit illicit acts. For example, "how to shoplift" would fit this category.
                    ///   - illicitViolent: Content that includes instructions or advice that facilitate the planning or execution of wrongdoing that also includes violence, or that gives advice or instruction on the procurement of any weapon.
                    ///   - selfHarm: Content that promotes, encourages, or depicts acts of self-harm, such as suicide, cutting, and eating disorders.
                    ///   - selfHarmIntent: Content where the speaker expresses that they are engaging or intend to engage in acts of self-harm, such as suicide, cutting, and eating disorders.
                    ///   - selfHarmInstructions: Content that encourages performing acts of self-harm, such as suicide, cutting, and eating disorders, or that gives instructions or advice on how to commit such acts.
                    ///   - sexual: Content meant to arouse sexual excitement, such as the description of sexual activity, or that promotes sexual services (excluding sex education and wellness).
                    ///   - sexualMinors: Sexual content that includes an individual who is under 18 years old.
                    ///   - violence: Content that depicts death, violence, or physical injury.
                    ///   - violenceGraphic: Content that depicts death, violence, or physical injury in graphic detail.
                    public init(
                        hate: Swift.Bool,
                        hateThreatening: Swift.Bool,
                        harassment: Swift.Bool,
                        harassmentThreatening: Swift.Bool,
                        illicit: Swift.Bool,
                        illicitViolent: Swift.Bool,
                        selfHarm: Swift.Bool,
                        selfHarmIntent: Swift.Bool,
                        selfHarmInstructions: Swift.Bool,
                        sexual: Swift.Bool,
                        sexualMinors: Swift.Bool,
                        violence: Swift.Bool,
                        violenceGraphic: Swift.Bool
                    ) {
                        self.hate = hate
                        self.hateThreatening = hateThreatening
                        self.harassment = harassment
                        self.harassmentThreatening = harassmentThreatening
                        self.illicit = illicit
                        self.illicitViolent = illicitViolent
                        self.selfHarm = selfHarm
                        self.selfHarmIntent = selfHarmIntent
                        self.selfHarmInstructions = selfHarmInstructions
                        self.sexual = sexual
                        self.sexualMinors = sexualMinors
                        self.violence = violence
                        self.violenceGraphic = violenceGraphic
                    }
                    public enum CodingKeys: String, CodingKey {
                        case hate
                        case hateThreatening = "hate/threatening"
                        case harassment
                        case harassmentThreatening = "harassment/threatening"
                        case illicit
                        case illicitViolent = "illicit/violent"
                        case selfHarm = "self-harm"
                        case selfHarmIntent = "self-harm/intent"
                        case selfHarmInstructions = "self-harm/instructions"
                        case sexual
                        case sexualMinors = "sexual/minors"
                        case violence
                        case violenceGraphic = "violence/graphic"
                    }
                }
                /// A list of the categories, and whether they are flagged or not.
                ///
                /// - Remark: Generated from `#/components/schemas/CreateModerationResponse/ResultsPayload/categories`.
                public var categories: Components.Schemas.CreateModerationResponse.ResultsPayloadPayload.CategoriesPayload
                /// A list of the categories along with their scores as predicted by model.
                ///
                /// - Remark: Generated from `#/components/schemas/CreateModerationResponse/ResultsPayload/category_scores`.
                public struct CategoryScoresPayload: Codable, Hashable, Sendable {
                    /// The score for the category 'hate'.
                    ///
                    /// - Remark: Generated from `#/components/schemas/CreateModerationResponse/ResultsPayload/category_scores/hate`.
                    public var hate: Swift.Double
                    /// The score for the category 'hate/threatening'.
                    ///
                    /// - Remark: Generated from `#/components/schemas/CreateModerationResponse/ResultsPayload/category_scores/hate/threatening`.
                    public var hateThreatening: Swift.Double
                    /// The score for the category 'harassment'.
                    ///
                    /// - Remark: Generated from `#/components/schemas/CreateModerationResponse/ResultsPayload/category_scores/harassment`.
                    public var harassment: Swift.Double
                    /// The score for the category 'harassment/threatening'.
                    ///
                    /// - Remark: Generated from `#/components/schemas/CreateModerationResponse/ResultsPayload/category_scores/harassment/threatening`.
                    public var harassmentThreatening: Swift.Double
                    /// The score for the category 'illicit'.
                    ///
                    /// - Remark: Generated from `#/components/schemas/CreateModerationResponse/ResultsPayload/category_scores/illicit`.
                    public var illicit: Swift.Double
                    /// The score for the category 'illicit/violent'.
                    ///
                    /// - Remark: Generated from `#/components/schemas/CreateModerationResponse/ResultsPayload/category_scores/illicit/violent`.
                    public var illicitViolent: Swift.Double
                    /// The score for the category 'self-harm'.
                    ///
                    /// - Remark: Generated from `#/components/schemas/CreateModerationResponse/ResultsPayload/category_scores/self-harm`.
                    public var selfHarm: Swift.Double
                    /// The score for the category 'self-harm/intent'.
                    ///
                    /// - Remark: Generated from `#/components/schemas/CreateModerationResponse/ResultsPayload/category_scores/self-harm/intent`.
                    public var selfHarmIntent: Swift.Double
                    /// The score for the category 'self-harm/instructions'.
                    ///
                    /// - Remark: Generated from `#/components/schemas/CreateModerationResponse/ResultsPayload/category_scores/self-harm/instructions`.
                    public var selfHarmInstructions: Swift.Double
                    /// The score for the category 'sexual'.
                    ///
                    /// - Remark: Generated from `#/components/schemas/CreateModerationResponse/ResultsPayload/category_scores/sexual`.
                    public var sexual: Swift.Double
                    /// The score for the category 'sexual/minors'.
                    ///
                    /// - Remark: Generated from `#/components/schemas/CreateModerationResponse/ResultsPayload/category_scores/sexual/minors`.
                    public var sexualMinors: Swift.Double
                    /// The score for the category 'violence'.
                    ///
                    /// - Remark: Generated from `#/components/schemas/CreateModerationResponse/ResultsPayload/category_scores/violence`.
                    public var violence: Swift.Double
                    /// The score for the category 'violence/graphic'.
                    ///
                    /// - Remark: Generated from `#/components/schemas/CreateModerationResponse/ResultsPayload/category_scores/violence/graphic`.
                    public var violenceGraphic: Swift.Double
                    /// Creates a new `CategoryScoresPayload`.
                    ///
                    /// - Parameters:
                    ///   - hate: The score for the category 'hate'.
                    ///   - hateThreatening: The score for the category 'hate/threatening'.
                    ///   - harassment: The score for the category 'harassment'.
                    ///   - harassmentThreatening: The score for the category 'harassment/threatening'.
                    ///   - illicit: The score for the category 'illicit'.
                    ///   - illicitViolent: The score for the category 'illicit/violent'.
                    ///   - selfHarm: The score for the category 'self-harm'.
                    ///   - selfHarmIntent: The score for the category 'self-harm/intent'.
                    ///   - selfHarmInstructions: The score for the category 'self-harm/instructions'.
                    ///   - sexual: The score for the category 'sexual'.
                    ///   - sexualMinors: The score for the category 'sexual/minors'.
                    ///   - violence: The score for the category 'violence'.
                    ///   - violenceGraphic: The score for the category 'violence/graphic'.
                    public init(
                        hate: Swift.Double,
                        hateThreatening: Swift.Double,
                        harassment: Swift.Double,
                        harassmentThreatening: Swift.Double,
                        illicit: Swift.Double,
                        illicitViolent: Swift.Double,
                        selfHarm: Swift.Double,
                        selfHarmIntent: Swift.Double,
                        selfHarmInstructions: Swift.Double,
                        sexual: Swift.Double,
                        sexualMinors: Swift.Double,
                        violence: Swift.Double,
                        violenceGraphic: Swift.Double
                    ) {
                        self.hate = hate
                        self.hateThreatening = hateThreatening
                        self.harassment = harassment
                        self.harassmentThreatening = harassmentThreatening
                        self.illicit = illicit
                        self.illicitViolent = illicitViolent
                        self.selfHarm = selfHarm
                        self.selfHarmIntent = selfHarmIntent
                        self.selfHarmInstructions = selfHarmInstructions
                        self.sexual = sexual
                        self.sexualMinors = sexualMinors
                        self.violence = violence
                        self.violenceGraphic = violenceGraphic
                    }
                    public enum CodingKeys: String, CodingKey {
                        case hate
                        case hateThreatening = "hate/threatening"
                        case harassment
                        case harassmentThreatening = "harassment/threatening"
                        case illicit
                        case illicitViolent = "illicit/violent"
                        case selfHarm = "self-harm"
                        case selfHarmIntent = "self-harm/intent"
                        case selfHarmInstructions = "self-harm/instructions"
                        case sexual
                        case sexualMinors = "sexual/minors"
                        case violence
                        case violenceGraphic = "violence/graphic"
                    }
                }
                /// A list of the categories along with their scores as predicted by model.
                ///
                /// - Remark: Generated from `#/components/schemas/CreateModerationResponse/ResultsPayload/category_scores`.
                public var categoryScores: Components.Schemas.CreateModerationResponse.ResultsPayloadPayload.CategoryScoresPayload
                /// A list of the categories along with the input type(s) that the score applies to.
                ///
                /// - Remark: Generated from `#/components/schemas/CreateModerationResponse/ResultsPayload/category_applied_input_types`.
                public struct CategoryAppliedInputTypesPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/CreateModerationResponse/ResultsPayload/category_applied_input_types/HatePayload`.
                    @frozen public enum HatePayloadPayload: String, Codable, Hashable, Sendable, CaseIterable {
                        case text = "text"
                    }
                    /// The applied input type(s) for the category 'hate'.
                    ///
                    /// - Remark: Generated from `#/components/schemas/CreateModerationResponse/ResultsPayload/category_applied_input_types/hate`.
                    public typealias HatePayload = [Components.Schemas.CreateModerationResponse.ResultsPayloadPayload.CategoryAppliedInputTypesPayload.HatePayloadPayload]
                    /// The applied input type(s) for the category 'hate'.
                    ///
                    /// - Remark: Generated from `#/components/schemas/CreateModerationResponse/ResultsPayload/category_applied_input_types/hate`.
                    public var hate: Components.Schemas.CreateModerationResponse.ResultsPayloadPayload.CategoryAppliedInputTypesPayload.HatePayload
                    /// - Remark: Generated from `#/components/schemas/CreateModerationResponse/ResultsPayload/category_applied_input_types/HateThreateningPayload`.
                    @frozen public enum HateThreateningPayloadPayload: String, Codable, Hashable, Sendable, CaseIterable {
                        case text = "text"
                    }
                    /// The applied input type(s) for the category 'hate/threatening'.
                    ///
                    /// - Remark: Generated from `#/components/schemas/CreateModerationResponse/ResultsPayload/category_applied_input_types/hate/threatening`.
                    public typealias HateThreateningPayload = [Components.Schemas.CreateModerationResponse.ResultsPayloadPayload.CategoryAppliedInputTypesPayload.HateThreateningPayloadPayload]
                    /// The applied input type(s) for the category 'hate/threatening'.
                    ///
                    /// - Remark: Generated from `#/components/schemas/CreateModerationResponse/ResultsPayload/category_applied_input_types/hate/threatening`.
                    public var hateThreatening: Components.Schemas.CreateModerationResponse.ResultsPayloadPayload.CategoryAppliedInputTypesPayload.HateThreateningPayload
                    /// - Remark: Generated from `#/components/schemas/CreateModerationResponse/ResultsPayload/category_applied_input_types/HarassmentPayload`.
                    @frozen public enum HarassmentPayloadPayload: String, Codable, Hashable, Sendable, CaseIterable {
                        case text = "text"
                    }
                    /// The applied input type(s) for the category 'harassment'.
                    ///
                    /// - Remark: Generated from `#/components/schemas/CreateModerationResponse/ResultsPayload/category_applied_input_types/harassment`.
                    public typealias HarassmentPayload = [Components.Schemas.CreateModerationResponse.ResultsPayloadPayload.CategoryAppliedInputTypesPayload.HarassmentPayloadPayload]
                    /// The applied input type(s) for the category 'harassment'.
                    ///
                    /// - Remark: Generated from `#/components/schemas/CreateModerationResponse/ResultsPayload/category_applied_input_types/harassment`.
                    public var harassment: Components.Schemas.CreateModerationResponse.ResultsPayloadPayload.CategoryAppliedInputTypesPayload.HarassmentPayload
                    /// - Remark: Generated from `#/components/schemas/CreateModerationResponse/ResultsPayload/category_applied_input_types/HarassmentThreateningPayload`.
                    @frozen public enum HarassmentThreateningPayloadPayload: String, Codable, Hashable, Sendable, CaseIterable {
                        case text = "text"
                    }
                    /// The applied input type(s) for the category 'harassment/threatening'.
                    ///
                    /// - Remark: Generated from `#/components/schemas/CreateModerationResponse/ResultsPayload/category_applied_input_types/harassment/threatening`.
                    public typealias HarassmentThreateningPayload = [Components.Schemas.CreateModerationResponse.ResultsPayloadPayload.CategoryAppliedInputTypesPayload.HarassmentThreateningPayloadPayload]
                    /// The applied input type(s) for the category 'harassment/threatening'.
                    ///
                    /// - Remark: Generated from `#/components/schemas/CreateModerationResponse/ResultsPayload/category_applied_input_types/harassment/threatening`.
                    public var harassmentThreatening: Components.Schemas.CreateModerationResponse.ResultsPayloadPayload.CategoryAppliedInputTypesPayload.HarassmentThreateningPayload
                    /// - Remark: Generated from `#/components/schemas/CreateModerationResponse/ResultsPayload/category_applied_input_types/IllicitPayload`.
                    @frozen public enum IllicitPayloadPayload: String, Codable, Hashable, Sendable, CaseIterable {
                        case text = "text"
                    }
                    /// The applied input type(s) for the category 'illicit'.
                    ///
                    /// - Remark: Generated from `#/components/schemas/CreateModerationResponse/ResultsPayload/category_applied_input_types/illicit`.
                    public typealias IllicitPayload = [Components.Schemas.CreateModerationResponse.ResultsPayloadPayload.CategoryAppliedInputTypesPayload.IllicitPayloadPayload]
                    /// The applied input type(s) for the category 'illicit'.
                    ///
                    /// - Remark: Generated from `#/components/schemas/CreateModerationResponse/ResultsPayload/category_applied_input_types/illicit`.
                    public var illicit: Components.Schemas.CreateModerationResponse.ResultsPayloadPayload.CategoryAppliedInputTypesPayload.IllicitPayload
                    /// - Remark: Generated from `#/components/schemas/CreateModerationResponse/ResultsPayload/category_applied_input_types/IllicitViolentPayload`.
                    @frozen public enum IllicitViolentPayloadPayload: String, Codable, Hashable, Sendable, CaseIterable {
                        case text = "text"
                    }
                    /// The applied input type(s) for the category 'illicit/violent'.
                    ///
                    /// - Remark: Generated from `#/components/schemas/CreateModerationResponse/ResultsPayload/category_applied_input_types/illicit/violent`.
                    public typealias IllicitViolentPayload = [Components.Schemas.CreateModerationResponse.ResultsPayloadPayload.CategoryAppliedInputTypesPayload.IllicitViolentPayloadPayload]
                    /// The applied input type(s) for the category 'illicit/violent'.
                    ///
                    /// - Remark: Generated from `#/components/schemas/CreateModerationResponse/ResultsPayload/category_applied_input_types/illicit/violent`.
                    public var illicitViolent: Components.Schemas.CreateModerationResponse.ResultsPayloadPayload.CategoryAppliedInputTypesPayload.IllicitViolentPayload
                    /// - Remark: Generated from `#/components/schemas/CreateModerationResponse/ResultsPayload/category_applied_input_types/SelfHarmPayload`.
                    @frozen public enum SelfHarmPayloadPayload: String, Codable, Hashable, Sendable, CaseIterable {
                        case text = "text"
                        case image = "image"
                    }
                    /// The applied input type(s) for the category 'self-harm'.
                    ///
                    /// - Remark: Generated from `#/components/schemas/CreateModerationResponse/ResultsPayload/category_applied_input_types/self-harm`.
                    public typealias SelfHarmPayload = [Components.Schemas.CreateModerationResponse.ResultsPayloadPayload.CategoryAppliedInputTypesPayload.SelfHarmPayloadPayload]
                    /// The applied input type(s) for the category 'self-harm'.
                    ///
                    /// - Remark: Generated from `#/components/schemas/CreateModerationResponse/ResultsPayload/category_applied_input_types/self-harm`.
                    public var selfHarm: Components.Schemas.CreateModerationResponse.ResultsPayloadPayload.CategoryAppliedInputTypesPayload.SelfHarmPayload
                    /// - Remark: Generated from `#/components/schemas/CreateModerationResponse/ResultsPayload/category_applied_input_types/SelfHarmIntentPayload`.
                    @frozen public enum SelfHarmIntentPayloadPayload: String, Codable, Hashable, Sendable, CaseIterable {
                        case text = "text"
                        case image = "image"
                    }
                    /// The applied input type(s) for the category 'self-harm/intent'.
                    ///
                    /// - Remark: Generated from `#/components/schemas/CreateModerationResponse/ResultsPayload/category_applied_input_types/self-harm/intent`.
                    public typealias SelfHarmIntentPayload = [Components.Schemas.CreateModerationResponse.ResultsPayloadPayload.CategoryAppliedInputTypesPayload.SelfHarmIntentPayloadPayload]
                    /// The applied input type(s) for the category 'self-harm/intent'.
                    ///
                    /// - Remark: Generated from `#/components/schemas/CreateModerationResponse/ResultsPayload/category_applied_input_types/self-harm/intent`.
                    public var selfHarmIntent: Components.Schemas.CreateModerationResponse.ResultsPayloadPayload.CategoryAppliedInputTypesPayload.SelfHarmIntentPayload
                    /// - Remark: Generated from `#/components/schemas/CreateModerationResponse/ResultsPayload/category_applied_input_types/SelfHarmInstructionsPayload`.
                    @frozen public enum SelfHarmInstructionsPayloadPayload: String, Codable, Hashable, Sendable, CaseIterable {
                        case text = "text"
                        case image = "image"
                    }
                    /// The applied input type(s) for the category 'self-harm/instructions'.
                    ///
                    /// - Remark: Generated from `#/components/schemas/CreateModerationResponse/ResultsPayload/category_applied_input_types/self-harm/instructions`.
                    public typealias SelfHarmInstructionsPayload = [Components.Schemas.CreateModerationResponse.ResultsPayloadPayload.CategoryAppliedInputTypesPayload.SelfHarmInstructionsPayloadPayload]
                    /// The applied input type(s) for the category 'self-harm/instructions'.
                    ///
                    /// - Remark: Generated from `#/components/schemas/CreateModerationResponse/ResultsPayload/category_applied_input_types/self-harm/instructions`.
                    public var selfHarmInstructions: Components.Schemas.CreateModerationResponse.ResultsPayloadPayload.CategoryAppliedInputTypesPayload.SelfHarmInstructionsPayload
                    /// - Remark: Generated from `#/components/schemas/CreateModerationResponse/ResultsPayload/category_applied_input_types/SexualPayload`.
                    @frozen public enum SexualPayloadPayload: String, Codable, Hashable, Sendable, CaseIterable {
                        case text = "text"
                        case image = "image"
                    }
                    /// The applied input type(s) for the category 'sexual'.
                    ///
                    /// - Remark: Generated from `#/components/schemas/CreateModerationResponse/ResultsPayload/category_applied_input_types/sexual`.
                    public typealias SexualPayload = [Components.Schemas.CreateModerationResponse.ResultsPayloadPayload.CategoryAppliedInputTypesPayload.SexualPayloadPayload]
                    /// The applied input type(s) for the category 'sexual'.
                    ///
                    /// - Remark: Generated from `#/components/schemas/CreateModerationResponse/ResultsPayload/category_applied_input_types/sexual`.
                    public var sexual: Components.Schemas.CreateModerationResponse.ResultsPayloadPayload.CategoryAppliedInputTypesPayload.SexualPayload
                    /// - Remark: Generated from `#/components/schemas/CreateModerationResponse/ResultsPayload/category_applied_input_types/SexualMinorsPayload`.
                    @frozen public enum SexualMinorsPayloadPayload: String, Codable, Hashable, Sendable, CaseIterable {
                        case text = "text"
                    }
                    /// The applied input type(s) for the category 'sexual/minors'.
                    ///
                    /// - Remark: Generated from `#/components/schemas/CreateModerationResponse/ResultsPayload/category_applied_input_types/sexual/minors`.
                    public typealias SexualMinorsPayload = [Components.Schemas.CreateModerationResponse.ResultsPayloadPayload.CategoryAppliedInputTypesPayload.SexualMinorsPayloadPayload]
                    /// The applied input type(s) for the category 'sexual/minors'.
                    ///
                    /// - Remark: Generated from `#/components/schemas/CreateModerationResponse/ResultsPayload/category_applied_input_types/sexual/minors`.
                    public var sexualMinors: Components.Schemas.CreateModerationResponse.ResultsPayloadPayload.CategoryAppliedInputTypesPayload.SexualMinorsPayload
                    /// - Remark: Generated from `#/components/schemas/CreateModerationResponse/ResultsPayload/category_applied_input_types/ViolencePayload`.
                    @frozen public enum ViolencePayloadPayload: String, Codable, Hashable, Sendable, CaseIterable {
                        case text = "text"
                        case image = "image"
                    }
                    /// The applied input type(s) for the category 'violence'.
                    ///
                    /// - Remark: Generated from `#/components/schemas/CreateModerationResponse/ResultsPayload/category_applied_input_types/violence`.
                    public typealias ViolencePayload = [Components.Schemas.CreateModerationResponse.ResultsPayloadPayload.CategoryAppliedInputTypesPayload.ViolencePayloadPayload]
                    /// The applied input type(s) for the category 'violence'.
                    ///
                    /// - Remark: Generated from `#/components/schemas/CreateModerationResponse/ResultsPayload/category_applied_input_types/violence`.
                    public var violence: Components.Schemas.CreateModerationResponse.ResultsPayloadPayload.CategoryAppliedInputTypesPayload.ViolencePayload
                    /// - Remark: Generated from `#/components/schemas/CreateModerationResponse/ResultsPayload/category_applied_input_types/ViolenceGraphicPayload`.
                    @frozen public enum ViolenceGraphicPayloadPayload: String, Codable, Hashable, Sendable, CaseIterable {
                        case text = "text"
                        case image = "image"
                    }
                    /// The applied input type(s) for the category 'violence/graphic'.
                    ///
                    /// - Remark: Generated from `#/components/schemas/CreateModerationResponse/ResultsPayload/category_applied_input_types/violence/graphic`.
                    public typealias ViolenceGraphicPayload = [Components.Schemas.CreateModerationResponse.ResultsPayloadPayload.CategoryAppliedInputTypesPayload.ViolenceGraphicPayloadPayload]
                    /// The applied input type(s) for the category 'violence/graphic'.
                    ///
                    /// - Remark: Generated from `#/components/schemas/CreateModerationResponse/ResultsPayload/category_applied_input_types/violence/graphic`.
                    public var violenceGraphic: Components.Schemas.CreateModerationResponse.ResultsPayloadPayload.CategoryAppliedInputTypesPayload.ViolenceGraphicPayload
                    /// Creates a new `CategoryAppliedInputTypesPayload`.
                    ///
                    /// - Parameters:
                    ///   - hate: The applied input type(s) for the category 'hate'.
                    ///   - hateThreatening: The applied input type(s) for the category 'hate/threatening'.
                    ///   - harassment: The applied input type(s) for the category 'harassment'.
                    ///   - harassmentThreatening: The applied input type(s) for the category 'harassment/threatening'.
                    ///   - illicit: The applied input type(s) for the category 'illicit'.
                    ///   - illicitViolent: The applied input type(s) for the category 'illicit/violent'.
                    ///   - selfHarm: The applied input type(s) for the category 'self-harm'.
                    ///   - selfHarmIntent: The applied input type(s) for the category 'self-harm/intent'.
                    ///   - selfHarmInstructions: The applied input type(s) for the category 'self-harm/instructions'.
                    ///   - sexual: The applied input type(s) for the category 'sexual'.
                    ///   - sexualMinors: The applied input type(s) for the category 'sexual/minors'.
                    ///   - violence: The applied input type(s) for the category 'violence'.
                    ///   - violenceGraphic: The applied input type(s) for the category 'violence/graphic'.
                    public init(
                        hate: Components.Schemas.CreateModerationResponse.ResultsPayloadPayload.CategoryAppliedInputTypesPayload.HatePayload,
                        hateThreatening: Components.Schemas.CreateModerationResponse.ResultsPayloadPayload.CategoryAppliedInputTypesPayload.HateThreateningPayload,
                        harassment: Components.Schemas.CreateModerationResponse.ResultsPayloadPayload.CategoryAppliedInputTypesPayload.HarassmentPayload,
                        harassmentThreatening: Components.Schemas.CreateModerationResponse.ResultsPayloadPayload.CategoryAppliedInputTypesPayload.HarassmentThreateningPayload,
                        illicit: Components.Schemas.CreateModerationResponse.ResultsPayloadPayload.CategoryAppliedInputTypesPayload.IllicitPayload,
                        illicitViolent: Components.Schemas.CreateModerationResponse.ResultsPayloadPayload.CategoryAppliedInputTypesPayload.IllicitViolentPayload,
                        selfHarm: Components.Schemas.CreateModerationResponse.ResultsPayloadPayload.CategoryAppliedInputTypesPayload.SelfHarmPayload,
                        selfHarmIntent: Components.Schemas.CreateModerationResponse.ResultsPayloadPayload.CategoryAppliedInputTypesPayload.SelfHarmIntentPayload,
                        selfHarmInstructions: Components.Schemas.CreateModerationResponse.ResultsPayloadPayload.CategoryAppliedInputTypesPayload.SelfHarmInstructionsPayload,
                        sexual: Components.Schemas.CreateModerationResponse.ResultsPayloadPayload.CategoryAppliedInputTypesPayload.SexualPayload,
                        sexualMinors: Components.Schemas.CreateModerationResponse.ResultsPayloadPayload.CategoryAppliedInputTypesPayload.SexualMinorsPayload,
                        violence: Components.Schemas.CreateModerationResponse.ResultsPayloadPayload.CategoryAppliedInputTypesPayload.ViolencePayload,
                        violenceGraphic: Components.Schemas.CreateModerationResponse.ResultsPayloadPayload.CategoryAppliedInputTypesPayload.ViolenceGraphicPayload
                    ) {
                        self.hate = hate
                        self.hateThreatening = hateThreatening
                        self.harassment = harassment
                        self.harassmentThreatening = harassmentThreatening
                        self.illicit = illicit
                        self.illicitViolent = illicitViolent
                        self.selfHarm = selfHarm
                        self.selfHarmIntent = selfHarmIntent
                        self.selfHarmInstructions = selfHarmInstructions
                        self.sexual = sexual
                        self.sexualMinors = sexualMinors
                        self.violence = violence
                        self.violenceGraphic = violenceGraphic
                    }
                    public enum CodingKeys: String, CodingKey {
                        case hate
                        case hateThreatening = "hate/threatening"
                        case harassment
                        case harassmentThreatening = "harassment/threatening"
                        case illicit
                        case illicitViolent = "illicit/violent"
                        case selfHarm = "self-harm"
                        case selfHarmIntent = "self-harm/intent"
                        case selfHarmInstructions = "self-harm/instructions"
                        case sexual
                        case sexualMinors = "sexual/minors"
                        case violence
                        case violenceGraphic = "violence/graphic"
                    }
                }
                /// A list of the categories along with the input type(s) that the score applies to.
                ///
                /// - Remark: Generated from `#/components/schemas/CreateModerationResponse/ResultsPayload/category_applied_input_types`.
                public var categoryAppliedInputTypes: Components.Schemas.CreateModerationResponse.ResultsPayloadPayload.CategoryAppliedInputTypesPayload
                /// Creates a new `ResultsPayloadPayload`.
                ///
                /// - Parameters:
                ///   - flagged: Whether any of the below categories are flagged.
                ///   - categories: A list of the categories, and whether they are flagged or not.
                ///   - categoryScores: A list of the categories along with their scores as predicted by model.
                ///   - categoryAppliedInputTypes: A list of the categories along with the input type(s) that the score applies to.
                public init(
                    flagged: Swift.Bool,
                    categories: Components.Schemas.CreateModerationResponse.ResultsPayloadPayload.CategoriesPayload,
                    categoryScores: Components.Schemas.CreateModerationResponse.ResultsPayloadPayload.CategoryScoresPayload,
                    categoryAppliedInputTypes: Components.Schemas.CreateModerationResponse.ResultsPayloadPayload.CategoryAppliedInputTypesPayload
                ) {
                    self.flagged = flagged
                    self.categories = categories
                    self.categoryScores = categoryScores
                    self.categoryAppliedInputTypes = categoryAppliedInputTypes
                }
                public enum CodingKeys: String, CodingKey {
                    case flagged
                    case categories
                    case categoryScores = "category_scores"
                    case categoryAppliedInputTypes = "category_applied_input_types"
                }
            }
            /// A list of moderation objects.
            ///
            /// - Remark: Generated from `#/components/schemas/CreateModerationResponse/results`.
            public typealias ResultsPayload = [Components.Schemas.CreateModerationResponse.ResultsPayloadPayload]
            /// A list of moderation objects.
            ///
            /// - Remark: Generated from `#/components/schemas/CreateModerationResponse/results`.
            public var results: Components.Schemas.CreateModerationResponse.ResultsPayload
            /// Creates a new `CreateModerationResponse`.
            ///
            /// - Parameters:
            ///   - id: The unique identifier for the moderation request.
            ///   - model: The model used to generate the moderation results.
            ///   - results: A list of moderation objects.
            public init(
                id: Swift.String,
                model: Swift.String,
                results: Components.Schemas.CreateModerationResponse.ResultsPayload
            ) {
                self.id = id
                self.model = model
                self.results = results
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case model
                case results
            }
        }
        /// - Remark: Generated from `#/components/schemas/CreateRunRequest`.
        public struct CreateRunRequest: Codable, Hashable, Sendable {
            /// The ID of the [assistant](/docs/api-reference/assistants) to use to execute this run.
            ///
            /// - Remark: Generated from `#/components/schemas/CreateRunRequest/assistant_id`.
            public var assistantId: Swift.String
            /// The ID of the [Model](/docs/api-reference/models) to be used to execute this run. If a value is provided here, it will override the model associated with the assistant. If not, the model associated with the assistant will be used.
            ///
            /// - Remark: Generated from `#/components/schemas/CreateRunRequest/model`.
            public struct ModelPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/CreateRunRequest/model/value1`.
                public var value1: Swift.String?
                /// - Remark: Generated from `#/components/schemas/CreateRunRequest/model/value2`.
                @frozen public enum Value2Payload: String, Codable, Hashable, Sendable, CaseIterable {
                    case gpt4o = "gpt-4o"
                    case gpt4o20241120 = "gpt-4o-2024-11-20"
                    case gpt4o20240806 = "gpt-4o-2024-08-06"
                    case gpt4o20240513 = "gpt-4o-2024-05-13"
                    case gpt4oMini = "gpt-4o-mini"
                    case gpt4oMini20240718 = "gpt-4o-mini-2024-07-18"
                    case gpt4Turbo = "gpt-4-turbo"
                    case gpt4Turbo20240409 = "gpt-4-turbo-2024-04-09"
                    case gpt40125Preview = "gpt-4-0125-preview"
                    case gpt4TurboPreview = "gpt-4-turbo-preview"
                    case gpt41106Preview = "gpt-4-1106-preview"
                    case gpt4VisionPreview = "gpt-4-vision-preview"
                    case gpt4 = "gpt-4"
                    case gpt40314 = "gpt-4-0314"
                    case gpt40613 = "gpt-4-0613"
                    case gpt432k = "gpt-4-32k"
                    case gpt432k0314 = "gpt-4-32k-0314"
                    case gpt432k0613 = "gpt-4-32k-0613"
                    case gpt3_5Turbo = "gpt-3.5-turbo"
                    case gpt3_5Turbo16k = "gpt-3.5-turbo-16k"
                    case gpt3_5Turbo0613 = "gpt-3.5-turbo-0613"
                    case gpt3_5Turbo1106 = "gpt-3.5-turbo-1106"
                    case gpt3_5Turbo0125 = "gpt-3.5-turbo-0125"
                    case gpt3_5Turbo16k0613 = "gpt-3.5-turbo-16k-0613"
                }
                /// - Remark: Generated from `#/components/schemas/CreateRunRequest/model/value2`.
                public var value2: Components.Schemas.CreateRunRequest.ModelPayload.Value2Payload?
                /// Creates a new `ModelPayload`.
                ///
                /// - Parameters:
                ///   - value1:
                ///   - value2:
                public init(
                    value1: Swift.String? = nil,
                    value2: Components.Schemas.CreateRunRequest.ModelPayload.Value2Payload? = nil
                ) {
                    self.value1 = value1
                    self.value2 = value2
                }
                public init(from decoder: any Decoder) throws {
                    var errors: [any Error] = []
                    do {
                        self.value1 = try decoder.decodeFromSingleValueContainer()
                    } catch {
                        errors.append(error)
                    }
                    do {
                        self.value2 = try decoder.decodeFromSingleValueContainer()
                    } catch {
                        errors.append(error)
                    }
                    try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                        [
                            self.value1,
                            self.value2
                        ],
                        type: Self.self,
                        codingPath: decoder.codingPath,
                        errors: errors
                    )
                }
                public func encode(to encoder: any Encoder) throws {
                    try encoder.encodeFirstNonNilValueToSingleValueContainer([
                        self.value1,
                        self.value2
                    ])
                }
            }
            /// The ID of the [Model](/docs/api-reference/models) to be used to execute this run. If a value is provided here, it will override the model associated with the assistant. If not, the model associated with the assistant will be used.
            ///
            /// - Remark: Generated from `#/components/schemas/CreateRunRequest/model`.
            public var model: Components.Schemas.CreateRunRequest.ModelPayload?
            /// Overrides the [instructions](/docs/api-reference/assistants/createAssistant) of the assistant. This is useful for modifying the behavior on a per-run basis.
            ///
            /// - Remark: Generated from `#/components/schemas/CreateRunRequest/instructions`.
            public var instructions: Swift.String?
            /// Appends additional instructions at the end of the instructions for the run. This is useful for modifying the behavior on a per-run basis without overriding other instructions.
            ///
            /// - Remark: Generated from `#/components/schemas/CreateRunRequest/additional_instructions`.
            public var additionalInstructions: Swift.String?
            /// Adds additional messages to the thread before creating the run.
            ///
            /// - Remark: Generated from `#/components/schemas/CreateRunRequest/additional_messages`.
            public var additionalMessages: [Components.Schemas.CreateMessageRequest]?
            /// - Remark: Generated from `#/components/schemas/CreateRunRequest/ToolsPayload`.
            @frozen public enum ToolsPayloadPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/CreateRunRequest/ToolsPayload/case1`.
                case AssistantToolsCode(Components.Schemas.AssistantToolsCode)
                /// - Remark: Generated from `#/components/schemas/CreateRunRequest/ToolsPayload/case2`.
                case AssistantToolsFileSearch(Components.Schemas.AssistantToolsFileSearch)
                /// - Remark: Generated from `#/components/schemas/CreateRunRequest/ToolsPayload/case3`.
                case AssistantToolsFunction(Components.Schemas.AssistantToolsFunction)
                public init(from decoder: any Decoder) throws {
                    var errors: [any Error] = []
                    do {
                        self = .AssistantToolsCode(try .init(from: decoder))
                        return
                    } catch {
                        errors.append(error)
                    }
                    do {
                        self = .AssistantToolsFileSearch(try .init(from: decoder))
                        return
                    } catch {
                        errors.append(error)
                    }
                    do {
                        self = .AssistantToolsFunction(try .init(from: decoder))
                        return
                    } catch {
                        errors.append(error)
                    }
                    throw Swift.DecodingError.failedToDecodeOneOfSchema(
                        type: Self.self,
                        codingPath: decoder.codingPath,
                        errors: errors
                    )
                }
                public func encode(to encoder: any Encoder) throws {
                    switch self {
                    case let .AssistantToolsCode(value):
                        try value.encode(to: encoder)
                    case let .AssistantToolsFileSearch(value):
                        try value.encode(to: encoder)
                    case let .AssistantToolsFunction(value):
                        try value.encode(to: encoder)
                    }
                }
            }
            /// Override the tools the assistant can use for this run. This is useful for modifying the behavior on a per-run basis.
            ///
            /// - Remark: Generated from `#/components/schemas/CreateRunRequest/tools`.
            public typealias ToolsPayload = [Components.Schemas.CreateRunRequest.ToolsPayloadPayload]
            /// Override the tools the assistant can use for this run. This is useful for modifying the behavior on a per-run basis.
            ///
            /// - Remark: Generated from `#/components/schemas/CreateRunRequest/tools`.
            public var tools: Components.Schemas.CreateRunRequest.ToolsPayload?
            /// - Remark: Generated from `#/components/schemas/CreateRunRequest/metadata`.
            public var metadata: Components.Schemas.Metadata?
            /// What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/CreateRunRequest/temperature`.
            public var temperature: Swift.Double?
            /// An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered.
            ///
            /// We generally recommend altering this or temperature but not both.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/CreateRunRequest/top_p`.
            public var topP: Swift.Double?
            /// If `true`, returns a stream of events that happen during the Run as server-sent events, terminating when the Run enters a terminal state with a `data: [DONE]` message.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/CreateRunRequest/stream`.
            public var stream: Swift.Bool?
            /// The maximum number of prompt tokens that may be used over the course of the run. The run will make a best effort to use only the number of prompt tokens specified, across multiple turns of the run. If the run exceeds the number of prompt tokens specified, the run will end with status `incomplete`. See `incomplete_details` for more info.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/CreateRunRequest/max_prompt_tokens`.
            public var maxPromptTokens: Swift.Int?
            /// The maximum number of completion tokens that may be used over the course of the run. The run will make a best effort to use only the number of completion tokens specified, across multiple turns of the run. If the run exceeds the number of completion tokens specified, the run will end with status `incomplete`. See `incomplete_details` for more info.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/CreateRunRequest/max_completion_tokens`.
            public var maxCompletionTokens: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/CreateRunRequest/truncation_strategy`.
            public struct TruncationStrategyPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/CreateRunRequest/truncation_strategy/value1`.
                public var value1: Components.Schemas.TruncationObject
                /// - Remark: Generated from `#/components/schemas/CreateRunRequest/truncation_strategy/value2`.
                public var value2: OpenAPIRuntime.OpenAPIValueContainer
                /// Creates a new `TruncationStrategyPayload`.
                ///
                /// - Parameters:
                ///   - value1:
                ///   - value2:
                public init(
                    value1: Components.Schemas.TruncationObject,
                    value2: OpenAPIRuntime.OpenAPIValueContainer
                ) {
                    self.value1 = value1
                    self.value2 = value2
                }
                public init(from decoder: any Decoder) throws {
                    self.value1 = try .init(from: decoder)
                    self.value2 = try .init(from: decoder)
                }
                public func encode(to encoder: any Encoder) throws {
                    try self.value1.encode(to: encoder)
                    try self.value2.encode(to: encoder)
                }
            }
            /// - Remark: Generated from `#/components/schemas/CreateRunRequest/truncation_strategy`.
            public var truncationStrategy: Components.Schemas.CreateRunRequest.TruncationStrategyPayload?
            /// - Remark: Generated from `#/components/schemas/CreateRunRequest/tool_choice`.
            public struct ToolChoicePayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/CreateRunRequest/tool_choice/value1`.
                public var value1: Components.Schemas.AssistantsApiToolChoiceOption
                /// - Remark: Generated from `#/components/schemas/CreateRunRequest/tool_choice/value2`.
                public var value2: OpenAPIRuntime.OpenAPIValueContainer
                /// Creates a new `ToolChoicePayload`.
                ///
                /// - Parameters:
                ///   - value1:
                ///   - value2:
                public init(
                    value1: Components.Schemas.AssistantsApiToolChoiceOption,
                    value2: OpenAPIRuntime.OpenAPIValueContainer
                ) {
                    self.value1 = value1
                    self.value2 = value2
                }
                public init(from decoder: any Decoder) throws {
                    self.value1 = try .init(from: decoder)
                    self.value2 = try .init(from: decoder)
                }
                public func encode(to encoder: any Encoder) throws {
                    try self.value1.encode(to: encoder)
                    try self.value2.encode(to: encoder)
                }
            }
            /// - Remark: Generated from `#/components/schemas/CreateRunRequest/tool_choice`.
            public var toolChoice: Components.Schemas.CreateRunRequest.ToolChoicePayload?
            /// - Remark: Generated from `#/components/schemas/CreateRunRequest/parallel_tool_calls`.
            public var parallelToolCalls: Components.Schemas.ParallelToolCalls?
            /// - Remark: Generated from `#/components/schemas/CreateRunRequest/response_format`.
            public struct ResponseFormatPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/CreateRunRequest/response_format/value1`.
                public var value1: Components.Schemas.AssistantsApiResponseFormatOption
                /// - Remark: Generated from `#/components/schemas/CreateRunRequest/response_format/value2`.
                public var value2: OpenAPIRuntime.OpenAPIValueContainer
                /// Creates a new `ResponseFormatPayload`.
                ///
                /// - Parameters:
                ///   - value1:
                ///   - value2:
                public init(
                    value1: Components.Schemas.AssistantsApiResponseFormatOption,
                    value2: OpenAPIRuntime.OpenAPIValueContainer
                ) {
                    self.value1 = value1
                    self.value2 = value2
                }
                public init(from decoder: any Decoder) throws {
                    self.value1 = try .init(from: decoder)
                    self.value2 = try .init(from: decoder)
                }
                public func encode(to encoder: any Encoder) throws {
                    try self.value1.encode(to: encoder)
                    try self.value2.encode(to: encoder)
                }
            }
            /// - Remark: Generated from `#/components/schemas/CreateRunRequest/response_format`.
            public var responseFormat: Components.Schemas.CreateRunRequest.ResponseFormatPayload?
            /// Creates a new `CreateRunRequest`.
            ///
            /// - Parameters:
            ///   - assistantId: The ID of the [assistant](/docs/api-reference/assistants) to use to execute this run.
            ///   - model: The ID of the [Model](/docs/api-reference/models) to be used to execute this run. If a value is provided here, it will override the model associated with the assistant. If not, the model associated with the assistant will be used.
            ///   - instructions: Overrides the [instructions](/docs/api-reference/assistants/createAssistant) of the assistant. This is useful for modifying the behavior on a per-run basis.
            ///   - additionalInstructions: Appends additional instructions at the end of the instructions for the run. This is useful for modifying the behavior on a per-run basis without overriding other instructions.
            ///   - additionalMessages: Adds additional messages to the thread before creating the run.
            ///   - tools: Override the tools the assistant can use for this run. This is useful for modifying the behavior on a per-run basis.
            ///   - metadata:
            ///   - temperature: What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic.
            ///   - topP: An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered.
            ///   - stream: If `true`, returns a stream of events that happen during the Run as server-sent events, terminating when the Run enters a terminal state with a `data: [DONE]` message.
            ///   - maxPromptTokens: The maximum number of prompt tokens that may be used over the course of the run. The run will make a best effort to use only the number of prompt tokens specified, across multiple turns of the run. If the run exceeds the number of prompt tokens specified, the run will end with status `incomplete`. See `incomplete_details` for more info.
            ///   - maxCompletionTokens: The maximum number of completion tokens that may be used over the course of the run. The run will make a best effort to use only the number of completion tokens specified, across multiple turns of the run. If the run exceeds the number of completion tokens specified, the run will end with status `incomplete`. See `incomplete_details` for more info.
            ///   - truncationStrategy:
            ///   - toolChoice:
            ///   - parallelToolCalls:
            ///   - responseFormat:
            public init(
                assistantId: Swift.String,
                model: Components.Schemas.CreateRunRequest.ModelPayload? = nil,
                instructions: Swift.String? = nil,
                additionalInstructions: Swift.String? = nil,
                additionalMessages: [Components.Schemas.CreateMessageRequest]? = nil,
                tools: Components.Schemas.CreateRunRequest.ToolsPayload? = nil,
                metadata: Components.Schemas.Metadata? = nil,
                temperature: Swift.Double? = nil,
                topP: Swift.Double? = nil,
                stream: Swift.Bool? = nil,
                maxPromptTokens: Swift.Int? = nil,
                maxCompletionTokens: Swift.Int? = nil,
                truncationStrategy: Components.Schemas.CreateRunRequest.TruncationStrategyPayload? = nil,
                toolChoice: Components.Schemas.CreateRunRequest.ToolChoicePayload? = nil,
                parallelToolCalls: Components.Schemas.ParallelToolCalls? = nil,
                responseFormat: Components.Schemas.CreateRunRequest.ResponseFormatPayload? = nil
            ) {
                self.assistantId = assistantId
                self.model = model
                self.instructions = instructions
                self.additionalInstructions = additionalInstructions
                self.additionalMessages = additionalMessages
                self.tools = tools
                self.metadata = metadata
                self.temperature = temperature
                self.topP = topP
                self.stream = stream
                self.maxPromptTokens = maxPromptTokens
                self.maxCompletionTokens = maxCompletionTokens
                self.truncationStrategy = truncationStrategy
                self.toolChoice = toolChoice
                self.parallelToolCalls = parallelToolCalls
                self.responseFormat = responseFormat
            }
            public enum CodingKeys: String, CodingKey {
                case assistantId = "assistant_id"
                case model
                case instructions
                case additionalInstructions = "additional_instructions"
                case additionalMessages = "additional_messages"
                case tools
                case metadata
                case temperature
                case topP = "top_p"
                case stream
                case maxPromptTokens = "max_prompt_tokens"
                case maxCompletionTokens = "max_completion_tokens"
                case truncationStrategy = "truncation_strategy"
                case toolChoice = "tool_choice"
                case parallelToolCalls = "parallel_tool_calls"
                case responseFormat = "response_format"
            }
            public init(from decoder: any Decoder) throws {
                let container = try decoder.container(keyedBy: CodingKeys.self)
                self.assistantId = try container.decode(
                    Swift.String.self,
                    forKey: .assistantId
                )
                self.model = try container.decodeIfPresent(
                    Components.Schemas.CreateRunRequest.ModelPayload.self,
                    forKey: .model
                )
                self.instructions = try container.decodeIfPresent(
                    Swift.String.self,
                    forKey: .instructions
                )
                self.additionalInstructions = try container.decodeIfPresent(
                    Swift.String.self,
                    forKey: .additionalInstructions
                )
                self.additionalMessages = try container.decodeIfPresent(
                    [Components.Schemas.CreateMessageRequest].self,
                    forKey: .additionalMessages
                )
                self.tools = try container.decodeIfPresent(
                    Components.Schemas.CreateRunRequest.ToolsPayload.self,
                    forKey: .tools
                )
                self.metadata = try container.decodeIfPresent(
                    Components.Schemas.Metadata.self,
                    forKey: .metadata
                )
                self.temperature = try container.decodeIfPresent(
                    Swift.Double.self,
                    forKey: .temperature
                )
                self.topP = try container.decodeIfPresent(
                    Swift.Double.self,
                    forKey: .topP
                )
                self.stream = try container.decodeIfPresent(
                    Swift.Bool.self,
                    forKey: .stream
                )
                self.maxPromptTokens = try container.decodeIfPresent(
                    Swift.Int.self,
                    forKey: .maxPromptTokens
                )
                self.maxCompletionTokens = try container.decodeIfPresent(
                    Swift.Int.self,
                    forKey: .maxCompletionTokens
                )
                self.truncationStrategy = try container.decodeIfPresent(
                    Components.Schemas.CreateRunRequest.TruncationStrategyPayload.self,
                    forKey: .truncationStrategy
                )
                self.toolChoice = try container.decodeIfPresent(
                    Components.Schemas.CreateRunRequest.ToolChoicePayload.self,
                    forKey: .toolChoice
                )
                self.parallelToolCalls = try container.decodeIfPresent(
                    Components.Schemas.ParallelToolCalls.self,
                    forKey: .parallelToolCalls
                )
                self.responseFormat = try container.decodeIfPresent(
                    Components.Schemas.CreateRunRequest.ResponseFormatPayload.self,
                    forKey: .responseFormat
                )
                try decoder.ensureNoAdditionalProperties(knownKeys: [
                    "assistant_id",
                    "model",
                    "instructions",
                    "additional_instructions",
                    "additional_messages",
                    "tools",
                    "metadata",
                    "temperature",
                    "top_p",
                    "stream",
                    "max_prompt_tokens",
                    "max_completion_tokens",
                    "truncation_strategy",
                    "tool_choice",
                    "parallel_tool_calls",
                    "response_format"
                ])
            }
        }
        /// - Remark: Generated from `#/components/schemas/CreateSpeechRequest`.
        public struct CreateSpeechRequest: Codable, Hashable, Sendable {
            /// One of the available [TTS models](/docs/models#tts): `tts-1` or `tts-1-hd`
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/CreateSpeechRequest/model`.
            public struct ModelPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/CreateSpeechRequest/model/value1`.
                public var value1: Swift.String?
                /// - Remark: Generated from `#/components/schemas/CreateSpeechRequest/model/value2`.
                @frozen public enum Value2Payload: String, Codable, Hashable, Sendable, CaseIterable {
                    case tts1 = "tts-1"
                    case tts1Hd = "tts-1-hd"
                }
                /// - Remark: Generated from `#/components/schemas/CreateSpeechRequest/model/value2`.
                public var value2: Components.Schemas.CreateSpeechRequest.ModelPayload.Value2Payload?
                /// Creates a new `ModelPayload`.
                ///
                /// - Parameters:
                ///   - value1:
                ///   - value2:
                public init(
                    value1: Swift.String? = nil,
                    value2: Components.Schemas.CreateSpeechRequest.ModelPayload.Value2Payload? = nil
                ) {
                    self.value1 = value1
                    self.value2 = value2
                }
                public init(from decoder: any Decoder) throws {
                    var errors: [any Error] = []
                    do {
                        self.value1 = try decoder.decodeFromSingleValueContainer()
                    } catch {
                        errors.append(error)
                    }
                    do {
                        self.value2 = try decoder.decodeFromSingleValueContainer()
                    } catch {
                        errors.append(error)
                    }
                    try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                        [
                            self.value1,
                            self.value2
                        ],
                        type: Self.self,
                        codingPath: decoder.codingPath,
                        errors: errors
                    )
                }
                public func encode(to encoder: any Encoder) throws {
                    try encoder.encodeFirstNonNilValueToSingleValueContainer([
                        self.value1,
                        self.value2
                    ])
                }
            }
            /// One of the available [TTS models](/docs/models#tts): `tts-1` or `tts-1-hd`
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/CreateSpeechRequest/model`.
            public var model: Components.Schemas.CreateSpeechRequest.ModelPayload
            /// The text to generate audio for. The maximum length is 4096 characters.
            ///
            /// - Remark: Generated from `#/components/schemas/CreateSpeechRequest/input`.
            public var input: Swift.String
            /// The voice to use when generating the audio. Supported voices are `alloy`, `ash`, `coral`, `echo`, `fable`, `onyx`, `nova`, `sage` and `shimmer`. Previews of the voices are available in the [Text to speech guide](/docs/guides/text-to-speech#voice-options).
            ///
            /// - Remark: Generated from `#/components/schemas/CreateSpeechRequest/voice`.
            @frozen public enum VoicePayload: String, Codable, Hashable, Sendable, CaseIterable {
                case alloy = "alloy"
                case ash = "ash"
                case coral = "coral"
                case echo = "echo"
                case fable = "fable"
                case onyx = "onyx"
                case nova = "nova"
                case sage = "sage"
                case shimmer = "shimmer"
            }
            /// The voice to use when generating the audio. Supported voices are `alloy`, `ash`, `coral`, `echo`, `fable`, `onyx`, `nova`, `sage` and `shimmer`. Previews of the voices are available in the [Text to speech guide](/docs/guides/text-to-speech#voice-options).
            ///
            /// - Remark: Generated from `#/components/schemas/CreateSpeechRequest/voice`.
            public var voice: Components.Schemas.CreateSpeechRequest.VoicePayload
            /// The format to audio in. Supported formats are `mp3`, `opus`, `aac`, `flac`, `wav`, and `pcm`.
            ///
            /// - Remark: Generated from `#/components/schemas/CreateSpeechRequest/response_format`.
            @frozen public enum ResponseFormatPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case mp3 = "mp3"
                case opus = "opus"
                case aac = "aac"
                case flac = "flac"
                case wav = "wav"
                case pcm = "pcm"
            }
            /// The format to audio in. Supported formats are `mp3`, `opus`, `aac`, `flac`, `wav`, and `pcm`.
            ///
            /// - Remark: Generated from `#/components/schemas/CreateSpeechRequest/response_format`.
            public var responseFormat: Components.Schemas.CreateSpeechRequest.ResponseFormatPayload?
            /// The speed of the generated audio. Select a value from `0.25` to `4.0`. `1.0` is the default.
            ///
            /// - Remark: Generated from `#/components/schemas/CreateSpeechRequest/speed`.
            public var speed: Swift.Double?
            /// Creates a new `CreateSpeechRequest`.
            ///
            /// - Parameters:
            ///   - model: One of the available [TTS models](/docs/models#tts): `tts-1` or `tts-1-hd`
            ///   - input: The text to generate audio for. The maximum length is 4096 characters.
            ///   - voice: The voice to use when generating the audio. Supported voices are `alloy`, `ash`, `coral`, `echo`, `fable`, `onyx`, `nova`, `sage` and `shimmer`. Previews of the voices are available in the [Text to speech guide](/docs/guides/text-to-speech#voice-options).
            ///   - responseFormat: The format to audio in. Supported formats are `mp3`, `opus`, `aac`, `flac`, `wav`, and `pcm`.
            ///   - speed: The speed of the generated audio. Select a value from `0.25` to `4.0`. `1.0` is the default.
            public init(
                model: Components.Schemas.CreateSpeechRequest.ModelPayload,
                input: Swift.String,
                voice: Components.Schemas.CreateSpeechRequest.VoicePayload,
                responseFormat: Components.Schemas.CreateSpeechRequest.ResponseFormatPayload? = nil,
                speed: Swift.Double? = nil
            ) {
                self.model = model
                self.input = input
                self.voice = voice
                self.responseFormat = responseFormat
                self.speed = speed
            }
            public enum CodingKeys: String, CodingKey {
                case model
                case input
                case voice
                case responseFormat = "response_format"
                case speed
            }
            public init(from decoder: any Decoder) throws {
                let container = try decoder.container(keyedBy: CodingKeys.self)
                self.model = try container.decode(
                    Components.Schemas.CreateSpeechRequest.ModelPayload.self,
                    forKey: .model
                )
                self.input = try container.decode(
                    Swift.String.self,
                    forKey: .input
                )
                self.voice = try container.decode(
                    Components.Schemas.CreateSpeechRequest.VoicePayload.self,
                    forKey: .voice
                )
                self.responseFormat = try container.decodeIfPresent(
                    Components.Schemas.CreateSpeechRequest.ResponseFormatPayload.self,
                    forKey: .responseFormat
                )
                self.speed = try container.decodeIfPresent(
                    Swift.Double.self,
                    forKey: .speed
                )
                try decoder.ensureNoAdditionalProperties(knownKeys: [
                    "model",
                    "input",
                    "voice",
                    "response_format",
                    "speed"
                ])
            }
        }
        /// - Remark: Generated from `#/components/schemas/CreateThreadAndRunRequest`.
        public struct CreateThreadAndRunRequest: Codable, Hashable, Sendable {
            /// The ID of the [assistant](/docs/api-reference/assistants) to use to execute this run.
            ///
            /// - Remark: Generated from `#/components/schemas/CreateThreadAndRunRequest/assistant_id`.
            public var assistantId: Swift.String
            /// - Remark: Generated from `#/components/schemas/CreateThreadAndRunRequest/thread`.
            public var thread: Components.Schemas.CreateThreadRequest?
            /// The ID of the [Model](/docs/api-reference/models) to be used to execute this run. If a value is provided here, it will override the model associated with the assistant. If not, the model associated with the assistant will be used.
            ///
            /// - Remark: Generated from `#/components/schemas/CreateThreadAndRunRequest/model`.
            public struct ModelPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/CreateThreadAndRunRequest/model/value1`.
                public var value1: Swift.String?
                /// - Remark: Generated from `#/components/schemas/CreateThreadAndRunRequest/model/value2`.
                @frozen public enum Value2Payload: String, Codable, Hashable, Sendable, CaseIterable {
                    case gpt4o = "gpt-4o"
                    case gpt4o20241120 = "gpt-4o-2024-11-20"
                    case gpt4o20240806 = "gpt-4o-2024-08-06"
                    case gpt4o20240513 = "gpt-4o-2024-05-13"
                    case gpt4oMini = "gpt-4o-mini"
                    case gpt4oMini20240718 = "gpt-4o-mini-2024-07-18"
                    case gpt4Turbo = "gpt-4-turbo"
                    case gpt4Turbo20240409 = "gpt-4-turbo-2024-04-09"
                    case gpt40125Preview = "gpt-4-0125-preview"
                    case gpt4TurboPreview = "gpt-4-turbo-preview"
                    case gpt41106Preview = "gpt-4-1106-preview"
                    case gpt4VisionPreview = "gpt-4-vision-preview"
                    case gpt4 = "gpt-4"
                    case gpt40314 = "gpt-4-0314"
                    case gpt40613 = "gpt-4-0613"
                    case gpt432k = "gpt-4-32k"
                    case gpt432k0314 = "gpt-4-32k-0314"
                    case gpt432k0613 = "gpt-4-32k-0613"
                    case gpt3_5Turbo = "gpt-3.5-turbo"
                    case gpt3_5Turbo16k = "gpt-3.5-turbo-16k"
                    case gpt3_5Turbo0613 = "gpt-3.5-turbo-0613"
                    case gpt3_5Turbo1106 = "gpt-3.5-turbo-1106"
                    case gpt3_5Turbo0125 = "gpt-3.5-turbo-0125"
                    case gpt3_5Turbo16k0613 = "gpt-3.5-turbo-16k-0613"
                }
                /// - Remark: Generated from `#/components/schemas/CreateThreadAndRunRequest/model/value2`.
                public var value2: Components.Schemas.CreateThreadAndRunRequest.ModelPayload.Value2Payload?
                /// Creates a new `ModelPayload`.
                ///
                /// - Parameters:
                ///   - value1:
                ///   - value2:
                public init(
                    value1: Swift.String? = nil,
                    value2: Components.Schemas.CreateThreadAndRunRequest.ModelPayload.Value2Payload? = nil
                ) {
                    self.value1 = value1
                    self.value2 = value2
                }
                public init(from decoder: any Decoder) throws {
                    var errors: [any Error] = []
                    do {
                        self.value1 = try decoder.decodeFromSingleValueContainer()
                    } catch {
                        errors.append(error)
                    }
                    do {
                        self.value2 = try decoder.decodeFromSingleValueContainer()
                    } catch {
                        errors.append(error)
                    }
                    try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                        [
                            self.value1,
                            self.value2
                        ],
                        type: Self.self,
                        codingPath: decoder.codingPath,
                        errors: errors
                    )
                }
                public func encode(to encoder: any Encoder) throws {
                    try encoder.encodeFirstNonNilValueToSingleValueContainer([
                        self.value1,
                        self.value2
                    ])
                }
            }
            /// The ID of the [Model](/docs/api-reference/models) to be used to execute this run. If a value is provided here, it will override the model associated with the assistant. If not, the model associated with the assistant will be used.
            ///
            /// - Remark: Generated from `#/components/schemas/CreateThreadAndRunRequest/model`.
            public var model: Components.Schemas.CreateThreadAndRunRequest.ModelPayload?
            /// Override the default system message of the assistant. This is useful for modifying the behavior on a per-run basis.
            ///
            /// - Remark: Generated from `#/components/schemas/CreateThreadAndRunRequest/instructions`.
            public var instructions: Swift.String?
            /// - Remark: Generated from `#/components/schemas/CreateThreadAndRunRequest/ToolsPayload`.
            @frozen public enum ToolsPayloadPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/CreateThreadAndRunRequest/ToolsPayload/case1`.
                case AssistantToolsCode(Components.Schemas.AssistantToolsCode)
                /// - Remark: Generated from `#/components/schemas/CreateThreadAndRunRequest/ToolsPayload/case2`.
                case AssistantToolsFileSearch(Components.Schemas.AssistantToolsFileSearch)
                /// - Remark: Generated from `#/components/schemas/CreateThreadAndRunRequest/ToolsPayload/case3`.
                case AssistantToolsFunction(Components.Schemas.AssistantToolsFunction)
                public init(from decoder: any Decoder) throws {
                    var errors: [any Error] = []
                    do {
                        self = .AssistantToolsCode(try .init(from: decoder))
                        return
                    } catch {
                        errors.append(error)
                    }
                    do {
                        self = .AssistantToolsFileSearch(try .init(from: decoder))
                        return
                    } catch {
                        errors.append(error)
                    }
                    do {
                        self = .AssistantToolsFunction(try .init(from: decoder))
                        return
                    } catch {
                        errors.append(error)
                    }
                    throw Swift.DecodingError.failedToDecodeOneOfSchema(
                        type: Self.self,
                        codingPath: decoder.codingPath,
                        errors: errors
                    )
                }
                public func encode(to encoder: any Encoder) throws {
                    switch self {
                    case let .AssistantToolsCode(value):
                        try value.encode(to: encoder)
                    case let .AssistantToolsFileSearch(value):
                        try value.encode(to: encoder)
                    case let .AssistantToolsFunction(value):
                        try value.encode(to: encoder)
                    }
                }
            }
            /// Override the tools the assistant can use for this run. This is useful for modifying the behavior on a per-run basis.
            ///
            /// - Remark: Generated from `#/components/schemas/CreateThreadAndRunRequest/tools`.
            public typealias ToolsPayload = [Components.Schemas.CreateThreadAndRunRequest.ToolsPayloadPayload]
            /// Override the tools the assistant can use for this run. This is useful for modifying the behavior on a per-run basis.
            ///
            /// - Remark: Generated from `#/components/schemas/CreateThreadAndRunRequest/tools`.
            public var tools: Components.Schemas.CreateThreadAndRunRequest.ToolsPayload?
            /// A set of resources that are used by the assistant's tools. The resources are specific to the type of tool. For example, the `code_interpreter` tool requires a list of file IDs, while the `file_search` tool requires a list of vector store IDs.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/CreateThreadAndRunRequest/tool_resources`.
            public struct ToolResourcesPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/CreateThreadAndRunRequest/tool_resources/code_interpreter`.
                public struct CodeInterpreterPayload: Codable, Hashable, Sendable {
                    /// A list of [file](/docs/api-reference/files) IDs made available to the `code_interpreter` tool. There can be a maximum of 20 files associated with the tool.
                    ///
                    ///
                    /// - Remark: Generated from `#/components/schemas/CreateThreadAndRunRequest/tool_resources/code_interpreter/file_ids`.
                    public var fileIds: [Swift.String]?
                    /// Creates a new `CodeInterpreterPayload`.
                    ///
                    /// - Parameters:
                    ///   - fileIds: A list of [file](/docs/api-reference/files) IDs made available to the `code_interpreter` tool. There can be a maximum of 20 files associated with the tool.
                    public init(fileIds: [Swift.String]? = nil) {
                        self.fileIds = fileIds
                    }
                    public enum CodingKeys: String, CodingKey {
                        case fileIds = "file_ids"
                    }
                }
                /// - Remark: Generated from `#/components/schemas/CreateThreadAndRunRequest/tool_resources/code_interpreter`.
                public var codeInterpreter: Components.Schemas.CreateThreadAndRunRequest.ToolResourcesPayload.CodeInterpreterPayload?
                /// - Remark: Generated from `#/components/schemas/CreateThreadAndRunRequest/tool_resources/file_search`.
                public struct FileSearchPayload: Codable, Hashable, Sendable {
                    /// The ID of the [vector store](/docs/api-reference/vector-stores/object) attached to this assistant. There can be a maximum of 1 vector store attached to the assistant.
                    ///
                    ///
                    /// - Remark: Generated from `#/components/schemas/CreateThreadAndRunRequest/tool_resources/file_search/vector_store_ids`.
                    public var vectorStoreIds: [Swift.String]?
                    /// Creates a new `FileSearchPayload`.
                    ///
                    /// - Parameters:
                    ///   - vectorStoreIds: The ID of the [vector store](/docs/api-reference/vector-stores/object) attached to this assistant. There can be a maximum of 1 vector store attached to the assistant.
                    public init(vectorStoreIds: [Swift.String]? = nil) {
                        self.vectorStoreIds = vectorStoreIds
                    }
                    public enum CodingKeys: String, CodingKey {
                        case vectorStoreIds = "vector_store_ids"
                    }
                }
                /// - Remark: Generated from `#/components/schemas/CreateThreadAndRunRequest/tool_resources/file_search`.
                public var fileSearch: Components.Schemas.CreateThreadAndRunRequest.ToolResourcesPayload.FileSearchPayload?
                /// Creates a new `ToolResourcesPayload`.
                ///
                /// - Parameters:
                ///   - codeInterpreter:
                ///   - fileSearch:
                public init(
                    codeInterpreter: Components.Schemas.CreateThreadAndRunRequest.ToolResourcesPayload.CodeInterpreterPayload? = nil,
                    fileSearch: Components.Schemas.CreateThreadAndRunRequest.ToolResourcesPayload.FileSearchPayload? = nil
                ) {
                    self.codeInterpreter = codeInterpreter
                    self.fileSearch = fileSearch
                }
                public enum CodingKeys: String, CodingKey {
                    case codeInterpreter = "code_interpreter"
                    case fileSearch = "file_search"
                }
            }
            /// A set of resources that are used by the assistant's tools. The resources are specific to the type of tool. For example, the `code_interpreter` tool requires a list of file IDs, while the `file_search` tool requires a list of vector store IDs.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/CreateThreadAndRunRequest/tool_resources`.
            public var toolResources: Components.Schemas.CreateThreadAndRunRequest.ToolResourcesPayload?
            /// - Remark: Generated from `#/components/schemas/CreateThreadAndRunRequest/metadata`.
            public var metadata: Components.Schemas.Metadata?
            /// What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/CreateThreadAndRunRequest/temperature`.
            public var temperature: Swift.Double?
            /// An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered.
            ///
            /// We generally recommend altering this or temperature but not both.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/CreateThreadAndRunRequest/top_p`.
            public var topP: Swift.Double?
            /// If `true`, returns a stream of events that happen during the Run as server-sent events, terminating when the Run enters a terminal state with a `data: [DONE]` message.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/CreateThreadAndRunRequest/stream`.
            public var stream: Swift.Bool?
            /// The maximum number of prompt tokens that may be used over the course of the run. The run will make a best effort to use only the number of prompt tokens specified, across multiple turns of the run. If the run exceeds the number of prompt tokens specified, the run will end with status `incomplete`. See `incomplete_details` for more info.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/CreateThreadAndRunRequest/max_prompt_tokens`.
            public var maxPromptTokens: Swift.Int?
            /// The maximum number of completion tokens that may be used over the course of the run. The run will make a best effort to use only the number of completion tokens specified, across multiple turns of the run. If the run exceeds the number of completion tokens specified, the run will end with status `incomplete`. See `incomplete_details` for more info.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/CreateThreadAndRunRequest/max_completion_tokens`.
            public var maxCompletionTokens: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/CreateThreadAndRunRequest/truncation_strategy`.
            public struct TruncationStrategyPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/CreateThreadAndRunRequest/truncation_strategy/value1`.
                public var value1: Components.Schemas.TruncationObject
                /// - Remark: Generated from `#/components/schemas/CreateThreadAndRunRequest/truncation_strategy/value2`.
                public var value2: OpenAPIRuntime.OpenAPIValueContainer
                /// Creates a new `TruncationStrategyPayload`.
                ///
                /// - Parameters:
                ///   - value1:
                ///   - value2:
                public init(
                    value1: Components.Schemas.TruncationObject,
                    value2: OpenAPIRuntime.OpenAPIValueContainer
                ) {
                    self.value1 = value1
                    self.value2 = value2
                }
                public init(from decoder: any Decoder) throws {
                    self.value1 = try .init(from: decoder)
                    self.value2 = try .init(from: decoder)
                }
                public func encode(to encoder: any Encoder) throws {
                    try self.value1.encode(to: encoder)
                    try self.value2.encode(to: encoder)
                }
            }
            /// - Remark: Generated from `#/components/schemas/CreateThreadAndRunRequest/truncation_strategy`.
            public var truncationStrategy: Components.Schemas.CreateThreadAndRunRequest.TruncationStrategyPayload?
            /// - Remark: Generated from `#/components/schemas/CreateThreadAndRunRequest/tool_choice`.
            public struct ToolChoicePayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/CreateThreadAndRunRequest/tool_choice/value1`.
                public var value1: Components.Schemas.AssistantsApiToolChoiceOption
                /// - Remark: Generated from `#/components/schemas/CreateThreadAndRunRequest/tool_choice/value2`.
                public var value2: OpenAPIRuntime.OpenAPIValueContainer
                /// Creates a new `ToolChoicePayload`.
                ///
                /// - Parameters:
                ///   - value1:
                ///   - value2:
                public init(
                    value1: Components.Schemas.AssistantsApiToolChoiceOption,
                    value2: OpenAPIRuntime.OpenAPIValueContainer
                ) {
                    self.value1 = value1
                    self.value2 = value2
                }
                public init(from decoder: any Decoder) throws {
                    self.value1 = try .init(from: decoder)
                    self.value2 = try .init(from: decoder)
                }
                public func encode(to encoder: any Encoder) throws {
                    try self.value1.encode(to: encoder)
                    try self.value2.encode(to: encoder)
                }
            }
            /// - Remark: Generated from `#/components/schemas/CreateThreadAndRunRequest/tool_choice`.
            public var toolChoice: Components.Schemas.CreateThreadAndRunRequest.ToolChoicePayload?
            /// - Remark: Generated from `#/components/schemas/CreateThreadAndRunRequest/parallel_tool_calls`.
            public var parallelToolCalls: Components.Schemas.ParallelToolCalls?
            /// - Remark: Generated from `#/components/schemas/CreateThreadAndRunRequest/response_format`.
            public struct ResponseFormatPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/CreateThreadAndRunRequest/response_format/value1`.
                public var value1: Components.Schemas.AssistantsApiResponseFormatOption
                /// - Remark: Generated from `#/components/schemas/CreateThreadAndRunRequest/response_format/value2`.
                public var value2: OpenAPIRuntime.OpenAPIValueContainer
                /// Creates a new `ResponseFormatPayload`.
                ///
                /// - Parameters:
                ///   - value1:
                ///   - value2:
                public init(
                    value1: Components.Schemas.AssistantsApiResponseFormatOption,
                    value2: OpenAPIRuntime.OpenAPIValueContainer
                ) {
                    self.value1 = value1
                    self.value2 = value2
                }
                public init(from decoder: any Decoder) throws {
                    self.value1 = try .init(from: decoder)
                    self.value2 = try .init(from: decoder)
                }
                public func encode(to encoder: any Encoder) throws {
                    try self.value1.encode(to: encoder)
                    try self.value2.encode(to: encoder)
                }
            }
            /// - Remark: Generated from `#/components/schemas/CreateThreadAndRunRequest/response_format`.
            public var responseFormat: Components.Schemas.CreateThreadAndRunRequest.ResponseFormatPayload?
            /// Creates a new `CreateThreadAndRunRequest`.
            ///
            /// - Parameters:
            ///   - assistantId: The ID of the [assistant](/docs/api-reference/assistants) to use to execute this run.
            ///   - thread:
            ///   - model: The ID of the [Model](/docs/api-reference/models) to be used to execute this run. If a value is provided here, it will override the model associated with the assistant. If not, the model associated with the assistant will be used.
            ///   - instructions: Override the default system message of the assistant. This is useful for modifying the behavior on a per-run basis.
            ///   - tools: Override the tools the assistant can use for this run. This is useful for modifying the behavior on a per-run basis.
            ///   - toolResources: A set of resources that are used by the assistant's tools. The resources are specific to the type of tool. For example, the `code_interpreter` tool requires a list of file IDs, while the `file_search` tool requires a list of vector store IDs.
            ///   - metadata:
            ///   - temperature: What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic.
            ///   - topP: An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered.
            ///   - stream: If `true`, returns a stream of events that happen during the Run as server-sent events, terminating when the Run enters a terminal state with a `data: [DONE]` message.
            ///   - maxPromptTokens: The maximum number of prompt tokens that may be used over the course of the run. The run will make a best effort to use only the number of prompt tokens specified, across multiple turns of the run. If the run exceeds the number of prompt tokens specified, the run will end with status `incomplete`. See `incomplete_details` for more info.
            ///   - maxCompletionTokens: The maximum number of completion tokens that may be used over the course of the run. The run will make a best effort to use only the number of completion tokens specified, across multiple turns of the run. If the run exceeds the number of completion tokens specified, the run will end with status `incomplete`. See `incomplete_details` for more info.
            ///   - truncationStrategy:
            ///   - toolChoice:
            ///   - parallelToolCalls:
            ///   - responseFormat:
            public init(
                assistantId: Swift.String,
                thread: Components.Schemas.CreateThreadRequest? = nil,
                model: Components.Schemas.CreateThreadAndRunRequest.ModelPayload? = nil,
                instructions: Swift.String? = nil,
                tools: Components.Schemas.CreateThreadAndRunRequest.ToolsPayload? = nil,
                toolResources: Components.Schemas.CreateThreadAndRunRequest.ToolResourcesPayload? = nil,
                metadata: Components.Schemas.Metadata? = nil,
                temperature: Swift.Double? = nil,
                topP: Swift.Double? = nil,
                stream: Swift.Bool? = nil,
                maxPromptTokens: Swift.Int? = nil,
                maxCompletionTokens: Swift.Int? = nil,
                truncationStrategy: Components.Schemas.CreateThreadAndRunRequest.TruncationStrategyPayload? = nil,
                toolChoice: Components.Schemas.CreateThreadAndRunRequest.ToolChoicePayload? = nil,
                parallelToolCalls: Components.Schemas.ParallelToolCalls? = nil,
                responseFormat: Components.Schemas.CreateThreadAndRunRequest.ResponseFormatPayload? = nil
            ) {
                self.assistantId = assistantId
                self.thread = thread
                self.model = model
                self.instructions = instructions
                self.tools = tools
                self.toolResources = toolResources
                self.metadata = metadata
                self.temperature = temperature
                self.topP = topP
                self.stream = stream
                self.maxPromptTokens = maxPromptTokens
                self.maxCompletionTokens = maxCompletionTokens
                self.truncationStrategy = truncationStrategy
                self.toolChoice = toolChoice
                self.parallelToolCalls = parallelToolCalls
                self.responseFormat = responseFormat
            }
            public enum CodingKeys: String, CodingKey {
                case assistantId = "assistant_id"
                case thread
                case model
                case instructions
                case tools
                case toolResources = "tool_resources"
                case metadata
                case temperature
                case topP = "top_p"
                case stream
                case maxPromptTokens = "max_prompt_tokens"
                case maxCompletionTokens = "max_completion_tokens"
                case truncationStrategy = "truncation_strategy"
                case toolChoice = "tool_choice"
                case parallelToolCalls = "parallel_tool_calls"
                case responseFormat = "response_format"
            }
            public init(from decoder: any Decoder) throws {
                let container = try decoder.container(keyedBy: CodingKeys.self)
                self.assistantId = try container.decode(
                    Swift.String.self,
                    forKey: .assistantId
                )
                self.thread = try container.decodeIfPresent(
                    Components.Schemas.CreateThreadRequest.self,
                    forKey: .thread
                )
                self.model = try container.decodeIfPresent(
                    Components.Schemas.CreateThreadAndRunRequest.ModelPayload.self,
                    forKey: .model
                )
                self.instructions = try container.decodeIfPresent(
                    Swift.String.self,
                    forKey: .instructions
                )
                self.tools = try container.decodeIfPresent(
                    Components.Schemas.CreateThreadAndRunRequest.ToolsPayload.self,
                    forKey: .tools
                )
                self.toolResources = try container.decodeIfPresent(
                    Components.Schemas.CreateThreadAndRunRequest.ToolResourcesPayload.self,
                    forKey: .toolResources
                )
                self.metadata = try container.decodeIfPresent(
                    Components.Schemas.Metadata.self,
                    forKey: .metadata
                )
                self.temperature = try container.decodeIfPresent(
                    Swift.Double.self,
                    forKey: .temperature
                )
                self.topP = try container.decodeIfPresent(
                    Swift.Double.self,
                    forKey: .topP
                )
                self.stream = try container.decodeIfPresent(
                    Swift.Bool.self,
                    forKey: .stream
                )
                self.maxPromptTokens = try container.decodeIfPresent(
                    Swift.Int.self,
                    forKey: .maxPromptTokens
                )
                self.maxCompletionTokens = try container.decodeIfPresent(
                    Swift.Int.self,
                    forKey: .maxCompletionTokens
                )
                self.truncationStrategy = try container.decodeIfPresent(
                    Components.Schemas.CreateThreadAndRunRequest.TruncationStrategyPayload.self,
                    forKey: .truncationStrategy
                )
                self.toolChoice = try container.decodeIfPresent(
                    Components.Schemas.CreateThreadAndRunRequest.ToolChoicePayload.self,
                    forKey: .toolChoice
                )
                self.parallelToolCalls = try container.decodeIfPresent(
                    Components.Schemas.ParallelToolCalls.self,
                    forKey: .parallelToolCalls
                )
                self.responseFormat = try container.decodeIfPresent(
                    Components.Schemas.CreateThreadAndRunRequest.ResponseFormatPayload.self,
                    forKey: .responseFormat
                )
                try decoder.ensureNoAdditionalProperties(knownKeys: [
                    "assistant_id",
                    "thread",
                    "model",
                    "instructions",
                    "tools",
                    "tool_resources",
                    "metadata",
                    "temperature",
                    "top_p",
                    "stream",
                    "max_prompt_tokens",
                    "max_completion_tokens",
                    "truncation_strategy",
                    "tool_choice",
                    "parallel_tool_calls",
                    "response_format"
                ])
            }
        }
        /// Options to create a new thread. If no thread is provided when running a 
        /// request, an empty thread will be created.
        ///
        ///
        /// - Remark: Generated from `#/components/schemas/CreateThreadRequest`.
        public struct CreateThreadRequest: Codable, Hashable, Sendable {
            /// A list of [messages](/docs/api-reference/messages) to start the thread with.
            ///
            /// - Remark: Generated from `#/components/schemas/CreateThreadRequest/messages`.
            public var messages: [Components.Schemas.CreateMessageRequest]?
            /// A set of resources that are made available to the assistant's tools in this thread. The resources are specific to the type of tool. For example, the `code_interpreter` tool requires a list of file IDs, while the `file_search` tool requires a list of vector store IDs.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/CreateThreadRequest/tool_resources`.
            public struct ToolResourcesPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/CreateThreadRequest/tool_resources/code_interpreter`.
                public struct CodeInterpreterPayload: Codable, Hashable, Sendable {
                    /// A list of [file](/docs/api-reference/files) IDs made available to the `code_interpreter` tool. There can be a maximum of 20 files associated with the tool.
                    ///
                    ///
                    /// - Remark: Generated from `#/components/schemas/CreateThreadRequest/tool_resources/code_interpreter/file_ids`.
                    public var fileIds: [Swift.String]?
                    /// Creates a new `CodeInterpreterPayload`.
                    ///
                    /// - Parameters:
                    ///   - fileIds: A list of [file](/docs/api-reference/files) IDs made available to the `code_interpreter` tool. There can be a maximum of 20 files associated with the tool.
                    public init(fileIds: [Swift.String]? = nil) {
                        self.fileIds = fileIds
                    }
                    public enum CodingKeys: String, CodingKey {
                        case fileIds = "file_ids"
                    }
                }
                /// - Remark: Generated from `#/components/schemas/CreateThreadRequest/tool_resources/code_interpreter`.
                public var codeInterpreter: Components.Schemas.CreateThreadRequest.ToolResourcesPayload.CodeInterpreterPayload?
                /// - Remark: Generated from `#/components/schemas/CreateThreadRequest/tool_resources/file_search`.
                @frozen public enum FileSearchPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/CreateThreadRequest/tool_resources/file_search/case1`.
                    public struct Case1Payload: Codable, Hashable, Sendable {
                        /// Creates a new `Case1Payload`.
                        public init() {}
                    }
                    /// - Remark: Generated from `#/components/schemas/CreateThreadRequest/tool_resources/file_search/case1`.
                    case case1(Components.Schemas.CreateThreadRequest.ToolResourcesPayload.FileSearchPayload.Case1Payload)
                    /// - Remark: Generated from `#/components/schemas/CreateThreadRequest/tool_resources/file_search/case2`.
                    public struct Case2Payload: Codable, Hashable, Sendable {
                        /// Creates a new `Case2Payload`.
                        public init() {}
                    }
                    /// - Remark: Generated from `#/components/schemas/CreateThreadRequest/tool_resources/file_search/case2`.
                    case case2(Components.Schemas.CreateThreadRequest.ToolResourcesPayload.FileSearchPayload.Case2Payload)
                    public init(from decoder: any Decoder) throws {
                        var errors: [any Error] = []
                        do {
                            self = .case1(try .init(from: decoder))
                            return
                        } catch {
                            errors.append(error)
                        }
                        do {
                            self = .case2(try .init(from: decoder))
                            return
                        } catch {
                            errors.append(error)
                        }
                        throw Swift.DecodingError.failedToDecodeOneOfSchema(
                            type: Self.self,
                            codingPath: decoder.codingPath,
                            errors: errors
                        )
                    }
                    public func encode(to encoder: any Encoder) throws {
                        switch self {
                        case let .case1(value):
                            try value.encode(to: encoder)
                        case let .case2(value):
                            try value.encode(to: encoder)
                        }
                    }
                }
                /// - Remark: Generated from `#/components/schemas/CreateThreadRequest/tool_resources/file_search`.
                public var fileSearch: Components.Schemas.CreateThreadRequest.ToolResourcesPayload.FileSearchPayload?
                /// Creates a new `ToolResourcesPayload`.
                ///
                /// - Parameters:
                ///   - codeInterpreter:
                ///   - fileSearch:
                public init(
                    codeInterpreter: Components.Schemas.CreateThreadRequest.ToolResourcesPayload.CodeInterpreterPayload? = nil,
                    fileSearch: Components.Schemas.CreateThreadRequest.ToolResourcesPayload.FileSearchPayload? = nil
                ) {
                    self.codeInterpreter = codeInterpreter
                    self.fileSearch = fileSearch
                }
                public enum CodingKeys: String, CodingKey {
                    case codeInterpreter = "code_interpreter"
                    case fileSearch = "file_search"
                }
            }
            /// A set of resources that are made available to the assistant's tools in this thread. The resources are specific to the type of tool. For example, the `code_interpreter` tool requires a list of file IDs, while the `file_search` tool requires a list of vector store IDs.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/CreateThreadRequest/tool_resources`.
            public var toolResources: Components.Schemas.CreateThreadRequest.ToolResourcesPayload?
            /// - Remark: Generated from `#/components/schemas/CreateThreadRequest/metadata`.
            public var metadata: Components.Schemas.Metadata?
            /// Creates a new `CreateThreadRequest`.
            ///
            /// - Parameters:
            ///   - messages: A list of [messages](/docs/api-reference/messages) to start the thread with.
            ///   - toolResources: A set of resources that are made available to the assistant's tools in this thread. The resources are specific to the type of tool. For example, the `code_interpreter` tool requires a list of file IDs, while the `file_search` tool requires a list of vector store IDs.
            ///   - metadata:
            public init(
                messages: [Components.Schemas.CreateMessageRequest]? = nil,
                toolResources: Components.Schemas.CreateThreadRequest.ToolResourcesPayload? = nil,
                metadata: Components.Schemas.Metadata? = nil
            ) {
                self.messages = messages
                self.toolResources = toolResources
                self.metadata = metadata
            }
            public enum CodingKeys: String, CodingKey {
                case messages
                case toolResources = "tool_resources"
                case metadata
            }
            public init(from decoder: any Decoder) throws {
                let container = try decoder.container(keyedBy: CodingKeys.self)
                self.messages = try container.decodeIfPresent(
                    [Components.Schemas.CreateMessageRequest].self,
                    forKey: .messages
                )
                self.toolResources = try container.decodeIfPresent(
                    Components.Schemas.CreateThreadRequest.ToolResourcesPayload.self,
                    forKey: .toolResources
                )
                self.metadata = try container.decodeIfPresent(
                    Components.Schemas.Metadata.self,
                    forKey: .metadata
                )
                try decoder.ensureNoAdditionalProperties(knownKeys: [
                    "messages",
                    "tool_resources",
                    "metadata"
                ])
            }
        }
        /// - Remark: Generated from `#/components/schemas/CreateTranscriptionRequest`.
        @frozen public enum CreateTranscriptionRequest: Sendable, Hashable {
            /// - Remark: Generated from `#/components/schemas/CreateTranscriptionRequest/file`.
            public struct FilePayload: Sendable, Hashable {
                public var body: OpenAPIRuntime.HTTPBody
                /// Creates a new `FilePayload`.
                ///
                /// - Parameters:
                ///   - body:
                public init(body: OpenAPIRuntime.HTTPBody) {
                    self.body = body
                }
            }
            case file(OpenAPIRuntime.MultipartPart<Components.Schemas.CreateTranscriptionRequest.FilePayload>)
            /// - Remark: Generated from `#/components/schemas/CreateTranscriptionRequest/model`.
            public struct ModelPayload: Sendable, Hashable {
                public var body: OpenAPIRuntime.HTTPBody
                /// Creates a new `ModelPayload`.
                ///
                /// - Parameters:
                ///   - body:
                public init(body: OpenAPIRuntime.HTTPBody) {
                    self.body = body
                }
            }
            case model(OpenAPIRuntime.MultipartPart<Components.Schemas.CreateTranscriptionRequest.ModelPayload>)
            /// - Remark: Generated from `#/components/schemas/CreateTranscriptionRequest/language`.
            public struct LanguagePayload: Sendable, Hashable {
                public var body: OpenAPIRuntime.HTTPBody
                /// Creates a new `LanguagePayload`.
                ///
                /// - Parameters:
                ///   - body:
                public init(body: OpenAPIRuntime.HTTPBody) {
                    self.body = body
                }
            }
            case language(OpenAPIRuntime.MultipartPart<Components.Schemas.CreateTranscriptionRequest.LanguagePayload>)
            /// - Remark: Generated from `#/components/schemas/CreateTranscriptionRequest/prompt`.
            public struct PromptPayload: Sendable, Hashable {
                public var body: OpenAPIRuntime.HTTPBody
                /// Creates a new `PromptPayload`.
                ///
                /// - Parameters:
                ///   - body:
                public init(body: OpenAPIRuntime.HTTPBody) {
                    self.body = body
                }
            }
            case prompt(OpenAPIRuntime.MultipartPart<Components.Schemas.CreateTranscriptionRequest.PromptPayload>)
            /// - Remark: Generated from `#/components/schemas/CreateTranscriptionRequest/response_format`.
            public struct ResponseFormatPayload: Sendable, Hashable {
                public var body: OpenAPIRuntime.HTTPBody
                /// Creates a new `ResponseFormatPayload`.
                ///
                /// - Parameters:
                ///   - body:
                public init(body: OpenAPIRuntime.HTTPBody) {
                    self.body = body
                }
            }
            case responseFormat(OpenAPIRuntime.MultipartPart<Components.Schemas.CreateTranscriptionRequest.ResponseFormatPayload>)
            /// - Remark: Generated from `#/components/schemas/CreateTranscriptionRequest/temperature`.
            public struct TemperaturePayload: Sendable, Hashable {
                public var body: OpenAPIRuntime.HTTPBody
                /// Creates a new `TemperaturePayload`.
                ///
                /// - Parameters:
                ///   - body:
                public init(body: OpenAPIRuntime.HTTPBody) {
                    self.body = body
                }
            }
            case temperature(OpenAPIRuntime.MultipartPart<Components.Schemas.CreateTranscriptionRequest.TemperaturePayload>)
            /// - Remark: Generated from `#/components/schemas/CreateTranscriptionRequest/timestamp_granularities[]`.
            public struct TimestampGranularities_lbrack__rbrack_Payload: Sendable, Hashable {
                public var body: OpenAPIRuntime.HTTPBody
                /// Creates a new `TimestampGranularities_lbrack__rbrack_Payload`.
                ///
                /// - Parameters:
                ///   - body:
                public init(body: OpenAPIRuntime.HTTPBody) {
                    self.body = body
                }
            }
            case timestampGranularities_lbrack__rbrack_(OpenAPIRuntime.MultipartPart<Components.Schemas.CreateTranscriptionRequest.TimestampGranularities_lbrack__rbrack_Payload>)
        }
        /// Represents a transcription response returned by model, based on the provided input.
        ///
        /// - Remark: Generated from `#/components/schemas/CreateTranscriptionResponseJson`.
        public struct CreateTranscriptionResponseJson: Codable, Hashable, Sendable {
            /// The transcribed text.
            ///
            /// - Remark: Generated from `#/components/schemas/CreateTranscriptionResponseJson/text`.
            public var text: Swift.String
            /// Creates a new `CreateTranscriptionResponseJson`.
            ///
            /// - Parameters:
            ///   - text: The transcribed text.
            public init(text: Swift.String) {
                self.text = text
            }
            public enum CodingKeys: String, CodingKey {
                case text
            }
        }
        /// Represents a verbose json transcription response returned by model, based on the provided input.
        ///
        /// - Remark: Generated from `#/components/schemas/CreateTranscriptionResponseVerboseJson`.
        public struct CreateTranscriptionResponseVerboseJson: Codable, Hashable, Sendable {
            /// The language of the input audio.
            ///
            /// - Remark: Generated from `#/components/schemas/CreateTranscriptionResponseVerboseJson/language`.
            public var language: Swift.String
            /// The duration of the input audio.
            ///
            /// - Remark: Generated from `#/components/schemas/CreateTranscriptionResponseVerboseJson/duration`.
            public var duration: Swift.String
            /// The transcribed text.
            ///
            /// - Remark: Generated from `#/components/schemas/CreateTranscriptionResponseVerboseJson/text`.
            public var text: Swift.String
            /// Extracted words and their corresponding timestamps.
            ///
            /// - Remark: Generated from `#/components/schemas/CreateTranscriptionResponseVerboseJson/words`.
            public var words: [Components.Schemas.TranscriptionWord]?
            /// Segments of the transcribed text and their corresponding details.
            ///
            /// - Remark: Generated from `#/components/schemas/CreateTranscriptionResponseVerboseJson/segments`.
            public var segments: [Components.Schemas.TranscriptionSegment]?
            /// Creates a new `CreateTranscriptionResponseVerboseJson`.
            ///
            /// - Parameters:
            ///   - language: The language of the input audio.
            ///   - duration: The duration of the input audio.
            ///   - text: The transcribed text.
            ///   - words: Extracted words and their corresponding timestamps.
            ///   - segments: Segments of the transcribed text and their corresponding details.
            public init(
                language: Swift.String,
                duration: Swift.String,
                text: Swift.String,
                words: [Components.Schemas.TranscriptionWord]? = nil,
                segments: [Components.Schemas.TranscriptionSegment]? = nil
            ) {
                self.language = language
                self.duration = duration
                self.text = text
                self.words = words
                self.segments = segments
            }
            public enum CodingKeys: String, CodingKey {
                case language
                case duration
                case text
                case words
                case segments
            }
        }
        /// - Remark: Generated from `#/components/schemas/CreateTranslationRequest`.
        @frozen public enum CreateTranslationRequest: Sendable, Hashable {
            /// - Remark: Generated from `#/components/schemas/CreateTranslationRequest/file`.
            public struct FilePayload: Sendable, Hashable {
                public var body: OpenAPIRuntime.HTTPBody
                /// Creates a new `FilePayload`.
                ///
                /// - Parameters:
                ///   - body:
                public init(body: OpenAPIRuntime.HTTPBody) {
                    self.body = body
                }
            }
            case file(OpenAPIRuntime.MultipartPart<Components.Schemas.CreateTranslationRequest.FilePayload>)
            /// - Remark: Generated from `#/components/schemas/CreateTranslationRequest/model`.
            public struct ModelPayload: Sendable, Hashable {
                public var body: OpenAPIRuntime.HTTPBody
                /// Creates a new `ModelPayload`.
                ///
                /// - Parameters:
                ///   - body:
                public init(body: OpenAPIRuntime.HTTPBody) {
                    self.body = body
                }
            }
            case model(OpenAPIRuntime.MultipartPart<Components.Schemas.CreateTranslationRequest.ModelPayload>)
            /// - Remark: Generated from `#/components/schemas/CreateTranslationRequest/prompt`.
            public struct PromptPayload: Sendable, Hashable {
                public var body: OpenAPIRuntime.HTTPBody
                /// Creates a new `PromptPayload`.
                ///
                /// - Parameters:
                ///   - body:
                public init(body: OpenAPIRuntime.HTTPBody) {
                    self.body = body
                }
            }
            case prompt(OpenAPIRuntime.MultipartPart<Components.Schemas.CreateTranslationRequest.PromptPayload>)
            /// - Remark: Generated from `#/components/schemas/CreateTranslationRequest/response_format`.
            public struct ResponseFormatPayload: Sendable, Hashable {
                public var body: OpenAPIRuntime.HTTPBody
                /// Creates a new `ResponseFormatPayload`.
                ///
                /// - Parameters:
                ///   - body:
                public init(body: OpenAPIRuntime.HTTPBody) {
                    self.body = body
                }
            }
            case responseFormat(OpenAPIRuntime.MultipartPart<Components.Schemas.CreateTranslationRequest.ResponseFormatPayload>)
            /// - Remark: Generated from `#/components/schemas/CreateTranslationRequest/temperature`.
            public struct TemperaturePayload: Sendable, Hashable {
                public var body: OpenAPIRuntime.HTTPBody
                /// Creates a new `TemperaturePayload`.
                ///
                /// - Parameters:
                ///   - body:
                public init(body: OpenAPIRuntime.HTTPBody) {
                    self.body = body
                }
            }
            case temperature(OpenAPIRuntime.MultipartPart<Components.Schemas.CreateTranslationRequest.TemperaturePayload>)
        }
        /// - Remark: Generated from `#/components/schemas/CreateTranslationResponseJson`.
        public struct CreateTranslationResponseJson: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/CreateTranslationResponseJson/text`.
            public var text: Swift.String
            /// Creates a new `CreateTranslationResponseJson`.
            ///
            /// - Parameters:
            ///   - text:
            public init(text: Swift.String) {
                self.text = text
            }
            public enum CodingKeys: String, CodingKey {
                case text
            }
        }
        /// - Remark: Generated from `#/components/schemas/CreateTranslationResponseVerboseJson`.
        public struct CreateTranslationResponseVerboseJson: Codable, Hashable, Sendable {
            /// The language of the output translation (always `english`).
            ///
            /// - Remark: Generated from `#/components/schemas/CreateTranslationResponseVerboseJson/language`.
            public var language: Swift.String
            /// The duration of the input audio.
            ///
            /// - Remark: Generated from `#/components/schemas/CreateTranslationResponseVerboseJson/duration`.
            public var duration: Swift.String
            /// The translated text.
            ///
            /// - Remark: Generated from `#/components/schemas/CreateTranslationResponseVerboseJson/text`.
            public var text: Swift.String
            /// Segments of the translated text and their corresponding details.
            ///
            /// - Remark: Generated from `#/components/schemas/CreateTranslationResponseVerboseJson/segments`.
            public var segments: [Components.Schemas.TranscriptionSegment]?
            /// Creates a new `CreateTranslationResponseVerboseJson`.
            ///
            /// - Parameters:
            ///   - language: The language of the output translation (always `english`).
            ///   - duration: The duration of the input audio.
            ///   - text: The translated text.
            ///   - segments: Segments of the translated text and their corresponding details.
            public init(
                language: Swift.String,
                duration: Swift.String,
                text: Swift.String,
                segments: [Components.Schemas.TranscriptionSegment]? = nil
            ) {
                self.language = language
                self.duration = duration
                self.text = text
                self.segments = segments
            }
            public enum CodingKeys: String, CodingKey {
                case language
                case duration
                case text
                case segments
            }
        }
        /// - Remark: Generated from `#/components/schemas/CreateUploadRequest`.
        public struct CreateUploadRequest: Codable, Hashable, Sendable {
            /// The name of the file to upload.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/CreateUploadRequest/filename`.
            public var filename: Swift.String
            /// The intended purpose of the uploaded file.
            ///
            /// See the [documentation on File purposes](/docs/api-reference/files/create#files-create-purpose).
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/CreateUploadRequest/purpose`.
            @frozen public enum PurposePayload: String, Codable, Hashable, Sendable, CaseIterable {
                case assistants = "assistants"
                case batch = "batch"
                case fineTune = "fine-tune"
                case vision = "vision"
            }
            /// The intended purpose of the uploaded file.
            ///
            /// See the [documentation on File purposes](/docs/api-reference/files/create#files-create-purpose).
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/CreateUploadRequest/purpose`.
            public var purpose: Components.Schemas.CreateUploadRequest.PurposePayload
            /// The number of bytes in the file you are uploading.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/CreateUploadRequest/bytes`.
            public var bytes: Swift.Int
            /// The MIME type of the file.
            ///
            /// This must fall within the supported MIME types for your file purpose. See the supported MIME types for assistants and vision.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/CreateUploadRequest/mime_type`.
            public var mimeType: Swift.String
            /// Creates a new `CreateUploadRequest`.
            ///
            /// - Parameters:
            ///   - filename: The name of the file to upload.
            ///   - purpose: The intended purpose of the uploaded file.
            ///   - bytes: The number of bytes in the file you are uploading.
            ///   - mimeType: The MIME type of the file.
            public init(
                filename: Swift.String,
                purpose: Components.Schemas.CreateUploadRequest.PurposePayload,
                bytes: Swift.Int,
                mimeType: Swift.String
            ) {
                self.filename = filename
                self.purpose = purpose
                self.bytes = bytes
                self.mimeType = mimeType
            }
            public enum CodingKeys: String, CodingKey {
                case filename
                case purpose
                case bytes
                case mimeType = "mime_type"
            }
            public init(from decoder: any Decoder) throws {
                let container = try decoder.container(keyedBy: CodingKeys.self)
                self.filename = try container.decode(
                    Swift.String.self,
                    forKey: .filename
                )
                self.purpose = try container.decode(
                    Components.Schemas.CreateUploadRequest.PurposePayload.self,
                    forKey: .purpose
                )
                self.bytes = try container.decode(
                    Swift.Int.self,
                    forKey: .bytes
                )
                self.mimeType = try container.decode(
                    Swift.String.self,
                    forKey: .mimeType
                )
                try decoder.ensureNoAdditionalProperties(knownKeys: [
                    "filename",
                    "purpose",
                    "bytes",
                    "mime_type"
                ])
            }
        }
        /// - Remark: Generated from `#/components/schemas/CreateVectorStoreFileBatchRequest`.
        public struct CreateVectorStoreFileBatchRequest: Codable, Hashable, Sendable {
            /// A list of [File](/docs/api-reference/files) IDs that the vector store should use. Useful for tools like `file_search` that can access files.
            ///
            /// - Remark: Generated from `#/components/schemas/CreateVectorStoreFileBatchRequest/file_ids`.
            public var fileIds: [Swift.String]
            /// - Remark: Generated from `#/components/schemas/CreateVectorStoreFileBatchRequest/chunking_strategy`.
            public var chunkingStrategy: Components.Schemas.ChunkingStrategyRequestParam?
            /// Creates a new `CreateVectorStoreFileBatchRequest`.
            ///
            /// - Parameters:
            ///   - fileIds: A list of [File](/docs/api-reference/files) IDs that the vector store should use. Useful for tools like `file_search` that can access files.
            ///   - chunkingStrategy:
            public init(
                fileIds: [Swift.String],
                chunkingStrategy: Components.Schemas.ChunkingStrategyRequestParam? = nil
            ) {
                self.fileIds = fileIds
                self.chunkingStrategy = chunkingStrategy
            }
            public enum CodingKeys: String, CodingKey {
                case fileIds = "file_ids"
                case chunkingStrategy = "chunking_strategy"
            }
            public init(from decoder: any Decoder) throws {
                let container = try decoder.container(keyedBy: CodingKeys.self)
                self.fileIds = try container.decode(
                    [Swift.String].self,
                    forKey: .fileIds
                )
                self.chunkingStrategy = try container.decodeIfPresent(
                    Components.Schemas.ChunkingStrategyRequestParam.self,
                    forKey: .chunkingStrategy
                )
                try decoder.ensureNoAdditionalProperties(knownKeys: [
                    "file_ids",
                    "chunking_strategy"
                ])
            }
        }
        /// - Remark: Generated from `#/components/schemas/CreateVectorStoreFileRequest`.
        public struct CreateVectorStoreFileRequest: Codable, Hashable, Sendable {
            /// A [File](/docs/api-reference/files) ID that the vector store should use. Useful for tools like `file_search` that can access files.
            ///
            /// - Remark: Generated from `#/components/schemas/CreateVectorStoreFileRequest/file_id`.
            public var fileId: Swift.String
            /// - Remark: Generated from `#/components/schemas/CreateVectorStoreFileRequest/chunking_strategy`.
            public var chunkingStrategy: Components.Schemas.ChunkingStrategyRequestParam?
            /// Creates a new `CreateVectorStoreFileRequest`.
            ///
            /// - Parameters:
            ///   - fileId: A [File](/docs/api-reference/files) ID that the vector store should use. Useful for tools like `file_search` that can access files.
            ///   - chunkingStrategy:
            public init(
                fileId: Swift.String,
                chunkingStrategy: Components.Schemas.ChunkingStrategyRequestParam? = nil
            ) {
                self.fileId = fileId
                self.chunkingStrategy = chunkingStrategy
            }
            public enum CodingKeys: String, CodingKey {
                case fileId = "file_id"
                case chunkingStrategy = "chunking_strategy"
            }
            public init(from decoder: any Decoder) throws {
                let container = try decoder.container(keyedBy: CodingKeys.self)
                self.fileId = try container.decode(
                    Swift.String.self,
                    forKey: .fileId
                )
                self.chunkingStrategy = try container.decodeIfPresent(
                    Components.Schemas.ChunkingStrategyRequestParam.self,
                    forKey: .chunkingStrategy
                )
                try decoder.ensureNoAdditionalProperties(knownKeys: [
                    "file_id",
                    "chunking_strategy"
                ])
            }
        }
        /// - Remark: Generated from `#/components/schemas/CreateVectorStoreRequest`.
        public struct CreateVectorStoreRequest: Codable, Hashable, Sendable {
            /// A list of [File](/docs/api-reference/files) IDs that the vector store should use. Useful for tools like `file_search` that can access files.
            ///
            /// - Remark: Generated from `#/components/schemas/CreateVectorStoreRequest/file_ids`.
            public var fileIds: [Swift.String]?
            /// The name of the vector store.
            ///
            /// - Remark: Generated from `#/components/schemas/CreateVectorStoreRequest/name`.
            public var name: Swift.String?
            /// - Remark: Generated from `#/components/schemas/CreateVectorStoreRequest/expires_after`.
            public var expiresAfter: Components.Schemas.VectorStoreExpirationAfter?
            /// The chunking strategy used to chunk the file(s). If not set, will use the `auto` strategy. Only applicable if `file_ids` is non-empty.
            ///
            /// - Remark: Generated from `#/components/schemas/CreateVectorStoreRequest/chunking_strategy`.
            @frozen public enum ChunkingStrategyPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/CreateVectorStoreRequest/chunking_strategy/case1`.
                case AutoChunkingStrategyRequestParam(Components.Schemas.AutoChunkingStrategyRequestParam)
                /// - Remark: Generated from `#/components/schemas/CreateVectorStoreRequest/chunking_strategy/case2`.
                case StaticChunkingStrategyRequestParam(Components.Schemas.StaticChunkingStrategyRequestParam)
                public init(from decoder: any Decoder) throws {
                    var errors: [any Error] = []
                    do {
                        self = .AutoChunkingStrategyRequestParam(try .init(from: decoder))
                        return
                    } catch {
                        errors.append(error)
                    }
                    do {
                        self = .StaticChunkingStrategyRequestParam(try .init(from: decoder))
                        return
                    } catch {
                        errors.append(error)
                    }
                    throw Swift.DecodingError.failedToDecodeOneOfSchema(
                        type: Self.self,
                        codingPath: decoder.codingPath,
                        errors: errors
                    )
                }
                public func encode(to encoder: any Encoder) throws {
                    switch self {
                    case let .AutoChunkingStrategyRequestParam(value):
                        try value.encode(to: encoder)
                    case let .StaticChunkingStrategyRequestParam(value):
                        try value.encode(to: encoder)
                    }
                }
            }
            /// The chunking strategy used to chunk the file(s). If not set, will use the `auto` strategy. Only applicable if `file_ids` is non-empty.
            ///
            /// - Remark: Generated from `#/components/schemas/CreateVectorStoreRequest/chunking_strategy`.
            public var chunkingStrategy: Components.Schemas.CreateVectorStoreRequest.ChunkingStrategyPayload?
            /// - Remark: Generated from `#/components/schemas/CreateVectorStoreRequest/metadata`.
            public var metadata: Components.Schemas.Metadata?
            /// Creates a new `CreateVectorStoreRequest`.
            ///
            /// - Parameters:
            ///   - fileIds: A list of [File](/docs/api-reference/files) IDs that the vector store should use. Useful for tools like `file_search` that can access files.
            ///   - name: The name of the vector store.
            ///   - expiresAfter:
            ///   - chunkingStrategy: The chunking strategy used to chunk the file(s). If not set, will use the `auto` strategy. Only applicable if `file_ids` is non-empty.
            ///   - metadata:
            public init(
                fileIds: [Swift.String]? = nil,
                name: Swift.String? = nil,
                expiresAfter: Components.Schemas.VectorStoreExpirationAfter? = nil,
                chunkingStrategy: Components.Schemas.CreateVectorStoreRequest.ChunkingStrategyPayload? = nil,
                metadata: Components.Schemas.Metadata? = nil
            ) {
                self.fileIds = fileIds
                self.name = name
                self.expiresAfter = expiresAfter
                self.chunkingStrategy = chunkingStrategy
                self.metadata = metadata
            }
            public enum CodingKeys: String, CodingKey {
                case fileIds = "file_ids"
                case name
                case expiresAfter = "expires_after"
                case chunkingStrategy = "chunking_strategy"
                case metadata
            }
            public init(from decoder: any Decoder) throws {
                let container = try decoder.container(keyedBy: CodingKeys.self)
                self.fileIds = try container.decodeIfPresent(
                    [Swift.String].self,
                    forKey: .fileIds
                )
                self.name = try container.decodeIfPresent(
                    Swift.String.self,
                    forKey: .name
                )
                self.expiresAfter = try container.decodeIfPresent(
                    Components.Schemas.VectorStoreExpirationAfter.self,
                    forKey: .expiresAfter
                )
                self.chunkingStrategy = try container.decodeIfPresent(
                    Components.Schemas.CreateVectorStoreRequest.ChunkingStrategyPayload.self,
                    forKey: .chunkingStrategy
                )
                self.metadata = try container.decodeIfPresent(
                    Components.Schemas.Metadata.self,
                    forKey: .metadata
                )
                try decoder.ensureNoAdditionalProperties(knownKeys: [
                    "file_ids",
                    "name",
                    "expires_after",
                    "chunking_strategy",
                    "metadata"
                ])
            }
        }
        /// - Remark: Generated from `#/components/schemas/DefaultProjectErrorResponse`.
        public struct DefaultProjectErrorResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/DefaultProjectErrorResponse/code`.
            public var code: Swift.Int
            /// - Remark: Generated from `#/components/schemas/DefaultProjectErrorResponse/message`.
            public var message: Swift.String
            /// Creates a new `DefaultProjectErrorResponse`.
            ///
            /// - Parameters:
            ///   - code:
            ///   - message:
            public init(
                code: Swift.Int,
                message: Swift.String
            ) {
                self.code = code
                self.message = message
            }
            public enum CodingKeys: String, CodingKey {
                case code
                case message
            }
        }
        /// - Remark: Generated from `#/components/schemas/DeleteAssistantResponse`.
        public struct DeleteAssistantResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/DeleteAssistantResponse/id`.
            public var id: Swift.String
            /// - Remark: Generated from `#/components/schemas/DeleteAssistantResponse/deleted`.
            public var deleted: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/DeleteAssistantResponse/object`.
            @frozen public enum ObjectPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case assistant_deleted = "assistant.deleted"
            }
            /// - Remark: Generated from `#/components/schemas/DeleteAssistantResponse/object`.
            public var object: Components.Schemas.DeleteAssistantResponse.ObjectPayload
            /// Creates a new `DeleteAssistantResponse`.
            ///
            /// - Parameters:
            ///   - id:
            ///   - deleted:
            ///   - object:
            public init(
                id: Swift.String,
                deleted: Swift.Bool,
                object: Components.Schemas.DeleteAssistantResponse.ObjectPayload
            ) {
                self.id = id
                self.deleted = deleted
                self.object = object
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case deleted
                case object
            }
        }
        /// - Remark: Generated from `#/components/schemas/DeleteFileResponse`.
        public struct DeleteFileResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/DeleteFileResponse/id`.
            public var id: Swift.String
            /// - Remark: Generated from `#/components/schemas/DeleteFileResponse/object`.
            @frozen public enum ObjectPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case file = "file"
            }
            /// - Remark: Generated from `#/components/schemas/DeleteFileResponse/object`.
            public var object: Components.Schemas.DeleteFileResponse.ObjectPayload
            /// - Remark: Generated from `#/components/schemas/DeleteFileResponse/deleted`.
            public var deleted: Swift.Bool
            /// Creates a new `DeleteFileResponse`.
            ///
            /// - Parameters:
            ///   - id:
            ///   - object:
            ///   - deleted:
            public init(
                id: Swift.String,
                object: Components.Schemas.DeleteFileResponse.ObjectPayload,
                deleted: Swift.Bool
            ) {
                self.id = id
                self.object = object
                self.deleted = deleted
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case object
                case deleted
            }
        }
        /// - Remark: Generated from `#/components/schemas/DeleteMessageResponse`.
        public struct DeleteMessageResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/DeleteMessageResponse/id`.
            public var id: Swift.String
            /// - Remark: Generated from `#/components/schemas/DeleteMessageResponse/deleted`.
            public var deleted: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/DeleteMessageResponse/object`.
            @frozen public enum ObjectPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case thread_message_deleted = "thread.message.deleted"
            }
            /// - Remark: Generated from `#/components/schemas/DeleteMessageResponse/object`.
            public var object: Components.Schemas.DeleteMessageResponse.ObjectPayload
            /// Creates a new `DeleteMessageResponse`.
            ///
            /// - Parameters:
            ///   - id:
            ///   - deleted:
            ///   - object:
            public init(
                id: Swift.String,
                deleted: Swift.Bool,
                object: Components.Schemas.DeleteMessageResponse.ObjectPayload
            ) {
                self.id = id
                self.deleted = deleted
                self.object = object
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case deleted
                case object
            }
        }
        /// - Remark: Generated from `#/components/schemas/DeleteModelResponse`.
        public struct DeleteModelResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/DeleteModelResponse/id`.
            public var id: Swift.String
            /// - Remark: Generated from `#/components/schemas/DeleteModelResponse/deleted`.
            public var deleted: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/DeleteModelResponse/object`.
            public var object: Swift.String
            /// Creates a new `DeleteModelResponse`.
            ///
            /// - Parameters:
            ///   - id:
            ///   - deleted:
            ///   - object:
            public init(
                id: Swift.String,
                deleted: Swift.Bool,
                object: Swift.String
            ) {
                self.id = id
                self.deleted = deleted
                self.object = object
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case deleted
                case object
            }
        }
        /// - Remark: Generated from `#/components/schemas/DeleteThreadResponse`.
        public struct DeleteThreadResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/DeleteThreadResponse/id`.
            public var id: Swift.String
            /// - Remark: Generated from `#/components/schemas/DeleteThreadResponse/deleted`.
            public var deleted: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/DeleteThreadResponse/object`.
            @frozen public enum ObjectPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case thread_deleted = "thread.deleted"
            }
            /// - Remark: Generated from `#/components/schemas/DeleteThreadResponse/object`.
            public var object: Components.Schemas.DeleteThreadResponse.ObjectPayload
            /// Creates a new `DeleteThreadResponse`.
            ///
            /// - Parameters:
            ///   - id:
            ///   - deleted:
            ///   - object:
            public init(
                id: Swift.String,
                deleted: Swift.Bool,
                object: Components.Schemas.DeleteThreadResponse.ObjectPayload
            ) {
                self.id = id
                self.deleted = deleted
                self.object = object
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case deleted
                case object
            }
        }
        /// - Remark: Generated from `#/components/schemas/DeleteVectorStoreFileResponse`.
        public struct DeleteVectorStoreFileResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/DeleteVectorStoreFileResponse/id`.
            public var id: Swift.String
            /// - Remark: Generated from `#/components/schemas/DeleteVectorStoreFileResponse/deleted`.
            public var deleted: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/DeleteVectorStoreFileResponse/object`.
            @frozen public enum ObjectPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case vectorStore_file_deleted = "vector_store.file.deleted"
            }
            /// - Remark: Generated from `#/components/schemas/DeleteVectorStoreFileResponse/object`.
            public var object: Components.Schemas.DeleteVectorStoreFileResponse.ObjectPayload
            /// Creates a new `DeleteVectorStoreFileResponse`.
            ///
            /// - Parameters:
            ///   - id:
            ///   - deleted:
            ///   - object:
            public init(
                id: Swift.String,
                deleted: Swift.Bool,
                object: Components.Schemas.DeleteVectorStoreFileResponse.ObjectPayload
            ) {
                self.id = id
                self.deleted = deleted
                self.object = object
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case deleted
                case object
            }
        }
        /// - Remark: Generated from `#/components/schemas/DeleteVectorStoreResponse`.
        public struct DeleteVectorStoreResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/DeleteVectorStoreResponse/id`.
            public var id: Swift.String
            /// - Remark: Generated from `#/components/schemas/DeleteVectorStoreResponse/deleted`.
            public var deleted: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/DeleteVectorStoreResponse/object`.
            @frozen public enum ObjectPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case vectorStore_deleted = "vector_store.deleted"
            }
            /// - Remark: Generated from `#/components/schemas/DeleteVectorStoreResponse/object`.
            public var object: Components.Schemas.DeleteVectorStoreResponse.ObjectPayload
            /// Creates a new `DeleteVectorStoreResponse`.
            ///
            /// - Parameters:
            ///   - id:
            ///   - deleted:
            ///   - object:
            public init(
                id: Swift.String,
                deleted: Swift.Bool,
                object: Components.Schemas.DeleteVectorStoreResponse.ObjectPayload
            ) {
                self.id = id
                self.deleted = deleted
                self.object = object
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case deleted
                case object
            }
        }
        /// Occurs when a stream ends.
        ///
        /// - Remark: Generated from `#/components/schemas/DoneEvent`.
        public struct DoneEvent: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/DoneEvent/event`.
            @frozen public enum EventPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case done = "done"
            }
            /// - Remark: Generated from `#/components/schemas/DoneEvent/event`.
            public var event: Components.Schemas.DoneEvent.EventPayload
            /// - Remark: Generated from `#/components/schemas/DoneEvent/data`.
            @frozen public enum DataPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case _lbrack_done_rbrack_ = "[DONE]"
            }
            /// - Remark: Generated from `#/components/schemas/DoneEvent/data`.
            public var data: Components.Schemas.DoneEvent.DataPayload
            /// Creates a new `DoneEvent`.
            ///
            /// - Parameters:
            ///   - event:
            ///   - data:
            public init(
                event: Components.Schemas.DoneEvent.EventPayload,
                data: Components.Schemas.DoneEvent.DataPayload
            ) {
                self.event = event
                self.data = data
            }
            public enum CodingKeys: String, CodingKey {
                case event
                case data
            }
        }
        /// Represents an embedding vector returned by embedding endpoint.
        ///
        ///
        /// - Remark: Generated from `#/components/schemas/Embedding`.
        public struct Embedding: Codable, Hashable, Sendable {
            /// The index of the embedding in the list of embeddings.
            ///
            /// - Remark: Generated from `#/components/schemas/Embedding/index`.
            public var index: Swift.Int
            /// The embedding vector, which is a list of floats. The length of vector depends on the model as listed in the [embedding guide](/docs/guides/embeddings).
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/Embedding/embedding`.
            public var embedding: [Swift.Double]
            /// The object type, which is always "embedding".
            ///
            /// - Remark: Generated from `#/components/schemas/Embedding/object`.
            @frozen public enum ObjectPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case embedding = "embedding"
            }
            /// The object type, which is always "embedding".
            ///
            /// - Remark: Generated from `#/components/schemas/Embedding/object`.
            public var object: Components.Schemas.Embedding.ObjectPayload
            /// Creates a new `Embedding`.
            ///
            /// - Parameters:
            ///   - index: The index of the embedding in the list of embeddings.
            ///   - embedding: The embedding vector, which is a list of floats. The length of vector depends on the model as listed in the [embedding guide](/docs/guides/embeddings).
            ///   - object: The object type, which is always "embedding".
            public init(
                index: Swift.Int,
                embedding: [Swift.Double],
                object: Components.Schemas.Embedding.ObjectPayload
            ) {
                self.index = index
                self.embedding = embedding
                self.object = object
            }
            public enum CodingKeys: String, CodingKey {
                case index
                case embedding
                case object
            }
        }
        /// - Remark: Generated from `#/components/schemas/Error`.
        public struct _Error: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/Error/code`.
            public var code: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Error/message`.
            public var message: Swift.String
            /// - Remark: Generated from `#/components/schemas/Error/param`.
            public var param: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Error/type`.
            public var _type: Swift.String
            /// Creates a new `_Error`.
            ///
            /// - Parameters:
            ///   - code:
            ///   - message:
            ///   - param:
            ///   - _type:
            public init(
                code: Swift.String? = nil,
                message: Swift.String,
                param: Swift.String? = nil,
                _type: Swift.String
            ) {
                self.code = code
                self.message = message
                self.param = param
                self._type = _type
            }
            public enum CodingKeys: String, CodingKey {
                case code
                case message
                case param
                case _type = "type"
            }
        }
        /// Occurs when an [error](/docs/guides/error-codes#api-errors) occurs. This can happen due to an internal server error or a timeout.
        ///
        /// - Remark: Generated from `#/components/schemas/ErrorEvent`.
        public struct ErrorEvent: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/ErrorEvent/event`.
            @frozen public enum EventPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case error = "error"
            }
            /// - Remark: Generated from `#/components/schemas/ErrorEvent/event`.
            public var event: Components.Schemas.ErrorEvent.EventPayload
            /// - Remark: Generated from `#/components/schemas/ErrorEvent/data`.
            public var data: Components.Schemas._Error
            /// Creates a new `ErrorEvent`.
            ///
            /// - Parameters:
            ///   - event:
            ///   - data:
            public init(
                event: Components.Schemas.ErrorEvent.EventPayload,
                data: Components.Schemas._Error
            ) {
                self.event = event
                self.data = data
            }
            public enum CodingKeys: String, CodingKey {
                case event
                case data
            }
        }
        /// - Remark: Generated from `#/components/schemas/ErrorResponse`.
        public struct ErrorResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/ErrorResponse/error`.
            public var error: Components.Schemas._Error
            /// Creates a new `ErrorResponse`.
            ///
            /// - Parameters:
            ///   - error:
            public init(error: Components.Schemas._Error) {
                self.error = error
            }
            public enum CodingKeys: String, CodingKey {
                case error
            }
        }
        /// The ranking options for the file search. If not specified, the file search tool will use the `auto` ranker and a score_threshold of 0.
        ///
        /// See the [file search tool documentation](/docs/assistants/tools/file-search#customizing-file-search-settings) for more information.
        ///
        ///
        /// - Remark: Generated from `#/components/schemas/FileSearchRankingOptions`.
        public struct FileSearchRankingOptions: Codable, Hashable, Sendable {
            /// The ranker to use for the file search. If not specified will use the `auto` ranker.
            ///
            /// - Remark: Generated from `#/components/schemas/FileSearchRankingOptions/ranker`.
            @frozen public enum RankerPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case auto = "auto"
                case default20240821 = "default_2024_08_21"
            }
            /// The ranker to use for the file search. If not specified will use the `auto` ranker.
            ///
            /// - Remark: Generated from `#/components/schemas/FileSearchRankingOptions/ranker`.
            public var ranker: Components.Schemas.FileSearchRankingOptions.RankerPayload?
            /// The score threshold for the file search. All values must be a floating point number between 0 and 1.
            ///
            /// - Remark: Generated from `#/components/schemas/FileSearchRankingOptions/score_threshold`.
            public var scoreThreshold: Swift.Double
            /// Creates a new `FileSearchRankingOptions`.
            ///
            /// - Parameters:
            ///   - ranker: The ranker to use for the file search. If not specified will use the `auto` ranker.
            ///   - scoreThreshold: The score threshold for the file search. All values must be a floating point number between 0 and 1.
            public init(
                ranker: Components.Schemas.FileSearchRankingOptions.RankerPayload? = nil,
                scoreThreshold: Swift.Double
            ) {
                self.ranker = ranker
                self.scoreThreshold = scoreThreshold
            }
            public enum CodingKeys: String, CodingKey {
                case ranker
                case scoreThreshold = "score_threshold"
            }
        }
        /// - Remark: Generated from `#/components/schemas/FineTuneChatCompletionRequestAssistantMessage`.
        public struct FineTuneChatCompletionRequestAssistantMessage: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/FineTuneChatCompletionRequestAssistantMessage/value1`.
            public struct Value1Payload: Codable, Hashable, Sendable {
                /// Controls whether the assistant message is trained against (0 or 1)
                ///
                /// - Remark: Generated from `#/components/schemas/FineTuneChatCompletionRequestAssistantMessage/value1/weight`.
                @frozen public enum WeightPayload: Int, Codable, Hashable, Sendable, CaseIterable {
                    case _0 = 0
                    case _1 = 1
                }
                /// Controls whether the assistant message is trained against (0 or 1)
                ///
                /// - Remark: Generated from `#/components/schemas/FineTuneChatCompletionRequestAssistantMessage/value1/weight`.
                public var weight: Components.Schemas.FineTuneChatCompletionRequestAssistantMessage.Value1Payload.WeightPayload?
                /// Creates a new `Value1Payload`.
                ///
                /// - Parameters:
                ///   - weight: Controls whether the assistant message is trained against (0 or 1)
                public init(weight: Components.Schemas.FineTuneChatCompletionRequestAssistantMessage.Value1Payload.WeightPayload? = nil) {
                    self.weight = weight
                }
                public enum CodingKeys: String, CodingKey {
                    case weight
                }
            }
            /// - Remark: Generated from `#/components/schemas/FineTuneChatCompletionRequestAssistantMessage/value1`.
            public var value1: Components.Schemas.FineTuneChatCompletionRequestAssistantMessage.Value1Payload
            /// - Remark: Generated from `#/components/schemas/FineTuneChatCompletionRequestAssistantMessage/value2`.
            public var value2: Components.Schemas.ChatCompletionRequestAssistantMessage
            /// Creates a new `FineTuneChatCompletionRequestAssistantMessage`.
            ///
            /// - Parameters:
            ///   - value1:
            ///   - value2:
            public init(
                value1: Components.Schemas.FineTuneChatCompletionRequestAssistantMessage.Value1Payload,
                value2: Components.Schemas.ChatCompletionRequestAssistantMessage
            ) {
                self.value1 = value1
                self.value2 = value2
            }
            public init(from decoder: any Decoder) throws {
                self.value1 = try .init(from: decoder)
                self.value2 = try .init(from: decoder)
            }
            public func encode(to encoder: any Encoder) throws {
                try self.value1.encode(to: encoder)
                try self.value2.encode(to: encoder)
            }
        }
        /// The per-line training example of a fine-tuning input file for chat models using the supervised method.
        ///
        /// - Remark: Generated from `#/components/schemas/FineTuneChatRequestInput`.
        public struct FineTuneChatRequestInput: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/FineTuneChatRequestInput/MessagesPayload`.
            @frozen public enum MessagesPayloadPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/FineTuneChatRequestInput/MessagesPayload/case1`.
                case ChatCompletionRequestSystemMessage(Components.Schemas.ChatCompletionRequestSystemMessage)
                /// - Remark: Generated from `#/components/schemas/FineTuneChatRequestInput/MessagesPayload/case2`.
                case ChatCompletionRequestUserMessage(Components.Schemas.ChatCompletionRequestUserMessage)
                /// - Remark: Generated from `#/components/schemas/FineTuneChatRequestInput/MessagesPayload/case3`.
                case FineTuneChatCompletionRequestAssistantMessage(Components.Schemas.FineTuneChatCompletionRequestAssistantMessage)
                /// - Remark: Generated from `#/components/schemas/FineTuneChatRequestInput/MessagesPayload/case4`.
                case ChatCompletionRequestToolMessage(Components.Schemas.ChatCompletionRequestToolMessage)
                /// - Remark: Generated from `#/components/schemas/FineTuneChatRequestInput/MessagesPayload/case5`.
                case ChatCompletionRequestFunctionMessage(Components.Schemas.ChatCompletionRequestFunctionMessage)
                public init(from decoder: any Decoder) throws {
                    var errors: [any Error] = []
                    do {
                        self = .ChatCompletionRequestSystemMessage(try .init(from: decoder))
                        return
                    } catch {
                        errors.append(error)
                    }
                    do {
                        self = .ChatCompletionRequestUserMessage(try .init(from: decoder))
                        return
                    } catch {
                        errors.append(error)
                    }
                    do {
                        self = .FineTuneChatCompletionRequestAssistantMessage(try .init(from: decoder))
                        return
                    } catch {
                        errors.append(error)
                    }
                    do {
                        self = .ChatCompletionRequestToolMessage(try .init(from: decoder))
                        return
                    } catch {
                        errors.append(error)
                    }
                    do {
                        self = .ChatCompletionRequestFunctionMessage(try .init(from: decoder))
                        return
                    } catch {
                        errors.append(error)
                    }
                    throw Swift.DecodingError.failedToDecodeOneOfSchema(
                        type: Self.self,
                        codingPath: decoder.codingPath,
                        errors: errors
                    )
                }
                public func encode(to encoder: any Encoder) throws {
                    switch self {
                    case let .ChatCompletionRequestSystemMessage(value):
                        try value.encode(to: encoder)
                    case let .ChatCompletionRequestUserMessage(value):
                        try value.encode(to: encoder)
                    case let .FineTuneChatCompletionRequestAssistantMessage(value):
                        try value.encode(to: encoder)
                    case let .ChatCompletionRequestToolMessage(value):
                        try value.encode(to: encoder)
                    case let .ChatCompletionRequestFunctionMessage(value):
                        try value.encode(to: encoder)
                    }
                }
            }
            /// - Remark: Generated from `#/components/schemas/FineTuneChatRequestInput/messages`.
            public typealias MessagesPayload = [Components.Schemas.FineTuneChatRequestInput.MessagesPayloadPayload]
            /// - Remark: Generated from `#/components/schemas/FineTuneChatRequestInput/messages`.
            public var messages: Components.Schemas.FineTuneChatRequestInput.MessagesPayload?
            /// A list of tools the model may generate JSON inputs for.
            ///
            /// - Remark: Generated from `#/components/schemas/FineTuneChatRequestInput/tools`.
            public var tools: [Components.Schemas.ChatCompletionTool]?
            /// - Remark: Generated from `#/components/schemas/FineTuneChatRequestInput/parallel_tool_calls`.
            public var parallelToolCalls: Components.Schemas.ParallelToolCalls?
            /// A list of functions the model may generate JSON inputs for.
            ///
            /// - Remark: Generated from `#/components/schemas/FineTuneChatRequestInput/functions`.
            @available(*, deprecated)
            public var functions: [Components.Schemas.ChatCompletionFunctions]?
            /// Creates a new `FineTuneChatRequestInput`.
            ///
            /// - Parameters:
            ///   - messages:
            ///   - tools: A list of tools the model may generate JSON inputs for.
            ///   - parallelToolCalls:
            ///   - functions: A list of functions the model may generate JSON inputs for.
            public init(
                messages: Components.Schemas.FineTuneChatRequestInput.MessagesPayload? = nil,
                tools: [Components.Schemas.ChatCompletionTool]? = nil,
                parallelToolCalls: Components.Schemas.ParallelToolCalls? = nil,
                functions: [Components.Schemas.ChatCompletionFunctions]? = nil
            ) {
                self.messages = messages
                self.tools = tools
                self.parallelToolCalls = parallelToolCalls
                self.functions = functions
            }
            public enum CodingKeys: String, CodingKey {
                case messages
                case tools
                case parallelToolCalls = "parallel_tool_calls"
                case functions
            }
        }
        /// The per-line training example of a fine-tuning input file for completions models
        ///
        /// - Remark: Generated from `#/components/schemas/FineTuneCompletionRequestInput`.
        public struct FineTuneCompletionRequestInput: Codable, Hashable, Sendable {
            /// The input prompt for this training example.
            ///
            /// - Remark: Generated from `#/components/schemas/FineTuneCompletionRequestInput/prompt`.
            public var prompt: Swift.String?
            /// The desired completion for this training example.
            ///
            /// - Remark: Generated from `#/components/schemas/FineTuneCompletionRequestInput/completion`.
            public var completion: Swift.String?
            /// Creates a new `FineTuneCompletionRequestInput`.
            ///
            /// - Parameters:
            ///   - prompt: The input prompt for this training example.
            ///   - completion: The desired completion for this training example.
            public init(
                prompt: Swift.String? = nil,
                completion: Swift.String? = nil
            ) {
                self.prompt = prompt
                self.completion = completion
            }
            public enum CodingKeys: String, CodingKey {
                case prompt
                case completion
            }
        }
        /// Configuration for the DPO fine-tuning method.
        ///
        /// - Remark: Generated from `#/components/schemas/FineTuneDPOMethod`.
        public struct FineTuneDPOMethod: Codable, Hashable, Sendable {
            /// The hyperparameters used for the fine-tuning job.
            ///
            /// - Remark: Generated from `#/components/schemas/FineTuneDPOMethod/hyperparameters`.
            public struct HyperparametersPayload: Codable, Hashable, Sendable {
                /// The beta value for the DPO method. A higher beta value will increase the weight of the penalty between the policy and reference model.
                ///
                ///
                /// - Remark: Generated from `#/components/schemas/FineTuneDPOMethod/hyperparameters/beta`.
                @frozen public enum BetaPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/FineTuneDPOMethod/hyperparameters/beta/case1`.
                    @frozen public enum Case1Payload: String, Codable, Hashable, Sendable, CaseIterable {
                        case auto = "auto"
                    }
                    /// - Remark: Generated from `#/components/schemas/FineTuneDPOMethod/hyperparameters/beta/case1`.
                    case case1(Components.Schemas.FineTuneDPOMethod.HyperparametersPayload.BetaPayload.Case1Payload)
                    /// - Remark: Generated from `#/components/schemas/FineTuneDPOMethod/hyperparameters/beta/case2`.
                    case case2(Swift.Double)
                    public init(from decoder: any Decoder) throws {
                        var errors: [any Error] = []
                        do {
                            self = .case1(try decoder.decodeFromSingleValueContainer())
                            return
                        } catch {
                            errors.append(error)
                        }
                        do {
                            self = .case2(try decoder.decodeFromSingleValueContainer())
                            return
                        } catch {
                            errors.append(error)
                        }
                        throw Swift.DecodingError.failedToDecodeOneOfSchema(
                            type: Self.self,
                            codingPath: decoder.codingPath,
                            errors: errors
                        )
                    }
                    public func encode(to encoder: any Encoder) throws {
                        switch self {
                        case let .case1(value):
                            try encoder.encodeToSingleValueContainer(value)
                        case let .case2(value):
                            try encoder.encodeToSingleValueContainer(value)
                        }
                    }
                }
                /// The beta value for the DPO method. A higher beta value will increase the weight of the penalty between the policy and reference model.
                ///
                ///
                /// - Remark: Generated from `#/components/schemas/FineTuneDPOMethod/hyperparameters/beta`.
                public var beta: Components.Schemas.FineTuneDPOMethod.HyperparametersPayload.BetaPayload?
                /// Number of examples in each batch. A larger batch size means that model parameters are updated less frequently, but with lower variance.
                ///
                ///
                /// - Remark: Generated from `#/components/schemas/FineTuneDPOMethod/hyperparameters/batch_size`.
                @frozen public enum BatchSizePayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/FineTuneDPOMethod/hyperparameters/batch_size/case1`.
                    @frozen public enum Case1Payload: String, Codable, Hashable, Sendable, CaseIterable {
                        case auto = "auto"
                    }
                    /// - Remark: Generated from `#/components/schemas/FineTuneDPOMethod/hyperparameters/batch_size/case1`.
                    case case1(Components.Schemas.FineTuneDPOMethod.HyperparametersPayload.BatchSizePayload.Case1Payload)
                    /// - Remark: Generated from `#/components/schemas/FineTuneDPOMethod/hyperparameters/batch_size/case2`.
                    case case2(Swift.Int)
                    public init(from decoder: any Decoder) throws {
                        var errors: [any Error] = []
                        do {
                            self = .case1(try decoder.decodeFromSingleValueContainer())
                            return
                        } catch {
                            errors.append(error)
                        }
                        do {
                            self = .case2(try decoder.decodeFromSingleValueContainer())
                            return
                        } catch {
                            errors.append(error)
                        }
                        throw Swift.DecodingError.failedToDecodeOneOfSchema(
                            type: Self.self,
                            codingPath: decoder.codingPath,
                            errors: errors
                        )
                    }
                    public func encode(to encoder: any Encoder) throws {
                        switch self {
                        case let .case1(value):
                            try encoder.encodeToSingleValueContainer(value)
                        case let .case2(value):
                            try encoder.encodeToSingleValueContainer(value)
                        }
                    }
                }
                /// Number of examples in each batch. A larger batch size means that model parameters are updated less frequently, but with lower variance.
                ///
                ///
                /// - Remark: Generated from `#/components/schemas/FineTuneDPOMethod/hyperparameters/batch_size`.
                public var batchSize: Components.Schemas.FineTuneDPOMethod.HyperparametersPayload.BatchSizePayload?
                /// Scaling factor for the learning rate. A smaller learning rate may be useful to avoid overfitting.
                ///
                ///
                /// - Remark: Generated from `#/components/schemas/FineTuneDPOMethod/hyperparameters/learning_rate_multiplier`.
                @frozen public enum LearningRateMultiplierPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/FineTuneDPOMethod/hyperparameters/learning_rate_multiplier/case1`.
                    @frozen public enum Case1Payload: String, Codable, Hashable, Sendable, CaseIterable {
                        case auto = "auto"
                    }
                    /// - Remark: Generated from `#/components/schemas/FineTuneDPOMethod/hyperparameters/learning_rate_multiplier/case1`.
                    case case1(Components.Schemas.FineTuneDPOMethod.HyperparametersPayload.LearningRateMultiplierPayload.Case1Payload)
                    /// - Remark: Generated from `#/components/schemas/FineTuneDPOMethod/hyperparameters/learning_rate_multiplier/case2`.
                    case case2(Swift.Double)
                    public init(from decoder: any Decoder) throws {
                        var errors: [any Error] = []
                        do {
                            self = .case1(try decoder.decodeFromSingleValueContainer())
                            return
                        } catch {
                            errors.append(error)
                        }
                        do {
                            self = .case2(try decoder.decodeFromSingleValueContainer())
                            return
                        } catch {
                            errors.append(error)
                        }
                        throw Swift.DecodingError.failedToDecodeOneOfSchema(
                            type: Self.self,
                            codingPath: decoder.codingPath,
                            errors: errors
                        )
                    }
                    public func encode(to encoder: any Encoder) throws {
                        switch self {
                        case let .case1(value):
                            try encoder.encodeToSingleValueContainer(value)
                        case let .case2(value):
                            try encoder.encodeToSingleValueContainer(value)
                        }
                    }
                }
                /// Scaling factor for the learning rate. A smaller learning rate may be useful to avoid overfitting.
                ///
                ///
                /// - Remark: Generated from `#/components/schemas/FineTuneDPOMethod/hyperparameters/learning_rate_multiplier`.
                public var learningRateMultiplier: Components.Schemas.FineTuneDPOMethod.HyperparametersPayload.LearningRateMultiplierPayload?
                /// The number of epochs to train the model for. An epoch refers to one full cycle through the training dataset.
                ///
                ///
                /// - Remark: Generated from `#/components/schemas/FineTuneDPOMethod/hyperparameters/n_epochs`.
                @frozen public enum NEpochsPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/FineTuneDPOMethod/hyperparameters/n_epochs/case1`.
                    @frozen public enum Case1Payload: String, Codable, Hashable, Sendable, CaseIterable {
                        case auto = "auto"
                    }
                    /// - Remark: Generated from `#/components/schemas/FineTuneDPOMethod/hyperparameters/n_epochs/case1`.
                    case case1(Components.Schemas.FineTuneDPOMethod.HyperparametersPayload.NEpochsPayload.Case1Payload)
                    /// - Remark: Generated from `#/components/schemas/FineTuneDPOMethod/hyperparameters/n_epochs/case2`.
                    case case2(Swift.Int)
                    public init(from decoder: any Decoder) throws {
                        var errors: [any Error] = []
                        do {
                            self = .case1(try decoder.decodeFromSingleValueContainer())
                            return
                        } catch {
                            errors.append(error)
                        }
                        do {
                            self = .case2(try decoder.decodeFromSingleValueContainer())
                            return
                        } catch {
                            errors.append(error)
                        }
                        throw Swift.DecodingError.failedToDecodeOneOfSchema(
                            type: Self.self,
                            codingPath: decoder.codingPath,
                            errors: errors
                        )
                    }
                    public func encode(to encoder: any Encoder) throws {
                        switch self {
                        case let .case1(value):
                            try encoder.encodeToSingleValueContainer(value)
                        case let .case2(value):
                            try encoder.encodeToSingleValueContainer(value)
                        }
                    }
                }
                /// The number of epochs to train the model for. An epoch refers to one full cycle through the training dataset.
                ///
                ///
                /// - Remark: Generated from `#/components/schemas/FineTuneDPOMethod/hyperparameters/n_epochs`.
                public var nEpochs: Components.Schemas.FineTuneDPOMethod.HyperparametersPayload.NEpochsPayload?
                /// Creates a new `HyperparametersPayload`.
                ///
                /// - Parameters:
                ///   - beta: The beta value for the DPO method. A higher beta value will increase the weight of the penalty between the policy and reference model.
                ///   - batchSize: Number of examples in each batch. A larger batch size means that model parameters are updated less frequently, but with lower variance.
                ///   - learningRateMultiplier: Scaling factor for the learning rate. A smaller learning rate may be useful to avoid overfitting.
                ///   - nEpochs: The number of epochs to train the model for. An epoch refers to one full cycle through the training dataset.
                public init(
                    beta: Components.Schemas.FineTuneDPOMethod.HyperparametersPayload.BetaPayload? = nil,
                    batchSize: Components.Schemas.FineTuneDPOMethod.HyperparametersPayload.BatchSizePayload? = nil,
                    learningRateMultiplier: Components.Schemas.FineTuneDPOMethod.HyperparametersPayload.LearningRateMultiplierPayload? = nil,
                    nEpochs: Components.Schemas.FineTuneDPOMethod.HyperparametersPayload.NEpochsPayload? = nil
                ) {
                    self.beta = beta
                    self.batchSize = batchSize
                    self.learningRateMultiplier = learningRateMultiplier
                    self.nEpochs = nEpochs
                }
                public enum CodingKeys: String, CodingKey {
                    case beta
                    case batchSize = "batch_size"
                    case learningRateMultiplier = "learning_rate_multiplier"
                    case nEpochs = "n_epochs"
                }
            }
            /// The hyperparameters used for the fine-tuning job.
            ///
            /// - Remark: Generated from `#/components/schemas/FineTuneDPOMethod/hyperparameters`.
            public var hyperparameters: Components.Schemas.FineTuneDPOMethod.HyperparametersPayload?
            /// Creates a new `FineTuneDPOMethod`.
            ///
            /// - Parameters:
            ///   - hyperparameters: The hyperparameters used for the fine-tuning job.
            public init(hyperparameters: Components.Schemas.FineTuneDPOMethod.HyperparametersPayload? = nil) {
                self.hyperparameters = hyperparameters
            }
            public enum CodingKeys: String, CodingKey {
                case hyperparameters
            }
        }
        /// The method used for fine-tuning.
        ///
        /// - Remark: Generated from `#/components/schemas/FineTuneMethod`.
        public struct FineTuneMethod: Codable, Hashable, Sendable {
            /// The type of method. Is either `supervised` or `dpo`.
            ///
            /// - Remark: Generated from `#/components/schemas/FineTuneMethod/type`.
            @frozen public enum _TypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                case supervised = "supervised"
                case dpo = "dpo"
            }
            /// The type of method. Is either `supervised` or `dpo`.
            ///
            /// - Remark: Generated from `#/components/schemas/FineTuneMethod/type`.
            public var _type: Components.Schemas.FineTuneMethod._TypePayload?
            /// - Remark: Generated from `#/components/schemas/FineTuneMethod/supervised`.
            public var supervised: Components.Schemas.FineTuneSupervisedMethod?
            /// - Remark: Generated from `#/components/schemas/FineTuneMethod/dpo`.
            public var dpo: Components.Schemas.FineTuneDPOMethod?
            /// Creates a new `FineTuneMethod`.
            ///
            /// - Parameters:
            ///   - _type: The type of method. Is either `supervised` or `dpo`.
            ///   - supervised:
            ///   - dpo:
            public init(
                _type: Components.Schemas.FineTuneMethod._TypePayload? = nil,
                supervised: Components.Schemas.FineTuneSupervisedMethod? = nil,
                dpo: Components.Schemas.FineTuneDPOMethod? = nil
            ) {
                self._type = _type
                self.supervised = supervised
                self.dpo = dpo
            }
            public enum CodingKeys: String, CodingKey {
                case _type = "type"
                case supervised
                case dpo
            }
        }
        /// The per-line training example of a fine-tuning input file for chat models using the dpo method.
        ///
        /// - Remark: Generated from `#/components/schemas/FineTunePreferenceRequestInput`.
        public struct FineTunePreferenceRequestInput: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/FineTunePreferenceRequestInput/input`.
            public struct InputPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/FineTunePreferenceRequestInput/input/MessagesPayload`.
                @frozen public enum MessagesPayloadPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/FineTunePreferenceRequestInput/input/MessagesPayload/case1`.
                    case ChatCompletionRequestSystemMessage(Components.Schemas.ChatCompletionRequestSystemMessage)
                    /// - Remark: Generated from `#/components/schemas/FineTunePreferenceRequestInput/input/MessagesPayload/case2`.
                    case ChatCompletionRequestUserMessage(Components.Schemas.ChatCompletionRequestUserMessage)
                    /// - Remark: Generated from `#/components/schemas/FineTunePreferenceRequestInput/input/MessagesPayload/case3`.
                    case FineTuneChatCompletionRequestAssistantMessage(Components.Schemas.FineTuneChatCompletionRequestAssistantMessage)
                    /// - Remark: Generated from `#/components/schemas/FineTunePreferenceRequestInput/input/MessagesPayload/case4`.
                    case ChatCompletionRequestToolMessage(Components.Schemas.ChatCompletionRequestToolMessage)
                    /// - Remark: Generated from `#/components/schemas/FineTunePreferenceRequestInput/input/MessagesPayload/case5`.
                    case ChatCompletionRequestFunctionMessage(Components.Schemas.ChatCompletionRequestFunctionMessage)
                    public init(from decoder: any Decoder) throws {
                        var errors: [any Error] = []
                        do {
                            self = .ChatCompletionRequestSystemMessage(try .init(from: decoder))
                            return
                        } catch {
                            errors.append(error)
                        }
                        do {
                            self = .ChatCompletionRequestUserMessage(try .init(from: decoder))
                            return
                        } catch {
                            errors.append(error)
                        }
                        do {
                            self = .FineTuneChatCompletionRequestAssistantMessage(try .init(from: decoder))
                            return
                        } catch {
                            errors.append(error)
                        }
                        do {
                            self = .ChatCompletionRequestToolMessage(try .init(from: decoder))
                            return
                        } catch {
                            errors.append(error)
                        }
                        do {
                            self = .ChatCompletionRequestFunctionMessage(try .init(from: decoder))
                            return
                        } catch {
                            errors.append(error)
                        }
                        throw Swift.DecodingError.failedToDecodeOneOfSchema(
                            type: Self.self,
                            codingPath: decoder.codingPath,
                            errors: errors
                        )
                    }
                    public func encode(to encoder: any Encoder) throws {
                        switch self {
                        case let .ChatCompletionRequestSystemMessage(value):
                            try value.encode(to: encoder)
                        case let .ChatCompletionRequestUserMessage(value):
                            try value.encode(to: encoder)
                        case let .FineTuneChatCompletionRequestAssistantMessage(value):
                            try value.encode(to: encoder)
                        case let .ChatCompletionRequestToolMessage(value):
                            try value.encode(to: encoder)
                        case let .ChatCompletionRequestFunctionMessage(value):
                            try value.encode(to: encoder)
                        }
                    }
                }
                /// - Remark: Generated from `#/components/schemas/FineTunePreferenceRequestInput/input/messages`.
                public typealias MessagesPayload = [Components.Schemas.FineTunePreferenceRequestInput.InputPayload.MessagesPayloadPayload]
                /// - Remark: Generated from `#/components/schemas/FineTunePreferenceRequestInput/input/messages`.
                public var messages: Components.Schemas.FineTunePreferenceRequestInput.InputPayload.MessagesPayload?
                /// A list of tools the model may generate JSON inputs for.
                ///
                /// - Remark: Generated from `#/components/schemas/FineTunePreferenceRequestInput/input/tools`.
                public var tools: [Components.Schemas.ChatCompletionTool]?
                /// - Remark: Generated from `#/components/schemas/FineTunePreferenceRequestInput/input/parallel_tool_calls`.
                public var parallelToolCalls: Components.Schemas.ParallelToolCalls?
                /// Creates a new `InputPayload`.
                ///
                /// - Parameters:
                ///   - messages:
                ///   - tools: A list of tools the model may generate JSON inputs for.
                ///   - parallelToolCalls:
                public init(
                    messages: Components.Schemas.FineTunePreferenceRequestInput.InputPayload.MessagesPayload? = nil,
                    tools: [Components.Schemas.ChatCompletionTool]? = nil,
                    parallelToolCalls: Components.Schemas.ParallelToolCalls? = nil
                ) {
                    self.messages = messages
                    self.tools = tools
                    self.parallelToolCalls = parallelToolCalls
                }
                public enum CodingKeys: String, CodingKey {
                    case messages
                    case tools
                    case parallelToolCalls = "parallel_tool_calls"
                }
            }
            /// - Remark: Generated from `#/components/schemas/FineTunePreferenceRequestInput/input`.
            public var input: Components.Schemas.FineTunePreferenceRequestInput.InputPayload?
            /// - Remark: Generated from `#/components/schemas/FineTunePreferenceRequestInput/PreferredCompletionPayload`.
            @frozen public enum PreferredCompletionPayloadPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/FineTunePreferenceRequestInput/PreferredCompletionPayload/case1`.
                case ChatCompletionRequestAssistantMessage(Components.Schemas.ChatCompletionRequestAssistantMessage)
                public init(from decoder: any Decoder) throws {
                    var errors: [any Error] = []
                    do {
                        self = .ChatCompletionRequestAssistantMessage(try .init(from: decoder))
                        return
                    } catch {
                        errors.append(error)
                    }
                    throw Swift.DecodingError.failedToDecodeOneOfSchema(
                        type: Self.self,
                        codingPath: decoder.codingPath,
                        errors: errors
                    )
                }
                public func encode(to encoder: any Encoder) throws {
                    switch self {
                    case let .ChatCompletionRequestAssistantMessage(value):
                        try value.encode(to: encoder)
                    }
                }
            }
            /// The preferred completion message for the output.
            ///
            /// - Remark: Generated from `#/components/schemas/FineTunePreferenceRequestInput/preferred_completion`.
            public typealias PreferredCompletionPayload = [Components.Schemas.FineTunePreferenceRequestInput.PreferredCompletionPayloadPayload]
            /// The preferred completion message for the output.
            ///
            /// - Remark: Generated from `#/components/schemas/FineTunePreferenceRequestInput/preferred_completion`.
            public var preferredCompletion: Components.Schemas.FineTunePreferenceRequestInput.PreferredCompletionPayload?
            /// - Remark: Generated from `#/components/schemas/FineTunePreferenceRequestInput/NonPreferredCompletionPayload`.
            @frozen public enum NonPreferredCompletionPayloadPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/FineTunePreferenceRequestInput/NonPreferredCompletionPayload/case1`.
                case ChatCompletionRequestAssistantMessage(Components.Schemas.ChatCompletionRequestAssistantMessage)
                public init(from decoder: any Decoder) throws {
                    var errors: [any Error] = []
                    do {
                        self = .ChatCompletionRequestAssistantMessage(try .init(from: decoder))
                        return
                    } catch {
                        errors.append(error)
                    }
                    throw Swift.DecodingError.failedToDecodeOneOfSchema(
                        type: Self.self,
                        codingPath: decoder.codingPath,
                        errors: errors
                    )
                }
                public func encode(to encoder: any Encoder) throws {
                    switch self {
                    case let .ChatCompletionRequestAssistantMessage(value):
                        try value.encode(to: encoder)
                    }
                }
            }
            /// The non-preferred completion message for the output.
            ///
            /// - Remark: Generated from `#/components/schemas/FineTunePreferenceRequestInput/non_preferred_completion`.
            public typealias NonPreferredCompletionPayload = [Components.Schemas.FineTunePreferenceRequestInput.NonPreferredCompletionPayloadPayload]
            /// The non-preferred completion message for the output.
            ///
            /// - Remark: Generated from `#/components/schemas/FineTunePreferenceRequestInput/non_preferred_completion`.
            public var nonPreferredCompletion: Components.Schemas.FineTunePreferenceRequestInput.NonPreferredCompletionPayload?
            /// Creates a new `FineTunePreferenceRequestInput`.
            ///
            /// - Parameters:
            ///   - input:
            ///   - preferredCompletion: The preferred completion message for the output.
            ///   - nonPreferredCompletion: The non-preferred completion message for the output.
            public init(
                input: Components.Schemas.FineTunePreferenceRequestInput.InputPayload? = nil,
                preferredCompletion: Components.Schemas.FineTunePreferenceRequestInput.PreferredCompletionPayload? = nil,
                nonPreferredCompletion: Components.Schemas.FineTunePreferenceRequestInput.NonPreferredCompletionPayload? = nil
            ) {
                self.input = input
                self.preferredCompletion = preferredCompletion
                self.nonPreferredCompletion = nonPreferredCompletion
            }
            public enum CodingKeys: String, CodingKey {
                case input
                case preferredCompletion = "preferred_completion"
                case nonPreferredCompletion = "non_preferred_completion"
            }
        }
        /// Configuration for the supervised fine-tuning method.
        ///
        /// - Remark: Generated from `#/components/schemas/FineTuneSupervisedMethod`.
        public struct FineTuneSupervisedMethod: Codable, Hashable, Sendable {
            /// The hyperparameters used for the fine-tuning job.
            ///
            /// - Remark: Generated from `#/components/schemas/FineTuneSupervisedMethod/hyperparameters`.
            public struct HyperparametersPayload: Codable, Hashable, Sendable {
                /// Number of examples in each batch. A larger batch size means that model parameters are updated less frequently, but with lower variance.
                ///
                ///
                /// - Remark: Generated from `#/components/schemas/FineTuneSupervisedMethod/hyperparameters/batch_size`.
                @frozen public enum BatchSizePayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/FineTuneSupervisedMethod/hyperparameters/batch_size/case1`.
                    @frozen public enum Case1Payload: String, Codable, Hashable, Sendable, CaseIterable {
                        case auto = "auto"
                    }
                    /// - Remark: Generated from `#/components/schemas/FineTuneSupervisedMethod/hyperparameters/batch_size/case1`.
                    case case1(Components.Schemas.FineTuneSupervisedMethod.HyperparametersPayload.BatchSizePayload.Case1Payload)
                    /// - Remark: Generated from `#/components/schemas/FineTuneSupervisedMethod/hyperparameters/batch_size/case2`.
                    case case2(Swift.Int)
                    public init(from decoder: any Decoder) throws {
                        var errors: [any Error] = []
                        do {
                            self = .case1(try decoder.decodeFromSingleValueContainer())
                            return
                        } catch {
                            errors.append(error)
                        }
                        do {
                            self = .case2(try decoder.decodeFromSingleValueContainer())
                            return
                        } catch {
                            errors.append(error)
                        }
                        throw Swift.DecodingError.failedToDecodeOneOfSchema(
                            type: Self.self,
                            codingPath: decoder.codingPath,
                            errors: errors
                        )
                    }
                    public func encode(to encoder: any Encoder) throws {
                        switch self {
                        case let .case1(value):
                            try encoder.encodeToSingleValueContainer(value)
                        case let .case2(value):
                            try encoder.encodeToSingleValueContainer(value)
                        }
                    }
                }
                /// Number of examples in each batch. A larger batch size means that model parameters are updated less frequently, but with lower variance.
                ///
                ///
                /// - Remark: Generated from `#/components/schemas/FineTuneSupervisedMethod/hyperparameters/batch_size`.
                public var batchSize: Components.Schemas.FineTuneSupervisedMethod.HyperparametersPayload.BatchSizePayload?
                /// Scaling factor for the learning rate. A smaller learning rate may be useful to avoid overfitting.
                ///
                ///
                /// - Remark: Generated from `#/components/schemas/FineTuneSupervisedMethod/hyperparameters/learning_rate_multiplier`.
                @frozen public enum LearningRateMultiplierPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/FineTuneSupervisedMethod/hyperparameters/learning_rate_multiplier/case1`.
                    @frozen public enum Case1Payload: String, Codable, Hashable, Sendable, CaseIterable {
                        case auto = "auto"
                    }
                    /// - Remark: Generated from `#/components/schemas/FineTuneSupervisedMethod/hyperparameters/learning_rate_multiplier/case1`.
                    case case1(Components.Schemas.FineTuneSupervisedMethod.HyperparametersPayload.LearningRateMultiplierPayload.Case1Payload)
                    /// - Remark: Generated from `#/components/schemas/FineTuneSupervisedMethod/hyperparameters/learning_rate_multiplier/case2`.
                    case case2(Swift.Double)
                    public init(from decoder: any Decoder) throws {
                        var errors: [any Error] = []
                        do {
                            self = .case1(try decoder.decodeFromSingleValueContainer())
                            return
                        } catch {
                            errors.append(error)
                        }
                        do {
                            self = .case2(try decoder.decodeFromSingleValueContainer())
                            return
                        } catch {
                            errors.append(error)
                        }
                        throw Swift.DecodingError.failedToDecodeOneOfSchema(
                            type: Self.self,
                            codingPath: decoder.codingPath,
                            errors: errors
                        )
                    }
                    public func encode(to encoder: any Encoder) throws {
                        switch self {
                        case let .case1(value):
                            try encoder.encodeToSingleValueContainer(value)
                        case let .case2(value):
                            try encoder.encodeToSingleValueContainer(value)
                        }
                    }
                }
                /// Scaling factor for the learning rate. A smaller learning rate may be useful to avoid overfitting.
                ///
                ///
                /// - Remark: Generated from `#/components/schemas/FineTuneSupervisedMethod/hyperparameters/learning_rate_multiplier`.
                public var learningRateMultiplier: Components.Schemas.FineTuneSupervisedMethod.HyperparametersPayload.LearningRateMultiplierPayload?
                /// The number of epochs to train the model for. An epoch refers to one full cycle through the training dataset.
                ///
                ///
                /// - Remark: Generated from `#/components/schemas/FineTuneSupervisedMethod/hyperparameters/n_epochs`.
                @frozen public enum NEpochsPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/FineTuneSupervisedMethod/hyperparameters/n_epochs/case1`.
                    @frozen public enum Case1Payload: String, Codable, Hashable, Sendable, CaseIterable {
                        case auto = "auto"
                    }
                    /// - Remark: Generated from `#/components/schemas/FineTuneSupervisedMethod/hyperparameters/n_epochs/case1`.
                    case case1(Components.Schemas.FineTuneSupervisedMethod.HyperparametersPayload.NEpochsPayload.Case1Payload)
                    /// - Remark: Generated from `#/components/schemas/FineTuneSupervisedMethod/hyperparameters/n_epochs/case2`.
                    case case2(Swift.Int)
                    public init(from decoder: any Decoder) throws {
                        var errors: [any Error] = []
                        do {
                            self = .case1(try decoder.decodeFromSingleValueContainer())
                            return
                        } catch {
                            errors.append(error)
                        }
                        do {
                            self = .case2(try decoder.decodeFromSingleValueContainer())
                            return
                        } catch {
                            errors.append(error)
                        }
                        throw Swift.DecodingError.failedToDecodeOneOfSchema(
                            type: Self.self,
                            codingPath: decoder.codingPath,
                            errors: errors
                        )
                    }
                    public func encode(to encoder: any Encoder) throws {
                        switch self {
                        case let .case1(value):
                            try encoder.encodeToSingleValueContainer(value)
                        case let .case2(value):
                            try encoder.encodeToSingleValueContainer(value)
                        }
                    }
                }
                /// The number of epochs to train the model for. An epoch refers to one full cycle through the training dataset.
                ///
                ///
                /// - Remark: Generated from `#/components/schemas/FineTuneSupervisedMethod/hyperparameters/n_epochs`.
                public var nEpochs: Components.Schemas.FineTuneSupervisedMethod.HyperparametersPayload.NEpochsPayload?
                /// Creates a new `HyperparametersPayload`.
                ///
                /// - Parameters:
                ///   - batchSize: Number of examples in each batch. A larger batch size means that model parameters are updated less frequently, but with lower variance.
                ///   - learningRateMultiplier: Scaling factor for the learning rate. A smaller learning rate may be useful to avoid overfitting.
                ///   - nEpochs: The number of epochs to train the model for. An epoch refers to one full cycle through the training dataset.
                public init(
                    batchSize: Components.Schemas.FineTuneSupervisedMethod.HyperparametersPayload.BatchSizePayload? = nil,
                    learningRateMultiplier: Components.Schemas.FineTuneSupervisedMethod.HyperparametersPayload.LearningRateMultiplierPayload? = nil,
                    nEpochs: Components.Schemas.FineTuneSupervisedMethod.HyperparametersPayload.NEpochsPayload? = nil
                ) {
                    self.batchSize = batchSize
                    self.learningRateMultiplier = learningRateMultiplier
                    self.nEpochs = nEpochs
                }
                public enum CodingKeys: String, CodingKey {
                    case batchSize = "batch_size"
                    case learningRateMultiplier = "learning_rate_multiplier"
                    case nEpochs = "n_epochs"
                }
            }
            /// The hyperparameters used for the fine-tuning job.
            ///
            /// - Remark: Generated from `#/components/schemas/FineTuneSupervisedMethod/hyperparameters`.
            public var hyperparameters: Components.Schemas.FineTuneSupervisedMethod.HyperparametersPayload?
            /// Creates a new `FineTuneSupervisedMethod`.
            ///
            /// - Parameters:
            ///   - hyperparameters: The hyperparameters used for the fine-tuning job.
            public init(hyperparameters: Components.Schemas.FineTuneSupervisedMethod.HyperparametersPayload? = nil) {
                self.hyperparameters = hyperparameters
            }
            public enum CodingKeys: String, CodingKey {
                case hyperparameters
            }
        }
        /// - Remark: Generated from `#/components/schemas/FineTuningIntegration`.
        public struct FineTuningIntegration: Codable, Hashable, Sendable {
            /// The type of the integration being enabled for the fine-tuning job
            ///
            /// - Remark: Generated from `#/components/schemas/FineTuningIntegration/type`.
            @frozen public enum _TypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                case wandb = "wandb"
            }
            /// The type of the integration being enabled for the fine-tuning job
            ///
            /// - Remark: Generated from `#/components/schemas/FineTuningIntegration/type`.
            public var _type: Components.Schemas.FineTuningIntegration._TypePayload
            /// The settings for your integration with Weights and Biases. This payload specifies the project that
            /// metrics will be sent to. Optionally, you can set an explicit display name for your run, add tags
            /// to your run, and set a default entity (team, username, etc) to be associated with your run.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/FineTuningIntegration/wandb`.
            public struct WandbPayload: Codable, Hashable, Sendable {
                /// The name of the project that the new run will be created under.
                ///
                ///
                /// - Remark: Generated from `#/components/schemas/FineTuningIntegration/wandb/project`.
                public var project: Swift.String
                /// A display name to set for the run. If not set, we will use the Job ID as the name.
                ///
                ///
                /// - Remark: Generated from `#/components/schemas/FineTuningIntegration/wandb/name`.
                public var name: Swift.String?
                /// The entity to use for the run. This allows you to set the team or username of the WandB user that you would
                /// like associated with the run. If not set, the default entity for the registered WandB API key is used.
                ///
                ///
                /// - Remark: Generated from `#/components/schemas/FineTuningIntegration/wandb/entity`.
                public var entity: Swift.String?
                /// A list of tags to be attached to the newly created run. These tags are passed through directly to WandB. Some
                /// default tags are generated by OpenAI: "openai/finetune", "openai/{base-model}", "openai/{ftjob-abcdef}".
                ///
                ///
                /// - Remark: Generated from `#/components/schemas/FineTuningIntegration/wandb/tags`.
                public var tags: [Swift.String]?
                /// Creates a new `WandbPayload`.
                ///
                /// - Parameters:
                ///   - project: The name of the project that the new run will be created under.
                ///   - name: A display name to set for the run. If not set, we will use the Job ID as the name.
                ///   - entity: The entity to use for the run. This allows you to set the team or username of the WandB user that you would
                ///   - tags: A list of tags to be attached to the newly created run. These tags are passed through directly to WandB. Some
                public init(
                    project: Swift.String,
                    name: Swift.String? = nil,
                    entity: Swift.String? = nil,
                    tags: [Swift.String]? = nil
                ) {
                    self.project = project
                    self.name = name
                    self.entity = entity
                    self.tags = tags
                }
                public enum CodingKeys: String, CodingKey {
                    case project
                    case name
                    case entity
                    case tags
                }
            }
            /// The settings for your integration with Weights and Biases. This payload specifies the project that
            /// metrics will be sent to. Optionally, you can set an explicit display name for your run, add tags
            /// to your run, and set a default entity (team, username, etc) to be associated with your run.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/FineTuningIntegration/wandb`.
            public var wandb: Components.Schemas.FineTuningIntegration.WandbPayload
            /// Creates a new `FineTuningIntegration`.
            ///
            /// - Parameters:
            ///   - _type: The type of the integration being enabled for the fine-tuning job
            ///   - wandb: The settings for your integration with Weights and Biases. This payload specifies the project that
            public init(
                _type: Components.Schemas.FineTuningIntegration._TypePayload,
                wandb: Components.Schemas.FineTuningIntegration.WandbPayload
            ) {
                self._type = _type
                self.wandb = wandb
            }
            public enum CodingKeys: String, CodingKey {
                case _type = "type"
                case wandb
            }
        }
        /// The `fine_tuning.job` object represents a fine-tuning job that has been created through the API.
        ///
        ///
        /// - Remark: Generated from `#/components/schemas/FineTuningJob`.
        public struct FineTuningJob: Codable, Hashable, Sendable {
            /// The object identifier, which can be referenced in the API endpoints.
            ///
            /// - Remark: Generated from `#/components/schemas/FineTuningJob/id`.
            public var id: Swift.String
            /// The Unix timestamp (in seconds) for when the fine-tuning job was created.
            ///
            /// - Remark: Generated from `#/components/schemas/FineTuningJob/created_at`.
            public var createdAt: Swift.Int
            /// For fine-tuning jobs that have `failed`, this will contain more information on the cause of the failure.
            ///
            /// - Remark: Generated from `#/components/schemas/FineTuningJob/error`.
            public struct _ErrorPayload: Codable, Hashable, Sendable {
                /// A machine-readable error code.
                ///
                /// - Remark: Generated from `#/components/schemas/FineTuningJob/error/code`.
                public var code: Swift.String
                /// A human-readable error message.
                ///
                /// - Remark: Generated from `#/components/schemas/FineTuningJob/error/message`.
                public var message: Swift.String
                /// The parameter that was invalid, usually `training_file` or `validation_file`. This field will be null if the failure was not parameter-specific.
                ///
                /// - Remark: Generated from `#/components/schemas/FineTuningJob/error/param`.
                public var param: Swift.String?
                /// Creates a new `_ErrorPayload`.
                ///
                /// - Parameters:
                ///   - code: A machine-readable error code.
                ///   - message: A human-readable error message.
                ///   - param: The parameter that was invalid, usually `training_file` or `validation_file`. This field will be null if the failure was not parameter-specific.
                public init(
                    code: Swift.String,
                    message: Swift.String,
                    param: Swift.String? = nil
                ) {
                    self.code = code
                    self.message = message
                    self.param = param
                }
                public enum CodingKeys: String, CodingKey {
                    case code
                    case message
                    case param
                }
            }
            /// For fine-tuning jobs that have `failed`, this will contain more information on the cause of the failure.
            ///
            /// - Remark: Generated from `#/components/schemas/FineTuningJob/error`.
            public var error: Components.Schemas.FineTuningJob._ErrorPayload?
            /// The name of the fine-tuned model that is being created. The value will be null if the fine-tuning job is still running.
            ///
            /// - Remark: Generated from `#/components/schemas/FineTuningJob/fine_tuned_model`.
            public var fineTunedModel: Swift.String?
            /// The Unix timestamp (in seconds) for when the fine-tuning job was finished. The value will be null if the fine-tuning job is still running.
            ///
            /// - Remark: Generated from `#/components/schemas/FineTuningJob/finished_at`.
            public var finishedAt: Swift.Int?
            /// The hyperparameters used for the fine-tuning job. This value will only be returned when running `supervised` jobs.
            ///
            /// - Remark: Generated from `#/components/schemas/FineTuningJob/hyperparameters`.
            public struct HyperparametersPayload: Codable, Hashable, Sendable {
                /// Number of examples in each batch. A larger batch size means that model parameters
                /// are updated less frequently, but with lower variance.
                ///
                ///
                /// - Remark: Generated from `#/components/schemas/FineTuningJob/hyperparameters/batch_size`.
                @frozen public enum BatchSizePayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/FineTuningJob/hyperparameters/batch_size/case1`.
                    @frozen public enum Case1Payload: String, Codable, Hashable, Sendable, CaseIterable {
                        case auto = "auto"
                    }
                    /// - Remark: Generated from `#/components/schemas/FineTuningJob/hyperparameters/batch_size/case1`.
                    case case1(Components.Schemas.FineTuningJob.HyperparametersPayload.BatchSizePayload.Case1Payload)
                    /// - Remark: Generated from `#/components/schemas/FineTuningJob/hyperparameters/batch_size/case2`.
                    case case2(Swift.Int)
                    public init(from decoder: any Decoder) throws {
                        var errors: [any Error] = []
                        do {
                            self = .case1(try decoder.decodeFromSingleValueContainer())
                            return
                        } catch {
                            errors.append(error)
                        }
                        do {
                            self = .case2(try decoder.decodeFromSingleValueContainer())
                            return
                        } catch {
                            errors.append(error)
                        }
                        throw Swift.DecodingError.failedToDecodeOneOfSchema(
                            type: Self.self,
                            codingPath: decoder.codingPath,
                            errors: errors
                        )
                    }
                    public func encode(to encoder: any Encoder) throws {
                        switch self {
                        case let .case1(value):
                            try encoder.encodeToSingleValueContainer(value)
                        case let .case2(value):
                            try encoder.encodeToSingleValueContainer(value)
                        }
                    }
                }
                /// Number of examples in each batch. A larger batch size means that model parameters
                /// are updated less frequently, but with lower variance.
                ///
                ///
                /// - Remark: Generated from `#/components/schemas/FineTuningJob/hyperparameters/batch_size`.
                public var batchSize: Components.Schemas.FineTuningJob.HyperparametersPayload.BatchSizePayload?
                /// Scaling factor for the learning rate. A smaller learning rate may be useful to avoid
                /// overfitting.
                ///
                ///
                /// - Remark: Generated from `#/components/schemas/FineTuningJob/hyperparameters/learning_rate_multiplier`.
                @frozen public enum LearningRateMultiplierPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/FineTuningJob/hyperparameters/learning_rate_multiplier/case1`.
                    @frozen public enum Case1Payload: String, Codable, Hashable, Sendable, CaseIterable {
                        case auto = "auto"
                    }
                    /// - Remark: Generated from `#/components/schemas/FineTuningJob/hyperparameters/learning_rate_multiplier/case1`.
                    case case1(Components.Schemas.FineTuningJob.HyperparametersPayload.LearningRateMultiplierPayload.Case1Payload)
                    /// - Remark: Generated from `#/components/schemas/FineTuningJob/hyperparameters/learning_rate_multiplier/case2`.
                    case case2(Swift.Double)
                    public init(from decoder: any Decoder) throws {
                        var errors: [any Error] = []
                        do {
                            self = .case1(try decoder.decodeFromSingleValueContainer())
                            return
                        } catch {
                            errors.append(error)
                        }
                        do {
                            self = .case2(try decoder.decodeFromSingleValueContainer())
                            return
                        } catch {
                            errors.append(error)
                        }
                        throw Swift.DecodingError.failedToDecodeOneOfSchema(
                            type: Self.self,
                            codingPath: decoder.codingPath,
                            errors: errors
                        )
                    }
                    public func encode(to encoder: any Encoder) throws {
                        switch self {
                        case let .case1(value):
                            try encoder.encodeToSingleValueContainer(value)
                        case let .case2(value):
                            try encoder.encodeToSingleValueContainer(value)
                        }
                    }
                }
                /// Scaling factor for the learning rate. A smaller learning rate may be useful to avoid
                /// overfitting.
                ///
                ///
                /// - Remark: Generated from `#/components/schemas/FineTuningJob/hyperparameters/learning_rate_multiplier`.
                public var learningRateMultiplier: Components.Schemas.FineTuningJob.HyperparametersPayload.LearningRateMultiplierPayload?
                /// The number of epochs to train the model for. An epoch refers to one full cycle
                /// through the training dataset.
                ///
                ///
                /// - Remark: Generated from `#/components/schemas/FineTuningJob/hyperparameters/n_epochs`.
                @frozen public enum NEpochsPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/FineTuningJob/hyperparameters/n_epochs/case1`.
                    @frozen public enum Case1Payload: String, Codable, Hashable, Sendable, CaseIterable {
                        case auto = "auto"
                    }
                    /// - Remark: Generated from `#/components/schemas/FineTuningJob/hyperparameters/n_epochs/case1`.
                    case case1(Components.Schemas.FineTuningJob.HyperparametersPayload.NEpochsPayload.Case1Payload)
                    /// - Remark: Generated from `#/components/schemas/FineTuningJob/hyperparameters/n_epochs/case2`.
                    case case2(Swift.Int)
                    public init(from decoder: any Decoder) throws {
                        var errors: [any Error] = []
                        do {
                            self = .case1(try decoder.decodeFromSingleValueContainer())
                            return
                        } catch {
                            errors.append(error)
                        }
                        do {
                            self = .case2(try decoder.decodeFromSingleValueContainer())
                            return
                        } catch {
                            errors.append(error)
                        }
                        throw Swift.DecodingError.failedToDecodeOneOfSchema(
                            type: Self.self,
                            codingPath: decoder.codingPath,
                            errors: errors
                        )
                    }
                    public func encode(to encoder: any Encoder) throws {
                        switch self {
                        case let .case1(value):
                            try encoder.encodeToSingleValueContainer(value)
                        case let .case2(value):
                            try encoder.encodeToSingleValueContainer(value)
                        }
                    }
                }
                /// The number of epochs to train the model for. An epoch refers to one full cycle
                /// through the training dataset.
                ///
                ///
                /// - Remark: Generated from `#/components/schemas/FineTuningJob/hyperparameters/n_epochs`.
                public var nEpochs: Components.Schemas.FineTuningJob.HyperparametersPayload.NEpochsPayload?
                /// Creates a new `HyperparametersPayload`.
                ///
                /// - Parameters:
                ///   - batchSize: Number of examples in each batch. A larger batch size means that model parameters
                ///   - learningRateMultiplier: Scaling factor for the learning rate. A smaller learning rate may be useful to avoid
                ///   - nEpochs: The number of epochs to train the model for. An epoch refers to one full cycle
                public init(
                    batchSize: Components.Schemas.FineTuningJob.HyperparametersPayload.BatchSizePayload? = nil,
                    learningRateMultiplier: Components.Schemas.FineTuningJob.HyperparametersPayload.LearningRateMultiplierPayload? = nil,
                    nEpochs: Components.Schemas.FineTuningJob.HyperparametersPayload.NEpochsPayload? = nil
                ) {
                    self.batchSize = batchSize
                    self.learningRateMultiplier = learningRateMultiplier
                    self.nEpochs = nEpochs
                }
                public enum CodingKeys: String, CodingKey {
                    case batchSize = "batch_size"
                    case learningRateMultiplier = "learning_rate_multiplier"
                    case nEpochs = "n_epochs"
                }
            }
            /// The hyperparameters used for the fine-tuning job. This value will only be returned when running `supervised` jobs.
            ///
            /// - Remark: Generated from `#/components/schemas/FineTuningJob/hyperparameters`.
            public var hyperparameters: Components.Schemas.FineTuningJob.HyperparametersPayload
            /// The base model that is being fine-tuned.
            ///
            /// - Remark: Generated from `#/components/schemas/FineTuningJob/model`.
            public var model: Swift.String
            /// The object type, which is always "fine_tuning.job".
            ///
            /// - Remark: Generated from `#/components/schemas/FineTuningJob/object`.
            @frozen public enum ObjectPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case fineTuning_job = "fine_tuning.job"
            }
            /// The object type, which is always "fine_tuning.job".
            ///
            /// - Remark: Generated from `#/components/schemas/FineTuningJob/object`.
            public var object: Components.Schemas.FineTuningJob.ObjectPayload
            /// The organization that owns the fine-tuning job.
            ///
            /// - Remark: Generated from `#/components/schemas/FineTuningJob/organization_id`.
            public var organizationId: Swift.String
            /// The compiled results file ID(s) for the fine-tuning job. You can retrieve the results with the [Files API](/docs/api-reference/files/retrieve-contents).
            ///
            /// - Remark: Generated from `#/components/schemas/FineTuningJob/result_files`.
            public var resultFiles: [Swift.String]
            /// The current status of the fine-tuning job, which can be either `validating_files`, `queued`, `running`, `succeeded`, `failed`, or `cancelled`.
            ///
            /// - Remark: Generated from `#/components/schemas/FineTuningJob/status`.
            @frozen public enum StatusPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case validatingFiles = "validating_files"
                case queued = "queued"
                case running = "running"
                case succeeded = "succeeded"
                case failed = "failed"
                case cancelled = "cancelled"
            }
            /// The current status of the fine-tuning job, which can be either `validating_files`, `queued`, `running`, `succeeded`, `failed`, or `cancelled`.
            ///
            /// - Remark: Generated from `#/components/schemas/FineTuningJob/status`.
            public var status: Components.Schemas.FineTuningJob.StatusPayload
            /// The total number of billable tokens processed by this fine-tuning job. The value will be null if the fine-tuning job is still running.
            ///
            /// - Remark: Generated from `#/components/schemas/FineTuningJob/trained_tokens`.
            public var trainedTokens: Swift.Int?
            /// The file ID used for training. You can retrieve the training data with the [Files API](/docs/api-reference/files/retrieve-contents).
            ///
            /// - Remark: Generated from `#/components/schemas/FineTuningJob/training_file`.
            public var trainingFile: Swift.String
            /// The file ID used for validation. You can retrieve the validation results with the [Files API](/docs/api-reference/files/retrieve-contents).
            ///
            /// - Remark: Generated from `#/components/schemas/FineTuningJob/validation_file`.
            public var validationFile: Swift.String?
            /// - Remark: Generated from `#/components/schemas/FineTuningJob/IntegrationsPayload`.
            @frozen public enum IntegrationsPayloadPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/FineTuningJob/IntegrationsPayload/case1`.
                case FineTuningIntegration(Components.Schemas.FineTuningIntegration)
                public init(from decoder: any Decoder) throws {
                    var errors: [any Error] = []
                    do {
                        self = .FineTuningIntegration(try .init(from: decoder))
                        return
                    } catch {
                        errors.append(error)
                    }
                    throw Swift.DecodingError.failedToDecodeOneOfSchema(
                        type: Self.self,
                        codingPath: decoder.codingPath,
                        errors: errors
                    )
                }
                public func encode(to encoder: any Encoder) throws {
                    switch self {
                    case let .FineTuningIntegration(value):
                        try value.encode(to: encoder)
                    }
                }
            }
            /// A list of integrations to enable for this fine-tuning job.
            ///
            /// - Remark: Generated from `#/components/schemas/FineTuningJob/integrations`.
            public typealias IntegrationsPayload = [Components.Schemas.FineTuningJob.IntegrationsPayloadPayload]
            /// A list of integrations to enable for this fine-tuning job.
            ///
            /// - Remark: Generated from `#/components/schemas/FineTuningJob/integrations`.
            public var integrations: Components.Schemas.FineTuningJob.IntegrationsPayload?
            /// The seed used for the fine-tuning job.
            ///
            /// - Remark: Generated from `#/components/schemas/FineTuningJob/seed`.
            public var seed: Swift.Int
            /// The Unix timestamp (in seconds) for when the fine-tuning job is estimated to finish. The value will be null if the fine-tuning job is not running.
            ///
            /// - Remark: Generated from `#/components/schemas/FineTuningJob/estimated_finish`.
            public var estimatedFinish: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/FineTuningJob/method`.
            public var method: Components.Schemas.FineTuneMethod?
            /// Creates a new `FineTuningJob`.
            ///
            /// - Parameters:
            ///   - id: The object identifier, which can be referenced in the API endpoints.
            ///   - createdAt: The Unix timestamp (in seconds) for when the fine-tuning job was created.
            ///   - error: For fine-tuning jobs that have `failed`, this will contain more information on the cause of the failure.
            ///   - fineTunedModel: The name of the fine-tuned model that is being created. The value will be null if the fine-tuning job is still running.
            ///   - finishedAt: The Unix timestamp (in seconds) for when the fine-tuning job was finished. The value will be null if the fine-tuning job is still running.
            ///   - hyperparameters: The hyperparameters used for the fine-tuning job. This value will only be returned when running `supervised` jobs.
            ///   - model: The base model that is being fine-tuned.
            ///   - object: The object type, which is always "fine_tuning.job".
            ///   - organizationId: The organization that owns the fine-tuning job.
            ///   - resultFiles: The compiled results file ID(s) for the fine-tuning job. You can retrieve the results with the [Files API](/docs/api-reference/files/retrieve-contents).
            ///   - status: The current status of the fine-tuning job, which can be either `validating_files`, `queued`, `running`, `succeeded`, `failed`, or `cancelled`.
            ///   - trainedTokens: The total number of billable tokens processed by this fine-tuning job. The value will be null if the fine-tuning job is still running.
            ///   - trainingFile: The file ID used for training. You can retrieve the training data with the [Files API](/docs/api-reference/files/retrieve-contents).
            ///   - validationFile: The file ID used for validation. You can retrieve the validation results with the [Files API](/docs/api-reference/files/retrieve-contents).
            ///   - integrations: A list of integrations to enable for this fine-tuning job.
            ///   - seed: The seed used for the fine-tuning job.
            ///   - estimatedFinish: The Unix timestamp (in seconds) for when the fine-tuning job is estimated to finish. The value will be null if the fine-tuning job is not running.
            ///   - method:
            public init(
                id: Swift.String,
                createdAt: Swift.Int,
                error: Components.Schemas.FineTuningJob._ErrorPayload? = nil,
                fineTunedModel: Swift.String? = nil,
                finishedAt: Swift.Int? = nil,
                hyperparameters: Components.Schemas.FineTuningJob.HyperparametersPayload,
                model: Swift.String,
                object: Components.Schemas.FineTuningJob.ObjectPayload,
                organizationId: Swift.String,
                resultFiles: [Swift.String],
                status: Components.Schemas.FineTuningJob.StatusPayload,
                trainedTokens: Swift.Int? = nil,
                trainingFile: Swift.String,
                validationFile: Swift.String? = nil,
                integrations: Components.Schemas.FineTuningJob.IntegrationsPayload? = nil,
                seed: Swift.Int,
                estimatedFinish: Swift.Int? = nil,
                method: Components.Schemas.FineTuneMethod? = nil
            ) {
                self.id = id
                self.createdAt = createdAt
                self.error = error
                self.fineTunedModel = fineTunedModel
                self.finishedAt = finishedAt
                self.hyperparameters = hyperparameters
                self.model = model
                self.object = object
                self.organizationId = organizationId
                self.resultFiles = resultFiles
                self.status = status
                self.trainedTokens = trainedTokens
                self.trainingFile = trainingFile
                self.validationFile = validationFile
                self.integrations = integrations
                self.seed = seed
                self.estimatedFinish = estimatedFinish
                self.method = method
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case createdAt = "created_at"
                case error
                case fineTunedModel = "fine_tuned_model"
                case finishedAt = "finished_at"
                case hyperparameters
                case model
                case object
                case organizationId = "organization_id"
                case resultFiles = "result_files"
                case status
                case trainedTokens = "trained_tokens"
                case trainingFile = "training_file"
                case validationFile = "validation_file"
                case integrations
                case seed
                case estimatedFinish = "estimated_finish"
                case method
            }
        }
        /// The `fine_tuning.job.checkpoint` object represents a model checkpoint for a fine-tuning job that is ready to use.
        ///
        ///
        /// - Remark: Generated from `#/components/schemas/FineTuningJobCheckpoint`.
        public struct FineTuningJobCheckpoint: Codable, Hashable, Sendable {
            /// The checkpoint identifier, which can be referenced in the API endpoints.
            ///
            /// - Remark: Generated from `#/components/schemas/FineTuningJobCheckpoint/id`.
            public var id: Swift.String
            /// The Unix timestamp (in seconds) for when the checkpoint was created.
            ///
            /// - Remark: Generated from `#/components/schemas/FineTuningJobCheckpoint/created_at`.
            public var createdAt: Swift.Int
            /// The name of the fine-tuned checkpoint model that is created.
            ///
            /// - Remark: Generated from `#/components/schemas/FineTuningJobCheckpoint/fine_tuned_model_checkpoint`.
            public var fineTunedModelCheckpoint: Swift.String
            /// The step number that the checkpoint was created at.
            ///
            /// - Remark: Generated from `#/components/schemas/FineTuningJobCheckpoint/step_number`.
            public var stepNumber: Swift.Int
            /// Metrics at the step number during the fine-tuning job.
            ///
            /// - Remark: Generated from `#/components/schemas/FineTuningJobCheckpoint/metrics`.
            public struct MetricsPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/FineTuningJobCheckpoint/metrics/step`.
                public var step: Swift.Double?
                /// - Remark: Generated from `#/components/schemas/FineTuningJobCheckpoint/metrics/train_loss`.
                public var trainLoss: Swift.Double?
                /// - Remark: Generated from `#/components/schemas/FineTuningJobCheckpoint/metrics/train_mean_token_accuracy`.
                public var trainMeanTokenAccuracy: Swift.Double?
                /// - Remark: Generated from `#/components/schemas/FineTuningJobCheckpoint/metrics/valid_loss`.
                public var validLoss: Swift.Double?
                /// - Remark: Generated from `#/components/schemas/FineTuningJobCheckpoint/metrics/valid_mean_token_accuracy`.
                public var validMeanTokenAccuracy: Swift.Double?
                /// - Remark: Generated from `#/components/schemas/FineTuningJobCheckpoint/metrics/full_valid_loss`.
                public var fullValidLoss: Swift.Double?
                /// - Remark: Generated from `#/components/schemas/FineTuningJobCheckpoint/metrics/full_valid_mean_token_accuracy`.
                public var fullValidMeanTokenAccuracy: Swift.Double?
                /// Creates a new `MetricsPayload`.
                ///
                /// - Parameters:
                ///   - step:
                ///   - trainLoss:
                ///   - trainMeanTokenAccuracy:
                ///   - validLoss:
                ///   - validMeanTokenAccuracy:
                ///   - fullValidLoss:
                ///   - fullValidMeanTokenAccuracy:
                public init(
                    step: Swift.Double? = nil,
                    trainLoss: Swift.Double? = nil,
                    trainMeanTokenAccuracy: Swift.Double? = nil,
                    validLoss: Swift.Double? = nil,
                    validMeanTokenAccuracy: Swift.Double? = nil,
                    fullValidLoss: Swift.Double? = nil,
                    fullValidMeanTokenAccuracy: Swift.Double? = nil
                ) {
                    self.step = step
                    self.trainLoss = trainLoss
                    self.trainMeanTokenAccuracy = trainMeanTokenAccuracy
                    self.validLoss = validLoss
                    self.validMeanTokenAccuracy = validMeanTokenAccuracy
                    self.fullValidLoss = fullValidLoss
                    self.fullValidMeanTokenAccuracy = fullValidMeanTokenAccuracy
                }
                public enum CodingKeys: String, CodingKey {
                    case step
                    case trainLoss = "train_loss"
                    case trainMeanTokenAccuracy = "train_mean_token_accuracy"
                    case validLoss = "valid_loss"
                    case validMeanTokenAccuracy = "valid_mean_token_accuracy"
                    case fullValidLoss = "full_valid_loss"
                    case fullValidMeanTokenAccuracy = "full_valid_mean_token_accuracy"
                }
            }
            /// Metrics at the step number during the fine-tuning job.
            ///
            /// - Remark: Generated from `#/components/schemas/FineTuningJobCheckpoint/metrics`.
            public var metrics: Components.Schemas.FineTuningJobCheckpoint.MetricsPayload
            /// The name of the fine-tuning job that this checkpoint was created from.
            ///
            /// - Remark: Generated from `#/components/schemas/FineTuningJobCheckpoint/fine_tuning_job_id`.
            public var fineTuningJobId: Swift.String
            /// The object type, which is always "fine_tuning.job.checkpoint".
            ///
            /// - Remark: Generated from `#/components/schemas/FineTuningJobCheckpoint/object`.
            @frozen public enum ObjectPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case fineTuning_job_checkpoint = "fine_tuning.job.checkpoint"
            }
            /// The object type, which is always "fine_tuning.job.checkpoint".
            ///
            /// - Remark: Generated from `#/components/schemas/FineTuningJobCheckpoint/object`.
            public var object: Components.Schemas.FineTuningJobCheckpoint.ObjectPayload
            /// Creates a new `FineTuningJobCheckpoint`.
            ///
            /// - Parameters:
            ///   - id: The checkpoint identifier, which can be referenced in the API endpoints.
            ///   - createdAt: The Unix timestamp (in seconds) for when the checkpoint was created.
            ///   - fineTunedModelCheckpoint: The name of the fine-tuned checkpoint model that is created.
            ///   - stepNumber: The step number that the checkpoint was created at.
            ///   - metrics: Metrics at the step number during the fine-tuning job.
            ///   - fineTuningJobId: The name of the fine-tuning job that this checkpoint was created from.
            ///   - object: The object type, which is always "fine_tuning.job.checkpoint".
            public init(
                id: Swift.String,
                createdAt: Swift.Int,
                fineTunedModelCheckpoint: Swift.String,
                stepNumber: Swift.Int,
                metrics: Components.Schemas.FineTuningJobCheckpoint.MetricsPayload,
                fineTuningJobId: Swift.String,
                object: Components.Schemas.FineTuningJobCheckpoint.ObjectPayload
            ) {
                self.id = id
                self.createdAt = createdAt
                self.fineTunedModelCheckpoint = fineTunedModelCheckpoint
                self.stepNumber = stepNumber
                self.metrics = metrics
                self.fineTuningJobId = fineTuningJobId
                self.object = object
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case createdAt = "created_at"
                case fineTunedModelCheckpoint = "fine_tuned_model_checkpoint"
                case stepNumber = "step_number"
                case metrics
                case fineTuningJobId = "fine_tuning_job_id"
                case object
            }
        }
        /// Fine-tuning job event object
        ///
        /// - Remark: Generated from `#/components/schemas/FineTuningJobEvent`.
        public struct FineTuningJobEvent: Codable, Hashable, Sendable {
            /// The object type, which is always "fine_tuning.job.event".
            ///
            /// - Remark: Generated from `#/components/schemas/FineTuningJobEvent/object`.
            @frozen public enum ObjectPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case fineTuning_job_event = "fine_tuning.job.event"
            }
            /// The object type, which is always "fine_tuning.job.event".
            ///
            /// - Remark: Generated from `#/components/schemas/FineTuningJobEvent/object`.
            public var object: Components.Schemas.FineTuningJobEvent.ObjectPayload
            /// The object identifier.
            ///
            /// - Remark: Generated from `#/components/schemas/FineTuningJobEvent/id`.
            public var id: Swift.String
            /// The Unix timestamp (in seconds) for when the fine-tuning job was created.
            ///
            /// - Remark: Generated from `#/components/schemas/FineTuningJobEvent/created_at`.
            public var createdAt: Swift.Int
            /// The log level of the event.
            ///
            /// - Remark: Generated from `#/components/schemas/FineTuningJobEvent/level`.
            @frozen public enum LevelPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case info = "info"
                case warn = "warn"
                case error = "error"
            }
            /// The log level of the event.
            ///
            /// - Remark: Generated from `#/components/schemas/FineTuningJobEvent/level`.
            public var level: Components.Schemas.FineTuningJobEvent.LevelPayload
            /// The message of the event.
            ///
            /// - Remark: Generated from `#/components/schemas/FineTuningJobEvent/message`.
            public var message: Swift.String
            /// The type of event.
            ///
            /// - Remark: Generated from `#/components/schemas/FineTuningJobEvent/type`.
            @frozen public enum _TypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                case message = "message"
                case metrics = "metrics"
            }
            /// The type of event.
            ///
            /// - Remark: Generated from `#/components/schemas/FineTuningJobEvent/type`.
            public var _type: Components.Schemas.FineTuningJobEvent._TypePayload?
            /// The data associated with the event.
            ///
            /// - Remark: Generated from `#/components/schemas/FineTuningJobEvent/data`.
            public var data: OpenAPIRuntime.OpenAPIObjectContainer?
            /// Creates a new `FineTuningJobEvent`.
            ///
            /// - Parameters:
            ///   - object: The object type, which is always "fine_tuning.job.event".
            ///   - id: The object identifier.
            ///   - createdAt: The Unix timestamp (in seconds) for when the fine-tuning job was created.
            ///   - level: The log level of the event.
            ///   - message: The message of the event.
            ///   - _type: The type of event.
            ///   - data: The data associated with the event.
            public init(
                object: Components.Schemas.FineTuningJobEvent.ObjectPayload,
                id: Swift.String,
                createdAt: Swift.Int,
                level: Components.Schemas.FineTuningJobEvent.LevelPayload,
                message: Swift.String,
                _type: Components.Schemas.FineTuningJobEvent._TypePayload? = nil,
                data: OpenAPIRuntime.OpenAPIObjectContainer? = nil
            ) {
                self.object = object
                self.id = id
                self.createdAt = createdAt
                self.level = level
                self.message = message
                self._type = _type
                self.data = data
            }
            public enum CodingKeys: String, CodingKey {
                case object
                case id
                case createdAt = "created_at"
                case level
                case message
                case _type = "type"
                case data
            }
        }
        /// - Remark: Generated from `#/components/schemas/FunctionObject`.
        public struct FunctionObject: Codable, Hashable, Sendable {
            /// A description of what the function does, used by the model to choose when and how to call the function.
            ///
            /// - Remark: Generated from `#/components/schemas/FunctionObject/description`.
            public var description: Swift.String?
            /// The name of the function to be called. Must be a-z, A-Z, 0-9, or contain underscores and dashes, with a maximum length of 64.
            ///
            /// - Remark: Generated from `#/components/schemas/FunctionObject/name`.
            public var name: Swift.String
            /// - Remark: Generated from `#/components/schemas/FunctionObject/parameters`.
            public var parameters: Components.Schemas.FunctionParameters?
            /// Whether to enable strict schema adherence when generating the function call. If set to true, the model will follow the exact schema defined in the `parameters` field. Only a subset of JSON Schema is supported when `strict` is `true`. Learn more about Structured Outputs in the [function calling guide](docs/guides/function-calling).
            ///
            /// - Remark: Generated from `#/components/schemas/FunctionObject/strict`.
            public var strict: Swift.Bool?
            /// Creates a new `FunctionObject`.
            ///
            /// - Parameters:
            ///   - description: A description of what the function does, used by the model to choose when and how to call the function.
            ///   - name: The name of the function to be called. Must be a-z, A-Z, 0-9, or contain underscores and dashes, with a maximum length of 64.
            ///   - parameters:
            ///   - strict: Whether to enable strict schema adherence when generating the function call. If set to true, the model will follow the exact schema defined in the `parameters` field. Only a subset of JSON Schema is supported when `strict` is `true`. Learn more about Structured Outputs in the [function calling guide](docs/guides/function-calling).
            public init(
                description: Swift.String? = nil,
                name: Swift.String,
                parameters: Components.Schemas.FunctionParameters? = nil,
                strict: Swift.Bool? = nil
            ) {
                self.description = description
                self.name = name
                self.parameters = parameters
                self.strict = strict
            }
            public enum CodingKeys: String, CodingKey {
                case description
                case name
                case parameters
                case strict
            }
        }
        /// The parameters the functions accepts, described as a JSON Schema object. See the [guide](/docs/guides/function-calling) for examples, and the [JSON Schema reference](https://json-schema.org/understanding-json-schema/) for documentation about the format. 
        ///
        /// Omitting `parameters` defines a function with an empty parameter list.
        ///
        /// - Remark: Generated from `#/components/schemas/FunctionParameters`.
        public struct FunctionParameters: Codable, Hashable, Sendable {
            /// A container of undocumented properties.
            public var additionalProperties: OpenAPIRuntime.OpenAPIObjectContainer
            /// Creates a new `FunctionParameters`.
            ///
            /// - Parameters:
            ///   - additionalProperties: A container of undocumented properties.
            public init(additionalProperties: OpenAPIRuntime.OpenAPIObjectContainer = .init()) {
                self.additionalProperties = additionalProperties
            }
            public init(from decoder: any Decoder) throws {
                additionalProperties = try decoder.decodeAdditionalProperties(knownKeys: [])
            }
            public func encode(to encoder: any Encoder) throws {
                try encoder.encodeAdditionalProperties(additionalProperties)
            }
        }
        /// Represents the url or the content of an image generated by the OpenAI API.
        ///
        /// - Remark: Generated from `#/components/schemas/Image`.
        public struct Image: Codable, Hashable, Sendable {
            /// The base64-encoded JSON of the generated image, if `response_format` is `b64_json`.
            ///
            /// - Remark: Generated from `#/components/schemas/Image/b64_json`.
            public var b64Json: Swift.String?
            /// The URL of the generated image, if `response_format` is `url` (default).
            ///
            /// - Remark: Generated from `#/components/schemas/Image/url`.
            public var url: Swift.String?
            /// The prompt that was used to generate the image, if there was any revision to the prompt.
            ///
            /// - Remark: Generated from `#/components/schemas/Image/revised_prompt`.
            public var revisedPrompt: Swift.String?
            /// Creates a new `Image`.
            ///
            /// - Parameters:
            ///   - b64Json: The base64-encoded JSON of the generated image, if `response_format` is `b64_json`.
            ///   - url: The URL of the generated image, if `response_format` is `url` (default).
            ///   - revisedPrompt: The prompt that was used to generate the image, if there was any revision to the prompt.
            public init(
                b64Json: Swift.String? = nil,
                url: Swift.String? = nil,
                revisedPrompt: Swift.String? = nil
            ) {
                self.b64Json = b64Json
                self.url = url
                self.revisedPrompt = revisedPrompt
            }
            public enum CodingKeys: String, CodingKey {
                case b64Json = "b64_json"
                case url
                case revisedPrompt = "revised_prompt"
            }
        }
        /// - Remark: Generated from `#/components/schemas/ImagesResponse`.
        public struct ImagesResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/ImagesResponse/created`.
            public var created: Swift.Int
            /// - Remark: Generated from `#/components/schemas/ImagesResponse/data`.
            public var data: [Components.Schemas.Image]
            /// Creates a new `ImagesResponse`.
            ///
            /// - Parameters:
            ///   - created:
            ///   - data:
            public init(
                created: Swift.Int,
                data: [Components.Schemas.Image]
            ) {
                self.created = created
                self.data = data
            }
            public enum CodingKeys: String, CodingKey {
                case created
                case data
            }
        }
        /// Represents an individual `invite` to the organization.
        ///
        /// - Remark: Generated from `#/components/schemas/Invite`.
        public struct Invite: Codable, Hashable, Sendable {
            /// The object type, which is always `organization.invite`
            ///
            /// - Remark: Generated from `#/components/schemas/Invite/object`.
            @frozen public enum ObjectPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case organization_invite = "organization.invite"
            }
            /// The object type, which is always `organization.invite`
            ///
            /// - Remark: Generated from `#/components/schemas/Invite/object`.
            public var object: Components.Schemas.Invite.ObjectPayload
            /// The identifier, which can be referenced in API endpoints
            ///
            /// - Remark: Generated from `#/components/schemas/Invite/id`.
            public var id: Swift.String
            /// The email address of the individual to whom the invite was sent
            ///
            /// - Remark: Generated from `#/components/schemas/Invite/email`.
            public var email: Swift.String
            /// `owner` or `reader`
            ///
            /// - Remark: Generated from `#/components/schemas/Invite/role`.
            @frozen public enum RolePayload: String, Codable, Hashable, Sendable, CaseIterable {
                case owner = "owner"
                case reader = "reader"
            }
            /// `owner` or `reader`
            ///
            /// - Remark: Generated from `#/components/schemas/Invite/role`.
            public var role: Components.Schemas.Invite.RolePayload
            /// `accepted`,`expired`, or `pending`
            ///
            /// - Remark: Generated from `#/components/schemas/Invite/status`.
            @frozen public enum StatusPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case accepted = "accepted"
                case expired = "expired"
                case pending = "pending"
            }
            /// `accepted`,`expired`, or `pending`
            ///
            /// - Remark: Generated from `#/components/schemas/Invite/status`.
            public var status: Components.Schemas.Invite.StatusPayload
            /// The Unix timestamp (in seconds) of when the invite was sent.
            ///
            /// - Remark: Generated from `#/components/schemas/Invite/invited_at`.
            public var invitedAt: Swift.Int
            /// The Unix timestamp (in seconds) of when the invite expires.
            ///
            /// - Remark: Generated from `#/components/schemas/Invite/expires_at`.
            public var expiresAt: Swift.Int
            /// The Unix timestamp (in seconds) of when the invite was accepted.
            ///
            /// - Remark: Generated from `#/components/schemas/Invite/accepted_at`.
            public var acceptedAt: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/Invite/ProjectsPayload`.
            public struct ProjectsPayloadPayload: Codable, Hashable, Sendable {
                /// Project's public ID
                ///
                /// - Remark: Generated from `#/components/schemas/Invite/ProjectsPayload/id`.
                public var id: Swift.String?
                /// Project membership role
                ///
                /// - Remark: Generated from `#/components/schemas/Invite/ProjectsPayload/role`.
                @frozen public enum RolePayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case member = "member"
                    case owner = "owner"
                }
                /// Project membership role
                ///
                /// - Remark: Generated from `#/components/schemas/Invite/ProjectsPayload/role`.
                public var role: Components.Schemas.Invite.ProjectsPayloadPayload.RolePayload?
                /// Creates a new `ProjectsPayloadPayload`.
                ///
                /// - Parameters:
                ///   - id: Project's public ID
                ///   - role: Project membership role
                public init(
                    id: Swift.String? = nil,
                    role: Components.Schemas.Invite.ProjectsPayloadPayload.RolePayload? = nil
                ) {
                    self.id = id
                    self.role = role
                }
                public enum CodingKeys: String, CodingKey {
                    case id
                    case role
                }
            }
            /// The projects that were granted membership upon acceptance of the invite.
            ///
            /// - Remark: Generated from `#/components/schemas/Invite/projects`.
            public typealias ProjectsPayload = [Components.Schemas.Invite.ProjectsPayloadPayload]
            /// The projects that were granted membership upon acceptance of the invite.
            ///
            /// - Remark: Generated from `#/components/schemas/Invite/projects`.
            public var projects: Components.Schemas.Invite.ProjectsPayload?
            /// Creates a new `Invite`.
            ///
            /// - Parameters:
            ///   - object: The object type, which is always `organization.invite`
            ///   - id: The identifier, which can be referenced in API endpoints
            ///   - email: The email address of the individual to whom the invite was sent
            ///   - role: `owner` or `reader`
            ///   - status: `accepted`,`expired`, or `pending`
            ///   - invitedAt: The Unix timestamp (in seconds) of when the invite was sent.
            ///   - expiresAt: The Unix timestamp (in seconds) of when the invite expires.
            ///   - acceptedAt: The Unix timestamp (in seconds) of when the invite was accepted.
            ///   - projects: The projects that were granted membership upon acceptance of the invite.
            public init(
                object: Components.Schemas.Invite.ObjectPayload,
                id: Swift.String,
                email: Swift.String,
                role: Components.Schemas.Invite.RolePayload,
                status: Components.Schemas.Invite.StatusPayload,
                invitedAt: Swift.Int,
                expiresAt: Swift.Int,
                acceptedAt: Swift.Int? = nil,
                projects: Components.Schemas.Invite.ProjectsPayload? = nil
            ) {
                self.object = object
                self.id = id
                self.email = email
                self.role = role
                self.status = status
                self.invitedAt = invitedAt
                self.expiresAt = expiresAt
                self.acceptedAt = acceptedAt
                self.projects = projects
            }
            public enum CodingKeys: String, CodingKey {
                case object
                case id
                case email
                case role
                case status
                case invitedAt = "invited_at"
                case expiresAt = "expires_at"
                case acceptedAt = "accepted_at"
                case projects
            }
        }
        /// - Remark: Generated from `#/components/schemas/InviteDeleteResponse`.
        public struct InviteDeleteResponse: Codable, Hashable, Sendable {
            /// The object type, which is always `organization.invite.deleted`
            ///
            /// - Remark: Generated from `#/components/schemas/InviteDeleteResponse/object`.
            @frozen public enum ObjectPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case organization_invite_deleted = "organization.invite.deleted"
            }
            /// The object type, which is always `organization.invite.deleted`
            ///
            /// - Remark: Generated from `#/components/schemas/InviteDeleteResponse/object`.
            public var object: Components.Schemas.InviteDeleteResponse.ObjectPayload
            /// - Remark: Generated from `#/components/schemas/InviteDeleteResponse/id`.
            public var id: Swift.String
            /// - Remark: Generated from `#/components/schemas/InviteDeleteResponse/deleted`.
            public var deleted: Swift.Bool
            /// Creates a new `InviteDeleteResponse`.
            ///
            /// - Parameters:
            ///   - object: The object type, which is always `organization.invite.deleted`
            ///   - id:
            ///   - deleted:
            public init(
                object: Components.Schemas.InviteDeleteResponse.ObjectPayload,
                id: Swift.String,
                deleted: Swift.Bool
            ) {
                self.object = object
                self.id = id
                self.deleted = deleted
            }
            public enum CodingKeys: String, CodingKey {
                case object
                case id
                case deleted
            }
        }
        /// - Remark: Generated from `#/components/schemas/InviteListResponse`.
        public struct InviteListResponse: Codable, Hashable, Sendable {
            /// The object type, which is always `list`
            ///
            /// - Remark: Generated from `#/components/schemas/InviteListResponse/object`.
            @frozen public enum ObjectPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case list = "list"
            }
            /// The object type, which is always `list`
            ///
            /// - Remark: Generated from `#/components/schemas/InviteListResponse/object`.
            public var object: Components.Schemas.InviteListResponse.ObjectPayload
            /// - Remark: Generated from `#/components/schemas/InviteListResponse/data`.
            public var data: [Components.Schemas.Invite]
            /// The first `invite_id` in the retrieved `list`
            ///
            /// - Remark: Generated from `#/components/schemas/InviteListResponse/first_id`.
            public var firstId: Swift.String?
            /// The last `invite_id` in the retrieved `list`
            ///
            /// - Remark: Generated from `#/components/schemas/InviteListResponse/last_id`.
            public var lastId: Swift.String?
            /// The `has_more` property is used for pagination to indicate there are additional results.
            ///
            /// - Remark: Generated from `#/components/schemas/InviteListResponse/has_more`.
            public var hasMore: Swift.Bool?
            /// Creates a new `InviteListResponse`.
            ///
            /// - Parameters:
            ///   - object: The object type, which is always `list`
            ///   - data:
            ///   - firstId: The first `invite_id` in the retrieved `list`
            ///   - lastId: The last `invite_id` in the retrieved `list`
            ///   - hasMore: The `has_more` property is used for pagination to indicate there are additional results.
            public init(
                object: Components.Schemas.InviteListResponse.ObjectPayload,
                data: [Components.Schemas.Invite],
                firstId: Swift.String? = nil,
                lastId: Swift.String? = nil,
                hasMore: Swift.Bool? = nil
            ) {
                self.object = object
                self.data = data
                self.firstId = firstId
                self.lastId = lastId
                self.hasMore = hasMore
            }
            public enum CodingKeys: String, CodingKey {
                case object
                case data
                case firstId = "first_id"
                case lastId = "last_id"
                case hasMore = "has_more"
            }
        }
        /// - Remark: Generated from `#/components/schemas/InviteRequest`.
        public struct InviteRequest: Codable, Hashable, Sendable {
            /// Send an email to this address
            ///
            /// - Remark: Generated from `#/components/schemas/InviteRequest/email`.
            public var email: Swift.String
            /// `owner` or `reader`
            ///
            /// - Remark: Generated from `#/components/schemas/InviteRequest/role`.
            @frozen public enum RolePayload: String, Codable, Hashable, Sendable, CaseIterable {
                case reader = "reader"
                case owner = "owner"
            }
            /// `owner` or `reader`
            ///
            /// - Remark: Generated from `#/components/schemas/InviteRequest/role`.
            public var role: Components.Schemas.InviteRequest.RolePayload
            /// - Remark: Generated from `#/components/schemas/InviteRequest/ProjectsPayload`.
            public struct ProjectsPayloadPayload: Codable, Hashable, Sendable {
                /// Project's public ID
                ///
                /// - Remark: Generated from `#/components/schemas/InviteRequest/ProjectsPayload/id`.
                public var id: Swift.String
                /// Project membership role
                ///
                /// - Remark: Generated from `#/components/schemas/InviteRequest/ProjectsPayload/role`.
                @frozen public enum RolePayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case member = "member"
                    case owner = "owner"
                }
                /// Project membership role
                ///
                /// - Remark: Generated from `#/components/schemas/InviteRequest/ProjectsPayload/role`.
                public var role: Components.Schemas.InviteRequest.ProjectsPayloadPayload.RolePayload
                /// Creates a new `ProjectsPayloadPayload`.
                ///
                /// - Parameters:
                ///   - id: Project's public ID
                ///   - role: Project membership role
                public init(
                    id: Swift.String,
                    role: Components.Schemas.InviteRequest.ProjectsPayloadPayload.RolePayload
                ) {
                    self.id = id
                    self.role = role
                }
                public enum CodingKeys: String, CodingKey {
                    case id
                    case role
                }
            }
            /// An array of projects to which membership is granted at the same time the org invite is accepted. If omitted, the user will be invited to the default project for compatibility with legacy behavior.
            ///
            /// - Remark: Generated from `#/components/schemas/InviteRequest/projects`.
            public typealias ProjectsPayload = [Components.Schemas.InviteRequest.ProjectsPayloadPayload]
            /// An array of projects to which membership is granted at the same time the org invite is accepted. If omitted, the user will be invited to the default project for compatibility with legacy behavior.
            ///
            /// - Remark: Generated from `#/components/schemas/InviteRequest/projects`.
            public var projects: Components.Schemas.InviteRequest.ProjectsPayload?
            /// Creates a new `InviteRequest`.
            ///
            /// - Parameters:
            ///   - email: Send an email to this address
            ///   - role: `owner` or `reader`
            ///   - projects: An array of projects to which membership is granted at the same time the org invite is accepted. If omitted, the user will be invited to the default project for compatibility with legacy behavior.
            public init(
                email: Swift.String,
                role: Components.Schemas.InviteRequest.RolePayload,
                projects: Components.Schemas.InviteRequest.ProjectsPayload? = nil
            ) {
                self.email = email
                self.role = role
                self.projects = projects
            }
            public enum CodingKeys: String, CodingKey {
                case email
                case role
                case projects
            }
        }
        /// - Remark: Generated from `#/components/schemas/ListAssistantsResponse`.
        public struct ListAssistantsResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/ListAssistantsResponse/object`.
            public var object: Swift.String
            /// - Remark: Generated from `#/components/schemas/ListAssistantsResponse/data`.
            public var data: [Components.Schemas.AssistantObject]
            /// - Remark: Generated from `#/components/schemas/ListAssistantsResponse/first_id`.
            public var firstId: Swift.String
            /// - Remark: Generated from `#/components/schemas/ListAssistantsResponse/last_id`.
            public var lastId: Swift.String
            /// - Remark: Generated from `#/components/schemas/ListAssistantsResponse/has_more`.
            public var hasMore: Swift.Bool
            /// Creates a new `ListAssistantsResponse`.
            ///
            /// - Parameters:
            ///   - object:
            ///   - data:
            ///   - firstId:
            ///   - lastId:
            ///   - hasMore:
            public init(
                object: Swift.String,
                data: [Components.Schemas.AssistantObject],
                firstId: Swift.String,
                lastId: Swift.String,
                hasMore: Swift.Bool
            ) {
                self.object = object
                self.data = data
                self.firstId = firstId
                self.lastId = lastId
                self.hasMore = hasMore
            }
            public enum CodingKeys: String, CodingKey {
                case object
                case data
                case firstId = "first_id"
                case lastId = "last_id"
                case hasMore = "has_more"
            }
        }
        /// - Remark: Generated from `#/components/schemas/ListAuditLogsResponse`.
        public struct ListAuditLogsResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/ListAuditLogsResponse/object`.
            @frozen public enum ObjectPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case list = "list"
            }
            /// - Remark: Generated from `#/components/schemas/ListAuditLogsResponse/object`.
            public var object: Components.Schemas.ListAuditLogsResponse.ObjectPayload
            /// - Remark: Generated from `#/components/schemas/ListAuditLogsResponse/data`.
            public var data: [Components.Schemas.AuditLog]
            /// - Remark: Generated from `#/components/schemas/ListAuditLogsResponse/first_id`.
            public var firstId: Swift.String
            /// - Remark: Generated from `#/components/schemas/ListAuditLogsResponse/last_id`.
            public var lastId: Swift.String
            /// - Remark: Generated from `#/components/schemas/ListAuditLogsResponse/has_more`.
            public var hasMore: Swift.Bool
            /// Creates a new `ListAuditLogsResponse`.
            ///
            /// - Parameters:
            ///   - object:
            ///   - data:
            ///   - firstId:
            ///   - lastId:
            ///   - hasMore:
            public init(
                object: Components.Schemas.ListAuditLogsResponse.ObjectPayload,
                data: [Components.Schemas.AuditLog],
                firstId: Swift.String,
                lastId: Swift.String,
                hasMore: Swift.Bool
            ) {
                self.object = object
                self.data = data
                self.firstId = firstId
                self.lastId = lastId
                self.hasMore = hasMore
            }
            public enum CodingKeys: String, CodingKey {
                case object
                case data
                case firstId = "first_id"
                case lastId = "last_id"
                case hasMore = "has_more"
            }
        }
        /// - Remark: Generated from `#/components/schemas/ListBatchesResponse`.
        public struct ListBatchesResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/ListBatchesResponse/data`.
            public var data: [Components.Schemas.Batch]
            /// - Remark: Generated from `#/components/schemas/ListBatchesResponse/first_id`.
            public var firstId: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ListBatchesResponse/last_id`.
            public var lastId: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ListBatchesResponse/has_more`.
            public var hasMore: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/ListBatchesResponse/object`.
            @frozen public enum ObjectPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case list = "list"
            }
            /// - Remark: Generated from `#/components/schemas/ListBatchesResponse/object`.
            public var object: Components.Schemas.ListBatchesResponse.ObjectPayload
            /// Creates a new `ListBatchesResponse`.
            ///
            /// - Parameters:
            ///   - data:
            ///   - firstId:
            ///   - lastId:
            ///   - hasMore:
            ///   - object:
            public init(
                data: [Components.Schemas.Batch],
                firstId: Swift.String? = nil,
                lastId: Swift.String? = nil,
                hasMore: Swift.Bool,
                object: Components.Schemas.ListBatchesResponse.ObjectPayload
            ) {
                self.data = data
                self.firstId = firstId
                self.lastId = lastId
                self.hasMore = hasMore
                self.object = object
            }
            public enum CodingKeys: String, CodingKey {
                case data
                case firstId = "first_id"
                case lastId = "last_id"
                case hasMore = "has_more"
                case object
            }
        }
        /// - Remark: Generated from `#/components/schemas/ListFilesResponse`.
        public struct ListFilesResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/ListFilesResponse/object`.
            public var object: Swift.String
            /// - Remark: Generated from `#/components/schemas/ListFilesResponse/data`.
            public var data: [Components.Schemas.OpenAIFile]
            /// - Remark: Generated from `#/components/schemas/ListFilesResponse/first_id`.
            public var firstId: Swift.String
            /// - Remark: Generated from `#/components/schemas/ListFilesResponse/last_id`.
            public var lastId: Swift.String
            /// - Remark: Generated from `#/components/schemas/ListFilesResponse/has_more`.
            public var hasMore: Swift.Bool
            /// Creates a new `ListFilesResponse`.
            ///
            /// - Parameters:
            ///   - object:
            ///   - data:
            ///   - firstId:
            ///   - lastId:
            ///   - hasMore:
            public init(
                object: Swift.String,
                data: [Components.Schemas.OpenAIFile],
                firstId: Swift.String,
                lastId: Swift.String,
                hasMore: Swift.Bool
            ) {
                self.object = object
                self.data = data
                self.firstId = firstId
                self.lastId = lastId
                self.hasMore = hasMore
            }
            public enum CodingKeys: String, CodingKey {
                case object
                case data
                case firstId = "first_id"
                case lastId = "last_id"
                case hasMore = "has_more"
            }
        }
        /// - Remark: Generated from `#/components/schemas/ListFineTuningJobCheckpointsResponse`.
        public struct ListFineTuningJobCheckpointsResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/ListFineTuningJobCheckpointsResponse/data`.
            public var data: [Components.Schemas.FineTuningJobCheckpoint]
            /// - Remark: Generated from `#/components/schemas/ListFineTuningJobCheckpointsResponse/object`.
            @frozen public enum ObjectPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case list = "list"
            }
            /// - Remark: Generated from `#/components/schemas/ListFineTuningJobCheckpointsResponse/object`.
            public var object: Components.Schemas.ListFineTuningJobCheckpointsResponse.ObjectPayload
            /// - Remark: Generated from `#/components/schemas/ListFineTuningJobCheckpointsResponse/first_id`.
            public var firstId: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ListFineTuningJobCheckpointsResponse/last_id`.
            public var lastId: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ListFineTuningJobCheckpointsResponse/has_more`.
            public var hasMore: Swift.Bool
            /// Creates a new `ListFineTuningJobCheckpointsResponse`.
            ///
            /// - Parameters:
            ///   - data:
            ///   - object:
            ///   - firstId:
            ///   - lastId:
            ///   - hasMore:
            public init(
                data: [Components.Schemas.FineTuningJobCheckpoint],
                object: Components.Schemas.ListFineTuningJobCheckpointsResponse.ObjectPayload,
                firstId: Swift.String? = nil,
                lastId: Swift.String? = nil,
                hasMore: Swift.Bool
            ) {
                self.data = data
                self.object = object
                self.firstId = firstId
                self.lastId = lastId
                self.hasMore = hasMore
            }
            public enum CodingKeys: String, CodingKey {
                case data
                case object
                case firstId = "first_id"
                case lastId = "last_id"
                case hasMore = "has_more"
            }
        }
        /// - Remark: Generated from `#/components/schemas/ListFineTuningJobEventsResponse`.
        public struct ListFineTuningJobEventsResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/ListFineTuningJobEventsResponse/data`.
            public var data: [Components.Schemas.FineTuningJobEvent]
            /// - Remark: Generated from `#/components/schemas/ListFineTuningJobEventsResponse/object`.
            @frozen public enum ObjectPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case list = "list"
            }
            /// - Remark: Generated from `#/components/schemas/ListFineTuningJobEventsResponse/object`.
            public var object: Components.Schemas.ListFineTuningJobEventsResponse.ObjectPayload
            /// Creates a new `ListFineTuningJobEventsResponse`.
            ///
            /// - Parameters:
            ///   - data:
            ///   - object:
            public init(
                data: [Components.Schemas.FineTuningJobEvent],
                object: Components.Schemas.ListFineTuningJobEventsResponse.ObjectPayload
            ) {
                self.data = data
                self.object = object
            }
            public enum CodingKeys: String, CodingKey {
                case data
                case object
            }
        }
        /// - Remark: Generated from `#/components/schemas/ListMessagesResponse`.
        public struct ListMessagesResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/ListMessagesResponse/object`.
            public var object: Swift.String
            /// - Remark: Generated from `#/components/schemas/ListMessagesResponse/data`.
            public var data: [Components.Schemas.MessageObject]
            /// - Remark: Generated from `#/components/schemas/ListMessagesResponse/first_id`.
            public var firstId: Swift.String
            /// - Remark: Generated from `#/components/schemas/ListMessagesResponse/last_id`.
            public var lastId: Swift.String
            /// - Remark: Generated from `#/components/schemas/ListMessagesResponse/has_more`.
            public var hasMore: Swift.Bool
            /// Creates a new `ListMessagesResponse`.
            ///
            /// - Parameters:
            ///   - object:
            ///   - data:
            ///   - firstId:
            ///   - lastId:
            ///   - hasMore:
            public init(
                object: Swift.String,
                data: [Components.Schemas.MessageObject],
                firstId: Swift.String,
                lastId: Swift.String,
                hasMore: Swift.Bool
            ) {
                self.object = object
                self.data = data
                self.firstId = firstId
                self.lastId = lastId
                self.hasMore = hasMore
            }
            public enum CodingKeys: String, CodingKey {
                case object
                case data
                case firstId = "first_id"
                case lastId = "last_id"
                case hasMore = "has_more"
            }
        }
        /// - Remark: Generated from `#/components/schemas/ListModelsResponse`.
        public struct ListModelsResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/ListModelsResponse/object`.
            @frozen public enum ObjectPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case list = "list"
            }
            /// - Remark: Generated from `#/components/schemas/ListModelsResponse/object`.
            public var object: Components.Schemas.ListModelsResponse.ObjectPayload
            /// - Remark: Generated from `#/components/schemas/ListModelsResponse/data`.
            public var data: [Components.Schemas.Model]
            /// Creates a new `ListModelsResponse`.
            ///
            /// - Parameters:
            ///   - object:
            ///   - data:
            public init(
                object: Components.Schemas.ListModelsResponse.ObjectPayload,
                data: [Components.Schemas.Model]
            ) {
                self.object = object
                self.data = data
            }
            public enum CodingKeys: String, CodingKey {
                case object
                case data
            }
        }
        /// - Remark: Generated from `#/components/schemas/ListPaginatedFineTuningJobsResponse`.
        public struct ListPaginatedFineTuningJobsResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/ListPaginatedFineTuningJobsResponse/data`.
            public var data: [Components.Schemas.FineTuningJob]
            /// - Remark: Generated from `#/components/schemas/ListPaginatedFineTuningJobsResponse/has_more`.
            public var hasMore: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/ListPaginatedFineTuningJobsResponse/object`.
            @frozen public enum ObjectPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case list = "list"
            }
            /// - Remark: Generated from `#/components/schemas/ListPaginatedFineTuningJobsResponse/object`.
            public var object: Components.Schemas.ListPaginatedFineTuningJobsResponse.ObjectPayload
            /// Creates a new `ListPaginatedFineTuningJobsResponse`.
            ///
            /// - Parameters:
            ///   - data:
            ///   - hasMore:
            ///   - object:
            public init(
                data: [Components.Schemas.FineTuningJob],
                hasMore: Swift.Bool,
                object: Components.Schemas.ListPaginatedFineTuningJobsResponse.ObjectPayload
            ) {
                self.data = data
                self.hasMore = hasMore
                self.object = object
            }
            public enum CodingKeys: String, CodingKey {
                case data
                case hasMore = "has_more"
                case object
            }
        }
        /// - Remark: Generated from `#/components/schemas/ListRunStepsResponse`.
        public struct ListRunStepsResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/ListRunStepsResponse/object`.
            public var object: Swift.String
            /// - Remark: Generated from `#/components/schemas/ListRunStepsResponse/data`.
            public var data: [Components.Schemas.RunStepObject]
            /// - Remark: Generated from `#/components/schemas/ListRunStepsResponse/first_id`.
            public var firstId: Swift.String
            /// - Remark: Generated from `#/components/schemas/ListRunStepsResponse/last_id`.
            public var lastId: Swift.String
            /// - Remark: Generated from `#/components/schemas/ListRunStepsResponse/has_more`.
            public var hasMore: Swift.Bool
            /// Creates a new `ListRunStepsResponse`.
            ///
            /// - Parameters:
            ///   - object:
            ///   - data:
            ///   - firstId:
            ///   - lastId:
            ///   - hasMore:
            public init(
                object: Swift.String,
                data: [Components.Schemas.RunStepObject],
                firstId: Swift.String,
                lastId: Swift.String,
                hasMore: Swift.Bool
            ) {
                self.object = object
                self.data = data
                self.firstId = firstId
                self.lastId = lastId
                self.hasMore = hasMore
            }
            public enum CodingKeys: String, CodingKey {
                case object
                case data
                case firstId = "first_id"
                case lastId = "last_id"
                case hasMore = "has_more"
            }
        }
        /// - Remark: Generated from `#/components/schemas/ListRunsResponse`.
        public struct ListRunsResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/ListRunsResponse/object`.
            public var object: Swift.String
            /// - Remark: Generated from `#/components/schemas/ListRunsResponse/data`.
            public var data: [Components.Schemas.RunObject]
            /// - Remark: Generated from `#/components/schemas/ListRunsResponse/first_id`.
            public var firstId: Swift.String
            /// - Remark: Generated from `#/components/schemas/ListRunsResponse/last_id`.
            public var lastId: Swift.String
            /// - Remark: Generated from `#/components/schemas/ListRunsResponse/has_more`.
            public var hasMore: Swift.Bool
            /// Creates a new `ListRunsResponse`.
            ///
            /// - Parameters:
            ///   - object:
            ///   - data:
            ///   - firstId:
            ///   - lastId:
            ///   - hasMore:
            public init(
                object: Swift.String,
                data: [Components.Schemas.RunObject],
                firstId: Swift.String,
                lastId: Swift.String,
                hasMore: Swift.Bool
            ) {
                self.object = object
                self.data = data
                self.firstId = firstId
                self.lastId = lastId
                self.hasMore = hasMore
            }
            public enum CodingKeys: String, CodingKey {
                case object
                case data
                case firstId = "first_id"
                case lastId = "last_id"
                case hasMore = "has_more"
            }
        }
        /// - Remark: Generated from `#/components/schemas/ListThreadsResponse`.
        public struct ListThreadsResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/ListThreadsResponse/object`.
            public var object: Swift.String
            /// - Remark: Generated from `#/components/schemas/ListThreadsResponse/data`.
            public var data: [Components.Schemas.ThreadObject]
            /// - Remark: Generated from `#/components/schemas/ListThreadsResponse/first_id`.
            public var firstId: Swift.String
            /// - Remark: Generated from `#/components/schemas/ListThreadsResponse/last_id`.
            public var lastId: Swift.String
            /// - Remark: Generated from `#/components/schemas/ListThreadsResponse/has_more`.
            public var hasMore: Swift.Bool
            /// Creates a new `ListThreadsResponse`.
            ///
            /// - Parameters:
            ///   - object:
            ///   - data:
            ///   - firstId:
            ///   - lastId:
            ///   - hasMore:
            public init(
                object: Swift.String,
                data: [Components.Schemas.ThreadObject],
                firstId: Swift.String,
                lastId: Swift.String,
                hasMore: Swift.Bool
            ) {
                self.object = object
                self.data = data
                self.firstId = firstId
                self.lastId = lastId
                self.hasMore = hasMore
            }
            public enum CodingKeys: String, CodingKey {
                case object
                case data
                case firstId = "first_id"
                case lastId = "last_id"
                case hasMore = "has_more"
            }
        }
        /// - Remark: Generated from `#/components/schemas/ListVectorStoreFilesResponse`.
        public struct ListVectorStoreFilesResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/ListVectorStoreFilesResponse/object`.
            public var object: Swift.String
            /// - Remark: Generated from `#/components/schemas/ListVectorStoreFilesResponse/data`.
            public var data: [Components.Schemas.VectorStoreFileObject]
            /// - Remark: Generated from `#/components/schemas/ListVectorStoreFilesResponse/first_id`.
            public var firstId: Swift.String
            /// - Remark: Generated from `#/components/schemas/ListVectorStoreFilesResponse/last_id`.
            public var lastId: Swift.String
            /// - Remark: Generated from `#/components/schemas/ListVectorStoreFilesResponse/has_more`.
            public var hasMore: Swift.Bool
            /// Creates a new `ListVectorStoreFilesResponse`.
            ///
            /// - Parameters:
            ///   - object:
            ///   - data:
            ///   - firstId:
            ///   - lastId:
            ///   - hasMore:
            public init(
                object: Swift.String,
                data: [Components.Schemas.VectorStoreFileObject],
                firstId: Swift.String,
                lastId: Swift.String,
                hasMore: Swift.Bool
            ) {
                self.object = object
                self.data = data
                self.firstId = firstId
                self.lastId = lastId
                self.hasMore = hasMore
            }
            public enum CodingKeys: String, CodingKey {
                case object
                case data
                case firstId = "first_id"
                case lastId = "last_id"
                case hasMore = "has_more"
            }
        }
        /// - Remark: Generated from `#/components/schemas/ListVectorStoresResponse`.
        public struct ListVectorStoresResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/ListVectorStoresResponse/object`.
            public var object: Swift.String
            /// - Remark: Generated from `#/components/schemas/ListVectorStoresResponse/data`.
            public var data: [Components.Schemas.VectorStoreObject]
            /// - Remark: Generated from `#/components/schemas/ListVectorStoresResponse/first_id`.
            public var firstId: Swift.String
            /// - Remark: Generated from `#/components/schemas/ListVectorStoresResponse/last_id`.
            public var lastId: Swift.String
            /// - Remark: Generated from `#/components/schemas/ListVectorStoresResponse/has_more`.
            public var hasMore: Swift.Bool
            /// Creates a new `ListVectorStoresResponse`.
            ///
            /// - Parameters:
            ///   - object:
            ///   - data:
            ///   - firstId:
            ///   - lastId:
            ///   - hasMore:
            public init(
                object: Swift.String,
                data: [Components.Schemas.VectorStoreObject],
                firstId: Swift.String,
                lastId: Swift.String,
                hasMore: Swift.Bool
            ) {
                self.object = object
                self.data = data
                self.firstId = firstId
                self.lastId = lastId
                self.hasMore = hasMore
            }
            public enum CodingKeys: String, CodingKey {
                case object
                case data
                case firstId = "first_id"
                case lastId = "last_id"
                case hasMore = "has_more"
            }
        }
        /// References an image [File](/docs/api-reference/files) in the content of a message.
        ///
        /// - Remark: Generated from `#/components/schemas/MessageContentImageFileObject`.
        public struct MessageContentImageFileObject: Codable, Hashable, Sendable {
            /// Always `image_file`.
            ///
            /// - Remark: Generated from `#/components/schemas/MessageContentImageFileObject/type`.
            @frozen public enum _TypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                case imageFile = "image_file"
            }
            /// Always `image_file`.
            ///
            /// - Remark: Generated from `#/components/schemas/MessageContentImageFileObject/type`.
            public var _type: Components.Schemas.MessageContentImageFileObject._TypePayload
            /// - Remark: Generated from `#/components/schemas/MessageContentImageFileObject/image_file`.
            public struct ImageFilePayload: Codable, Hashable, Sendable {
                /// The [File](/docs/api-reference/files) ID of the image in the message content. Set `purpose="vision"` when uploading the File if you need to later display the file content.
                ///
                /// - Remark: Generated from `#/components/schemas/MessageContentImageFileObject/image_file/file_id`.
                public var fileId: Swift.String
                /// Specifies the detail level of the image if specified by the user. `low` uses fewer tokens, you can opt in to high resolution using `high`.
                ///
                /// - Remark: Generated from `#/components/schemas/MessageContentImageFileObject/image_file/detail`.
                @frozen public enum DetailPayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case auto = "auto"
                    case low = "low"
                    case high = "high"
                }
                /// Specifies the detail level of the image if specified by the user. `low` uses fewer tokens, you can opt in to high resolution using `high`.
                ///
                /// - Remark: Generated from `#/components/schemas/MessageContentImageFileObject/image_file/detail`.
                public var detail: Components.Schemas.MessageContentImageFileObject.ImageFilePayload.DetailPayload?
                /// Creates a new `ImageFilePayload`.
                ///
                /// - Parameters:
                ///   - fileId: The [File](/docs/api-reference/files) ID of the image in the message content. Set `purpose="vision"` when uploading the File if you need to later display the file content.
                ///   - detail: Specifies the detail level of the image if specified by the user. `low` uses fewer tokens, you can opt in to high resolution using `high`.
                public init(
                    fileId: Swift.String,
                    detail: Components.Schemas.MessageContentImageFileObject.ImageFilePayload.DetailPayload? = nil
                ) {
                    self.fileId = fileId
                    self.detail = detail
                }
                public enum CodingKeys: String, CodingKey {
                    case fileId = "file_id"
                    case detail
                }
            }
            /// - Remark: Generated from `#/components/schemas/MessageContentImageFileObject/image_file`.
            public var imageFile: Components.Schemas.MessageContentImageFileObject.ImageFilePayload
            /// Creates a new `MessageContentImageFileObject`.
            ///
            /// - Parameters:
            ///   - _type: Always `image_file`.
            ///   - imageFile:
            public init(
                _type: Components.Schemas.MessageContentImageFileObject._TypePayload,
                imageFile: Components.Schemas.MessageContentImageFileObject.ImageFilePayload
            ) {
                self._type = _type
                self.imageFile = imageFile
            }
            public enum CodingKeys: String, CodingKey {
                case _type = "type"
                case imageFile = "image_file"
            }
        }
        /// References an image URL in the content of a message.
        ///
        /// - Remark: Generated from `#/components/schemas/MessageContentImageUrlObject`.
        public struct MessageContentImageUrlObject: Codable, Hashable, Sendable {
            /// The type of the content part.
            ///
            /// - Remark: Generated from `#/components/schemas/MessageContentImageUrlObject/type`.
            @frozen public enum _TypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                case imageUrl = "image_url"
            }
            /// The type of the content part.
            ///
            /// - Remark: Generated from `#/components/schemas/MessageContentImageUrlObject/type`.
            public var _type: Components.Schemas.MessageContentImageUrlObject._TypePayload
            /// - Remark: Generated from `#/components/schemas/MessageContentImageUrlObject/image_url`.
            public struct ImageUrlPayload: Codable, Hashable, Sendable {
                /// The external URL of the image, must be a supported image types: jpeg, jpg, png, gif, webp.
                ///
                /// - Remark: Generated from `#/components/schemas/MessageContentImageUrlObject/image_url/url`.
                public var url: Swift.String
                /// Specifies the detail level of the image. `low` uses fewer tokens, you can opt in to high resolution using `high`. Default value is `auto`
                ///
                /// - Remark: Generated from `#/components/schemas/MessageContentImageUrlObject/image_url/detail`.
                @frozen public enum DetailPayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case auto = "auto"
                    case low = "low"
                    case high = "high"
                }
                /// Specifies the detail level of the image. `low` uses fewer tokens, you can opt in to high resolution using `high`. Default value is `auto`
                ///
                /// - Remark: Generated from `#/components/schemas/MessageContentImageUrlObject/image_url/detail`.
                public var detail: Components.Schemas.MessageContentImageUrlObject.ImageUrlPayload.DetailPayload?
                /// Creates a new `ImageUrlPayload`.
                ///
                /// - Parameters:
                ///   - url: The external URL of the image, must be a supported image types: jpeg, jpg, png, gif, webp.
                ///   - detail: Specifies the detail level of the image. `low` uses fewer tokens, you can opt in to high resolution using `high`. Default value is `auto`
                public init(
                    url: Swift.String,
                    detail: Components.Schemas.MessageContentImageUrlObject.ImageUrlPayload.DetailPayload? = nil
                ) {
                    self.url = url
                    self.detail = detail
                }
                public enum CodingKeys: String, CodingKey {
                    case url
                    case detail
                }
            }
            /// - Remark: Generated from `#/components/schemas/MessageContentImageUrlObject/image_url`.
            public var imageUrl: Components.Schemas.MessageContentImageUrlObject.ImageUrlPayload
            /// Creates a new `MessageContentImageUrlObject`.
            ///
            /// - Parameters:
            ///   - _type: The type of the content part.
            ///   - imageUrl:
            public init(
                _type: Components.Schemas.MessageContentImageUrlObject._TypePayload,
                imageUrl: Components.Schemas.MessageContentImageUrlObject.ImageUrlPayload
            ) {
                self._type = _type
                self.imageUrl = imageUrl
            }
            public enum CodingKeys: String, CodingKey {
                case _type = "type"
                case imageUrl = "image_url"
            }
        }
        /// The refusal content generated by the assistant.
        ///
        /// - Remark: Generated from `#/components/schemas/MessageContentRefusalObject`.
        public struct MessageContentRefusalObject: Codable, Hashable, Sendable {
            /// Always `refusal`.
            ///
            /// - Remark: Generated from `#/components/schemas/MessageContentRefusalObject/type`.
            @frozen public enum _TypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                case refusal = "refusal"
            }
            /// Always `refusal`.
            ///
            /// - Remark: Generated from `#/components/schemas/MessageContentRefusalObject/type`.
            public var _type: Components.Schemas.MessageContentRefusalObject._TypePayload
            /// - Remark: Generated from `#/components/schemas/MessageContentRefusalObject/refusal`.
            public var refusal: Swift.String
            /// Creates a new `MessageContentRefusalObject`.
            ///
            /// - Parameters:
            ///   - _type: Always `refusal`.
            ///   - refusal:
            public init(
                _type: Components.Schemas.MessageContentRefusalObject._TypePayload,
                refusal: Swift.String
            ) {
                self._type = _type
                self.refusal = refusal
            }
            public enum CodingKeys: String, CodingKey {
                case _type = "type"
                case refusal
            }
        }
        /// A citation within the message that points to a specific quote from a specific File associated with the assistant or the message. Generated when the assistant uses the "file_search" tool to search files.
        ///
        /// - Remark: Generated from `#/components/schemas/MessageContentTextAnnotationsFileCitationObject`.
        public struct MessageContentTextAnnotationsFileCitationObject: Codable, Hashable, Sendable {
            /// Always `file_citation`.
            ///
            /// - Remark: Generated from `#/components/schemas/MessageContentTextAnnotationsFileCitationObject/type`.
            @frozen public enum _TypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                case fileCitation = "file_citation"
            }
            /// Always `file_citation`.
            ///
            /// - Remark: Generated from `#/components/schemas/MessageContentTextAnnotationsFileCitationObject/type`.
            public var _type: Components.Schemas.MessageContentTextAnnotationsFileCitationObject._TypePayload
            /// The text in the message content that needs to be replaced.
            ///
            /// - Remark: Generated from `#/components/schemas/MessageContentTextAnnotationsFileCitationObject/text`.
            public var text: Swift.String
            /// - Remark: Generated from `#/components/schemas/MessageContentTextAnnotationsFileCitationObject/file_citation`.
            public struct FileCitationPayload: Codable, Hashable, Sendable {
                /// The ID of the specific File the citation is from.
                ///
                /// - Remark: Generated from `#/components/schemas/MessageContentTextAnnotationsFileCitationObject/file_citation/file_id`.
                public var fileId: Swift.String
                /// Creates a new `FileCitationPayload`.
                ///
                /// - Parameters:
                ///   - fileId: The ID of the specific File the citation is from.
                public init(fileId: Swift.String) {
                    self.fileId = fileId
                }
                public enum CodingKeys: String, CodingKey {
                    case fileId = "file_id"
                }
            }
            /// - Remark: Generated from `#/components/schemas/MessageContentTextAnnotationsFileCitationObject/file_citation`.
            public var fileCitation: Components.Schemas.MessageContentTextAnnotationsFileCitationObject.FileCitationPayload
            /// - Remark: Generated from `#/components/schemas/MessageContentTextAnnotationsFileCitationObject/start_index`.
            public var startIndex: Swift.Int
            /// - Remark: Generated from `#/components/schemas/MessageContentTextAnnotationsFileCitationObject/end_index`.
            public var endIndex: Swift.Int
            /// Creates a new `MessageContentTextAnnotationsFileCitationObject`.
            ///
            /// - Parameters:
            ///   - _type: Always `file_citation`.
            ///   - text: The text in the message content that needs to be replaced.
            ///   - fileCitation:
            ///   - startIndex:
            ///   - endIndex:
            public init(
                _type: Components.Schemas.MessageContentTextAnnotationsFileCitationObject._TypePayload,
                text: Swift.String,
                fileCitation: Components.Schemas.MessageContentTextAnnotationsFileCitationObject.FileCitationPayload,
                startIndex: Swift.Int,
                endIndex: Swift.Int
            ) {
                self._type = _type
                self.text = text
                self.fileCitation = fileCitation
                self.startIndex = startIndex
                self.endIndex = endIndex
            }
            public enum CodingKeys: String, CodingKey {
                case _type = "type"
                case text
                case fileCitation = "file_citation"
                case startIndex = "start_index"
                case endIndex = "end_index"
            }
        }
        /// A URL for the file that's generated when the assistant used the `code_interpreter` tool to generate a file.
        ///
        /// - Remark: Generated from `#/components/schemas/MessageContentTextAnnotationsFilePathObject`.
        public struct MessageContentTextAnnotationsFilePathObject: Codable, Hashable, Sendable {
            /// Always `file_path`.
            ///
            /// - Remark: Generated from `#/components/schemas/MessageContentTextAnnotationsFilePathObject/type`.
            @frozen public enum _TypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                case filePath = "file_path"
            }
            /// Always `file_path`.
            ///
            /// - Remark: Generated from `#/components/schemas/MessageContentTextAnnotationsFilePathObject/type`.
            public var _type: Components.Schemas.MessageContentTextAnnotationsFilePathObject._TypePayload
            /// The text in the message content that needs to be replaced.
            ///
            /// - Remark: Generated from `#/components/schemas/MessageContentTextAnnotationsFilePathObject/text`.
            public var text: Swift.String
            /// - Remark: Generated from `#/components/schemas/MessageContentTextAnnotationsFilePathObject/file_path`.
            public struct FilePathPayload: Codable, Hashable, Sendable {
                /// The ID of the file that was generated.
                ///
                /// - Remark: Generated from `#/components/schemas/MessageContentTextAnnotationsFilePathObject/file_path/file_id`.
                public var fileId: Swift.String
                /// Creates a new `FilePathPayload`.
                ///
                /// - Parameters:
                ///   - fileId: The ID of the file that was generated.
                public init(fileId: Swift.String) {
                    self.fileId = fileId
                }
                public enum CodingKeys: String, CodingKey {
                    case fileId = "file_id"
                }
            }
            /// - Remark: Generated from `#/components/schemas/MessageContentTextAnnotationsFilePathObject/file_path`.
            public var filePath: Components.Schemas.MessageContentTextAnnotationsFilePathObject.FilePathPayload
            /// - Remark: Generated from `#/components/schemas/MessageContentTextAnnotationsFilePathObject/start_index`.
            public var startIndex: Swift.Int
            /// - Remark: Generated from `#/components/schemas/MessageContentTextAnnotationsFilePathObject/end_index`.
            public var endIndex: Swift.Int
            /// Creates a new `MessageContentTextAnnotationsFilePathObject`.
            ///
            /// - Parameters:
            ///   - _type: Always `file_path`.
            ///   - text: The text in the message content that needs to be replaced.
            ///   - filePath:
            ///   - startIndex:
            ///   - endIndex:
            public init(
                _type: Components.Schemas.MessageContentTextAnnotationsFilePathObject._TypePayload,
                text: Swift.String,
                filePath: Components.Schemas.MessageContentTextAnnotationsFilePathObject.FilePathPayload,
                startIndex: Swift.Int,
                endIndex: Swift.Int
            ) {
                self._type = _type
                self.text = text
                self.filePath = filePath
                self.startIndex = startIndex
                self.endIndex = endIndex
            }
            public enum CodingKeys: String, CodingKey {
                case _type = "type"
                case text
                case filePath = "file_path"
                case startIndex = "start_index"
                case endIndex = "end_index"
            }
        }
        /// The text content that is part of a message.
        ///
        /// - Remark: Generated from `#/components/schemas/MessageContentTextObject`.
        public struct MessageContentTextObject: Codable, Hashable, Sendable {
            /// Always `text`.
            ///
            /// - Remark: Generated from `#/components/schemas/MessageContentTextObject/type`.
            @frozen public enum _TypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                case text = "text"
            }
            /// Always `text`.
            ///
            /// - Remark: Generated from `#/components/schemas/MessageContentTextObject/type`.
            public var _type: Components.Schemas.MessageContentTextObject._TypePayload
            /// - Remark: Generated from `#/components/schemas/MessageContentTextObject/text`.
            public struct TextPayload: Codable, Hashable, Sendable {
                /// The data that makes up the text.
                ///
                /// - Remark: Generated from `#/components/schemas/MessageContentTextObject/text/value`.
                public var value: Swift.String
                /// - Remark: Generated from `#/components/schemas/MessageContentTextObject/text/AnnotationsPayload`.
                @frozen public enum AnnotationsPayloadPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/MessageContentTextObject/text/AnnotationsPayload/case1`.
                    case MessageContentTextAnnotationsFileCitationObject(Components.Schemas.MessageContentTextAnnotationsFileCitationObject)
                    /// - Remark: Generated from `#/components/schemas/MessageContentTextObject/text/AnnotationsPayload/case2`.
                    case MessageContentTextAnnotationsFilePathObject(Components.Schemas.MessageContentTextAnnotationsFilePathObject)
                    public init(from decoder: any Decoder) throws {
                        var errors: [any Error] = []
                        do {
                            self = .MessageContentTextAnnotationsFileCitationObject(try .init(from: decoder))
                            return
                        } catch {
                            errors.append(error)
                        }
                        do {
                            self = .MessageContentTextAnnotationsFilePathObject(try .init(from: decoder))
                            return
                        } catch {
                            errors.append(error)
                        }
                        throw Swift.DecodingError.failedToDecodeOneOfSchema(
                            type: Self.self,
                            codingPath: decoder.codingPath,
                            errors: errors
                        )
                    }
                    public func encode(to encoder: any Encoder) throws {
                        switch self {
                        case let .MessageContentTextAnnotationsFileCitationObject(value):
                            try value.encode(to: encoder)
                        case let .MessageContentTextAnnotationsFilePathObject(value):
                            try value.encode(to: encoder)
                        }
                    }
                }
                /// - Remark: Generated from `#/components/schemas/MessageContentTextObject/text/annotations`.
                public typealias AnnotationsPayload = [Components.Schemas.MessageContentTextObject.TextPayload.AnnotationsPayloadPayload]
                /// - Remark: Generated from `#/components/schemas/MessageContentTextObject/text/annotations`.
                public var annotations: Components.Schemas.MessageContentTextObject.TextPayload.AnnotationsPayload
                /// Creates a new `TextPayload`.
                ///
                /// - Parameters:
                ///   - value: The data that makes up the text.
                ///   - annotations:
                public init(
                    value: Swift.String,
                    annotations: Components.Schemas.MessageContentTextObject.TextPayload.AnnotationsPayload
                ) {
                    self.value = value
                    self.annotations = annotations
                }
                public enum CodingKeys: String, CodingKey {
                    case value
                    case annotations
                }
            }
            /// - Remark: Generated from `#/components/schemas/MessageContentTextObject/text`.
            public var text: Components.Schemas.MessageContentTextObject.TextPayload
            /// Creates a new `MessageContentTextObject`.
            ///
            /// - Parameters:
            ///   - _type: Always `text`.
            ///   - text:
            public init(
                _type: Components.Schemas.MessageContentTextObject._TypePayload,
                text: Components.Schemas.MessageContentTextObject.TextPayload
            ) {
                self._type = _type
                self.text = text
            }
            public enum CodingKeys: String, CodingKey {
                case _type = "type"
                case text
            }
        }
        /// References an image [File](/docs/api-reference/files) in the content of a message.
        ///
        /// - Remark: Generated from `#/components/schemas/MessageDeltaContentImageFileObject`.
        public struct MessageDeltaContentImageFileObject: Codable, Hashable, Sendable {
            /// The index of the content part in the message.
            ///
            /// - Remark: Generated from `#/components/schemas/MessageDeltaContentImageFileObject/index`.
            public var index: Swift.Int
            /// Always `image_file`.
            ///
            /// - Remark: Generated from `#/components/schemas/MessageDeltaContentImageFileObject/type`.
            @frozen public enum _TypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                case imageFile = "image_file"
            }
            /// Always `image_file`.
            ///
            /// - Remark: Generated from `#/components/schemas/MessageDeltaContentImageFileObject/type`.
            public var _type: Components.Schemas.MessageDeltaContentImageFileObject._TypePayload
            /// - Remark: Generated from `#/components/schemas/MessageDeltaContentImageFileObject/image_file`.
            public struct ImageFilePayload: Codable, Hashable, Sendable {
                /// The [File](/docs/api-reference/files) ID of the image in the message content. Set `purpose="vision"` when uploading the File if you need to later display the file content.
                ///
                /// - Remark: Generated from `#/components/schemas/MessageDeltaContentImageFileObject/image_file/file_id`.
                public var fileId: Swift.String?
                /// Specifies the detail level of the image if specified by the user. `low` uses fewer tokens, you can opt in to high resolution using `high`.
                ///
                /// - Remark: Generated from `#/components/schemas/MessageDeltaContentImageFileObject/image_file/detail`.
                @frozen public enum DetailPayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case auto = "auto"
                    case low = "low"
                    case high = "high"
                }
                /// Specifies the detail level of the image if specified by the user. `low` uses fewer tokens, you can opt in to high resolution using `high`.
                ///
                /// - Remark: Generated from `#/components/schemas/MessageDeltaContentImageFileObject/image_file/detail`.
                public var detail: Components.Schemas.MessageDeltaContentImageFileObject.ImageFilePayload.DetailPayload?
                /// Creates a new `ImageFilePayload`.
                ///
                /// - Parameters:
                ///   - fileId: The [File](/docs/api-reference/files) ID of the image in the message content. Set `purpose="vision"` when uploading the File if you need to later display the file content.
                ///   - detail: Specifies the detail level of the image if specified by the user. `low` uses fewer tokens, you can opt in to high resolution using `high`.
                public init(
                    fileId: Swift.String? = nil,
                    detail: Components.Schemas.MessageDeltaContentImageFileObject.ImageFilePayload.DetailPayload? = nil
                ) {
                    self.fileId = fileId
                    self.detail = detail
                }
                public enum CodingKeys: String, CodingKey {
                    case fileId = "file_id"
                    case detail
                }
            }
            /// - Remark: Generated from `#/components/schemas/MessageDeltaContentImageFileObject/image_file`.
            public var imageFile: Components.Schemas.MessageDeltaContentImageFileObject.ImageFilePayload?
            /// Creates a new `MessageDeltaContentImageFileObject`.
            ///
            /// - Parameters:
            ///   - index: The index of the content part in the message.
            ///   - _type: Always `image_file`.
            ///   - imageFile:
            public init(
                index: Swift.Int,
                _type: Components.Schemas.MessageDeltaContentImageFileObject._TypePayload,
                imageFile: Components.Schemas.MessageDeltaContentImageFileObject.ImageFilePayload? = nil
            ) {
                self.index = index
                self._type = _type
                self.imageFile = imageFile
            }
            public enum CodingKeys: String, CodingKey {
                case index
                case _type = "type"
                case imageFile = "image_file"
            }
        }
        /// References an image URL in the content of a message.
        ///
        /// - Remark: Generated from `#/components/schemas/MessageDeltaContentImageUrlObject`.
        public struct MessageDeltaContentImageUrlObject: Codable, Hashable, Sendable {
            /// The index of the content part in the message.
            ///
            /// - Remark: Generated from `#/components/schemas/MessageDeltaContentImageUrlObject/index`.
            public var index: Swift.Int
            /// Always `image_url`.
            ///
            /// - Remark: Generated from `#/components/schemas/MessageDeltaContentImageUrlObject/type`.
            @frozen public enum _TypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                case imageUrl = "image_url"
            }
            /// Always `image_url`.
            ///
            /// - Remark: Generated from `#/components/schemas/MessageDeltaContentImageUrlObject/type`.
            public var _type: Components.Schemas.MessageDeltaContentImageUrlObject._TypePayload
            /// - Remark: Generated from `#/components/schemas/MessageDeltaContentImageUrlObject/image_url`.
            public struct ImageUrlPayload: Codable, Hashable, Sendable {
                /// The URL of the image, must be a supported image types: jpeg, jpg, png, gif, webp.
                ///
                /// - Remark: Generated from `#/components/schemas/MessageDeltaContentImageUrlObject/image_url/url`.
                public var url: Swift.String?
                /// Specifies the detail level of the image. `low` uses fewer tokens, you can opt in to high resolution using `high`.
                ///
                /// - Remark: Generated from `#/components/schemas/MessageDeltaContentImageUrlObject/image_url/detail`.
                @frozen public enum DetailPayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case auto = "auto"
                    case low = "low"
                    case high = "high"
                }
                /// Specifies the detail level of the image. `low` uses fewer tokens, you can opt in to high resolution using `high`.
                ///
                /// - Remark: Generated from `#/components/schemas/MessageDeltaContentImageUrlObject/image_url/detail`.
                public var detail: Components.Schemas.MessageDeltaContentImageUrlObject.ImageUrlPayload.DetailPayload?
                /// Creates a new `ImageUrlPayload`.
                ///
                /// - Parameters:
                ///   - url: The URL of the image, must be a supported image types: jpeg, jpg, png, gif, webp.
                ///   - detail: Specifies the detail level of the image. `low` uses fewer tokens, you can opt in to high resolution using `high`.
                public init(
                    url: Swift.String? = nil,
                    detail: Components.Schemas.MessageDeltaContentImageUrlObject.ImageUrlPayload.DetailPayload? = nil
                ) {
                    self.url = url
                    self.detail = detail
                }
                public enum CodingKeys: String, CodingKey {
                    case url
                    case detail
                }
            }
            /// - Remark: Generated from `#/components/schemas/MessageDeltaContentImageUrlObject/image_url`.
            public var imageUrl: Components.Schemas.MessageDeltaContentImageUrlObject.ImageUrlPayload?
            /// Creates a new `MessageDeltaContentImageUrlObject`.
            ///
            /// - Parameters:
            ///   - index: The index of the content part in the message.
            ///   - _type: Always `image_url`.
            ///   - imageUrl:
            public init(
                index: Swift.Int,
                _type: Components.Schemas.MessageDeltaContentImageUrlObject._TypePayload,
                imageUrl: Components.Schemas.MessageDeltaContentImageUrlObject.ImageUrlPayload? = nil
            ) {
                self.index = index
                self._type = _type
                self.imageUrl = imageUrl
            }
            public enum CodingKeys: String, CodingKey {
                case index
                case _type = "type"
                case imageUrl = "image_url"
            }
        }
        /// The refusal content that is part of a message.
        ///
        /// - Remark: Generated from `#/components/schemas/MessageDeltaContentRefusalObject`.
        public struct MessageDeltaContentRefusalObject: Codable, Hashable, Sendable {
            /// The index of the refusal part in the message.
            ///
            /// - Remark: Generated from `#/components/schemas/MessageDeltaContentRefusalObject/index`.
            public var index: Swift.Int
            /// Always `refusal`.
            ///
            /// - Remark: Generated from `#/components/schemas/MessageDeltaContentRefusalObject/type`.
            @frozen public enum _TypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                case refusal = "refusal"
            }
            /// Always `refusal`.
            ///
            /// - Remark: Generated from `#/components/schemas/MessageDeltaContentRefusalObject/type`.
            public var _type: Components.Schemas.MessageDeltaContentRefusalObject._TypePayload
            /// - Remark: Generated from `#/components/schemas/MessageDeltaContentRefusalObject/refusal`.
            public var refusal: Swift.String?
            /// Creates a new `MessageDeltaContentRefusalObject`.
            ///
            /// - Parameters:
            ///   - index: The index of the refusal part in the message.
            ///   - _type: Always `refusal`.
            ///   - refusal:
            public init(
                index: Swift.Int,
                _type: Components.Schemas.MessageDeltaContentRefusalObject._TypePayload,
                refusal: Swift.String? = nil
            ) {
                self.index = index
                self._type = _type
                self.refusal = refusal
            }
            public enum CodingKeys: String, CodingKey {
                case index
                case _type = "type"
                case refusal
            }
        }
        /// A citation within the message that points to a specific quote from a specific File associated with the assistant or the message. Generated when the assistant uses the "file_search" tool to search files.
        ///
        /// - Remark: Generated from `#/components/schemas/MessageDeltaContentTextAnnotationsFileCitationObject`.
        public struct MessageDeltaContentTextAnnotationsFileCitationObject: Codable, Hashable, Sendable {
            /// The index of the annotation in the text content part.
            ///
            /// - Remark: Generated from `#/components/schemas/MessageDeltaContentTextAnnotationsFileCitationObject/index`.
            public var index: Swift.Int
            /// Always `file_citation`.
            ///
            /// - Remark: Generated from `#/components/schemas/MessageDeltaContentTextAnnotationsFileCitationObject/type`.
            @frozen public enum _TypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                case fileCitation = "file_citation"
            }
            /// Always `file_citation`.
            ///
            /// - Remark: Generated from `#/components/schemas/MessageDeltaContentTextAnnotationsFileCitationObject/type`.
            public var _type: Components.Schemas.MessageDeltaContentTextAnnotationsFileCitationObject._TypePayload
            /// The text in the message content that needs to be replaced.
            ///
            /// - Remark: Generated from `#/components/schemas/MessageDeltaContentTextAnnotationsFileCitationObject/text`.
            public var text: Swift.String?
            /// - Remark: Generated from `#/components/schemas/MessageDeltaContentTextAnnotationsFileCitationObject/file_citation`.
            public struct FileCitationPayload: Codable, Hashable, Sendable {
                /// The ID of the specific File the citation is from.
                ///
                /// - Remark: Generated from `#/components/schemas/MessageDeltaContentTextAnnotationsFileCitationObject/file_citation/file_id`.
                public var fileId: Swift.String?
                /// The specific quote in the file.
                ///
                /// - Remark: Generated from `#/components/schemas/MessageDeltaContentTextAnnotationsFileCitationObject/file_citation/quote`.
                public var quote: Swift.String?
                /// Creates a new `FileCitationPayload`.
                ///
                /// - Parameters:
                ///   - fileId: The ID of the specific File the citation is from.
                ///   - quote: The specific quote in the file.
                public init(
                    fileId: Swift.String? = nil,
                    quote: Swift.String? = nil
                ) {
                    self.fileId = fileId
                    self.quote = quote
                }
                public enum CodingKeys: String, CodingKey {
                    case fileId = "file_id"
                    case quote
                }
            }
            /// - Remark: Generated from `#/components/schemas/MessageDeltaContentTextAnnotationsFileCitationObject/file_citation`.
            public var fileCitation: Components.Schemas.MessageDeltaContentTextAnnotationsFileCitationObject.FileCitationPayload?
            /// - Remark: Generated from `#/components/schemas/MessageDeltaContentTextAnnotationsFileCitationObject/start_index`.
            public var startIndex: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/MessageDeltaContentTextAnnotationsFileCitationObject/end_index`.
            public var endIndex: Swift.Int?
            /// Creates a new `MessageDeltaContentTextAnnotationsFileCitationObject`.
            ///
            /// - Parameters:
            ///   - index: The index of the annotation in the text content part.
            ///   - _type: Always `file_citation`.
            ///   - text: The text in the message content that needs to be replaced.
            ///   - fileCitation:
            ///   - startIndex:
            ///   - endIndex:
            public init(
                index: Swift.Int,
                _type: Components.Schemas.MessageDeltaContentTextAnnotationsFileCitationObject._TypePayload,
                text: Swift.String? = nil,
                fileCitation: Components.Schemas.MessageDeltaContentTextAnnotationsFileCitationObject.FileCitationPayload? = nil,
                startIndex: Swift.Int? = nil,
                endIndex: Swift.Int? = nil
            ) {
                self.index = index
                self._type = _type
                self.text = text
                self.fileCitation = fileCitation
                self.startIndex = startIndex
                self.endIndex = endIndex
            }
            public enum CodingKeys: String, CodingKey {
                case index
                case _type = "type"
                case text
                case fileCitation = "file_citation"
                case startIndex = "start_index"
                case endIndex = "end_index"
            }
        }
        /// A URL for the file that's generated when the assistant used the `code_interpreter` tool to generate a file.
        ///
        /// - Remark: Generated from `#/components/schemas/MessageDeltaContentTextAnnotationsFilePathObject`.
        public struct MessageDeltaContentTextAnnotationsFilePathObject: Codable, Hashable, Sendable {
            /// The index of the annotation in the text content part.
            ///
            /// - Remark: Generated from `#/components/schemas/MessageDeltaContentTextAnnotationsFilePathObject/index`.
            public var index: Swift.Int
            /// Always `file_path`.
            ///
            /// - Remark: Generated from `#/components/schemas/MessageDeltaContentTextAnnotationsFilePathObject/type`.
            @frozen public enum _TypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                case filePath = "file_path"
            }
            /// Always `file_path`.
            ///
            /// - Remark: Generated from `#/components/schemas/MessageDeltaContentTextAnnotationsFilePathObject/type`.
            public var _type: Components.Schemas.MessageDeltaContentTextAnnotationsFilePathObject._TypePayload
            /// The text in the message content that needs to be replaced.
            ///
            /// - Remark: Generated from `#/components/schemas/MessageDeltaContentTextAnnotationsFilePathObject/text`.
            public var text: Swift.String?
            /// - Remark: Generated from `#/components/schemas/MessageDeltaContentTextAnnotationsFilePathObject/file_path`.
            public struct FilePathPayload: Codable, Hashable, Sendable {
                /// The ID of the file that was generated.
                ///
                /// - Remark: Generated from `#/components/schemas/MessageDeltaContentTextAnnotationsFilePathObject/file_path/file_id`.
                public var fileId: Swift.String?
                /// Creates a new `FilePathPayload`.
                ///
                /// - Parameters:
                ///   - fileId: The ID of the file that was generated.
                public init(fileId: Swift.String? = nil) {
                    self.fileId = fileId
                }
                public enum CodingKeys: String, CodingKey {
                    case fileId = "file_id"
                }
            }
            /// - Remark: Generated from `#/components/schemas/MessageDeltaContentTextAnnotationsFilePathObject/file_path`.
            public var filePath: Components.Schemas.MessageDeltaContentTextAnnotationsFilePathObject.FilePathPayload?
            /// - Remark: Generated from `#/components/schemas/MessageDeltaContentTextAnnotationsFilePathObject/start_index`.
            public var startIndex: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/MessageDeltaContentTextAnnotationsFilePathObject/end_index`.
            public var endIndex: Swift.Int?
            /// Creates a new `MessageDeltaContentTextAnnotationsFilePathObject`.
            ///
            /// - Parameters:
            ///   - index: The index of the annotation in the text content part.
            ///   - _type: Always `file_path`.
            ///   - text: The text in the message content that needs to be replaced.
            ///   - filePath:
            ///   - startIndex:
            ///   - endIndex:
            public init(
                index: Swift.Int,
                _type: Components.Schemas.MessageDeltaContentTextAnnotationsFilePathObject._TypePayload,
                text: Swift.String? = nil,
                filePath: Components.Schemas.MessageDeltaContentTextAnnotationsFilePathObject.FilePathPayload? = nil,
                startIndex: Swift.Int? = nil,
                endIndex: Swift.Int? = nil
            ) {
                self.index = index
                self._type = _type
                self.text = text
                self.filePath = filePath
                self.startIndex = startIndex
                self.endIndex = endIndex
            }
            public enum CodingKeys: String, CodingKey {
                case index
                case _type = "type"
                case text
                case filePath = "file_path"
                case startIndex = "start_index"
                case endIndex = "end_index"
            }
        }
        /// The text content that is part of a message.
        ///
        /// - Remark: Generated from `#/components/schemas/MessageDeltaContentTextObject`.
        public struct MessageDeltaContentTextObject: Codable, Hashable, Sendable {
            /// The index of the content part in the message.
            ///
            /// - Remark: Generated from `#/components/schemas/MessageDeltaContentTextObject/index`.
            public var index: Swift.Int
            /// Always `text`.
            ///
            /// - Remark: Generated from `#/components/schemas/MessageDeltaContentTextObject/type`.
            @frozen public enum _TypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                case text = "text"
            }
            /// Always `text`.
            ///
            /// - Remark: Generated from `#/components/schemas/MessageDeltaContentTextObject/type`.
            public var _type: Components.Schemas.MessageDeltaContentTextObject._TypePayload
            /// - Remark: Generated from `#/components/schemas/MessageDeltaContentTextObject/text`.
            public struct TextPayload: Codable, Hashable, Sendable {
                /// The data that makes up the text.
                ///
                /// - Remark: Generated from `#/components/schemas/MessageDeltaContentTextObject/text/value`.
                public var value: Swift.String?
                /// - Remark: Generated from `#/components/schemas/MessageDeltaContentTextObject/text/AnnotationsPayload`.
                @frozen public enum AnnotationsPayloadPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/MessageDeltaContentTextObject/text/AnnotationsPayload/case1`.
                    case MessageDeltaContentTextAnnotationsFileCitationObject(Components.Schemas.MessageDeltaContentTextAnnotationsFileCitationObject)
                    /// - Remark: Generated from `#/components/schemas/MessageDeltaContentTextObject/text/AnnotationsPayload/case2`.
                    case MessageDeltaContentTextAnnotationsFilePathObject(Components.Schemas.MessageDeltaContentTextAnnotationsFilePathObject)
                    public init(from decoder: any Decoder) throws {
                        var errors: [any Error] = []
                        do {
                            self = .MessageDeltaContentTextAnnotationsFileCitationObject(try .init(from: decoder))
                            return
                        } catch {
                            errors.append(error)
                        }
                        do {
                            self = .MessageDeltaContentTextAnnotationsFilePathObject(try .init(from: decoder))
                            return
                        } catch {
                            errors.append(error)
                        }
                        throw Swift.DecodingError.failedToDecodeOneOfSchema(
                            type: Self.self,
                            codingPath: decoder.codingPath,
                            errors: errors
                        )
                    }
                    public func encode(to encoder: any Encoder) throws {
                        switch self {
                        case let .MessageDeltaContentTextAnnotationsFileCitationObject(value):
                            try value.encode(to: encoder)
                        case let .MessageDeltaContentTextAnnotationsFilePathObject(value):
                            try value.encode(to: encoder)
                        }
                    }
                }
                /// - Remark: Generated from `#/components/schemas/MessageDeltaContentTextObject/text/annotations`.
                public typealias AnnotationsPayload = [Components.Schemas.MessageDeltaContentTextObject.TextPayload.AnnotationsPayloadPayload]
                /// - Remark: Generated from `#/components/schemas/MessageDeltaContentTextObject/text/annotations`.
                public var annotations: Components.Schemas.MessageDeltaContentTextObject.TextPayload.AnnotationsPayload?
                /// Creates a new `TextPayload`.
                ///
                /// - Parameters:
                ///   - value: The data that makes up the text.
                ///   - annotations:
                public init(
                    value: Swift.String? = nil,
                    annotations: Components.Schemas.MessageDeltaContentTextObject.TextPayload.AnnotationsPayload? = nil
                ) {
                    self.value = value
                    self.annotations = annotations
                }
                public enum CodingKeys: String, CodingKey {
                    case value
                    case annotations
                }
            }
            /// - Remark: Generated from `#/components/schemas/MessageDeltaContentTextObject/text`.
            public var text: Components.Schemas.MessageDeltaContentTextObject.TextPayload?
            /// Creates a new `MessageDeltaContentTextObject`.
            ///
            /// - Parameters:
            ///   - index: The index of the content part in the message.
            ///   - _type: Always `text`.
            ///   - text:
            public init(
                index: Swift.Int,
                _type: Components.Schemas.MessageDeltaContentTextObject._TypePayload,
                text: Components.Schemas.MessageDeltaContentTextObject.TextPayload? = nil
            ) {
                self.index = index
                self._type = _type
                self.text = text
            }
            public enum CodingKeys: String, CodingKey {
                case index
                case _type = "type"
                case text
            }
        }
        /// Represents a message delta i.e. any changed fields on a message during streaming.
        ///
        ///
        /// - Remark: Generated from `#/components/schemas/MessageDeltaObject`.
        public struct MessageDeltaObject: Codable, Hashable, Sendable {
            /// The identifier of the message, which can be referenced in API endpoints.
            ///
            /// - Remark: Generated from `#/components/schemas/MessageDeltaObject/id`.
            public var id: Swift.String
            /// The object type, which is always `thread.message.delta`.
            ///
            /// - Remark: Generated from `#/components/schemas/MessageDeltaObject/object`.
            @frozen public enum ObjectPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case thread_message_delta = "thread.message.delta"
            }
            /// The object type, which is always `thread.message.delta`.
            ///
            /// - Remark: Generated from `#/components/schemas/MessageDeltaObject/object`.
            public var object: Components.Schemas.MessageDeltaObject.ObjectPayload
            /// The delta containing the fields that have changed on the Message.
            ///
            /// - Remark: Generated from `#/components/schemas/MessageDeltaObject/delta`.
            public struct DeltaPayload: Codable, Hashable, Sendable {
                /// The entity that produced the message. One of `user` or `assistant`.
                ///
                /// - Remark: Generated from `#/components/schemas/MessageDeltaObject/delta/role`.
                @frozen public enum RolePayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case user = "user"
                    case assistant = "assistant"
                }
                /// The entity that produced the message. One of `user` or `assistant`.
                ///
                /// - Remark: Generated from `#/components/schemas/MessageDeltaObject/delta/role`.
                public var role: Components.Schemas.MessageDeltaObject.DeltaPayload.RolePayload?
                /// - Remark: Generated from `#/components/schemas/MessageDeltaObject/delta/ContentPayload`.
                @frozen public enum ContentPayloadPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/MessageDeltaObject/delta/ContentPayload/case1`.
                    case MessageDeltaContentImageFileObject(Components.Schemas.MessageDeltaContentImageFileObject)
                    /// - Remark: Generated from `#/components/schemas/MessageDeltaObject/delta/ContentPayload/case2`.
                    case MessageDeltaContentTextObject(Components.Schemas.MessageDeltaContentTextObject)
                    /// - Remark: Generated from `#/components/schemas/MessageDeltaObject/delta/ContentPayload/case3`.
                    case MessageDeltaContentRefusalObject(Components.Schemas.MessageDeltaContentRefusalObject)
                    /// - Remark: Generated from `#/components/schemas/MessageDeltaObject/delta/ContentPayload/case4`.
                    case MessageDeltaContentImageUrlObject(Components.Schemas.MessageDeltaContentImageUrlObject)
                    public init(from decoder: any Decoder) throws {
                        var errors: [any Error] = []
                        do {
                            self = .MessageDeltaContentImageFileObject(try .init(from: decoder))
                            return
                        } catch {
                            errors.append(error)
                        }
                        do {
                            self = .MessageDeltaContentTextObject(try .init(from: decoder))
                            return
                        } catch {
                            errors.append(error)
                        }
                        do {
                            self = .MessageDeltaContentRefusalObject(try .init(from: decoder))
                            return
                        } catch {
                            errors.append(error)
                        }
                        do {
                            self = .MessageDeltaContentImageUrlObject(try .init(from: decoder))
                            return
                        } catch {
                            errors.append(error)
                        }
                        throw Swift.DecodingError.failedToDecodeOneOfSchema(
                            type: Self.self,
                            codingPath: decoder.codingPath,
                            errors: errors
                        )
                    }
                    public func encode(to encoder: any Encoder) throws {
                        switch self {
                        case let .MessageDeltaContentImageFileObject(value):
                            try value.encode(to: encoder)
                        case let .MessageDeltaContentTextObject(value):
                            try value.encode(to: encoder)
                        case let .MessageDeltaContentRefusalObject(value):
                            try value.encode(to: encoder)
                        case let .MessageDeltaContentImageUrlObject(value):
                            try value.encode(to: encoder)
                        }
                    }
                }
                /// The content of the message in array of text and/or images.
                ///
                /// - Remark: Generated from `#/components/schemas/MessageDeltaObject/delta/content`.
                public typealias ContentPayload = [Components.Schemas.MessageDeltaObject.DeltaPayload.ContentPayloadPayload]
                /// The content of the message in array of text and/or images.
                ///
                /// - Remark: Generated from `#/components/schemas/MessageDeltaObject/delta/content`.
                public var content: Components.Schemas.MessageDeltaObject.DeltaPayload.ContentPayload?
                /// Creates a new `DeltaPayload`.
                ///
                /// - Parameters:
                ///   - role: The entity that produced the message. One of `user` or `assistant`.
                ///   - content: The content of the message in array of text and/or images.
                public init(
                    role: Components.Schemas.MessageDeltaObject.DeltaPayload.RolePayload? = nil,
                    content: Components.Schemas.MessageDeltaObject.DeltaPayload.ContentPayload? = nil
                ) {
                    self.role = role
                    self.content = content
                }
                public enum CodingKeys: String, CodingKey {
                    case role
                    case content
                }
            }
            /// The delta containing the fields that have changed on the Message.
            ///
            /// - Remark: Generated from `#/components/schemas/MessageDeltaObject/delta`.
            public var delta: Components.Schemas.MessageDeltaObject.DeltaPayload
            /// Creates a new `MessageDeltaObject`.
            ///
            /// - Parameters:
            ///   - id: The identifier of the message, which can be referenced in API endpoints.
            ///   - object: The object type, which is always `thread.message.delta`.
            ///   - delta: The delta containing the fields that have changed on the Message.
            public init(
                id: Swift.String,
                object: Components.Schemas.MessageDeltaObject.ObjectPayload,
                delta: Components.Schemas.MessageDeltaObject.DeltaPayload
            ) {
                self.id = id
                self.object = object
                self.delta = delta
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case object
                case delta
            }
        }
        /// Represents a message within a [thread](/docs/api-reference/threads).
        ///
        /// - Remark: Generated from `#/components/schemas/MessageObject`.
        public struct MessageObject: Codable, Hashable, Sendable {
            /// The identifier, which can be referenced in API endpoints.
            ///
            /// - Remark: Generated from `#/components/schemas/MessageObject/id`.
            public var id: Swift.String
            /// The object type, which is always `thread.message`.
            ///
            /// - Remark: Generated from `#/components/schemas/MessageObject/object`.
            @frozen public enum ObjectPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case thread_message = "thread.message"
            }
            /// The object type, which is always `thread.message`.
            ///
            /// - Remark: Generated from `#/components/schemas/MessageObject/object`.
            public var object: Components.Schemas.MessageObject.ObjectPayload
            /// The Unix timestamp (in seconds) for when the message was created.
            ///
            /// - Remark: Generated from `#/components/schemas/MessageObject/created_at`.
            public var createdAt: Swift.Int
            /// The [thread](/docs/api-reference/threads) ID that this message belongs to.
            ///
            /// - Remark: Generated from `#/components/schemas/MessageObject/thread_id`.
            public var threadId: Swift.String
            /// The status of the message, which can be either `in_progress`, `incomplete`, or `completed`.
            ///
            /// - Remark: Generated from `#/components/schemas/MessageObject/status`.
            @frozen public enum StatusPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case inProgress = "in_progress"
                case incomplete = "incomplete"
                case completed = "completed"
            }
            /// The status of the message, which can be either `in_progress`, `incomplete`, or `completed`.
            ///
            /// - Remark: Generated from `#/components/schemas/MessageObject/status`.
            public var status: Components.Schemas.MessageObject.StatusPayload
            /// On an incomplete message, details about why the message is incomplete.
            ///
            /// - Remark: Generated from `#/components/schemas/MessageObject/incomplete_details`.
            public struct IncompleteDetailsPayload: Codable, Hashable, Sendable {
                /// The reason the message is incomplete.
                ///
                /// - Remark: Generated from `#/components/schemas/MessageObject/incomplete_details/reason`.
                @frozen public enum ReasonPayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case contentFilter = "content_filter"
                    case maxTokens = "max_tokens"
                    case runCancelled = "run_cancelled"
                    case runExpired = "run_expired"
                    case runFailed = "run_failed"
                }
                /// The reason the message is incomplete.
                ///
                /// - Remark: Generated from `#/components/schemas/MessageObject/incomplete_details/reason`.
                public var reason: Components.Schemas.MessageObject.IncompleteDetailsPayload.ReasonPayload
                /// Creates a new `IncompleteDetailsPayload`.
                ///
                /// - Parameters:
                ///   - reason: The reason the message is incomplete.
                public init(reason: Components.Schemas.MessageObject.IncompleteDetailsPayload.ReasonPayload) {
                    self.reason = reason
                }
                public enum CodingKeys: String, CodingKey {
                    case reason
                }
            }
            /// On an incomplete message, details about why the message is incomplete.
            ///
            /// - Remark: Generated from `#/components/schemas/MessageObject/incomplete_details`.
            public var incompleteDetails: Components.Schemas.MessageObject.IncompleteDetailsPayload?
            /// The Unix timestamp (in seconds) for when the message was completed.
            ///
            /// - Remark: Generated from `#/components/schemas/MessageObject/completed_at`.
            public var completedAt: Swift.Int?
            /// The Unix timestamp (in seconds) for when the message was marked as incomplete.
            ///
            /// - Remark: Generated from `#/components/schemas/MessageObject/incomplete_at`.
            public var incompleteAt: Swift.Int?
            /// The entity that produced the message. One of `user` or `assistant`.
            ///
            /// - Remark: Generated from `#/components/schemas/MessageObject/role`.
            @frozen public enum RolePayload: String, Codable, Hashable, Sendable, CaseIterable {
                case user = "user"
                case assistant = "assistant"
            }
            /// The entity that produced the message. One of `user` or `assistant`.
            ///
            /// - Remark: Generated from `#/components/schemas/MessageObject/role`.
            public var role: Components.Schemas.MessageObject.RolePayload
            /// - Remark: Generated from `#/components/schemas/MessageObject/ContentPayload`.
            @frozen public enum ContentPayloadPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/MessageObject/ContentPayload/case1`.
                case MessageContentImageFileObject(Components.Schemas.MessageContentImageFileObject)
                /// - Remark: Generated from `#/components/schemas/MessageObject/ContentPayload/case2`.
                case MessageContentImageUrlObject(Components.Schemas.MessageContentImageUrlObject)
                /// - Remark: Generated from `#/components/schemas/MessageObject/ContentPayload/case3`.
                case MessageContentTextObject(Components.Schemas.MessageContentTextObject)
                /// - Remark: Generated from `#/components/schemas/MessageObject/ContentPayload/case4`.
                case MessageContentRefusalObject(Components.Schemas.MessageContentRefusalObject)
                public init(from decoder: any Decoder) throws {
                    var errors: [any Error] = []
                    do {
                        self = .MessageContentImageFileObject(try .init(from: decoder))
                        return
                    } catch {
                        errors.append(error)
                    }
                    do {
                        self = .MessageContentImageUrlObject(try .init(from: decoder))
                        return
                    } catch {
                        errors.append(error)
                    }
                    do {
                        self = .MessageContentTextObject(try .init(from: decoder))
                        return
                    } catch {
                        errors.append(error)
                    }
                    do {
                        self = .MessageContentRefusalObject(try .init(from: decoder))
                        return
                    } catch {
                        errors.append(error)
                    }
                    throw Swift.DecodingError.failedToDecodeOneOfSchema(
                        type: Self.self,
                        codingPath: decoder.codingPath,
                        errors: errors
                    )
                }
                public func encode(to encoder: any Encoder) throws {
                    switch self {
                    case let .MessageContentImageFileObject(value):
                        try value.encode(to: encoder)
                    case let .MessageContentImageUrlObject(value):
                        try value.encode(to: encoder)
                    case let .MessageContentTextObject(value):
                        try value.encode(to: encoder)
                    case let .MessageContentRefusalObject(value):
                        try value.encode(to: encoder)
                    }
                }
            }
            /// The content of the message in array of text and/or images.
            ///
            /// - Remark: Generated from `#/components/schemas/MessageObject/content`.
            public typealias ContentPayload = [Components.Schemas.MessageObject.ContentPayloadPayload]
            /// The content of the message in array of text and/or images.
            ///
            /// - Remark: Generated from `#/components/schemas/MessageObject/content`.
            public var content: Components.Schemas.MessageObject.ContentPayload
            /// If applicable, the ID of the [assistant](/docs/api-reference/assistants) that authored this message.
            ///
            /// - Remark: Generated from `#/components/schemas/MessageObject/assistant_id`.
            public var assistantId: Swift.String?
            /// The ID of the [run](/docs/api-reference/runs) associated with the creation of this message. Value is `null` when messages are created manually using the create message or create thread endpoints.
            ///
            /// - Remark: Generated from `#/components/schemas/MessageObject/run_id`.
            public var runId: Swift.String?
            /// - Remark: Generated from `#/components/schemas/MessageObject/AttachmentsPayload`.
            public struct AttachmentsPayloadPayload: Codable, Hashable, Sendable {
                /// The ID of the file to attach to the message.
                ///
                /// - Remark: Generated from `#/components/schemas/MessageObject/AttachmentsPayload/file_id`.
                public var fileId: Swift.String?
                /// - Remark: Generated from `#/components/schemas/MessageObject/AttachmentsPayload/ToolsPayload`.
                @frozen public enum ToolsPayloadPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/MessageObject/AttachmentsPayload/ToolsPayload/case1`.
                    case AssistantToolsCode(Components.Schemas.AssistantToolsCode)
                    /// - Remark: Generated from `#/components/schemas/MessageObject/AttachmentsPayload/ToolsPayload/case2`.
                    case AssistantToolsFileSearchTypeOnly(Components.Schemas.AssistantToolsFileSearchTypeOnly)
                    public init(from decoder: any Decoder) throws {
                        var errors: [any Error] = []
                        do {
                            self = .AssistantToolsCode(try .init(from: decoder))
                            return
                        } catch {
                            errors.append(error)
                        }
                        do {
                            self = .AssistantToolsFileSearchTypeOnly(try .init(from: decoder))
                            return
                        } catch {
                            errors.append(error)
                        }
                        throw Swift.DecodingError.failedToDecodeOneOfSchema(
                            type: Self.self,
                            codingPath: decoder.codingPath,
                            errors: errors
                        )
                    }
                    public func encode(to encoder: any Encoder) throws {
                        switch self {
                        case let .AssistantToolsCode(value):
                            try value.encode(to: encoder)
                        case let .AssistantToolsFileSearchTypeOnly(value):
                            try value.encode(to: encoder)
                        }
                    }
                }
                /// The tools to add this file to.
                ///
                /// - Remark: Generated from `#/components/schemas/MessageObject/AttachmentsPayload/tools`.
                public typealias ToolsPayload = [Components.Schemas.MessageObject.AttachmentsPayloadPayload.ToolsPayloadPayload]
                /// The tools to add this file to.
                ///
                /// - Remark: Generated from `#/components/schemas/MessageObject/AttachmentsPayload/tools`.
                public var tools: Components.Schemas.MessageObject.AttachmentsPayloadPayload.ToolsPayload?
                /// Creates a new `AttachmentsPayloadPayload`.
                ///
                /// - Parameters:
                ///   - fileId: The ID of the file to attach to the message.
                ///   - tools: The tools to add this file to.
                public init(
                    fileId: Swift.String? = nil,
                    tools: Components.Schemas.MessageObject.AttachmentsPayloadPayload.ToolsPayload? = nil
                ) {
                    self.fileId = fileId
                    self.tools = tools
                }
                public enum CodingKeys: String, CodingKey {
                    case fileId = "file_id"
                    case tools
                }
            }
            /// A list of files attached to the message, and the tools they were added to.
            ///
            /// - Remark: Generated from `#/components/schemas/MessageObject/attachments`.
            public typealias AttachmentsPayload = [Components.Schemas.MessageObject.AttachmentsPayloadPayload]
            /// A list of files attached to the message, and the tools they were added to.
            ///
            /// - Remark: Generated from `#/components/schemas/MessageObject/attachments`.
            public var attachments: Components.Schemas.MessageObject.AttachmentsPayload?
            /// - Remark: Generated from `#/components/schemas/MessageObject/metadata`.
            public var metadata: Components.Schemas.Metadata?
            /// Creates a new `MessageObject`.
            ///
            /// - Parameters:
            ///   - id: The identifier, which can be referenced in API endpoints.
            ///   - object: The object type, which is always `thread.message`.
            ///   - createdAt: The Unix timestamp (in seconds) for when the message was created.
            ///   - threadId: The [thread](/docs/api-reference/threads) ID that this message belongs to.
            ///   - status: The status of the message, which can be either `in_progress`, `incomplete`, or `completed`.
            ///   - incompleteDetails: On an incomplete message, details about why the message is incomplete.
            ///   - completedAt: The Unix timestamp (in seconds) for when the message was completed.
            ///   - incompleteAt: The Unix timestamp (in seconds) for when the message was marked as incomplete.
            ///   - role: The entity that produced the message. One of `user` or `assistant`.
            ///   - content: The content of the message in array of text and/or images.
            ///   - assistantId: If applicable, the ID of the [assistant](/docs/api-reference/assistants) that authored this message.
            ///   - runId: The ID of the [run](/docs/api-reference/runs) associated with the creation of this message. Value is `null` when messages are created manually using the create message or create thread endpoints.
            ///   - attachments: A list of files attached to the message, and the tools they were added to.
            ///   - metadata:
            public init(
                id: Swift.String,
                object: Components.Schemas.MessageObject.ObjectPayload,
                createdAt: Swift.Int,
                threadId: Swift.String,
                status: Components.Schemas.MessageObject.StatusPayload,
                incompleteDetails: Components.Schemas.MessageObject.IncompleteDetailsPayload? = nil,
                completedAt: Swift.Int? = nil,
                incompleteAt: Swift.Int? = nil,
                role: Components.Schemas.MessageObject.RolePayload,
                content: Components.Schemas.MessageObject.ContentPayload,
                assistantId: Swift.String? = nil,
                runId: Swift.String? = nil,
                attachments: Components.Schemas.MessageObject.AttachmentsPayload? = nil,
                metadata: Components.Schemas.Metadata? = nil
            ) {
                self.id = id
                self.object = object
                self.createdAt = createdAt
                self.threadId = threadId
                self.status = status
                self.incompleteDetails = incompleteDetails
                self.completedAt = completedAt
                self.incompleteAt = incompleteAt
                self.role = role
                self.content = content
                self.assistantId = assistantId
                self.runId = runId
                self.attachments = attachments
                self.metadata = metadata
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case object
                case createdAt = "created_at"
                case threadId = "thread_id"
                case status
                case incompleteDetails = "incomplete_details"
                case completedAt = "completed_at"
                case incompleteAt = "incomplete_at"
                case role
                case content
                case assistantId = "assistant_id"
                case runId = "run_id"
                case attachments
                case metadata
            }
        }
        /// The text content that is part of a message.
        ///
        /// - Remark: Generated from `#/components/schemas/MessageRequestContentTextObject`.
        public struct MessageRequestContentTextObject: Codable, Hashable, Sendable {
            /// Always `text`.
            ///
            /// - Remark: Generated from `#/components/schemas/MessageRequestContentTextObject/type`.
            @frozen public enum _TypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                case text = "text"
            }
            /// Always `text`.
            ///
            /// - Remark: Generated from `#/components/schemas/MessageRequestContentTextObject/type`.
            public var _type: Components.Schemas.MessageRequestContentTextObject._TypePayload
            /// Text content to be sent to the model
            ///
            /// - Remark: Generated from `#/components/schemas/MessageRequestContentTextObject/text`.
            public var text: Swift.String
            /// Creates a new `MessageRequestContentTextObject`.
            ///
            /// - Parameters:
            ///   - _type: Always `text`.
            ///   - text: Text content to be sent to the model
            public init(
                _type: Components.Schemas.MessageRequestContentTextObject._TypePayload,
                text: Swift.String
            ) {
                self._type = _type
                self.text = text
            }
            public enum CodingKeys: String, CodingKey {
                case _type = "type"
                case text
            }
        }
        /// - Remark: Generated from `#/components/schemas/MessageStreamEvent`.
        @frozen public enum MessageStreamEvent: Codable, Hashable, Sendable {
            /// Occurs when a [message](/docs/api-reference/messages/object) is created.
            ///
            /// - Remark: Generated from `#/components/schemas/MessageStreamEvent/case1`.
            public struct Case1Payload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/MessageStreamEvent/case1/event`.
                @frozen public enum EventPayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case thread_message_created = "thread.message.created"
                }
                /// - Remark: Generated from `#/components/schemas/MessageStreamEvent/case1/event`.
                public var event: Components.Schemas.MessageStreamEvent.Case1Payload.EventPayload
                /// - Remark: Generated from `#/components/schemas/MessageStreamEvent/case1/data`.
                public var data: Components.Schemas.MessageObject
                /// Creates a new `Case1Payload`.
                ///
                /// - Parameters:
                ///   - event:
                ///   - data:
                public init(
                    event: Components.Schemas.MessageStreamEvent.Case1Payload.EventPayload,
                    data: Components.Schemas.MessageObject
                ) {
                    self.event = event
                    self.data = data
                }
                public enum CodingKeys: String, CodingKey {
                    case event
                    case data
                }
            }
            /// Occurs when a [message](/docs/api-reference/messages/object) is created.
            ///
            /// - Remark: Generated from `#/components/schemas/MessageStreamEvent/case1`.
            case case1(Components.Schemas.MessageStreamEvent.Case1Payload)
            /// Occurs when a [message](/docs/api-reference/messages/object) moves to an `in_progress` state.
            ///
            /// - Remark: Generated from `#/components/schemas/MessageStreamEvent/case2`.
            public struct Case2Payload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/MessageStreamEvent/case2/event`.
                @frozen public enum EventPayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case thread_message_inProgress = "thread.message.in_progress"
                }
                /// - Remark: Generated from `#/components/schemas/MessageStreamEvent/case2/event`.
                public var event: Components.Schemas.MessageStreamEvent.Case2Payload.EventPayload
                /// - Remark: Generated from `#/components/schemas/MessageStreamEvent/case2/data`.
                public var data: Components.Schemas.MessageObject
                /// Creates a new `Case2Payload`.
                ///
                /// - Parameters:
                ///   - event:
                ///   - data:
                public init(
                    event: Components.Schemas.MessageStreamEvent.Case2Payload.EventPayload,
                    data: Components.Schemas.MessageObject
                ) {
                    self.event = event
                    self.data = data
                }
                public enum CodingKeys: String, CodingKey {
                    case event
                    case data
                }
            }
            /// Occurs when a [message](/docs/api-reference/messages/object) moves to an `in_progress` state.
            ///
            /// - Remark: Generated from `#/components/schemas/MessageStreamEvent/case2`.
            case case2(Components.Schemas.MessageStreamEvent.Case2Payload)
            /// Occurs when parts of a [Message](/docs/api-reference/messages/object) are being streamed.
            ///
            /// - Remark: Generated from `#/components/schemas/MessageStreamEvent/case3`.
            public struct Case3Payload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/MessageStreamEvent/case3/event`.
                @frozen public enum EventPayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case thread_message_delta = "thread.message.delta"
                }
                /// - Remark: Generated from `#/components/schemas/MessageStreamEvent/case3/event`.
                public var event: Components.Schemas.MessageStreamEvent.Case3Payload.EventPayload
                /// - Remark: Generated from `#/components/schemas/MessageStreamEvent/case3/data`.
                public var data: Components.Schemas.MessageDeltaObject
                /// Creates a new `Case3Payload`.
                ///
                /// - Parameters:
                ///   - event:
                ///   - data:
                public init(
                    event: Components.Schemas.MessageStreamEvent.Case3Payload.EventPayload,
                    data: Components.Schemas.MessageDeltaObject
                ) {
                    self.event = event
                    self.data = data
                }
                public enum CodingKeys: String, CodingKey {
                    case event
                    case data
                }
            }
            /// Occurs when parts of a [Message](/docs/api-reference/messages/object) are being streamed.
            ///
            /// - Remark: Generated from `#/components/schemas/MessageStreamEvent/case3`.
            case case3(Components.Schemas.MessageStreamEvent.Case3Payload)
            /// Occurs when a [message](/docs/api-reference/messages/object) is completed.
            ///
            /// - Remark: Generated from `#/components/schemas/MessageStreamEvent/case4`.
            public struct Case4Payload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/MessageStreamEvent/case4/event`.
                @frozen public enum EventPayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case thread_message_completed = "thread.message.completed"
                }
                /// - Remark: Generated from `#/components/schemas/MessageStreamEvent/case4/event`.
                public var event: Components.Schemas.MessageStreamEvent.Case4Payload.EventPayload
                /// - Remark: Generated from `#/components/schemas/MessageStreamEvent/case4/data`.
                public var data: Components.Schemas.MessageObject
                /// Creates a new `Case4Payload`.
                ///
                /// - Parameters:
                ///   - event:
                ///   - data:
                public init(
                    event: Components.Schemas.MessageStreamEvent.Case4Payload.EventPayload,
                    data: Components.Schemas.MessageObject
                ) {
                    self.event = event
                    self.data = data
                }
                public enum CodingKeys: String, CodingKey {
                    case event
                    case data
                }
            }
            /// Occurs when a [message](/docs/api-reference/messages/object) is completed.
            ///
            /// - Remark: Generated from `#/components/schemas/MessageStreamEvent/case4`.
            case case4(Components.Schemas.MessageStreamEvent.Case4Payload)
            /// Occurs when a [message](/docs/api-reference/messages/object) ends before it is completed.
            ///
            /// - Remark: Generated from `#/components/schemas/MessageStreamEvent/case5`.
            public struct Case5Payload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/MessageStreamEvent/case5/event`.
                @frozen public enum EventPayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case thread_message_incomplete = "thread.message.incomplete"
                }
                /// - Remark: Generated from `#/components/schemas/MessageStreamEvent/case5/event`.
                public var event: Components.Schemas.MessageStreamEvent.Case5Payload.EventPayload
                /// - Remark: Generated from `#/components/schemas/MessageStreamEvent/case5/data`.
                public var data: Components.Schemas.MessageObject
                /// Creates a new `Case5Payload`.
                ///
                /// - Parameters:
                ///   - event:
                ///   - data:
                public init(
                    event: Components.Schemas.MessageStreamEvent.Case5Payload.EventPayload,
                    data: Components.Schemas.MessageObject
                ) {
                    self.event = event
                    self.data = data
                }
                public enum CodingKeys: String, CodingKey {
                    case event
                    case data
                }
            }
            /// Occurs when a [message](/docs/api-reference/messages/object) ends before it is completed.
            ///
            /// - Remark: Generated from `#/components/schemas/MessageStreamEvent/case5`.
            case case5(Components.Schemas.MessageStreamEvent.Case5Payload)
            public init(from decoder: any Decoder) throws {
                var errors: [any Error] = []
                do {
                    self = .case1(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                do {
                    self = .case2(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                do {
                    self = .case3(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                do {
                    self = .case4(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                do {
                    self = .case5(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                throw Swift.DecodingError.failedToDecodeOneOfSchema(
                    type: Self.self,
                    codingPath: decoder.codingPath,
                    errors: errors
                )
            }
            public func encode(to encoder: any Encoder) throws {
                switch self {
                case let .case1(value):
                    try value.encode(to: encoder)
                case let .case2(value):
                    try value.encode(to: encoder)
                case let .case3(value):
                    try value.encode(to: encoder)
                case let .case4(value):
                    try value.encode(to: encoder)
                case let .case5(value):
                    try value.encode(to: encoder)
                }
            }
        }
        /// Set of 16 key-value pairs that can be attached to an object. This can be
        /// useful for storing additional information about the object in a structured
        /// format, and querying for objects via API or the dashboard. 
        ///
        /// Keys are strings with a maximum length of 64 characters. Values are strings
        /// with a maximum length of 512 characters.
        ///
        ///
        /// - Remark: Generated from `#/components/schemas/Metadata`.
        public struct Metadata: Codable, Hashable, Sendable {
            /// A container of undocumented properties.
            public var additionalProperties: [String: Swift.String]
            /// Creates a new `Metadata`.
            ///
            /// - Parameters:
            ///   - additionalProperties: A container of undocumented properties.
            public init(additionalProperties: [String: Swift.String] = .init()) {
                self.additionalProperties = additionalProperties
            }
            public init(from decoder: any Decoder) throws {
                additionalProperties = try decoder.decodeAdditionalProperties(knownKeys: [])
            }
            public func encode(to encoder: any Encoder) throws {
                try encoder.encodeAdditionalProperties(additionalProperties)
            }
        }
        /// Describes an OpenAI model offering that can be used with the API.
        ///
        /// - Remark: Generated from `#/components/schemas/Model`.
        public struct Model: Codable, Hashable, Sendable {
            /// The model identifier, which can be referenced in the API endpoints.
            ///
            /// - Remark: Generated from `#/components/schemas/Model/id`.
            public var id: Swift.String
            /// The Unix timestamp (in seconds) when the model was created.
            ///
            /// - Remark: Generated from `#/components/schemas/Model/created`.
            public var created: Swift.Int
            /// The object type, which is always "model".
            ///
            /// - Remark: Generated from `#/components/schemas/Model/object`.
            @frozen public enum ObjectPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case model = "model"
            }
            /// The object type, which is always "model".
            ///
            /// - Remark: Generated from `#/components/schemas/Model/object`.
            public var object: Components.Schemas.Model.ObjectPayload
            /// The organization that owns the model.
            ///
            /// - Remark: Generated from `#/components/schemas/Model/owned_by`.
            public var ownedBy: Swift.String
            /// Creates a new `Model`.
            ///
            /// - Parameters:
            ///   - id: The model identifier, which can be referenced in the API endpoints.
            ///   - created: The Unix timestamp (in seconds) when the model was created.
            ///   - object: The object type, which is always "model".
            ///   - ownedBy: The organization that owns the model.
            public init(
                id: Swift.String,
                created: Swift.Int,
                object: Components.Schemas.Model.ObjectPayload,
                ownedBy: Swift.String
            ) {
                self.id = id
                self.created = created
                self.object = object
                self.ownedBy = ownedBy
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case created
                case object
                case ownedBy = "owned_by"
            }
        }
        /// - Remark: Generated from `#/components/schemas/ModifyAssistantRequest`.
        public struct ModifyAssistantRequest: Codable, Hashable, Sendable {
            /// ID of the model to use. You can use the [List models](/docs/api-reference/models/list) API to see all of your available models, or see our [Model overview](/docs/models) for descriptions of them.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/ModifyAssistantRequest/model`.
            public struct ModelPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/ModifyAssistantRequest/model/value1`.
                public var value1: Swift.String?
                /// Creates a new `ModelPayload`.
                ///
                /// - Parameters:
                ///   - value1:
                public init(value1: Swift.String? = nil) {
                    self.value1 = value1
                }
                public init(from decoder: any Decoder) throws {
                    var errors: [any Error] = []
                    do {
                        self.value1 = try decoder.decodeFromSingleValueContainer()
                    } catch {
                        errors.append(error)
                    }
                    try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                        [
                            self.value1
                        ],
                        type: Self.self,
                        codingPath: decoder.codingPath,
                        errors: errors
                    )
                }
                public func encode(to encoder: any Encoder) throws {
                    try encoder.encodeFirstNonNilValueToSingleValueContainer([
                        self.value1
                    ])
                }
            }
            /// ID of the model to use. You can use the [List models](/docs/api-reference/models/list) API to see all of your available models, or see our [Model overview](/docs/models) for descriptions of them.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/ModifyAssistantRequest/model`.
            public var model: Components.Schemas.ModifyAssistantRequest.ModelPayload?
            /// The name of the assistant. The maximum length is 256 characters.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/ModifyAssistantRequest/name`.
            public var name: Swift.String?
            /// The description of the assistant. The maximum length is 512 characters.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/ModifyAssistantRequest/description`.
            public var description: Swift.String?
            /// The system instructions that the assistant uses. The maximum length is 256,000 characters.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/ModifyAssistantRequest/instructions`.
            public var instructions: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ModifyAssistantRequest/ToolsPayload`.
            @frozen public enum ToolsPayloadPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/ModifyAssistantRequest/ToolsPayload/case1`.
                case AssistantToolsCode(Components.Schemas.AssistantToolsCode)
                /// - Remark: Generated from `#/components/schemas/ModifyAssistantRequest/ToolsPayload/case2`.
                case AssistantToolsFileSearch(Components.Schemas.AssistantToolsFileSearch)
                /// - Remark: Generated from `#/components/schemas/ModifyAssistantRequest/ToolsPayload/case3`.
                case AssistantToolsFunction(Components.Schemas.AssistantToolsFunction)
                public init(from decoder: any Decoder) throws {
                    var errors: [any Error] = []
                    do {
                        self = .AssistantToolsCode(try .init(from: decoder))
                        return
                    } catch {
                        errors.append(error)
                    }
                    do {
                        self = .AssistantToolsFileSearch(try .init(from: decoder))
                        return
                    } catch {
                        errors.append(error)
                    }
                    do {
                        self = .AssistantToolsFunction(try .init(from: decoder))
                        return
                    } catch {
                        errors.append(error)
                    }
                    throw Swift.DecodingError.failedToDecodeOneOfSchema(
                        type: Self.self,
                        codingPath: decoder.codingPath,
                        errors: errors
                    )
                }
                public func encode(to encoder: any Encoder) throws {
                    switch self {
                    case let .AssistantToolsCode(value):
                        try value.encode(to: encoder)
                    case let .AssistantToolsFileSearch(value):
                        try value.encode(to: encoder)
                    case let .AssistantToolsFunction(value):
                        try value.encode(to: encoder)
                    }
                }
            }
            /// A list of tool enabled on the assistant. There can be a maximum of 128 tools per assistant. Tools can be of types `code_interpreter`, `file_search`, or `function`.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/ModifyAssistantRequest/tools`.
            public typealias ToolsPayload = [Components.Schemas.ModifyAssistantRequest.ToolsPayloadPayload]
            /// A list of tool enabled on the assistant. There can be a maximum of 128 tools per assistant. Tools can be of types `code_interpreter`, `file_search`, or `function`.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/ModifyAssistantRequest/tools`.
            public var tools: Components.Schemas.ModifyAssistantRequest.ToolsPayload?
            /// A set of resources that are used by the assistant's tools. The resources are specific to the type of tool. For example, the `code_interpreter` tool requires a list of file IDs, while the `file_search` tool requires a list of vector store IDs.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/ModifyAssistantRequest/tool_resources`.
            public struct ToolResourcesPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/ModifyAssistantRequest/tool_resources/code_interpreter`.
                public struct CodeInterpreterPayload: Codable, Hashable, Sendable {
                    /// Overrides the list of [file](/docs/api-reference/files) IDs made available to the `code_interpreter` tool. There can be a maximum of 20 files associated with the tool.
                    ///
                    ///
                    /// - Remark: Generated from `#/components/schemas/ModifyAssistantRequest/tool_resources/code_interpreter/file_ids`.
                    public var fileIds: [Swift.String]?
                    /// Creates a new `CodeInterpreterPayload`.
                    ///
                    /// - Parameters:
                    ///   - fileIds: Overrides the list of [file](/docs/api-reference/files) IDs made available to the `code_interpreter` tool. There can be a maximum of 20 files associated with the tool.
                    public init(fileIds: [Swift.String]? = nil) {
                        self.fileIds = fileIds
                    }
                    public enum CodingKeys: String, CodingKey {
                        case fileIds = "file_ids"
                    }
                }
                /// - Remark: Generated from `#/components/schemas/ModifyAssistantRequest/tool_resources/code_interpreter`.
                public var codeInterpreter: Components.Schemas.ModifyAssistantRequest.ToolResourcesPayload.CodeInterpreterPayload?
                /// - Remark: Generated from `#/components/schemas/ModifyAssistantRequest/tool_resources/file_search`.
                public struct FileSearchPayload: Codable, Hashable, Sendable {
                    /// Overrides the [vector store](/docs/api-reference/vector-stores/object) attached to this assistant. There can be a maximum of 1 vector store attached to the assistant.
                    ///
                    ///
                    /// - Remark: Generated from `#/components/schemas/ModifyAssistantRequest/tool_resources/file_search/vector_store_ids`.
                    public var vectorStoreIds: [Swift.String]?
                    /// Creates a new `FileSearchPayload`.
                    ///
                    /// - Parameters:
                    ///   - vectorStoreIds: Overrides the [vector store](/docs/api-reference/vector-stores/object) attached to this assistant. There can be a maximum of 1 vector store attached to the assistant.
                    public init(vectorStoreIds: [Swift.String]? = nil) {
                        self.vectorStoreIds = vectorStoreIds
                    }
                    public enum CodingKeys: String, CodingKey {
                        case vectorStoreIds = "vector_store_ids"
                    }
                }
                /// - Remark: Generated from `#/components/schemas/ModifyAssistantRequest/tool_resources/file_search`.
                public var fileSearch: Components.Schemas.ModifyAssistantRequest.ToolResourcesPayload.FileSearchPayload?
                /// Creates a new `ToolResourcesPayload`.
                ///
                /// - Parameters:
                ///   - codeInterpreter:
                ///   - fileSearch:
                public init(
                    codeInterpreter: Components.Schemas.ModifyAssistantRequest.ToolResourcesPayload.CodeInterpreterPayload? = nil,
                    fileSearch: Components.Schemas.ModifyAssistantRequest.ToolResourcesPayload.FileSearchPayload? = nil
                ) {
                    self.codeInterpreter = codeInterpreter
                    self.fileSearch = fileSearch
                }
                public enum CodingKeys: String, CodingKey {
                    case codeInterpreter = "code_interpreter"
                    case fileSearch = "file_search"
                }
            }
            /// A set of resources that are used by the assistant's tools. The resources are specific to the type of tool. For example, the `code_interpreter` tool requires a list of file IDs, while the `file_search` tool requires a list of vector store IDs.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/ModifyAssistantRequest/tool_resources`.
            public var toolResources: Components.Schemas.ModifyAssistantRequest.ToolResourcesPayload?
            /// - Remark: Generated from `#/components/schemas/ModifyAssistantRequest/metadata`.
            public var metadata: Components.Schemas.Metadata?
            /// What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/ModifyAssistantRequest/temperature`.
            public var temperature: Swift.Double?
            /// An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered.
            ///
            /// We generally recommend altering this or temperature but not both.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/ModifyAssistantRequest/top_p`.
            public var topP: Swift.Double?
            /// - Remark: Generated from `#/components/schemas/ModifyAssistantRequest/response_format`.
            public struct ResponseFormatPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/ModifyAssistantRequest/response_format/value1`.
                public var value1: Components.Schemas.AssistantsApiResponseFormatOption
                /// - Remark: Generated from `#/components/schemas/ModifyAssistantRequest/response_format/value2`.
                public var value2: OpenAPIRuntime.OpenAPIValueContainer
                /// Creates a new `ResponseFormatPayload`.
                ///
                /// - Parameters:
                ///   - value1:
                ///   - value2:
                public init(
                    value1: Components.Schemas.AssistantsApiResponseFormatOption,
                    value2: OpenAPIRuntime.OpenAPIValueContainer
                ) {
                    self.value1 = value1
                    self.value2 = value2
                }
                public init(from decoder: any Decoder) throws {
                    self.value1 = try .init(from: decoder)
                    self.value2 = try .init(from: decoder)
                }
                public func encode(to encoder: any Encoder) throws {
                    try self.value1.encode(to: encoder)
                    try self.value2.encode(to: encoder)
                }
            }
            /// - Remark: Generated from `#/components/schemas/ModifyAssistantRequest/response_format`.
            public var responseFormat: Components.Schemas.ModifyAssistantRequest.ResponseFormatPayload?
            /// Creates a new `ModifyAssistantRequest`.
            ///
            /// - Parameters:
            ///   - model: ID of the model to use. You can use the [List models](/docs/api-reference/models/list) API to see all of your available models, or see our [Model overview](/docs/models) for descriptions of them.
            ///   - name: The name of the assistant. The maximum length is 256 characters.
            ///   - description: The description of the assistant. The maximum length is 512 characters.
            ///   - instructions: The system instructions that the assistant uses. The maximum length is 256,000 characters.
            ///   - tools: A list of tool enabled on the assistant. There can be a maximum of 128 tools per assistant. Tools can be of types `code_interpreter`, `file_search`, or `function`.
            ///   - toolResources: A set of resources that are used by the assistant's tools. The resources are specific to the type of tool. For example, the `code_interpreter` tool requires a list of file IDs, while the `file_search` tool requires a list of vector store IDs.
            ///   - metadata:
            ///   - temperature: What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic.
            ///   - topP: An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered.
            ///   - responseFormat:
            public init(
                model: Components.Schemas.ModifyAssistantRequest.ModelPayload? = nil,
                name: Swift.String? = nil,
                description: Swift.String? = nil,
                instructions: Swift.String? = nil,
                tools: Components.Schemas.ModifyAssistantRequest.ToolsPayload? = nil,
                toolResources: Components.Schemas.ModifyAssistantRequest.ToolResourcesPayload? = nil,
                metadata: Components.Schemas.Metadata? = nil,
                temperature: Swift.Double? = nil,
                topP: Swift.Double? = nil,
                responseFormat: Components.Schemas.ModifyAssistantRequest.ResponseFormatPayload? = nil
            ) {
                self.model = model
                self.name = name
                self.description = description
                self.instructions = instructions
                self.tools = tools
                self.toolResources = toolResources
                self.metadata = metadata
                self.temperature = temperature
                self.topP = topP
                self.responseFormat = responseFormat
            }
            public enum CodingKeys: String, CodingKey {
                case model
                case name
                case description
                case instructions
                case tools
                case toolResources = "tool_resources"
                case metadata
                case temperature
                case topP = "top_p"
                case responseFormat = "response_format"
            }
            public init(from decoder: any Decoder) throws {
                let container = try decoder.container(keyedBy: CodingKeys.self)
                self.model = try container.decodeIfPresent(
                    Components.Schemas.ModifyAssistantRequest.ModelPayload.self,
                    forKey: .model
                )
                self.name = try container.decodeIfPresent(
                    Swift.String.self,
                    forKey: .name
                )
                self.description = try container.decodeIfPresent(
                    Swift.String.self,
                    forKey: .description
                )
                self.instructions = try container.decodeIfPresent(
                    Swift.String.self,
                    forKey: .instructions
                )
                self.tools = try container.decodeIfPresent(
                    Components.Schemas.ModifyAssistantRequest.ToolsPayload.self,
                    forKey: .tools
                )
                self.toolResources = try container.decodeIfPresent(
                    Components.Schemas.ModifyAssistantRequest.ToolResourcesPayload.self,
                    forKey: .toolResources
                )
                self.metadata = try container.decodeIfPresent(
                    Components.Schemas.Metadata.self,
                    forKey: .metadata
                )
                self.temperature = try container.decodeIfPresent(
                    Swift.Double.self,
                    forKey: .temperature
                )
                self.topP = try container.decodeIfPresent(
                    Swift.Double.self,
                    forKey: .topP
                )
                self.responseFormat = try container.decodeIfPresent(
                    Components.Schemas.ModifyAssistantRequest.ResponseFormatPayload.self,
                    forKey: .responseFormat
                )
                try decoder.ensureNoAdditionalProperties(knownKeys: [
                    "model",
                    "name",
                    "description",
                    "instructions",
                    "tools",
                    "tool_resources",
                    "metadata",
                    "temperature",
                    "top_p",
                    "response_format"
                ])
            }
        }
        /// - Remark: Generated from `#/components/schemas/ModifyMessageRequest`.
        public struct ModifyMessageRequest: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/ModifyMessageRequest/metadata`.
            public var metadata: Components.Schemas.Metadata?
            /// Creates a new `ModifyMessageRequest`.
            ///
            /// - Parameters:
            ///   - metadata:
            public init(metadata: Components.Schemas.Metadata? = nil) {
                self.metadata = metadata
            }
            public enum CodingKeys: String, CodingKey {
                case metadata
            }
            public init(from decoder: any Decoder) throws {
                let container = try decoder.container(keyedBy: CodingKeys.self)
                self.metadata = try container.decodeIfPresent(
                    Components.Schemas.Metadata.self,
                    forKey: .metadata
                )
                try decoder.ensureNoAdditionalProperties(knownKeys: [
                    "metadata"
                ])
            }
        }
        /// - Remark: Generated from `#/components/schemas/ModifyRunRequest`.
        public struct ModifyRunRequest: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/ModifyRunRequest/metadata`.
            public var metadata: Components.Schemas.Metadata?
            /// Creates a new `ModifyRunRequest`.
            ///
            /// - Parameters:
            ///   - metadata:
            public init(metadata: Components.Schemas.Metadata? = nil) {
                self.metadata = metadata
            }
            public enum CodingKeys: String, CodingKey {
                case metadata
            }
            public init(from decoder: any Decoder) throws {
                let container = try decoder.container(keyedBy: CodingKeys.self)
                self.metadata = try container.decodeIfPresent(
                    Components.Schemas.Metadata.self,
                    forKey: .metadata
                )
                try decoder.ensureNoAdditionalProperties(knownKeys: [
                    "metadata"
                ])
            }
        }
        /// - Remark: Generated from `#/components/schemas/ModifyThreadRequest`.
        public struct ModifyThreadRequest: Codable, Hashable, Sendable {
            /// A set of resources that are made available to the assistant's tools in this thread. The resources are specific to the type of tool. For example, the `code_interpreter` tool requires a list of file IDs, while the `file_search` tool requires a list of vector store IDs.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/ModifyThreadRequest/tool_resources`.
            public struct ToolResourcesPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/ModifyThreadRequest/tool_resources/code_interpreter`.
                public struct CodeInterpreterPayload: Codable, Hashable, Sendable {
                    /// A list of [file](/docs/api-reference/files) IDs made available to the `code_interpreter` tool. There can be a maximum of 20 files associated with the tool.
                    ///
                    ///
                    /// - Remark: Generated from `#/components/schemas/ModifyThreadRequest/tool_resources/code_interpreter/file_ids`.
                    public var fileIds: [Swift.String]?
                    /// Creates a new `CodeInterpreterPayload`.
                    ///
                    /// - Parameters:
                    ///   - fileIds: A list of [file](/docs/api-reference/files) IDs made available to the `code_interpreter` tool. There can be a maximum of 20 files associated with the tool.
                    public init(fileIds: [Swift.String]? = nil) {
                        self.fileIds = fileIds
                    }
                    public enum CodingKeys: String, CodingKey {
                        case fileIds = "file_ids"
                    }
                }
                /// - Remark: Generated from `#/components/schemas/ModifyThreadRequest/tool_resources/code_interpreter`.
                public var codeInterpreter: Components.Schemas.ModifyThreadRequest.ToolResourcesPayload.CodeInterpreterPayload?
                /// - Remark: Generated from `#/components/schemas/ModifyThreadRequest/tool_resources/file_search`.
                public struct FileSearchPayload: Codable, Hashable, Sendable {
                    /// The [vector store](/docs/api-reference/vector-stores/object) attached to this thread. There can be a maximum of 1 vector store attached to the thread.
                    ///
                    ///
                    /// - Remark: Generated from `#/components/schemas/ModifyThreadRequest/tool_resources/file_search/vector_store_ids`.
                    public var vectorStoreIds: [Swift.String]?
                    /// Creates a new `FileSearchPayload`.
                    ///
                    /// - Parameters:
                    ///   - vectorStoreIds: The [vector store](/docs/api-reference/vector-stores/object) attached to this thread. There can be a maximum of 1 vector store attached to the thread.
                    public init(vectorStoreIds: [Swift.String]? = nil) {
                        self.vectorStoreIds = vectorStoreIds
                    }
                    public enum CodingKeys: String, CodingKey {
                        case vectorStoreIds = "vector_store_ids"
                    }
                }
                /// - Remark: Generated from `#/components/schemas/ModifyThreadRequest/tool_resources/file_search`.
                public var fileSearch: Components.Schemas.ModifyThreadRequest.ToolResourcesPayload.FileSearchPayload?
                /// Creates a new `ToolResourcesPayload`.
                ///
                /// - Parameters:
                ///   - codeInterpreter:
                ///   - fileSearch:
                public init(
                    codeInterpreter: Components.Schemas.ModifyThreadRequest.ToolResourcesPayload.CodeInterpreterPayload? = nil,
                    fileSearch: Components.Schemas.ModifyThreadRequest.ToolResourcesPayload.FileSearchPayload? = nil
                ) {
                    self.codeInterpreter = codeInterpreter
                    self.fileSearch = fileSearch
                }
                public enum CodingKeys: String, CodingKey {
                    case codeInterpreter = "code_interpreter"
                    case fileSearch = "file_search"
                }
            }
            /// A set of resources that are made available to the assistant's tools in this thread. The resources are specific to the type of tool. For example, the `code_interpreter` tool requires a list of file IDs, while the `file_search` tool requires a list of vector store IDs.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/ModifyThreadRequest/tool_resources`.
            public var toolResources: Components.Schemas.ModifyThreadRequest.ToolResourcesPayload?
            /// - Remark: Generated from `#/components/schemas/ModifyThreadRequest/metadata`.
            public var metadata: Components.Schemas.Metadata?
            /// Creates a new `ModifyThreadRequest`.
            ///
            /// - Parameters:
            ///   - toolResources: A set of resources that are made available to the assistant's tools in this thread. The resources are specific to the type of tool. For example, the `code_interpreter` tool requires a list of file IDs, while the `file_search` tool requires a list of vector store IDs.
            ///   - metadata:
            public init(
                toolResources: Components.Schemas.ModifyThreadRequest.ToolResourcesPayload? = nil,
                metadata: Components.Schemas.Metadata? = nil
            ) {
                self.toolResources = toolResources
                self.metadata = metadata
            }
            public enum CodingKeys: String, CodingKey {
                case toolResources = "tool_resources"
                case metadata
            }
            public init(from decoder: any Decoder) throws {
                let container = try decoder.container(keyedBy: CodingKeys.self)
                self.toolResources = try container.decodeIfPresent(
                    Components.Schemas.ModifyThreadRequest.ToolResourcesPayload.self,
                    forKey: .toolResources
                )
                self.metadata = try container.decodeIfPresent(
                    Components.Schemas.Metadata.self,
                    forKey: .metadata
                )
                try decoder.ensureNoAdditionalProperties(knownKeys: [
                    "tool_resources",
                    "metadata"
                ])
            }
        }
        /// The `File` object represents a document that has been uploaded to OpenAI.
        ///
        /// - Remark: Generated from `#/components/schemas/OpenAIFile`.
        public struct OpenAIFile: Codable, Hashable, Sendable {
            /// The file identifier, which can be referenced in the API endpoints.
            ///
            /// - Remark: Generated from `#/components/schemas/OpenAIFile/id`.
            public var id: Swift.String
            /// The size of the file, in bytes.
            ///
            /// - Remark: Generated from `#/components/schemas/OpenAIFile/bytes`.
            public var bytes: Swift.Int
            /// The Unix timestamp (in seconds) for when the file was created.
            ///
            /// - Remark: Generated from `#/components/schemas/OpenAIFile/created_at`.
            public var createdAt: Swift.Int
            /// The name of the file.
            ///
            /// - Remark: Generated from `#/components/schemas/OpenAIFile/filename`.
            public var filename: Swift.String
            /// The object type, which is always `file`.
            ///
            /// - Remark: Generated from `#/components/schemas/OpenAIFile/object`.
            @frozen public enum ObjectPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case file = "file"
            }
            /// The object type, which is always `file`.
            ///
            /// - Remark: Generated from `#/components/schemas/OpenAIFile/object`.
            public var object: Components.Schemas.OpenAIFile.ObjectPayload
            /// The intended purpose of the file. Supported values are `assistants`, `assistants_output`, `batch`, `batch_output`, `fine-tune`, `fine-tune-results` and `vision`.
            ///
            /// - Remark: Generated from `#/components/schemas/OpenAIFile/purpose`.
            @frozen public enum PurposePayload: String, Codable, Hashable, Sendable, CaseIterable {
                case assistants = "assistants"
                case assistantsOutput = "assistants_output"
                case batch = "batch"
                case batchOutput = "batch_output"
                case fineTune = "fine-tune"
                case fineTuneResults = "fine-tune-results"
                case vision = "vision"
            }
            /// The intended purpose of the file. Supported values are `assistants`, `assistants_output`, `batch`, `batch_output`, `fine-tune`, `fine-tune-results` and `vision`.
            ///
            /// - Remark: Generated from `#/components/schemas/OpenAIFile/purpose`.
            public var purpose: Components.Schemas.OpenAIFile.PurposePayload
            /// Deprecated. The current status of the file, which can be either `uploaded`, `processed`, or `error`.
            ///
            /// - Remark: Generated from `#/components/schemas/OpenAIFile/status`.
            @frozen public enum StatusPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case uploaded = "uploaded"
                case processed = "processed"
                case error = "error"
            }
            /// Deprecated. The current status of the file, which can be either `uploaded`, `processed`, or `error`.
            ///
            /// - Remark: Generated from `#/components/schemas/OpenAIFile/status`.
            @available(*, deprecated)
            public var status: Components.Schemas.OpenAIFile.StatusPayload
            /// Deprecated. For details on why a fine-tuning training file failed validation, see the `error` field on `fine_tuning.job`.
            ///
            /// - Remark: Generated from `#/components/schemas/OpenAIFile/status_details`.
            @available(*, deprecated)
            public var statusDetails: Swift.String?
            /// Creates a new `OpenAIFile`.
            ///
            /// - Parameters:
            ///   - id: The file identifier, which can be referenced in the API endpoints.
            ///   - bytes: The size of the file, in bytes.
            ///   - createdAt: The Unix timestamp (in seconds) for when the file was created.
            ///   - filename: The name of the file.
            ///   - object: The object type, which is always `file`.
            ///   - purpose: The intended purpose of the file. Supported values are `assistants`, `assistants_output`, `batch`, `batch_output`, `fine-tune`, `fine-tune-results` and `vision`.
            ///   - status: Deprecated. The current status of the file, which can be either `uploaded`, `processed`, or `error`.
            ///   - statusDetails: Deprecated. For details on why a fine-tuning training file failed validation, see the `error` field on `fine_tuning.job`.
            public init(
                id: Swift.String,
                bytes: Swift.Int,
                createdAt: Swift.Int,
                filename: Swift.String,
                object: Components.Schemas.OpenAIFile.ObjectPayload,
                purpose: Components.Schemas.OpenAIFile.PurposePayload,
                status: Components.Schemas.OpenAIFile.StatusPayload,
                statusDetails: Swift.String? = nil
            ) {
                self.id = id
                self.bytes = bytes
                self.createdAt = createdAt
                self.filename = filename
                self.object = object
                self.purpose = purpose
                self.status = status
                self.statusDetails = statusDetails
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case bytes
                case createdAt = "created_at"
                case filename
                case object
                case purpose
                case status
                case statusDetails = "status_details"
            }
        }
        /// This is returned when the chunking strategy is unknown. Typically, this is because the file was indexed before the `chunking_strategy` concept was introduced in the API.
        ///
        /// - Remark: Generated from `#/components/schemas/OtherChunkingStrategyResponseParam`.
        public struct OtherChunkingStrategyResponseParam: Codable, Hashable, Sendable {
            /// Always `other`.
            ///
            /// - Remark: Generated from `#/components/schemas/OtherChunkingStrategyResponseParam/type`.
            @frozen public enum _TypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                case other = "other"
            }
            /// Always `other`.
            ///
            /// - Remark: Generated from `#/components/schemas/OtherChunkingStrategyResponseParam/type`.
            public var _type: Components.Schemas.OtherChunkingStrategyResponseParam._TypePayload
            /// Creates a new `OtherChunkingStrategyResponseParam`.
            ///
            /// - Parameters:
            ///   - _type: Always `other`.
            public init(_type: Components.Schemas.OtherChunkingStrategyResponseParam._TypePayload) {
                self._type = _type
            }
            public enum CodingKeys: String, CodingKey {
                case _type = "type"
            }
            public init(from decoder: any Decoder) throws {
                let container = try decoder.container(keyedBy: CodingKeys.self)
                self._type = try container.decode(
                    Components.Schemas.OtherChunkingStrategyResponseParam._TypePayload.self,
                    forKey: ._type
                )
                try decoder.ensureNoAdditionalProperties(knownKeys: [
                    "type"
                ])
            }
        }
        /// Whether to enable [parallel function calling](/docs/guides/function-calling#configuring-parallel-function-calling) during tool use.
        ///
        /// - Remark: Generated from `#/components/schemas/ParallelToolCalls`.
        public typealias ParallelToolCalls = Swift.Bool
        /// Static predicted output content, such as the content of a text file that is
        /// being regenerated.
        ///
        ///
        /// - Remark: Generated from `#/components/schemas/PredictionContent`.
        public struct PredictionContent: Codable, Hashable, Sendable {
            /// The type of the predicted content you want to provide. This type is
            /// currently always `content`.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/PredictionContent/type`.
            @frozen public enum _TypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                case content = "content"
            }
            /// The type of the predicted content you want to provide. This type is
            /// currently always `content`.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/PredictionContent/type`.
            public var _type: Components.Schemas.PredictionContent._TypePayload
            /// The content that should be matched when generating a model response.
            /// If generated tokens would match this content, the entire model response
            /// can be returned much more quickly.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/PredictionContent/content`.
            @frozen public enum ContentPayload: Codable, Hashable, Sendable {
                /// The content used for a Predicted Output. This is often the
                /// text of a file you are regenerating with minor changes.
                ///
                ///
                /// - Remark: Generated from `#/components/schemas/PredictionContent/content/case1`.
                case case1(Swift.String)
                /// An array of content parts with a defined type. Supported options differ based on the [model](/docs/models) being used to generate the response. Can contain text inputs.
                ///
                /// - Remark: Generated from `#/components/schemas/PredictionContent/content/case2`.
                case case2([Components.Schemas.ChatCompletionRequestMessageContentPartText])
                public init(from decoder: any Decoder) throws {
                    var errors: [any Error] = []
                    do {
                        self = .case1(try decoder.decodeFromSingleValueContainer())
                        return
                    } catch {
                        errors.append(error)
                    }
                    do {
                        self = .case2(try decoder.decodeFromSingleValueContainer())
                        return
                    } catch {
                        errors.append(error)
                    }
                    throw Swift.DecodingError.failedToDecodeOneOfSchema(
                        type: Self.self,
                        codingPath: decoder.codingPath,
                        errors: errors
                    )
                }
                public func encode(to encoder: any Encoder) throws {
                    switch self {
                    case let .case1(value):
                        try encoder.encodeToSingleValueContainer(value)
                    case let .case2(value):
                        try encoder.encodeToSingleValueContainer(value)
                    }
                }
            }
            /// The content that should be matched when generating a model response.
            /// If generated tokens would match this content, the entire model response
            /// can be returned much more quickly.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/PredictionContent/content`.
            public var content: Components.Schemas.PredictionContent.ContentPayload
            /// Creates a new `PredictionContent`.
            ///
            /// - Parameters:
            ///   - _type: The type of the predicted content you want to provide. This type is
            ///   - content: The content that should be matched when generating a model response.
            public init(
                _type: Components.Schemas.PredictionContent._TypePayload,
                content: Components.Schemas.PredictionContent.ContentPayload
            ) {
                self._type = _type
                self.content = content
            }
            public enum CodingKeys: String, CodingKey {
                case _type = "type"
                case content
            }
        }
        /// Represents an individual project.
        ///
        /// - Remark: Generated from `#/components/schemas/Project`.
        public struct Project: Codable, Hashable, Sendable {
            /// The identifier, which can be referenced in API endpoints
            ///
            /// - Remark: Generated from `#/components/schemas/Project/id`.
            public var id: Swift.String
            /// The object type, which is always `organization.project`
            ///
            /// - Remark: Generated from `#/components/schemas/Project/object`.
            @frozen public enum ObjectPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case organization_project = "organization.project"
            }
            /// The object type, which is always `organization.project`
            ///
            /// - Remark: Generated from `#/components/schemas/Project/object`.
            public var object: Components.Schemas.Project.ObjectPayload
            /// The name of the project. This appears in reporting.
            ///
            /// - Remark: Generated from `#/components/schemas/Project/name`.
            public var name: Swift.String
            /// The Unix timestamp (in seconds) of when the project was created.
            ///
            /// - Remark: Generated from `#/components/schemas/Project/created_at`.
            public var createdAt: Swift.Int
            /// The Unix timestamp (in seconds) of when the project was archived or `null`.
            ///
            /// - Remark: Generated from `#/components/schemas/Project/archived_at`.
            public var archivedAt: Swift.Int?
            /// `active` or `archived`
            ///
            /// - Remark: Generated from `#/components/schemas/Project/status`.
            @frozen public enum StatusPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case active = "active"
                case archived = "archived"
            }
            /// `active` or `archived`
            ///
            /// - Remark: Generated from `#/components/schemas/Project/status`.
            public var status: Components.Schemas.Project.StatusPayload
            /// Creates a new `Project`.
            ///
            /// - Parameters:
            ///   - id: The identifier, which can be referenced in API endpoints
            ///   - object: The object type, which is always `organization.project`
            ///   - name: The name of the project. This appears in reporting.
            ///   - createdAt: The Unix timestamp (in seconds) of when the project was created.
            ///   - archivedAt: The Unix timestamp (in seconds) of when the project was archived or `null`.
            ///   - status: `active` or `archived`
            public init(
                id: Swift.String,
                object: Components.Schemas.Project.ObjectPayload,
                name: Swift.String,
                createdAt: Swift.Int,
                archivedAt: Swift.Int? = nil,
                status: Components.Schemas.Project.StatusPayload
            ) {
                self.id = id
                self.object = object
                self.name = name
                self.createdAt = createdAt
                self.archivedAt = archivedAt
                self.status = status
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case object
                case name
                case createdAt = "created_at"
                case archivedAt = "archived_at"
                case status
            }
        }
        /// Represents an individual API key in a project.
        ///
        /// - Remark: Generated from `#/components/schemas/ProjectApiKey`.
        public struct ProjectApiKey: Codable, Hashable, Sendable {
            /// The object type, which is always `organization.project.api_key`
            ///
            /// - Remark: Generated from `#/components/schemas/ProjectApiKey/object`.
            @frozen public enum ObjectPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case organization_project_apiKey = "organization.project.api_key"
            }
            /// The object type, which is always `organization.project.api_key`
            ///
            /// - Remark: Generated from `#/components/schemas/ProjectApiKey/object`.
            public var object: Components.Schemas.ProjectApiKey.ObjectPayload
            /// The redacted value of the API key
            ///
            /// - Remark: Generated from `#/components/schemas/ProjectApiKey/redacted_value`.
            public var redactedValue: Swift.String
            /// The name of the API key
            ///
            /// - Remark: Generated from `#/components/schemas/ProjectApiKey/name`.
            public var name: Swift.String
            /// The Unix timestamp (in seconds) of when the API key was created
            ///
            /// - Remark: Generated from `#/components/schemas/ProjectApiKey/created_at`.
            public var createdAt: Swift.Int
            /// The identifier, which can be referenced in API endpoints
            ///
            /// - Remark: Generated from `#/components/schemas/ProjectApiKey/id`.
            public var id: Swift.String
            /// - Remark: Generated from `#/components/schemas/ProjectApiKey/owner`.
            public struct OwnerPayload: Codable, Hashable, Sendable {
                /// `user` or `service_account`
                ///
                /// - Remark: Generated from `#/components/schemas/ProjectApiKey/owner/type`.
                @frozen public enum _TypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case user = "user"
                    case serviceAccount = "service_account"
                }
                /// `user` or `service_account`
                ///
                /// - Remark: Generated from `#/components/schemas/ProjectApiKey/owner/type`.
                public var _type: Components.Schemas.ProjectApiKey.OwnerPayload._TypePayload?
                /// - Remark: Generated from `#/components/schemas/ProjectApiKey/owner/user`.
                public var user: Components.Schemas.ProjectUser?
                /// - Remark: Generated from `#/components/schemas/ProjectApiKey/owner/service_account`.
                public var serviceAccount: Components.Schemas.ProjectServiceAccount?
                /// Creates a new `OwnerPayload`.
                ///
                /// - Parameters:
                ///   - _type: `user` or `service_account`
                ///   - user:
                ///   - serviceAccount:
                public init(
                    _type: Components.Schemas.ProjectApiKey.OwnerPayload._TypePayload? = nil,
                    user: Components.Schemas.ProjectUser? = nil,
                    serviceAccount: Components.Schemas.ProjectServiceAccount? = nil
                ) {
                    self._type = _type
                    self.user = user
                    self.serviceAccount = serviceAccount
                }
                public enum CodingKeys: String, CodingKey {
                    case _type = "type"
                    case user
                    case serviceAccount = "service_account"
                }
            }
            /// - Remark: Generated from `#/components/schemas/ProjectApiKey/owner`.
            public var owner: Components.Schemas.ProjectApiKey.OwnerPayload
            /// Creates a new `ProjectApiKey`.
            ///
            /// - Parameters:
            ///   - object: The object type, which is always `organization.project.api_key`
            ///   - redactedValue: The redacted value of the API key
            ///   - name: The name of the API key
            ///   - createdAt: The Unix timestamp (in seconds) of when the API key was created
            ///   - id: The identifier, which can be referenced in API endpoints
            ///   - owner:
            public init(
                object: Components.Schemas.ProjectApiKey.ObjectPayload,
                redactedValue: Swift.String,
                name: Swift.String,
                createdAt: Swift.Int,
                id: Swift.String,
                owner: Components.Schemas.ProjectApiKey.OwnerPayload
            ) {
                self.object = object
                self.redactedValue = redactedValue
                self.name = name
                self.createdAt = createdAt
                self.id = id
                self.owner = owner
            }
            public enum CodingKeys: String, CodingKey {
                case object
                case redactedValue = "redacted_value"
                case name
                case createdAt = "created_at"
                case id
                case owner
            }
        }
        /// - Remark: Generated from `#/components/schemas/ProjectApiKeyDeleteResponse`.
        public struct ProjectApiKeyDeleteResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/ProjectApiKeyDeleteResponse/object`.
            @frozen public enum ObjectPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case organization_project_apiKey_deleted = "organization.project.api_key.deleted"
            }
            /// - Remark: Generated from `#/components/schemas/ProjectApiKeyDeleteResponse/object`.
            public var object: Components.Schemas.ProjectApiKeyDeleteResponse.ObjectPayload
            /// - Remark: Generated from `#/components/schemas/ProjectApiKeyDeleteResponse/id`.
            public var id: Swift.String
            /// - Remark: Generated from `#/components/schemas/ProjectApiKeyDeleteResponse/deleted`.
            public var deleted: Swift.Bool
            /// Creates a new `ProjectApiKeyDeleteResponse`.
            ///
            /// - Parameters:
            ///   - object:
            ///   - id:
            ///   - deleted:
            public init(
                object: Components.Schemas.ProjectApiKeyDeleteResponse.ObjectPayload,
                id: Swift.String,
                deleted: Swift.Bool
            ) {
                self.object = object
                self.id = id
                self.deleted = deleted
            }
            public enum CodingKeys: String, CodingKey {
                case object
                case id
                case deleted
            }
        }
        /// - Remark: Generated from `#/components/schemas/ProjectApiKeyListResponse`.
        public struct ProjectApiKeyListResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/ProjectApiKeyListResponse/object`.
            @frozen public enum ObjectPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case list = "list"
            }
            /// - Remark: Generated from `#/components/schemas/ProjectApiKeyListResponse/object`.
            public var object: Components.Schemas.ProjectApiKeyListResponse.ObjectPayload
            /// - Remark: Generated from `#/components/schemas/ProjectApiKeyListResponse/data`.
            public var data: [Components.Schemas.ProjectApiKey]
            /// - Remark: Generated from `#/components/schemas/ProjectApiKeyListResponse/first_id`.
            public var firstId: Swift.String
            /// - Remark: Generated from `#/components/schemas/ProjectApiKeyListResponse/last_id`.
            public var lastId: Swift.String
            /// - Remark: Generated from `#/components/schemas/ProjectApiKeyListResponse/has_more`.
            public var hasMore: Swift.Bool
            /// Creates a new `ProjectApiKeyListResponse`.
            ///
            /// - Parameters:
            ///   - object:
            ///   - data:
            ///   - firstId:
            ///   - lastId:
            ///   - hasMore:
            public init(
                object: Components.Schemas.ProjectApiKeyListResponse.ObjectPayload,
                data: [Components.Schemas.ProjectApiKey],
                firstId: Swift.String,
                lastId: Swift.String,
                hasMore: Swift.Bool
            ) {
                self.object = object
                self.data = data
                self.firstId = firstId
                self.lastId = lastId
                self.hasMore = hasMore
            }
            public enum CodingKeys: String, CodingKey {
                case object
                case data
                case firstId = "first_id"
                case lastId = "last_id"
                case hasMore = "has_more"
            }
        }
        /// - Remark: Generated from `#/components/schemas/ProjectCreateRequest`.
        public struct ProjectCreateRequest: Codable, Hashable, Sendable {
            /// The friendly name of the project, this name appears in reports.
            ///
            /// - Remark: Generated from `#/components/schemas/ProjectCreateRequest/name`.
            public var name: Swift.String
            /// Creates a new `ProjectCreateRequest`.
            ///
            /// - Parameters:
            ///   - name: The friendly name of the project, this name appears in reports.
            public init(name: Swift.String) {
                self.name = name
            }
            public enum CodingKeys: String, CodingKey {
                case name
            }
        }
        /// - Remark: Generated from `#/components/schemas/ProjectListResponse`.
        public struct ProjectListResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/ProjectListResponse/object`.
            @frozen public enum ObjectPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case list = "list"
            }
            /// - Remark: Generated from `#/components/schemas/ProjectListResponse/object`.
            public var object: Components.Schemas.ProjectListResponse.ObjectPayload
            /// - Remark: Generated from `#/components/schemas/ProjectListResponse/data`.
            public var data: [Components.Schemas.Project]
            /// - Remark: Generated from `#/components/schemas/ProjectListResponse/first_id`.
            public var firstId: Swift.String
            /// - Remark: Generated from `#/components/schemas/ProjectListResponse/last_id`.
            public var lastId: Swift.String
            /// - Remark: Generated from `#/components/schemas/ProjectListResponse/has_more`.
            public var hasMore: Swift.Bool
            /// Creates a new `ProjectListResponse`.
            ///
            /// - Parameters:
            ///   - object:
            ///   - data:
            ///   - firstId:
            ///   - lastId:
            ///   - hasMore:
            public init(
                object: Components.Schemas.ProjectListResponse.ObjectPayload,
                data: [Components.Schemas.Project],
                firstId: Swift.String,
                lastId: Swift.String,
                hasMore: Swift.Bool
            ) {
                self.object = object
                self.data = data
                self.firstId = firstId
                self.lastId = lastId
                self.hasMore = hasMore
            }
            public enum CodingKeys: String, CodingKey {
                case object
                case data
                case firstId = "first_id"
                case lastId = "last_id"
                case hasMore = "has_more"
            }
        }
        /// Represents a project rate limit config.
        ///
        /// - Remark: Generated from `#/components/schemas/ProjectRateLimit`.
        public struct ProjectRateLimit: Codable, Hashable, Sendable {
            /// The object type, which is always `project.rate_limit`
            ///
            /// - Remark: Generated from `#/components/schemas/ProjectRateLimit/object`.
            @frozen public enum ObjectPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case project_rateLimit = "project.rate_limit"
            }
            /// The object type, which is always `project.rate_limit`
            ///
            /// - Remark: Generated from `#/components/schemas/ProjectRateLimit/object`.
            public var object: Components.Schemas.ProjectRateLimit.ObjectPayload
            /// The identifier, which can be referenced in API endpoints.
            ///
            /// - Remark: Generated from `#/components/schemas/ProjectRateLimit/id`.
            public var id: Swift.String
            /// The model this rate limit applies to.
            ///
            /// - Remark: Generated from `#/components/schemas/ProjectRateLimit/model`.
            public var model: Swift.String
            /// The maximum requests per minute.
            ///
            /// - Remark: Generated from `#/components/schemas/ProjectRateLimit/max_requests_per_1_minute`.
            public var maxRequestsPer1Minute: Swift.Int
            /// The maximum tokens per minute.
            ///
            /// - Remark: Generated from `#/components/schemas/ProjectRateLimit/max_tokens_per_1_minute`.
            public var maxTokensPer1Minute: Swift.Int
            /// The maximum images per minute. Only present for relevant models.
            ///
            /// - Remark: Generated from `#/components/schemas/ProjectRateLimit/max_images_per_1_minute`.
            public var maxImagesPer1Minute: Swift.Int?
            /// The maximum audio megabytes per minute. Only present for relevant models.
            ///
            /// - Remark: Generated from `#/components/schemas/ProjectRateLimit/max_audio_megabytes_per_1_minute`.
            public var maxAudioMegabytesPer1Minute: Swift.Int?
            /// The maximum requests per day. Only present for relevant models.
            ///
            /// - Remark: Generated from `#/components/schemas/ProjectRateLimit/max_requests_per_1_day`.
            public var maxRequestsPer1Day: Swift.Int?
            /// The maximum batch input tokens per day. Only present for relevant models.
            ///
            /// - Remark: Generated from `#/components/schemas/ProjectRateLimit/batch_1_day_max_input_tokens`.
            public var batch1DayMaxInputTokens: Swift.Int?
            /// Creates a new `ProjectRateLimit`.
            ///
            /// - Parameters:
            ///   - object: The object type, which is always `project.rate_limit`
            ///   - id: The identifier, which can be referenced in API endpoints.
            ///   - model: The model this rate limit applies to.
            ///   - maxRequestsPer1Minute: The maximum requests per minute.
            ///   - maxTokensPer1Minute: The maximum tokens per minute.
            ///   - maxImagesPer1Minute: The maximum images per minute. Only present for relevant models.
            ///   - maxAudioMegabytesPer1Minute: The maximum audio megabytes per minute. Only present for relevant models.
            ///   - maxRequestsPer1Day: The maximum requests per day. Only present for relevant models.
            ///   - batch1DayMaxInputTokens: The maximum batch input tokens per day. Only present for relevant models.
            public init(
                object: Components.Schemas.ProjectRateLimit.ObjectPayload,
                id: Swift.String,
                model: Swift.String,
                maxRequestsPer1Minute: Swift.Int,
                maxTokensPer1Minute: Swift.Int,
                maxImagesPer1Minute: Swift.Int? = nil,
                maxAudioMegabytesPer1Minute: Swift.Int? = nil,
                maxRequestsPer1Day: Swift.Int? = nil,
                batch1DayMaxInputTokens: Swift.Int? = nil
            ) {
                self.object = object
                self.id = id
                self.model = model
                self.maxRequestsPer1Minute = maxRequestsPer1Minute
                self.maxTokensPer1Minute = maxTokensPer1Minute
                self.maxImagesPer1Minute = maxImagesPer1Minute
                self.maxAudioMegabytesPer1Minute = maxAudioMegabytesPer1Minute
                self.maxRequestsPer1Day = maxRequestsPer1Day
                self.batch1DayMaxInputTokens = batch1DayMaxInputTokens
            }
            public enum CodingKeys: String, CodingKey {
                case object
                case id
                case model
                case maxRequestsPer1Minute = "max_requests_per_1_minute"
                case maxTokensPer1Minute = "max_tokens_per_1_minute"
                case maxImagesPer1Minute = "max_images_per_1_minute"
                case maxAudioMegabytesPer1Minute = "max_audio_megabytes_per_1_minute"
                case maxRequestsPer1Day = "max_requests_per_1_day"
                case batch1DayMaxInputTokens = "batch_1_day_max_input_tokens"
            }
        }
        /// - Remark: Generated from `#/components/schemas/ProjectRateLimitListResponse`.
        public struct ProjectRateLimitListResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/ProjectRateLimitListResponse/object`.
            @frozen public enum ObjectPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case list = "list"
            }
            /// - Remark: Generated from `#/components/schemas/ProjectRateLimitListResponse/object`.
            public var object: Components.Schemas.ProjectRateLimitListResponse.ObjectPayload
            /// - Remark: Generated from `#/components/schemas/ProjectRateLimitListResponse/data`.
            public var data: [Components.Schemas.ProjectRateLimit]
            /// - Remark: Generated from `#/components/schemas/ProjectRateLimitListResponse/first_id`.
            public var firstId: Swift.String
            /// - Remark: Generated from `#/components/schemas/ProjectRateLimitListResponse/last_id`.
            public var lastId: Swift.String
            /// - Remark: Generated from `#/components/schemas/ProjectRateLimitListResponse/has_more`.
            public var hasMore: Swift.Bool
            /// Creates a new `ProjectRateLimitListResponse`.
            ///
            /// - Parameters:
            ///   - object:
            ///   - data:
            ///   - firstId:
            ///   - lastId:
            ///   - hasMore:
            public init(
                object: Components.Schemas.ProjectRateLimitListResponse.ObjectPayload,
                data: [Components.Schemas.ProjectRateLimit],
                firstId: Swift.String,
                lastId: Swift.String,
                hasMore: Swift.Bool
            ) {
                self.object = object
                self.data = data
                self.firstId = firstId
                self.lastId = lastId
                self.hasMore = hasMore
            }
            public enum CodingKeys: String, CodingKey {
                case object
                case data
                case firstId = "first_id"
                case lastId = "last_id"
                case hasMore = "has_more"
            }
        }
        /// - Remark: Generated from `#/components/schemas/ProjectRateLimitUpdateRequest`.
        public struct ProjectRateLimitUpdateRequest: Codable, Hashable, Sendable {
            /// The maximum requests per minute.
            ///
            /// - Remark: Generated from `#/components/schemas/ProjectRateLimitUpdateRequest/max_requests_per_1_minute`.
            public var maxRequestsPer1Minute: Swift.Int?
            /// The maximum tokens per minute.
            ///
            /// - Remark: Generated from `#/components/schemas/ProjectRateLimitUpdateRequest/max_tokens_per_1_minute`.
            public var maxTokensPer1Minute: Swift.Int?
            /// The maximum images per minute. Only relevant for certain models.
            ///
            /// - Remark: Generated from `#/components/schemas/ProjectRateLimitUpdateRequest/max_images_per_1_minute`.
            public var maxImagesPer1Minute: Swift.Int?
            /// The maximum audio megabytes per minute. Only relevant for certain models.
            ///
            /// - Remark: Generated from `#/components/schemas/ProjectRateLimitUpdateRequest/max_audio_megabytes_per_1_minute`.
            public var maxAudioMegabytesPer1Minute: Swift.Int?
            /// The maximum requests per day. Only relevant for certain models.
            ///
            /// - Remark: Generated from `#/components/schemas/ProjectRateLimitUpdateRequest/max_requests_per_1_day`.
            public var maxRequestsPer1Day: Swift.Int?
            /// The maximum batch input tokens per day. Only relevant for certain models.
            ///
            /// - Remark: Generated from `#/components/schemas/ProjectRateLimitUpdateRequest/batch_1_day_max_input_tokens`.
            public var batch1DayMaxInputTokens: Swift.Int?
            /// Creates a new `ProjectRateLimitUpdateRequest`.
            ///
            /// - Parameters:
            ///   - maxRequestsPer1Minute: The maximum requests per minute.
            ///   - maxTokensPer1Minute: The maximum tokens per minute.
            ///   - maxImagesPer1Minute: The maximum images per minute. Only relevant for certain models.
            ///   - maxAudioMegabytesPer1Minute: The maximum audio megabytes per minute. Only relevant for certain models.
            ///   - maxRequestsPer1Day: The maximum requests per day. Only relevant for certain models.
            ///   - batch1DayMaxInputTokens: The maximum batch input tokens per day. Only relevant for certain models.
            public init(
                maxRequestsPer1Minute: Swift.Int? = nil,
                maxTokensPer1Minute: Swift.Int? = nil,
                maxImagesPer1Minute: Swift.Int? = nil,
                maxAudioMegabytesPer1Minute: Swift.Int? = nil,
                maxRequestsPer1Day: Swift.Int? = nil,
                batch1DayMaxInputTokens: Swift.Int? = nil
            ) {
                self.maxRequestsPer1Minute = maxRequestsPer1Minute
                self.maxTokensPer1Minute = maxTokensPer1Minute
                self.maxImagesPer1Minute = maxImagesPer1Minute
                self.maxAudioMegabytesPer1Minute = maxAudioMegabytesPer1Minute
                self.maxRequestsPer1Day = maxRequestsPer1Day
                self.batch1DayMaxInputTokens = batch1DayMaxInputTokens
            }
            public enum CodingKeys: String, CodingKey {
                case maxRequestsPer1Minute = "max_requests_per_1_minute"
                case maxTokensPer1Minute = "max_tokens_per_1_minute"
                case maxImagesPer1Minute = "max_images_per_1_minute"
                case maxAudioMegabytesPer1Minute = "max_audio_megabytes_per_1_minute"
                case maxRequestsPer1Day = "max_requests_per_1_day"
                case batch1DayMaxInputTokens = "batch_1_day_max_input_tokens"
            }
        }
        /// Represents an individual service account in a project.
        ///
        /// - Remark: Generated from `#/components/schemas/ProjectServiceAccount`.
        public struct ProjectServiceAccount: Codable, Hashable, Sendable {
            /// The object type, which is always `organization.project.service_account`
            ///
            /// - Remark: Generated from `#/components/schemas/ProjectServiceAccount/object`.
            @frozen public enum ObjectPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case organization_project_serviceAccount = "organization.project.service_account"
            }
            /// The object type, which is always `organization.project.service_account`
            ///
            /// - Remark: Generated from `#/components/schemas/ProjectServiceAccount/object`.
            public var object: Components.Schemas.ProjectServiceAccount.ObjectPayload
            /// The identifier, which can be referenced in API endpoints
            ///
            /// - Remark: Generated from `#/components/schemas/ProjectServiceAccount/id`.
            public var id: Swift.String
            /// The name of the service account
            ///
            /// - Remark: Generated from `#/components/schemas/ProjectServiceAccount/name`.
            public var name: Swift.String
            /// `owner` or `member`
            ///
            /// - Remark: Generated from `#/components/schemas/ProjectServiceAccount/role`.
            @frozen public enum RolePayload: String, Codable, Hashable, Sendable, CaseIterable {
                case owner = "owner"
                case member = "member"
            }
            /// `owner` or `member`
            ///
            /// - Remark: Generated from `#/components/schemas/ProjectServiceAccount/role`.
            public var role: Components.Schemas.ProjectServiceAccount.RolePayload
            /// The Unix timestamp (in seconds) of when the service account was created
            ///
            /// - Remark: Generated from `#/components/schemas/ProjectServiceAccount/created_at`.
            public var createdAt: Swift.Int
            /// Creates a new `ProjectServiceAccount`.
            ///
            /// - Parameters:
            ///   - object: The object type, which is always `organization.project.service_account`
            ///   - id: The identifier, which can be referenced in API endpoints
            ///   - name: The name of the service account
            ///   - role: `owner` or `member`
            ///   - createdAt: The Unix timestamp (in seconds) of when the service account was created
            public init(
                object: Components.Schemas.ProjectServiceAccount.ObjectPayload,
                id: Swift.String,
                name: Swift.String,
                role: Components.Schemas.ProjectServiceAccount.RolePayload,
                createdAt: Swift.Int
            ) {
                self.object = object
                self.id = id
                self.name = name
                self.role = role
                self.createdAt = createdAt
            }
            public enum CodingKeys: String, CodingKey {
                case object
                case id
                case name
                case role
                case createdAt = "created_at"
            }
        }
        /// - Remark: Generated from `#/components/schemas/ProjectServiceAccountApiKey`.
        public struct ProjectServiceAccountApiKey: Codable, Hashable, Sendable {
            /// The object type, which is always `organization.project.service_account.api_key`
            ///
            /// - Remark: Generated from `#/components/schemas/ProjectServiceAccountApiKey/object`.
            @frozen public enum ObjectPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case organization_project_serviceAccount_apiKey = "organization.project.service_account.api_key"
            }
            /// The object type, which is always `organization.project.service_account.api_key`
            ///
            /// - Remark: Generated from `#/components/schemas/ProjectServiceAccountApiKey/object`.
            public var object: Components.Schemas.ProjectServiceAccountApiKey.ObjectPayload
            /// - Remark: Generated from `#/components/schemas/ProjectServiceAccountApiKey/value`.
            public var value: Swift.String
            /// - Remark: Generated from `#/components/schemas/ProjectServiceAccountApiKey/name`.
            public var name: Swift.String
            /// - Remark: Generated from `#/components/schemas/ProjectServiceAccountApiKey/created_at`.
            public var createdAt: Swift.Int
            /// - Remark: Generated from `#/components/schemas/ProjectServiceAccountApiKey/id`.
            public var id: Swift.String
            /// Creates a new `ProjectServiceAccountApiKey`.
            ///
            /// - Parameters:
            ///   - object: The object type, which is always `organization.project.service_account.api_key`
            ///   - value:
            ///   - name:
            ///   - createdAt:
            ///   - id:
            public init(
                object: Components.Schemas.ProjectServiceAccountApiKey.ObjectPayload,
                value: Swift.String,
                name: Swift.String,
                createdAt: Swift.Int,
                id: Swift.String
            ) {
                self.object = object
                self.value = value
                self.name = name
                self.createdAt = createdAt
                self.id = id
            }
            public enum CodingKeys: String, CodingKey {
                case object
                case value
                case name
                case createdAt = "created_at"
                case id
            }
        }
        /// - Remark: Generated from `#/components/schemas/ProjectServiceAccountCreateRequest`.
        public struct ProjectServiceAccountCreateRequest: Codable, Hashable, Sendable {
            /// The name of the service account being created.
            ///
            /// - Remark: Generated from `#/components/schemas/ProjectServiceAccountCreateRequest/name`.
            public var name: Swift.String
            /// Creates a new `ProjectServiceAccountCreateRequest`.
            ///
            /// - Parameters:
            ///   - name: The name of the service account being created.
            public init(name: Swift.String) {
                self.name = name
            }
            public enum CodingKeys: String, CodingKey {
                case name
            }
        }
        /// - Remark: Generated from `#/components/schemas/ProjectServiceAccountCreateResponse`.
        public struct ProjectServiceAccountCreateResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/ProjectServiceAccountCreateResponse/object`.
            @frozen public enum ObjectPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case organization_project_serviceAccount = "organization.project.service_account"
            }
            /// - Remark: Generated from `#/components/schemas/ProjectServiceAccountCreateResponse/object`.
            public var object: Components.Schemas.ProjectServiceAccountCreateResponse.ObjectPayload
            /// - Remark: Generated from `#/components/schemas/ProjectServiceAccountCreateResponse/id`.
            public var id: Swift.String
            /// - Remark: Generated from `#/components/schemas/ProjectServiceAccountCreateResponse/name`.
            public var name: Swift.String
            /// Service accounts can only have one role of type `member`
            ///
            /// - Remark: Generated from `#/components/schemas/ProjectServiceAccountCreateResponse/role`.
            @frozen public enum RolePayload: String, Codable, Hashable, Sendable, CaseIterable {
                case member = "member"
            }
            /// Service accounts can only have one role of type `member`
            ///
            /// - Remark: Generated from `#/components/schemas/ProjectServiceAccountCreateResponse/role`.
            public var role: Components.Schemas.ProjectServiceAccountCreateResponse.RolePayload
            /// - Remark: Generated from `#/components/schemas/ProjectServiceAccountCreateResponse/created_at`.
            public var createdAt: Swift.Int
            /// - Remark: Generated from `#/components/schemas/ProjectServiceAccountCreateResponse/api_key`.
            public var apiKey: Components.Schemas.ProjectServiceAccountApiKey
            /// Creates a new `ProjectServiceAccountCreateResponse`.
            ///
            /// - Parameters:
            ///   - object:
            ///   - id:
            ///   - name:
            ///   - role: Service accounts can only have one role of type `member`
            ///   - createdAt:
            ///   - apiKey:
            public init(
                object: Components.Schemas.ProjectServiceAccountCreateResponse.ObjectPayload,
                id: Swift.String,
                name: Swift.String,
                role: Components.Schemas.ProjectServiceAccountCreateResponse.RolePayload,
                createdAt: Swift.Int,
                apiKey: Components.Schemas.ProjectServiceAccountApiKey
            ) {
                self.object = object
                self.id = id
                self.name = name
                self.role = role
                self.createdAt = createdAt
                self.apiKey = apiKey
            }
            public enum CodingKeys: String, CodingKey {
                case object
                case id
                case name
                case role
                case createdAt = "created_at"
                case apiKey = "api_key"
            }
        }
        /// - Remark: Generated from `#/components/schemas/ProjectServiceAccountDeleteResponse`.
        public struct ProjectServiceAccountDeleteResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/ProjectServiceAccountDeleteResponse/object`.
            @frozen public enum ObjectPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case organization_project_serviceAccount_deleted = "organization.project.service_account.deleted"
            }
            /// - Remark: Generated from `#/components/schemas/ProjectServiceAccountDeleteResponse/object`.
            public var object: Components.Schemas.ProjectServiceAccountDeleteResponse.ObjectPayload
            /// - Remark: Generated from `#/components/schemas/ProjectServiceAccountDeleteResponse/id`.
            public var id: Swift.String
            /// - Remark: Generated from `#/components/schemas/ProjectServiceAccountDeleteResponse/deleted`.
            public var deleted: Swift.Bool
            /// Creates a new `ProjectServiceAccountDeleteResponse`.
            ///
            /// - Parameters:
            ///   - object:
            ///   - id:
            ///   - deleted:
            public init(
                object: Components.Schemas.ProjectServiceAccountDeleteResponse.ObjectPayload,
                id: Swift.String,
                deleted: Swift.Bool
            ) {
                self.object = object
                self.id = id
                self.deleted = deleted
            }
            public enum CodingKeys: String, CodingKey {
                case object
                case id
                case deleted
            }
        }
        /// - Remark: Generated from `#/components/schemas/ProjectServiceAccountListResponse`.
        public struct ProjectServiceAccountListResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/ProjectServiceAccountListResponse/object`.
            @frozen public enum ObjectPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case list = "list"
            }
            /// - Remark: Generated from `#/components/schemas/ProjectServiceAccountListResponse/object`.
            public var object: Components.Schemas.ProjectServiceAccountListResponse.ObjectPayload
            /// - Remark: Generated from `#/components/schemas/ProjectServiceAccountListResponse/data`.
            public var data: [Components.Schemas.ProjectServiceAccount]
            /// - Remark: Generated from `#/components/schemas/ProjectServiceAccountListResponse/first_id`.
            public var firstId: Swift.String
            /// - Remark: Generated from `#/components/schemas/ProjectServiceAccountListResponse/last_id`.
            public var lastId: Swift.String
            /// - Remark: Generated from `#/components/schemas/ProjectServiceAccountListResponse/has_more`.
            public var hasMore: Swift.Bool
            /// Creates a new `ProjectServiceAccountListResponse`.
            ///
            /// - Parameters:
            ///   - object:
            ///   - data:
            ///   - firstId:
            ///   - lastId:
            ///   - hasMore:
            public init(
                object: Components.Schemas.ProjectServiceAccountListResponse.ObjectPayload,
                data: [Components.Schemas.ProjectServiceAccount],
                firstId: Swift.String,
                lastId: Swift.String,
                hasMore: Swift.Bool
            ) {
                self.object = object
                self.data = data
                self.firstId = firstId
                self.lastId = lastId
                self.hasMore = hasMore
            }
            public enum CodingKeys: String, CodingKey {
                case object
                case data
                case firstId = "first_id"
                case lastId = "last_id"
                case hasMore = "has_more"
            }
        }
        /// - Remark: Generated from `#/components/schemas/ProjectUpdateRequest`.
        public struct ProjectUpdateRequest: Codable, Hashable, Sendable {
            /// The updated name of the project, this name appears in reports.
            ///
            /// - Remark: Generated from `#/components/schemas/ProjectUpdateRequest/name`.
            public var name: Swift.String
            /// Creates a new `ProjectUpdateRequest`.
            ///
            /// - Parameters:
            ///   - name: The updated name of the project, this name appears in reports.
            public init(name: Swift.String) {
                self.name = name
            }
            public enum CodingKeys: String, CodingKey {
                case name
            }
        }
        /// Represents an individual user in a project.
        ///
        /// - Remark: Generated from `#/components/schemas/ProjectUser`.
        public struct ProjectUser: Codable, Hashable, Sendable {
            /// The object type, which is always `organization.project.user`
            ///
            /// - Remark: Generated from `#/components/schemas/ProjectUser/object`.
            @frozen public enum ObjectPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case organization_project_user = "organization.project.user"
            }
            /// The object type, which is always `organization.project.user`
            ///
            /// - Remark: Generated from `#/components/schemas/ProjectUser/object`.
            public var object: Components.Schemas.ProjectUser.ObjectPayload
            /// The identifier, which can be referenced in API endpoints
            ///
            /// - Remark: Generated from `#/components/schemas/ProjectUser/id`.
            public var id: Swift.String
            /// The name of the user
            ///
            /// - Remark: Generated from `#/components/schemas/ProjectUser/name`.
            public var name: Swift.String
            /// The email address of the user
            ///
            /// - Remark: Generated from `#/components/schemas/ProjectUser/email`.
            public var email: Swift.String
            /// `owner` or `member`
            ///
            /// - Remark: Generated from `#/components/schemas/ProjectUser/role`.
            @frozen public enum RolePayload: String, Codable, Hashable, Sendable, CaseIterable {
                case owner = "owner"
                case member = "member"
            }
            /// `owner` or `member`
            ///
            /// - Remark: Generated from `#/components/schemas/ProjectUser/role`.
            public var role: Components.Schemas.ProjectUser.RolePayload
            /// The Unix timestamp (in seconds) of when the project was added.
            ///
            /// - Remark: Generated from `#/components/schemas/ProjectUser/added_at`.
            public var addedAt: Swift.Int
            /// Creates a new `ProjectUser`.
            ///
            /// - Parameters:
            ///   - object: The object type, which is always `organization.project.user`
            ///   - id: The identifier, which can be referenced in API endpoints
            ///   - name: The name of the user
            ///   - email: The email address of the user
            ///   - role: `owner` or `member`
            ///   - addedAt: The Unix timestamp (in seconds) of when the project was added.
            public init(
                object: Components.Schemas.ProjectUser.ObjectPayload,
                id: Swift.String,
                name: Swift.String,
                email: Swift.String,
                role: Components.Schemas.ProjectUser.RolePayload,
                addedAt: Swift.Int
            ) {
                self.object = object
                self.id = id
                self.name = name
                self.email = email
                self.role = role
                self.addedAt = addedAt
            }
            public enum CodingKeys: String, CodingKey {
                case object
                case id
                case name
                case email
                case role
                case addedAt = "added_at"
            }
        }
        /// - Remark: Generated from `#/components/schemas/ProjectUserCreateRequest`.
        public struct ProjectUserCreateRequest: Codable, Hashable, Sendable {
            /// The ID of the user.
            ///
            /// - Remark: Generated from `#/components/schemas/ProjectUserCreateRequest/user_id`.
            public var userId: Swift.String
            /// `owner` or `member`
            ///
            /// - Remark: Generated from `#/components/schemas/ProjectUserCreateRequest/role`.
            @frozen public enum RolePayload: String, Codable, Hashable, Sendable, CaseIterable {
                case owner = "owner"
                case member = "member"
            }
            /// `owner` or `member`
            ///
            /// - Remark: Generated from `#/components/schemas/ProjectUserCreateRequest/role`.
            public var role: Components.Schemas.ProjectUserCreateRequest.RolePayload
            /// Creates a new `ProjectUserCreateRequest`.
            ///
            /// - Parameters:
            ///   - userId: The ID of the user.
            ///   - role: `owner` or `member`
            public init(
                userId: Swift.String,
                role: Components.Schemas.ProjectUserCreateRequest.RolePayload
            ) {
                self.userId = userId
                self.role = role
            }
            public enum CodingKeys: String, CodingKey {
                case userId = "user_id"
                case role
            }
        }
        /// - Remark: Generated from `#/components/schemas/ProjectUserDeleteResponse`.
        public struct ProjectUserDeleteResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/ProjectUserDeleteResponse/object`.
            @frozen public enum ObjectPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case organization_project_user_deleted = "organization.project.user.deleted"
            }
            /// - Remark: Generated from `#/components/schemas/ProjectUserDeleteResponse/object`.
            public var object: Components.Schemas.ProjectUserDeleteResponse.ObjectPayload
            /// - Remark: Generated from `#/components/schemas/ProjectUserDeleteResponse/id`.
            public var id: Swift.String
            /// - Remark: Generated from `#/components/schemas/ProjectUserDeleteResponse/deleted`.
            public var deleted: Swift.Bool
            /// Creates a new `ProjectUserDeleteResponse`.
            ///
            /// - Parameters:
            ///   - object:
            ///   - id:
            ///   - deleted:
            public init(
                object: Components.Schemas.ProjectUserDeleteResponse.ObjectPayload,
                id: Swift.String,
                deleted: Swift.Bool
            ) {
                self.object = object
                self.id = id
                self.deleted = deleted
            }
            public enum CodingKeys: String, CodingKey {
                case object
                case id
                case deleted
            }
        }
        /// - Remark: Generated from `#/components/schemas/ProjectUserListResponse`.
        public struct ProjectUserListResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/ProjectUserListResponse/object`.
            public var object: Swift.String
            /// - Remark: Generated from `#/components/schemas/ProjectUserListResponse/data`.
            public var data: [Components.Schemas.ProjectUser]
            /// - Remark: Generated from `#/components/schemas/ProjectUserListResponse/first_id`.
            public var firstId: Swift.String
            /// - Remark: Generated from `#/components/schemas/ProjectUserListResponse/last_id`.
            public var lastId: Swift.String
            /// - Remark: Generated from `#/components/schemas/ProjectUserListResponse/has_more`.
            public var hasMore: Swift.Bool
            /// Creates a new `ProjectUserListResponse`.
            ///
            /// - Parameters:
            ///   - object:
            ///   - data:
            ///   - firstId:
            ///   - lastId:
            ///   - hasMore:
            public init(
                object: Swift.String,
                data: [Components.Schemas.ProjectUser],
                firstId: Swift.String,
                lastId: Swift.String,
                hasMore: Swift.Bool
            ) {
                self.object = object
                self.data = data
                self.firstId = firstId
                self.lastId = lastId
                self.hasMore = hasMore
            }
            public enum CodingKeys: String, CodingKey {
                case object
                case data
                case firstId = "first_id"
                case lastId = "last_id"
                case hasMore = "has_more"
            }
        }
        /// - Remark: Generated from `#/components/schemas/ProjectUserUpdateRequest`.
        public struct ProjectUserUpdateRequest: Codable, Hashable, Sendable {
            /// `owner` or `member`
            ///
            /// - Remark: Generated from `#/components/schemas/ProjectUserUpdateRequest/role`.
            @frozen public enum RolePayload: String, Codable, Hashable, Sendable, CaseIterable {
                case owner = "owner"
                case member = "member"
            }
            /// `owner` or `member`
            ///
            /// - Remark: Generated from `#/components/schemas/ProjectUserUpdateRequest/role`.
            public var role: Components.Schemas.ProjectUserUpdateRequest.RolePayload
            /// Creates a new `ProjectUserUpdateRequest`.
            ///
            /// - Parameters:
            ///   - role: `owner` or `member`
            public init(role: Components.Schemas.ProjectUserUpdateRequest.RolePayload) {
                self.role = role
            }
            public enum CodingKeys: String, CodingKey {
                case role
            }
        }
        /// Add a new Item to the Conversation's context, including messages, function 
        /// calls, and function call responses. This event can be used both to populate a 
        /// "history" of the conversation and to add new items mid-stream, but has the 
        /// current limitation that it cannot populate assistant audio messages.
        ///
        /// If successful, the server will respond with a `conversation.item.created` 
        /// event, otherwise an `error` event will be sent.
        ///
        ///
        /// - Remark: Generated from `#/components/schemas/RealtimeClientEventConversationItemCreate`.
        public struct RealtimeClientEventConversationItemCreate: Codable, Hashable, Sendable {
            /// Optional client-generated ID used to identify this event.
            ///
            /// - Remark: Generated from `#/components/schemas/RealtimeClientEventConversationItemCreate/event_id`.
            public var eventId: Swift.String?
            /// The event type, must be `conversation.item.create`.
            ///
            /// - Remark: Generated from `#/components/schemas/RealtimeClientEventConversationItemCreate/type`.
            @frozen public enum _TypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                case conversation_item_create = "conversation.item.create"
            }
            /// The event type, must be `conversation.item.create`.
            ///
            /// - Remark: Generated from `#/components/schemas/RealtimeClientEventConversationItemCreate/type`.
            public var _type: Components.Schemas.RealtimeClientEventConversationItemCreate._TypePayload
            /// The ID of the preceding item after which the new item will be inserted. 
            /// If not set, the new item will be appended to the end of the conversation.
            /// If set to `root`, the new item will be added to the beginning of the conversation.
            /// If set to an existing ID, it allows an item to be inserted mid-conversation. If the
            /// ID cannot be found, an error will be returned and the item will not be added.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/RealtimeClientEventConversationItemCreate/previous_item_id`.
            public var previousItemId: Swift.String?
            /// - Remark: Generated from `#/components/schemas/RealtimeClientEventConversationItemCreate/item`.
            public var item: Components.Schemas.RealtimeConversationItem
            /// Creates a new `RealtimeClientEventConversationItemCreate`.
            ///
            /// - Parameters:
            ///   - eventId: Optional client-generated ID used to identify this event.
            ///   - _type: The event type, must be `conversation.item.create`.
            ///   - previousItemId: The ID of the preceding item after which the new item will be inserted. 
            ///   - item:
            public init(
                eventId: Swift.String? = nil,
                _type: Components.Schemas.RealtimeClientEventConversationItemCreate._TypePayload,
                previousItemId: Swift.String? = nil,
                item: Components.Schemas.RealtimeConversationItem
            ) {
                self.eventId = eventId
                self._type = _type
                self.previousItemId = previousItemId
                self.item = item
            }
            public enum CodingKeys: String, CodingKey {
                case eventId = "event_id"
                case _type = "type"
                case previousItemId = "previous_item_id"
                case item
            }
        }
        /// Send this event when you want to remove any item from the conversation 
        /// history. The server will respond with a `conversation.item.deleted` event, 
        /// unless the item does not exist in the conversation history, in which case the 
        /// server will respond with an error.
        ///
        ///
        /// - Remark: Generated from `#/components/schemas/RealtimeClientEventConversationItemDelete`.
        public struct RealtimeClientEventConversationItemDelete: Codable, Hashable, Sendable {
            /// Optional client-generated ID used to identify this event.
            ///
            /// - Remark: Generated from `#/components/schemas/RealtimeClientEventConversationItemDelete/event_id`.
            public var eventId: Swift.String?
            /// The event type, must be `conversation.item.delete`.
            ///
            /// - Remark: Generated from `#/components/schemas/RealtimeClientEventConversationItemDelete/type`.
            @frozen public enum _TypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                case conversation_item_delete = "conversation.item.delete"
            }
            /// The event type, must be `conversation.item.delete`.
            ///
            /// - Remark: Generated from `#/components/schemas/RealtimeClientEventConversationItemDelete/type`.
            public var _type: Components.Schemas.RealtimeClientEventConversationItemDelete._TypePayload
            /// The ID of the item to delete.
            ///
            /// - Remark: Generated from `#/components/schemas/RealtimeClientEventConversationItemDelete/item_id`.
            public var itemId: Swift.String
            /// Creates a new `RealtimeClientEventConversationItemDelete`.
            ///
            /// - Parameters:
            ///   - eventId: Optional client-generated ID used to identify this event.
            ///   - _type: The event type, must be `conversation.item.delete`.
            ///   - itemId: The ID of the item to delete.
            public init(
                eventId: Swift.String? = nil,
                _type: Components.Schemas.RealtimeClientEventConversationItemDelete._TypePayload,
                itemId: Swift.String
            ) {
                self.eventId = eventId
                self._type = _type
                self.itemId = itemId
            }
            public enum CodingKeys: String, CodingKey {
                case eventId = "event_id"
                case _type = "type"
                case itemId = "item_id"
            }
        }
        /// Send this event to truncate a previous assistant message’s audio. The server 
        /// will produce audio faster than realtime, so this event is useful when the user 
        /// interrupts to truncate audio that has already been sent to the client but not 
        /// yet played. This will synchronize the server's understanding of the audio with 
        /// the client's playback.
        ///
        /// Truncating audio will delete the server-side text transcript to ensure there 
        /// is not text in the context that hasn't been heard by the user.
        ///
        /// If successful, the server will respond with a `conversation.item.truncated` 
        /// event. 
        ///
        ///
        /// - Remark: Generated from `#/components/schemas/RealtimeClientEventConversationItemTruncate`.
        public struct RealtimeClientEventConversationItemTruncate: Codable, Hashable, Sendable {
            /// Optional client-generated ID used to identify this event.
            ///
            /// - Remark: Generated from `#/components/schemas/RealtimeClientEventConversationItemTruncate/event_id`.
            public var eventId: Swift.String?
            /// The event type, must be `conversation.item.truncate`.
            ///
            /// - Remark: Generated from `#/components/schemas/RealtimeClientEventConversationItemTruncate/type`.
            @frozen public enum _TypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                case conversation_item_truncate = "conversation.item.truncate"
            }
            /// The event type, must be `conversation.item.truncate`.
            ///
            /// - Remark: Generated from `#/components/schemas/RealtimeClientEventConversationItemTruncate/type`.
            public var _type: Components.Schemas.RealtimeClientEventConversationItemTruncate._TypePayload
            /// The ID of the assistant message item to truncate. Only assistant message 
            /// items can be truncated.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/RealtimeClientEventConversationItemTruncate/item_id`.
            public var itemId: Swift.String
            /// The index of the content part to truncate. Set this to 0.
            ///
            /// - Remark: Generated from `#/components/schemas/RealtimeClientEventConversationItemTruncate/content_index`.
            public var contentIndex: Swift.Int
            /// Inclusive duration up to which audio is truncated, in milliseconds. If 
            /// the audio_end_ms is greater than the actual audio duration, the server 
            /// will respond with an error.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/RealtimeClientEventConversationItemTruncate/audio_end_ms`.
            public var audioEndMs: Swift.Int
            /// Creates a new `RealtimeClientEventConversationItemTruncate`.
            ///
            /// - Parameters:
            ///   - eventId: Optional client-generated ID used to identify this event.
            ///   - _type: The event type, must be `conversation.item.truncate`.
            ///   - itemId: The ID of the assistant message item to truncate. Only assistant message 
            ///   - contentIndex: The index of the content part to truncate. Set this to 0.
            ///   - audioEndMs: Inclusive duration up to which audio is truncated, in milliseconds. If 
            public init(
                eventId: Swift.String? = nil,
                _type: Components.Schemas.RealtimeClientEventConversationItemTruncate._TypePayload,
                itemId: Swift.String,
                contentIndex: Swift.Int,
                audioEndMs: Swift.Int
            ) {
                self.eventId = eventId
                self._type = _type
                self.itemId = itemId
                self.contentIndex = contentIndex
                self.audioEndMs = audioEndMs
            }
            public enum CodingKeys: String, CodingKey {
                case eventId = "event_id"
                case _type = "type"
                case itemId = "item_id"
                case contentIndex = "content_index"
                case audioEndMs = "audio_end_ms"
            }
        }
        /// Send this event to append audio bytes to the input audio buffer. The audio 
        /// buffer is temporary storage you can write to and later commit. In Server VAD 
        /// mode, the audio buffer is used to detect speech and the server will decide 
        /// when to commit. When Server VAD is disabled, you must commit the audio buffer
        /// manually.
        ///
        /// The client may choose how much audio to place in each event up to a maximum 
        /// of 15 MiB, for example streaming smaller chunks from the client may allow the 
        /// VAD to be more responsive. Unlike made other client events, the server will 
        /// not send a confirmation response to this event.
        ///
        ///
        /// - Remark: Generated from `#/components/schemas/RealtimeClientEventInputAudioBufferAppend`.
        public struct RealtimeClientEventInputAudioBufferAppend: Codable, Hashable, Sendable {
            /// Optional client-generated ID used to identify this event.
            ///
            /// - Remark: Generated from `#/components/schemas/RealtimeClientEventInputAudioBufferAppend/event_id`.
            public var eventId: Swift.String?
            /// The event type, must be `input_audio_buffer.append`.
            ///
            /// - Remark: Generated from `#/components/schemas/RealtimeClientEventInputAudioBufferAppend/type`.
            @frozen public enum _TypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                case inputAudioBuffer_append = "input_audio_buffer.append"
            }
            /// The event type, must be `input_audio_buffer.append`.
            ///
            /// - Remark: Generated from `#/components/schemas/RealtimeClientEventInputAudioBufferAppend/type`.
            public var _type: Components.Schemas.RealtimeClientEventInputAudioBufferAppend._TypePayload
            /// Base64-encoded audio bytes. This must be in the format specified by the 
            /// `input_audio_format` field in the session configuration.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/RealtimeClientEventInputAudioBufferAppend/audio`.
            public var audio: Swift.String
            /// Creates a new `RealtimeClientEventInputAudioBufferAppend`.
            ///
            /// - Parameters:
            ///   - eventId: Optional client-generated ID used to identify this event.
            ///   - _type: The event type, must be `input_audio_buffer.append`.
            ///   - audio: Base64-encoded audio bytes. This must be in the format specified by the 
            public init(
                eventId: Swift.String? = nil,
                _type: Components.Schemas.RealtimeClientEventInputAudioBufferAppend._TypePayload,
                audio: Swift.String
            ) {
                self.eventId = eventId
                self._type = _type
                self.audio = audio
            }
            public enum CodingKeys: String, CodingKey {
                case eventId = "event_id"
                case _type = "type"
                case audio
            }
        }
        /// Send this event to clear the audio bytes in the buffer. The server will 
        /// respond with an `input_audio_buffer.cleared` event.
        ///
        ///
        /// - Remark: Generated from `#/components/schemas/RealtimeClientEventInputAudioBufferClear`.
        public struct RealtimeClientEventInputAudioBufferClear: Codable, Hashable, Sendable {
            /// Optional client-generated ID used to identify this event.
            ///
            /// - Remark: Generated from `#/components/schemas/RealtimeClientEventInputAudioBufferClear/event_id`.
            public var eventId: Swift.String?
            /// The event type, must be `input_audio_buffer.clear`.
            ///
            /// - Remark: Generated from `#/components/schemas/RealtimeClientEventInputAudioBufferClear/type`.
            @frozen public enum _TypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                case inputAudioBuffer_clear = "input_audio_buffer.clear"
            }
            /// The event type, must be `input_audio_buffer.clear`.
            ///
            /// - Remark: Generated from `#/components/schemas/RealtimeClientEventInputAudioBufferClear/type`.
            public var _type: Components.Schemas.RealtimeClientEventInputAudioBufferClear._TypePayload
            /// Creates a new `RealtimeClientEventInputAudioBufferClear`.
            ///
            /// - Parameters:
            ///   - eventId: Optional client-generated ID used to identify this event.
            ///   - _type: The event type, must be `input_audio_buffer.clear`.
            public init(
                eventId: Swift.String? = nil,
                _type: Components.Schemas.RealtimeClientEventInputAudioBufferClear._TypePayload
            ) {
                self.eventId = eventId
                self._type = _type
            }
            public enum CodingKeys: String, CodingKey {
                case eventId = "event_id"
                case _type = "type"
            }
        }
        /// Send this event to commit the user input audio buffer, which will create a 
        /// new user message item in the conversation. This event will produce an error 
        /// if the input audio buffer is empty. When in Server VAD mode, the client does 
        /// not need to send this event, the server will commit the audio buffer 
        /// automatically.
        ///
        /// Committing the input audio buffer will trigger input audio transcription 
        /// (if enabled in session configuration), but it will not create a response 
        /// from the model. The server will respond with an `input_audio_buffer.committed` 
        /// event.
        ///
        ///
        /// - Remark: Generated from `#/components/schemas/RealtimeClientEventInputAudioBufferCommit`.
        public struct RealtimeClientEventInputAudioBufferCommit: Codable, Hashable, Sendable {
            /// Optional client-generated ID used to identify this event.
            ///
            /// - Remark: Generated from `#/components/schemas/RealtimeClientEventInputAudioBufferCommit/event_id`.
            public var eventId: Swift.String?
            /// The event type, must be `input_audio_buffer.commit`.
            ///
            /// - Remark: Generated from `#/components/schemas/RealtimeClientEventInputAudioBufferCommit/type`.
            @frozen public enum _TypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                case inputAudioBuffer_commit = "input_audio_buffer.commit"
            }
            /// The event type, must be `input_audio_buffer.commit`.
            ///
            /// - Remark: Generated from `#/components/schemas/RealtimeClientEventInputAudioBufferCommit/type`.
            public var _type: Components.Schemas.RealtimeClientEventInputAudioBufferCommit._TypePayload
            /// Creates a new `RealtimeClientEventInputAudioBufferCommit`.
            ///
            /// - Parameters:
            ///   - eventId: Optional client-generated ID used to identify this event.
            ///   - _type: The event type, must be `input_audio_buffer.commit`.
            public init(
                eventId: Swift.String? = nil,
                _type: Components.Schemas.RealtimeClientEventInputAudioBufferCommit._TypePayload
            ) {
                self.eventId = eventId
                self._type = _type
            }
            public enum CodingKeys: String, CodingKey {
                case eventId = "event_id"
                case _type = "type"
            }
        }
        /// Send this event to cancel an in-progress response. The server will respond 
        /// with a `response.cancelled` event or an error if there is no response to 
        /// cancel.
        ///
        ///
        /// - Remark: Generated from `#/components/schemas/RealtimeClientEventResponseCancel`.
        public struct RealtimeClientEventResponseCancel: Codable, Hashable, Sendable {
            /// Optional client-generated ID used to identify this event.
            ///
            /// - Remark: Generated from `#/components/schemas/RealtimeClientEventResponseCancel/event_id`.
            public var eventId: Swift.String?
            /// The event type, must be `response.cancel`.
            ///
            /// - Remark: Generated from `#/components/schemas/RealtimeClientEventResponseCancel/type`.
            @frozen public enum _TypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                case response_cancel = "response.cancel"
            }
            /// The event type, must be `response.cancel`.
            ///
            /// - Remark: Generated from `#/components/schemas/RealtimeClientEventResponseCancel/type`.
            public var _type: Components.Schemas.RealtimeClientEventResponseCancel._TypePayload
            /// A specific response ID to cancel - if not provided, will cancel an 
            /// in-progress response in the default conversation.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/RealtimeClientEventResponseCancel/response_id`.
            public var responseId: Swift.String?
            /// Creates a new `RealtimeClientEventResponseCancel`.
            ///
            /// - Parameters:
            ///   - eventId: Optional client-generated ID used to identify this event.
            ///   - _type: The event type, must be `response.cancel`.
            ///   - responseId: A specific response ID to cancel - if not provided, will cancel an 
            public init(
                eventId: Swift.String? = nil,
                _type: Components.Schemas.RealtimeClientEventResponseCancel._TypePayload,
                responseId: Swift.String? = nil
            ) {
                self.eventId = eventId
                self._type = _type
                self.responseId = responseId
            }
            public enum CodingKeys: String, CodingKey {
                case eventId = "event_id"
                case _type = "type"
                case responseId = "response_id"
            }
        }
        /// This event instructs the server to create a Response, which means triggering 
        /// model inference. When in Server VAD mode, the server will create Responses 
        /// automatically.
        ///
        /// A Response will include at least one Item, and may have two, in which case 
        /// the second will be a function call. These Items will be appended to the 
        /// conversation history.
        ///
        /// The server will respond with a `response.created` event, events for Items 
        /// and content created, and finally a `response.done` event to indicate the 
        /// Response is complete.
        ///
        /// The `response.create` event includes inference configuration like 
        /// `instructions`, and `temperature`. These fields will override the Session's 
        /// configuration for this Response only.
        ///
        ///
        /// - Remark: Generated from `#/components/schemas/RealtimeClientEventResponseCreate`.
        public struct RealtimeClientEventResponseCreate: Codable, Hashable, Sendable {
            /// Optional client-generated ID used to identify this event.
            ///
            /// - Remark: Generated from `#/components/schemas/RealtimeClientEventResponseCreate/event_id`.
            public var eventId: Swift.String?
            /// The event type, must be `response.create`.
            ///
            /// - Remark: Generated from `#/components/schemas/RealtimeClientEventResponseCreate/type`.
            @frozen public enum _TypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                case response_create = "response.create"
            }
            /// The event type, must be `response.create`.
            ///
            /// - Remark: Generated from `#/components/schemas/RealtimeClientEventResponseCreate/type`.
            public var _type: Components.Schemas.RealtimeClientEventResponseCreate._TypePayload
            /// - Remark: Generated from `#/components/schemas/RealtimeClientEventResponseCreate/response`.
            public var response: Components.Schemas.RealtimeResponseCreateParams?
            /// Creates a new `RealtimeClientEventResponseCreate`.
            ///
            /// - Parameters:
            ///   - eventId: Optional client-generated ID used to identify this event.
            ///   - _type: The event type, must be `response.create`.
            ///   - response:
            public init(
                eventId: Swift.String? = nil,
                _type: Components.Schemas.RealtimeClientEventResponseCreate._TypePayload,
                response: Components.Schemas.RealtimeResponseCreateParams? = nil
            ) {
                self.eventId = eventId
                self._type = _type
                self.response = response
            }
            public enum CodingKeys: String, CodingKey {
                case eventId = "event_id"
                case _type = "type"
                case response
            }
        }
        /// Send this event to update the session’s default configuration. The client may 
        /// send this event at any time to update the session configuration, and any 
        /// field may be updated at any time, except for "voice". The server will respond 
        /// with a `session.updated` event that shows the full effective configuration. 
        /// Only fields that are present are updated, thus the correct way to clear a 
        /// field like "instructions" is to pass an empty string.
        ///
        ///
        /// - Remark: Generated from `#/components/schemas/RealtimeClientEventSessionUpdate`.
        public struct RealtimeClientEventSessionUpdate: Codable, Hashable, Sendable {
            /// Optional client-generated ID used to identify this event.
            ///
            /// - Remark: Generated from `#/components/schemas/RealtimeClientEventSessionUpdate/event_id`.
            public var eventId: Swift.String?
            /// The event type, must be `session.update`.
            ///
            /// - Remark: Generated from `#/components/schemas/RealtimeClientEventSessionUpdate/type`.
            @frozen public enum _TypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                case session_update = "session.update"
            }
            /// The event type, must be `session.update`.
            ///
            /// - Remark: Generated from `#/components/schemas/RealtimeClientEventSessionUpdate/type`.
            public var _type: Components.Schemas.RealtimeClientEventSessionUpdate._TypePayload
            /// - Remark: Generated from `#/components/schemas/RealtimeClientEventSessionUpdate/session`.
            public var session: Components.Schemas.RealtimeSessionCreateRequest
            /// Creates a new `RealtimeClientEventSessionUpdate`.
            ///
            /// - Parameters:
            ///   - eventId: Optional client-generated ID used to identify this event.
            ///   - _type: The event type, must be `session.update`.
            ///   - session:
            public init(
                eventId: Swift.String? = nil,
                _type: Components.Schemas.RealtimeClientEventSessionUpdate._TypePayload,
                session: Components.Schemas.RealtimeSessionCreateRequest
            ) {
                self.eventId = eventId
                self._type = _type
                self.session = session
            }
            public enum CodingKeys: String, CodingKey {
                case eventId = "event_id"
                case _type = "type"
                case session
            }
        }
        /// The item to add to the conversation.
        ///
        /// - Remark: Generated from `#/components/schemas/RealtimeConversationItem`.
        public struct RealtimeConversationItem: Codable, Hashable, Sendable {
            /// The unique ID of the item, this can be generated by the client to help 
            /// manage server-side context, but is not required because the server will 
            /// generate one if not provided.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/RealtimeConversationItem/id`.
            public var id: Swift.String?
            /// The type of the item (`message`, `function_call`, `function_call_output`).
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/RealtimeConversationItem/type`.
            @frozen public enum _TypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                case message = "message"
                case functionCall = "function_call"
                case functionCallOutput = "function_call_output"
            }
            /// The type of the item (`message`, `function_call`, `function_call_output`).
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/RealtimeConversationItem/type`.
            public var _type: Components.Schemas.RealtimeConversationItem._TypePayload?
            /// Identifier for the API object being returned - always `realtime.item`.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/RealtimeConversationItem/object`.
            @frozen public enum ObjectPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case realtime_item = "realtime.item"
            }
            /// Identifier for the API object being returned - always `realtime.item`.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/RealtimeConversationItem/object`.
            public var object: Components.Schemas.RealtimeConversationItem.ObjectPayload?
            /// The status of the item (`completed`, `incomplete`). These have no effect 
            /// on the conversation, but are accepted for consistency with the 
            /// `conversation.item.created` event.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/RealtimeConversationItem/status`.
            @frozen public enum StatusPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case completed = "completed"
                case incomplete = "incomplete"
            }
            /// The status of the item (`completed`, `incomplete`). These have no effect 
            /// on the conversation, but are accepted for consistency with the 
            /// `conversation.item.created` event.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/RealtimeConversationItem/status`.
            public var status: Components.Schemas.RealtimeConversationItem.StatusPayload?
            /// The role of the message sender (`user`, `assistant`, `system`), only 
            /// applicable for `message` items.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/RealtimeConversationItem/role`.
            @frozen public enum RolePayload: String, Codable, Hashable, Sendable, CaseIterable {
                case user = "user"
                case assistant = "assistant"
                case system = "system"
            }
            /// The role of the message sender (`user`, `assistant`, `system`), only 
            /// applicable for `message` items.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/RealtimeConversationItem/role`.
            public var role: Components.Schemas.RealtimeConversationItem.RolePayload?
            /// - Remark: Generated from `#/components/schemas/RealtimeConversationItem/ContentPayload`.
            public struct ContentPayloadPayload: Codable, Hashable, Sendable {
                /// The content type (`input_text`, `input_audio`, `item_reference`, `text`).
                ///
                ///
                /// - Remark: Generated from `#/components/schemas/RealtimeConversationItem/ContentPayload/type`.
                @frozen public enum _TypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case inputAudio = "input_audio"
                    case inputText = "input_text"
                    case itemReference = "item_reference"
                    case text = "text"
                }
                /// The content type (`input_text`, `input_audio`, `item_reference`, `text`).
                ///
                ///
                /// - Remark: Generated from `#/components/schemas/RealtimeConversationItem/ContentPayload/type`.
                public var _type: Components.Schemas.RealtimeConversationItem.ContentPayloadPayload._TypePayload?
                /// The text content, used for `input_text` and `text` content types.
                ///
                ///
                /// - Remark: Generated from `#/components/schemas/RealtimeConversationItem/ContentPayload/text`.
                public var text: Swift.String?
                /// ID of a previous conversation item to reference (for `item_reference`
                /// content types in `response.create` events). These can reference both
                /// client and server created items.
                ///
                ///
                /// - Remark: Generated from `#/components/schemas/RealtimeConversationItem/ContentPayload/id`.
                public var id: Swift.String?
                /// Base64-encoded audio bytes, used for `input_audio` content type.
                ///
                ///
                /// - Remark: Generated from `#/components/schemas/RealtimeConversationItem/ContentPayload/audio`.
                public var audio: Swift.String?
                /// The transcript of the audio, used for `input_audio` content type.
                ///
                ///
                /// - Remark: Generated from `#/components/schemas/RealtimeConversationItem/ContentPayload/transcript`.
                public var transcript: Swift.String?
                /// Creates a new `ContentPayloadPayload`.
                ///
                /// - Parameters:
                ///   - _type: The content type (`input_text`, `input_audio`, `item_reference`, `text`).
                ///   - text: The text content, used for `input_text` and `text` content types.
                ///   - id: ID of a previous conversation item to reference (for `item_reference`
                ///   - audio: Base64-encoded audio bytes, used for `input_audio` content type.
                ///   - transcript: The transcript of the audio, used for `input_audio` content type.
                public init(
                    _type: Components.Schemas.RealtimeConversationItem.ContentPayloadPayload._TypePayload? = nil,
                    text: Swift.String? = nil,
                    id: Swift.String? = nil,
                    audio: Swift.String? = nil,
                    transcript: Swift.String? = nil
                ) {
                    self._type = _type
                    self.text = text
                    self.id = id
                    self.audio = audio
                    self.transcript = transcript
                }
                public enum CodingKeys: String, CodingKey {
                    case _type = "type"
                    case text
                    case id
                    case audio
                    case transcript
                }
            }
            /// The content of the message, applicable for `message` items. 
            /// - Message items of role `system` support only `input_text` content
            /// - Message items of role `user` support `input_text` and `input_audio` 
            ///   content
            /// - Message items of role `assistant` support `text` content.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/RealtimeConversationItem/content`.
            public typealias ContentPayload = [Components.Schemas.RealtimeConversationItem.ContentPayloadPayload]
            /// The content of the message, applicable for `message` items. 
            /// - Message items of role `system` support only `input_text` content
            /// - Message items of role `user` support `input_text` and `input_audio` 
            ///   content
            /// - Message items of role `assistant` support `text` content.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/RealtimeConversationItem/content`.
            public var content: Components.Schemas.RealtimeConversationItem.ContentPayload?
            /// The ID of the function call (for `function_call` and 
            /// `function_call_output` items). If passed on a `function_call_output` 
            /// item, the server will check that a `function_call` item with the same 
            /// ID exists in the conversation history.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/RealtimeConversationItem/call_id`.
            public var callId: Swift.String?
            /// The name of the function being called (for `function_call` items).
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/RealtimeConversationItem/name`.
            public var name: Swift.String?
            /// The arguments of the function call (for `function_call` items).
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/RealtimeConversationItem/arguments`.
            public var arguments: Swift.String?
            /// The output of the function call (for `function_call_output` items).
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/RealtimeConversationItem/output`.
            public var output: Swift.String?
            /// Creates a new `RealtimeConversationItem`.
            ///
            /// - Parameters:
            ///   - id: The unique ID of the item, this can be generated by the client to help 
            ///   - _type: The type of the item (`message`, `function_call`, `function_call_output`).
            ///   - object: Identifier for the API object being returned - always `realtime.item`.
            ///   - status: The status of the item (`completed`, `incomplete`). These have no effect 
            ///   - role: The role of the message sender (`user`, `assistant`, `system`), only 
            ///   - content: The content of the message, applicable for `message` items. 
            ///   - callId: The ID of the function call (for `function_call` and 
            ///   - name: The name of the function being called (for `function_call` items).
            ///   - arguments: The arguments of the function call (for `function_call` items).
            ///   - output: The output of the function call (for `function_call_output` items).
            public init(
                id: Swift.String? = nil,
                _type: Components.Schemas.RealtimeConversationItem._TypePayload? = nil,
                object: Components.Schemas.RealtimeConversationItem.ObjectPayload? = nil,
                status: Components.Schemas.RealtimeConversationItem.StatusPayload? = nil,
                role: Components.Schemas.RealtimeConversationItem.RolePayload? = nil,
                content: Components.Schemas.RealtimeConversationItem.ContentPayload? = nil,
                callId: Swift.String? = nil,
                name: Swift.String? = nil,
                arguments: Swift.String? = nil,
                output: Swift.String? = nil
            ) {
                self.id = id
                self._type = _type
                self.object = object
                self.status = status
                self.role = role
                self.content = content
                self.callId = callId
                self.name = name
                self.arguments = arguments
                self.output = output
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case _type = "type"
                case object
                case status
                case role
                case content
                case callId = "call_id"
                case name
                case arguments
                case output
            }
        }
        /// The response resource.
        ///
        /// - Remark: Generated from `#/components/schemas/RealtimeResponse`.
        public struct RealtimeResponse: Codable, Hashable, Sendable {
            /// The unique ID of the response.
            ///
            /// - Remark: Generated from `#/components/schemas/RealtimeResponse/id`.
            public var id: Swift.String?
            /// The object type, must be `realtime.response`.
            ///
            /// - Remark: Generated from `#/components/schemas/RealtimeResponse/object`.
            @frozen public enum ObjectPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case realtime_response = "realtime.response"
            }
            /// The object type, must be `realtime.response`.
            ///
            /// - Remark: Generated from `#/components/schemas/RealtimeResponse/object`.
            public var object: Components.Schemas.RealtimeResponse.ObjectPayload?
            /// The final status of the response (`completed`, `cancelled`, `failed`, or 
            /// `incomplete`).
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/RealtimeResponse/status`.
            @frozen public enum StatusPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case completed = "completed"
                case cancelled = "cancelled"
                case failed = "failed"
                case incomplete = "incomplete"
            }
            /// The final status of the response (`completed`, `cancelled`, `failed`, or 
            /// `incomplete`).
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/RealtimeResponse/status`.
            public var status: Components.Schemas.RealtimeResponse.StatusPayload?
            /// Additional details about the status.
            ///
            /// - Remark: Generated from `#/components/schemas/RealtimeResponse/status_details`.
            public struct StatusDetailsPayload: Codable, Hashable, Sendable {
                /// The type of error that caused the response to fail, corresponding 
                /// with the `status` field (`completed`, `cancelled`, `incomplete`, 
                /// `failed`).
                ///
                ///
                /// - Remark: Generated from `#/components/schemas/RealtimeResponse/status_details/type`.
                @frozen public enum _TypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case completed = "completed"
                    case cancelled = "cancelled"
                    case failed = "failed"
                    case incomplete = "incomplete"
                }
                /// The type of error that caused the response to fail, corresponding 
                /// with the `status` field (`completed`, `cancelled`, `incomplete`, 
                /// `failed`).
                ///
                ///
                /// - Remark: Generated from `#/components/schemas/RealtimeResponse/status_details/type`.
                public var _type: Components.Schemas.RealtimeResponse.StatusDetailsPayload._TypePayload?
                /// The reason the Response did not complete. For a `cancelled` Response, 
                /// one of `turn_detected` (the server VAD detected a new start of speech) 
                /// or `client_cancelled` (the client sent a cancel event). For an 
                /// `incomplete` Response, one of `max_output_tokens` or `content_filter` 
                /// (the server-side safety filter activated and cut off the response).
                ///
                ///
                /// - Remark: Generated from `#/components/schemas/RealtimeResponse/status_details/reason`.
                @frozen public enum ReasonPayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case turnDetected = "turn_detected"
                    case clientCancelled = "client_cancelled"
                    case maxOutputTokens = "max_output_tokens"
                    case contentFilter = "content_filter"
                }
                /// The reason the Response did not complete. For a `cancelled` Response, 
                /// one of `turn_detected` (the server VAD detected a new start of speech) 
                /// or `client_cancelled` (the client sent a cancel event). For an 
                /// `incomplete` Response, one of `max_output_tokens` or `content_filter` 
                /// (the server-side safety filter activated and cut off the response).
                ///
                ///
                /// - Remark: Generated from `#/components/schemas/RealtimeResponse/status_details/reason`.
                public var reason: Components.Schemas.RealtimeResponse.StatusDetailsPayload.ReasonPayload?
                /// A description of the error that caused the response to fail, 
                /// populated when the `status` is `failed`.
                ///
                ///
                /// - Remark: Generated from `#/components/schemas/RealtimeResponse/status_details/error`.
                public struct _ErrorPayload: Codable, Hashable, Sendable {
                    /// The type of error.
                    ///
                    /// - Remark: Generated from `#/components/schemas/RealtimeResponse/status_details/error/type`.
                    public var _type: Swift.String?
                    /// Error code, if any.
                    ///
                    /// - Remark: Generated from `#/components/schemas/RealtimeResponse/status_details/error/code`.
                    public var code: Swift.String?
                    /// Creates a new `_ErrorPayload`.
                    ///
                    /// - Parameters:
                    ///   - _type: The type of error.
                    ///   - code: Error code, if any.
                    public init(
                        _type: Swift.String? = nil,
                        code: Swift.String? = nil
                    ) {
                        self._type = _type
                        self.code = code
                    }
                    public enum CodingKeys: String, CodingKey {
                        case _type = "type"
                        case code
                    }
                }
                /// A description of the error that caused the response to fail, 
                /// populated when the `status` is `failed`.
                ///
                ///
                /// - Remark: Generated from `#/components/schemas/RealtimeResponse/status_details/error`.
                public var error: Components.Schemas.RealtimeResponse.StatusDetailsPayload._ErrorPayload?
                /// Creates a new `StatusDetailsPayload`.
                ///
                /// - Parameters:
                ///   - _type: The type of error that caused the response to fail, corresponding 
                ///   - reason: The reason the Response did not complete. For a `cancelled` Response, 
                ///   - error: A description of the error that caused the response to fail, 
                public init(
                    _type: Components.Schemas.RealtimeResponse.StatusDetailsPayload._TypePayload? = nil,
                    reason: Components.Schemas.RealtimeResponse.StatusDetailsPayload.ReasonPayload? = nil,
                    error: Components.Schemas.RealtimeResponse.StatusDetailsPayload._ErrorPayload? = nil
                ) {
                    self._type = _type
                    self.reason = reason
                    self.error = error
                }
                public enum CodingKeys: String, CodingKey {
                    case _type = "type"
                    case reason
                    case error
                }
            }
            /// Additional details about the status.
            ///
            /// - Remark: Generated from `#/components/schemas/RealtimeResponse/status_details`.
            public var statusDetails: Components.Schemas.RealtimeResponse.StatusDetailsPayload?
            /// The list of output items generated by the response.
            ///
            /// - Remark: Generated from `#/components/schemas/RealtimeResponse/output`.
            public var output: [Components.Schemas.RealtimeConversationItem]?
            /// - Remark: Generated from `#/components/schemas/RealtimeResponse/metadata`.
            public var metadata: Components.Schemas.Metadata?
            /// Usage statistics for the Response, this will correspond to billing. A 
            /// Realtime API session will maintain a conversation context and append new 
            /// Items to the Conversation, thus output from previous turns (text and 
            /// audio tokens) will become the input for later turns.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/RealtimeResponse/usage`.
            public struct UsagePayload: Codable, Hashable, Sendable {
                /// The total number of tokens in the Response including input and output 
                /// text and audio tokens.
                ///
                ///
                /// - Remark: Generated from `#/components/schemas/RealtimeResponse/usage/total_tokens`.
                public var totalTokens: Swift.Int?
                /// The number of input tokens used in the Response, including text and 
                /// audio tokens.
                ///
                ///
                /// - Remark: Generated from `#/components/schemas/RealtimeResponse/usage/input_tokens`.
                public var inputTokens: Swift.Int?
                /// The number of output tokens sent in the Response, including text and 
                /// audio tokens.
                ///
                ///
                /// - Remark: Generated from `#/components/schemas/RealtimeResponse/usage/output_tokens`.
                public var outputTokens: Swift.Int?
                /// Details about the input tokens used in the Response.
                ///
                /// - Remark: Generated from `#/components/schemas/RealtimeResponse/usage/input_token_details`.
                public struct InputTokenDetailsPayload: Codable, Hashable, Sendable {
                    /// The number of cached tokens used in the Response.
                    ///
                    /// - Remark: Generated from `#/components/schemas/RealtimeResponse/usage/input_token_details/cached_tokens`.
                    public var cachedTokens: Swift.Int?
                    /// The number of text tokens used in the Response.
                    ///
                    /// - Remark: Generated from `#/components/schemas/RealtimeResponse/usage/input_token_details/text_tokens`.
                    public var textTokens: Swift.Int?
                    /// The number of audio tokens used in the Response.
                    ///
                    /// - Remark: Generated from `#/components/schemas/RealtimeResponse/usage/input_token_details/audio_tokens`.
                    public var audioTokens: Swift.Int?
                    /// Creates a new `InputTokenDetailsPayload`.
                    ///
                    /// - Parameters:
                    ///   - cachedTokens: The number of cached tokens used in the Response.
                    ///   - textTokens: The number of text tokens used in the Response.
                    ///   - audioTokens: The number of audio tokens used in the Response.
                    public init(
                        cachedTokens: Swift.Int? = nil,
                        textTokens: Swift.Int? = nil,
                        audioTokens: Swift.Int? = nil
                    ) {
                        self.cachedTokens = cachedTokens
                        self.textTokens = textTokens
                        self.audioTokens = audioTokens
                    }
                    public enum CodingKeys: String, CodingKey {
                        case cachedTokens = "cached_tokens"
                        case textTokens = "text_tokens"
                        case audioTokens = "audio_tokens"
                    }
                }
                /// Details about the input tokens used in the Response.
                ///
                /// - Remark: Generated from `#/components/schemas/RealtimeResponse/usage/input_token_details`.
                public var inputTokenDetails: Components.Schemas.RealtimeResponse.UsagePayload.InputTokenDetailsPayload?
                /// Details about the output tokens used in the Response.
                ///
                /// - Remark: Generated from `#/components/schemas/RealtimeResponse/usage/output_token_details`.
                public struct OutputTokenDetailsPayload: Codable, Hashable, Sendable {
                    /// The number of text tokens used in the Response.
                    ///
                    /// - Remark: Generated from `#/components/schemas/RealtimeResponse/usage/output_token_details/text_tokens`.
                    public var textTokens: Swift.Int?
                    /// The number of audio tokens used in the Response.
                    ///
                    /// - Remark: Generated from `#/components/schemas/RealtimeResponse/usage/output_token_details/audio_tokens`.
                    public var audioTokens: Swift.Int?
                    /// Creates a new `OutputTokenDetailsPayload`.
                    ///
                    /// - Parameters:
                    ///   - textTokens: The number of text tokens used in the Response.
                    ///   - audioTokens: The number of audio tokens used in the Response.
                    public init(
                        textTokens: Swift.Int? = nil,
                        audioTokens: Swift.Int? = nil
                    ) {
                        self.textTokens = textTokens
                        self.audioTokens = audioTokens
                    }
                    public enum CodingKeys: String, CodingKey {
                        case textTokens = "text_tokens"
                        case audioTokens = "audio_tokens"
                    }
                }
                /// Details about the output tokens used in the Response.
                ///
                /// - Remark: Generated from `#/components/schemas/RealtimeResponse/usage/output_token_details`.
                public var outputTokenDetails: Components.Schemas.RealtimeResponse.UsagePayload.OutputTokenDetailsPayload?
                /// Creates a new `UsagePayload`.
                ///
                /// - Parameters:
                ///   - totalTokens: The total number of tokens in the Response including input and output 
                ///   - inputTokens: The number of input tokens used in the Response, including text and 
                ///   - outputTokens: The number of output tokens sent in the Response, including text and 
                ///   - inputTokenDetails: Details about the input tokens used in the Response.
                ///   - outputTokenDetails: Details about the output tokens used in the Response.
                public init(
                    totalTokens: Swift.Int? = nil,
                    inputTokens: Swift.Int? = nil,
                    outputTokens: Swift.Int? = nil,
                    inputTokenDetails: Components.Schemas.RealtimeResponse.UsagePayload.InputTokenDetailsPayload? = nil,
                    outputTokenDetails: Components.Schemas.RealtimeResponse.UsagePayload.OutputTokenDetailsPayload? = nil
                ) {
                    self.totalTokens = totalTokens
                    self.inputTokens = inputTokens
                    self.outputTokens = outputTokens
                    self.inputTokenDetails = inputTokenDetails
                    self.outputTokenDetails = outputTokenDetails
                }
                public enum CodingKeys: String, CodingKey {
                    case totalTokens = "total_tokens"
                    case inputTokens = "input_tokens"
                    case outputTokens = "output_tokens"
                    case inputTokenDetails = "input_token_details"
                    case outputTokenDetails = "output_token_details"
                }
            }
            /// Usage statistics for the Response, this will correspond to billing. A 
            /// Realtime API session will maintain a conversation context and append new 
            /// Items to the Conversation, thus output from previous turns (text and 
            /// audio tokens) will become the input for later turns.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/RealtimeResponse/usage`.
            public var usage: Components.Schemas.RealtimeResponse.UsagePayload?
            /// Which conversation the response is added to, determined by the `conversation`
            /// field in the `response.create` event. If `auto`, the response will be added to
            /// the default conversation and the value of `conversation_id` will be an id like
            /// `conv_1234`. If `none`, the response will not be added to any conversation and
            /// the value of `conversation_id` will be `null`. If responses are being triggered
            /// by server VAD, the response will be added to the default conversation, thus
            /// the `conversation_id` will be an id like `conv_1234`.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/RealtimeResponse/conversation_id`.
            public var conversationId: Swift.String?
            /// The voice the model used to respond.
            /// Current voice options are `alloy`, `ash`, `ballad`, `coral`, `echo` `sage`, 
            /// `shimmer` and `verse`.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/RealtimeResponse/voice`.
            @frozen public enum VoicePayload: String, Codable, Hashable, Sendable, CaseIterable {
                case alloy = "alloy"
                case ash = "ash"
                case ballad = "ballad"
                case coral = "coral"
                case echo = "echo"
                case sage = "sage"
                case shimmer = "shimmer"
                case verse = "verse"
            }
            /// The voice the model used to respond.
            /// Current voice options are `alloy`, `ash`, `ballad`, `coral`, `echo` `sage`, 
            /// `shimmer` and `verse`.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/RealtimeResponse/voice`.
            public var voice: Components.Schemas.RealtimeResponse.VoicePayload?
            /// - Remark: Generated from `#/components/schemas/RealtimeResponse/ModalitiesPayload`.
            @frozen public enum ModalitiesPayloadPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case text = "text"
                case audio = "audio"
            }
            /// The set of modalities the model used to respond. If there are multiple modalities,
            /// the model will pick one, for example if `modalities` is `["text", "audio"]`, the model
            /// could be responding in either text or audio.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/RealtimeResponse/modalities`.
            public typealias ModalitiesPayload = [Components.Schemas.RealtimeResponse.ModalitiesPayloadPayload]
            /// The set of modalities the model used to respond. If there are multiple modalities,
            /// the model will pick one, for example if `modalities` is `["text", "audio"]`, the model
            /// could be responding in either text or audio.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/RealtimeResponse/modalities`.
            public var modalities: Components.Schemas.RealtimeResponse.ModalitiesPayload?
            /// The format of output audio. Options are `pcm16`, `g711_ulaw`, or `g711_alaw`.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/RealtimeResponse/output_audio_format`.
            @frozen public enum OutputAudioFormatPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case pcm16 = "pcm16"
                case g711Ulaw = "g711_ulaw"
                case g711Alaw = "g711_alaw"
            }
            /// The format of output audio. Options are `pcm16`, `g711_ulaw`, or `g711_alaw`.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/RealtimeResponse/output_audio_format`.
            public var outputAudioFormat: Components.Schemas.RealtimeResponse.OutputAudioFormatPayload?
            /// Sampling temperature for the model, limited to [0.6, 1.2]. Defaults to 0.8.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/RealtimeResponse/temperature`.
            public var temperature: Swift.Double?
            /// Maximum number of output tokens for a single assistant response,
            /// inclusive of tool calls, that was used in this response.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/RealtimeResponse/max_output_tokens`.
            @frozen public enum MaxOutputTokensPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/RealtimeResponse/max_output_tokens/case1`.
                case case1(Swift.Int)
                /// - Remark: Generated from `#/components/schemas/RealtimeResponse/max_output_tokens/case2`.
                @frozen public enum Case2Payload: String, Codable, Hashable, Sendable, CaseIterable {
                    case inf = "inf"
                }
                /// - Remark: Generated from `#/components/schemas/RealtimeResponse/max_output_tokens/case2`.
                case case2(Components.Schemas.RealtimeResponse.MaxOutputTokensPayload.Case2Payload)
                public init(from decoder: any Decoder) throws {
                    var errors: [any Error] = []
                    do {
                        self = .case1(try decoder.decodeFromSingleValueContainer())
                        return
                    } catch {
                        errors.append(error)
                    }
                    do {
                        self = .case2(try decoder.decodeFromSingleValueContainer())
                        return
                    } catch {
                        errors.append(error)
                    }
                    throw Swift.DecodingError.failedToDecodeOneOfSchema(
                        type: Self.self,
                        codingPath: decoder.codingPath,
                        errors: errors
                    )
                }
                public func encode(to encoder: any Encoder) throws {
                    switch self {
                    case let .case1(value):
                        try encoder.encodeToSingleValueContainer(value)
                    case let .case2(value):
                        try encoder.encodeToSingleValueContainer(value)
                    }
                }
            }
            /// Maximum number of output tokens for a single assistant response,
            /// inclusive of tool calls, that was used in this response.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/RealtimeResponse/max_output_tokens`.
            public var maxOutputTokens: Components.Schemas.RealtimeResponse.MaxOutputTokensPayload?
            /// Creates a new `RealtimeResponse`.
            ///
            /// - Parameters:
            ///   - id: The unique ID of the response.
            ///   - object: The object type, must be `realtime.response`.
            ///   - status: The final status of the response (`completed`, `cancelled`, `failed`, or 
            ///   - statusDetails: Additional details about the status.
            ///   - output: The list of output items generated by the response.
            ///   - metadata:
            ///   - usage: Usage statistics for the Response, this will correspond to billing. A 
            ///   - conversationId: Which conversation the response is added to, determined by the `conversation`
            ///   - voice: The voice the model used to respond.
            ///   - modalities: The set of modalities the model used to respond. If there are multiple modalities,
            ///   - outputAudioFormat: The format of output audio. Options are `pcm16`, `g711_ulaw`, or `g711_alaw`.
            ///   - temperature: Sampling temperature for the model, limited to [0.6, 1.2]. Defaults to 0.8.
            ///   - maxOutputTokens: Maximum number of output tokens for a single assistant response,
            public init(
                id: Swift.String? = nil,
                object: Components.Schemas.RealtimeResponse.ObjectPayload? = nil,
                status: Components.Schemas.RealtimeResponse.StatusPayload? = nil,
                statusDetails: Components.Schemas.RealtimeResponse.StatusDetailsPayload? = nil,
                output: [Components.Schemas.RealtimeConversationItem]? = nil,
                metadata: Components.Schemas.Metadata? = nil,
                usage: Components.Schemas.RealtimeResponse.UsagePayload? = nil,
                conversationId: Swift.String? = nil,
                voice: Components.Schemas.RealtimeResponse.VoicePayload? = nil,
                modalities: Components.Schemas.RealtimeResponse.ModalitiesPayload? = nil,
                outputAudioFormat: Components.Schemas.RealtimeResponse.OutputAudioFormatPayload? = nil,
                temperature: Swift.Double? = nil,
                maxOutputTokens: Components.Schemas.RealtimeResponse.MaxOutputTokensPayload? = nil
            ) {
                self.id = id
                self.object = object
                self.status = status
                self.statusDetails = statusDetails
                self.output = output
                self.metadata = metadata
                self.usage = usage
                self.conversationId = conversationId
                self.voice = voice
                self.modalities = modalities
                self.outputAudioFormat = outputAudioFormat
                self.temperature = temperature
                self.maxOutputTokens = maxOutputTokens
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case object
                case status
                case statusDetails = "status_details"
                case output
                case metadata
                case usage
                case conversationId = "conversation_id"
                case voice
                case modalities
                case outputAudioFormat = "output_audio_format"
                case temperature
                case maxOutputTokens = "max_output_tokens"
            }
        }
        /// Create a new Realtime response with these parameters
        ///
        /// - Remark: Generated from `#/components/schemas/RealtimeResponseCreateParams`.
        public struct RealtimeResponseCreateParams: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/RealtimeResponseCreateParams/ModalitiesPayload`.
            @frozen public enum ModalitiesPayloadPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case text = "text"
                case audio = "audio"
            }
            /// The set of modalities the model can respond with. To disable audio,
            /// set this to ["text"].
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/RealtimeResponseCreateParams/modalities`.
            public typealias ModalitiesPayload = [Components.Schemas.RealtimeResponseCreateParams.ModalitiesPayloadPayload]
            /// The set of modalities the model can respond with. To disable audio,
            /// set this to ["text"].
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/RealtimeResponseCreateParams/modalities`.
            public var modalities: Components.Schemas.RealtimeResponseCreateParams.ModalitiesPayload?
            /// The default system instructions (i.e. system message) prepended to model 
            /// calls. This field allows the client to guide the model on desired 
            /// responses. The model can be instructed on response content and format, 
            /// (e.g. "be extremely succinct", "act friendly", "here are examples of good 
            /// responses") and on audio behavior (e.g. "talk quickly", "inject emotion 
            /// into your voice", "laugh frequently"). The instructions are not guaranteed 
            /// to be followed by the model, but they provide guidance to the model on the 
            /// desired behavior.
            ///
            /// Note that the server sets default instructions which will be used if this 
            /// field is not set and are visible in the `session.created` event at the 
            /// start of the session.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/RealtimeResponseCreateParams/instructions`.
            public var instructions: Swift.String?
            /// The voice the model uses to respond. Voice cannot be changed during the 
            /// session once the model has responded with audio at least once. Current 
            /// voice options are `alloy`, `ash`, `ballad`, `coral`, `echo` `sage`, 
            /// `shimmer` and `verse`.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/RealtimeResponseCreateParams/voice`.
            @frozen public enum VoicePayload: String, Codable, Hashable, Sendable, CaseIterable {
                case alloy = "alloy"
                case ash = "ash"
                case ballad = "ballad"
                case coral = "coral"
                case echo = "echo"
                case sage = "sage"
                case shimmer = "shimmer"
                case verse = "verse"
            }
            /// The voice the model uses to respond. Voice cannot be changed during the 
            /// session once the model has responded with audio at least once. Current 
            /// voice options are `alloy`, `ash`, `ballad`, `coral`, `echo` `sage`, 
            /// `shimmer` and `verse`.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/RealtimeResponseCreateParams/voice`.
            public var voice: Components.Schemas.RealtimeResponseCreateParams.VoicePayload?
            /// The format of output audio. Options are `pcm16`, `g711_ulaw`, or `g711_alaw`.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/RealtimeResponseCreateParams/output_audio_format`.
            @frozen public enum OutputAudioFormatPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case pcm16 = "pcm16"
                case g711Ulaw = "g711_ulaw"
                case g711Alaw = "g711_alaw"
            }
            /// The format of output audio. Options are `pcm16`, `g711_ulaw`, or `g711_alaw`.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/RealtimeResponseCreateParams/output_audio_format`.
            public var outputAudioFormat: Components.Schemas.RealtimeResponseCreateParams.OutputAudioFormatPayload?
            /// - Remark: Generated from `#/components/schemas/RealtimeResponseCreateParams/ToolsPayload`.
            public struct ToolsPayloadPayload: Codable, Hashable, Sendable {
                /// The type of the tool, i.e. `function`.
                ///
                /// - Remark: Generated from `#/components/schemas/RealtimeResponseCreateParams/ToolsPayload/type`.
                @frozen public enum _TypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case function = "function"
                }
                /// The type of the tool, i.e. `function`.
                ///
                /// - Remark: Generated from `#/components/schemas/RealtimeResponseCreateParams/ToolsPayload/type`.
                public var _type: Components.Schemas.RealtimeResponseCreateParams.ToolsPayloadPayload._TypePayload?
                /// The name of the function.
                ///
                /// - Remark: Generated from `#/components/schemas/RealtimeResponseCreateParams/ToolsPayload/name`.
                public var name: Swift.String?
                /// The description of the function, including guidance on when and how 
                /// to call it, and guidance about what to tell the user when calling 
                /// (if anything).
                ///
                ///
                /// - Remark: Generated from `#/components/schemas/RealtimeResponseCreateParams/ToolsPayload/description`.
                public var description: Swift.String?
                /// Parameters of the function in JSON Schema.
                ///
                /// - Remark: Generated from `#/components/schemas/RealtimeResponseCreateParams/ToolsPayload/parameters`.
                public var parameters: OpenAPIRuntime.OpenAPIObjectContainer?
                /// Creates a new `ToolsPayloadPayload`.
                ///
                /// - Parameters:
                ///   - _type: The type of the tool, i.e. `function`.
                ///   - name: The name of the function.
                ///   - description: The description of the function, including guidance on when and how 
                ///   - parameters: Parameters of the function in JSON Schema.
                public init(
                    _type: Components.Schemas.RealtimeResponseCreateParams.ToolsPayloadPayload._TypePayload? = nil,
                    name: Swift.String? = nil,
                    description: Swift.String? = nil,
                    parameters: OpenAPIRuntime.OpenAPIObjectContainer? = nil
                ) {
                    self._type = _type
                    self.name = name
                    self.description = description
                    self.parameters = parameters
                }
                public enum CodingKeys: String, CodingKey {
                    case _type = "type"
                    case name
                    case description
                    case parameters
                }
            }
            /// Tools (functions) available to the model.
            ///
            /// - Remark: Generated from `#/components/schemas/RealtimeResponseCreateParams/tools`.
            public typealias ToolsPayload = [Components.Schemas.RealtimeResponseCreateParams.ToolsPayloadPayload]
            /// Tools (functions) available to the model.
            ///
            /// - Remark: Generated from `#/components/schemas/RealtimeResponseCreateParams/tools`.
            public var tools: Components.Schemas.RealtimeResponseCreateParams.ToolsPayload?
            /// How the model chooses tools. Options are `auto`, `none`, `required`, or 
            /// specify a function, like `{"type": "function", "function": {"name": "my_function"}}`.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/RealtimeResponseCreateParams/tool_choice`.
            public var toolChoice: Swift.String?
            /// Sampling temperature for the model, limited to [0.6, 1.2]. Defaults to 0.8.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/RealtimeResponseCreateParams/temperature`.
            public var temperature: Swift.Double?
            /// Maximum number of output tokens for a single assistant response,
            /// inclusive of tool calls. Provide an integer between 1 and 4096 to
            /// limit output tokens, or `inf` for the maximum available tokens for a
            /// given model. Defaults to `inf`.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/RealtimeResponseCreateParams/max_response_output_tokens`.
            @frozen public enum MaxResponseOutputTokensPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/RealtimeResponseCreateParams/max_response_output_tokens/case1`.
                case case1(Swift.Int)
                /// - Remark: Generated from `#/components/schemas/RealtimeResponseCreateParams/max_response_output_tokens/case2`.
                @frozen public enum Case2Payload: String, Codable, Hashable, Sendable, CaseIterable {
                    case inf = "inf"
                }
                /// - Remark: Generated from `#/components/schemas/RealtimeResponseCreateParams/max_response_output_tokens/case2`.
                case case2(Components.Schemas.RealtimeResponseCreateParams.MaxResponseOutputTokensPayload.Case2Payload)
                public init(from decoder: any Decoder) throws {
                    var errors: [any Error] = []
                    do {
                        self = .case1(try decoder.decodeFromSingleValueContainer())
                        return
                    } catch {
                        errors.append(error)
                    }
                    do {
                        self = .case2(try decoder.decodeFromSingleValueContainer())
                        return
                    } catch {
                        errors.append(error)
                    }
                    throw Swift.DecodingError.failedToDecodeOneOfSchema(
                        type: Self.self,
                        codingPath: decoder.codingPath,
                        errors: errors
                    )
                }
                public func encode(to encoder: any Encoder) throws {
                    switch self {
                    case let .case1(value):
                        try encoder.encodeToSingleValueContainer(value)
                    case let .case2(value):
                        try encoder.encodeToSingleValueContainer(value)
                    }
                }
            }
            /// Maximum number of output tokens for a single assistant response,
            /// inclusive of tool calls. Provide an integer between 1 and 4096 to
            /// limit output tokens, or `inf` for the maximum available tokens for a
            /// given model. Defaults to `inf`.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/RealtimeResponseCreateParams/max_response_output_tokens`.
            public var maxResponseOutputTokens: Components.Schemas.RealtimeResponseCreateParams.MaxResponseOutputTokensPayload?
            /// Controls which conversation the response is added to. Currently supports
            /// `auto` and `none`, with `auto` as the default value. The `auto` value
            /// means that the contents of the response will be added to the default
            /// conversation. Set this to `none` to create an out-of-band response which 
            /// will not add items to default conversation.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/RealtimeResponseCreateParams/conversation`.
            @frozen public enum ConversationPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/RealtimeResponseCreateParams/conversation/case1`.
                case case1(Swift.String)
                /// - Remark: Generated from `#/components/schemas/RealtimeResponseCreateParams/conversation/case2`.
                @frozen public enum Case2Payload: String, Codable, Hashable, Sendable, CaseIterable {
                    case auto = "auto"
                    case none = "none"
                }
                /// - Remark: Generated from `#/components/schemas/RealtimeResponseCreateParams/conversation/case2`.
                case case2(Components.Schemas.RealtimeResponseCreateParams.ConversationPayload.Case2Payload)
                public init(from decoder: any Decoder) throws {
                    var errors: [any Error] = []
                    do {
                        self = .case1(try decoder.decodeFromSingleValueContainer())
                        return
                    } catch {
                        errors.append(error)
                    }
                    do {
                        self = .case2(try decoder.decodeFromSingleValueContainer())
                        return
                    } catch {
                        errors.append(error)
                    }
                    throw Swift.DecodingError.failedToDecodeOneOfSchema(
                        type: Self.self,
                        codingPath: decoder.codingPath,
                        errors: errors
                    )
                }
                public func encode(to encoder: any Encoder) throws {
                    switch self {
                    case let .case1(value):
                        try encoder.encodeToSingleValueContainer(value)
                    case let .case2(value):
                        try encoder.encodeToSingleValueContainer(value)
                    }
                }
            }
            /// Controls which conversation the response is added to. Currently supports
            /// `auto` and `none`, with `auto` as the default value. The `auto` value
            /// means that the contents of the response will be added to the default
            /// conversation. Set this to `none` to create an out-of-band response which 
            /// will not add items to default conversation.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/RealtimeResponseCreateParams/conversation`.
            public var conversation: Components.Schemas.RealtimeResponseCreateParams.ConversationPayload?
            /// - Remark: Generated from `#/components/schemas/RealtimeResponseCreateParams/metadata`.
            public var metadata: Components.Schemas.Metadata?
            /// Input items to include in the prompt for the model. Creates a new context
            /// for this response, without including the default conversation. Can include
            /// references to items from the default conversation.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/RealtimeResponseCreateParams/input`.
            public var input: [Components.Schemas.RealtimeConversationItem]?
            /// Creates a new `RealtimeResponseCreateParams`.
            ///
            /// - Parameters:
            ///   - modalities: The set of modalities the model can respond with. To disable audio,
            ///   - instructions: The default system instructions (i.e. system message) prepended to model 
            ///   - voice: The voice the model uses to respond. Voice cannot be changed during the 
            ///   - outputAudioFormat: The format of output audio. Options are `pcm16`, `g711_ulaw`, or `g711_alaw`.
            ///   - tools: Tools (functions) available to the model.
            ///   - toolChoice: How the model chooses tools. Options are `auto`, `none`, `required`, or 
            ///   - temperature: Sampling temperature for the model, limited to [0.6, 1.2]. Defaults to 0.8.
            ///   - maxResponseOutputTokens: Maximum number of output tokens for a single assistant response,
            ///   - conversation: Controls which conversation the response is added to. Currently supports
            ///   - metadata:
            ///   - input: Input items to include in the prompt for the model. Creates a new context
            public init(
                modalities: Components.Schemas.RealtimeResponseCreateParams.ModalitiesPayload? = nil,
                instructions: Swift.String? = nil,
                voice: Components.Schemas.RealtimeResponseCreateParams.VoicePayload? = nil,
                outputAudioFormat: Components.Schemas.RealtimeResponseCreateParams.OutputAudioFormatPayload? = nil,
                tools: Components.Schemas.RealtimeResponseCreateParams.ToolsPayload? = nil,
                toolChoice: Swift.String? = nil,
                temperature: Swift.Double? = nil,
                maxResponseOutputTokens: Components.Schemas.RealtimeResponseCreateParams.MaxResponseOutputTokensPayload? = nil,
                conversation: Components.Schemas.RealtimeResponseCreateParams.ConversationPayload? = nil,
                metadata: Components.Schemas.Metadata? = nil,
                input: [Components.Schemas.RealtimeConversationItem]? = nil
            ) {
                self.modalities = modalities
                self.instructions = instructions
                self.voice = voice
                self.outputAudioFormat = outputAudioFormat
                self.tools = tools
                self.toolChoice = toolChoice
                self.temperature = temperature
                self.maxResponseOutputTokens = maxResponseOutputTokens
                self.conversation = conversation
                self.metadata = metadata
                self.input = input
            }
            public enum CodingKeys: String, CodingKey {
                case modalities
                case instructions
                case voice
                case outputAudioFormat = "output_audio_format"
                case tools
                case toolChoice = "tool_choice"
                case temperature
                case maxResponseOutputTokens = "max_response_output_tokens"
                case conversation
                case metadata
                case input
            }
        }
        /// Returned when a conversation is created. Emitted right after session creation.
        ///
        ///
        /// - Remark: Generated from `#/components/schemas/RealtimeServerEventConversationCreated`.
        public struct RealtimeServerEventConversationCreated: Codable, Hashable, Sendable {
            /// The unique ID of the server event.
            ///
            /// - Remark: Generated from `#/components/schemas/RealtimeServerEventConversationCreated/event_id`.
            public var eventId: Swift.String
            /// The event type, must be `conversation.created`.
            ///
            /// - Remark: Generated from `#/components/schemas/RealtimeServerEventConversationCreated/type`.
            @frozen public enum _TypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                case conversation_created = "conversation.created"
            }
            /// The event type, must be `conversation.created`.
            ///
            /// - Remark: Generated from `#/components/schemas/RealtimeServerEventConversationCreated/type`.
            public var _type: Components.Schemas.RealtimeServerEventConversationCreated._TypePayload
            /// The conversation resource.
            ///
            /// - Remark: Generated from `#/components/schemas/RealtimeServerEventConversationCreated/conversation`.
            public struct ConversationPayload: Codable, Hashable, Sendable {
                /// The unique ID of the conversation.
                ///
                /// - Remark: Generated from `#/components/schemas/RealtimeServerEventConversationCreated/conversation/id`.
                public var id: Swift.String?
                /// The object type, must be `realtime.conversation`.
                ///
                /// - Remark: Generated from `#/components/schemas/RealtimeServerEventConversationCreated/conversation/object`.
                public var object: Swift.String?
                /// Creates a new `ConversationPayload`.
                ///
                /// - Parameters:
                ///   - id: The unique ID of the conversation.
                ///   - object: The object type, must be `realtime.conversation`.
                public init(
                    id: Swift.String? = nil,
                    object: Swift.String? = nil
                ) {
                    self.id = id
                    self.object = object
                }
                public enum CodingKeys: String, CodingKey {
                    case id
                    case object
                }
            }
            /// The conversation resource.
            ///
            /// - Remark: Generated from `#/components/schemas/RealtimeServerEventConversationCreated/conversation`.
            public var conversation: Components.Schemas.RealtimeServerEventConversationCreated.ConversationPayload
            /// Creates a new `RealtimeServerEventConversationCreated`.
            ///
            /// - Parameters:
            ///   - eventId: The unique ID of the server event.
            ///   - _type: The event type, must be `conversation.created`.
            ///   - conversation: The conversation resource.
            public init(
                eventId: Swift.String,
                _type: Components.Schemas.RealtimeServerEventConversationCreated._TypePayload,
                conversation: Components.Schemas.RealtimeServerEventConversationCreated.ConversationPayload
            ) {
                self.eventId = eventId
                self._type = _type
                self.conversation = conversation
            }
            public enum CodingKeys: String, CodingKey {
                case eventId = "event_id"
                case _type = "type"
                case conversation
            }
        }
        /// Returned when a conversation item is created. There are several scenarios that 
        /// produce this event:
        ///   - The server is generating a Response, which if successful will produce 
        ///     either one or two Items, which will be of type `message` 
        ///     (role `assistant`) or type `function_call`.
        ///   - The input audio buffer has been committed, either by the client or the 
        ///     server (in `server_vad` mode). The server will take the content of the 
        ///     input audio buffer and add it to a new user message Item.
        ///   - The client has sent a `conversation.item.create` event to add a new Item 
        ///     to the Conversation.
        ///
        ///
        /// - Remark: Generated from `#/components/schemas/RealtimeServerEventConversationItemCreated`.
        public struct RealtimeServerEventConversationItemCreated: Codable, Hashable, Sendable {
            /// The unique ID of the server event.
            ///
            /// - Remark: Generated from `#/components/schemas/RealtimeServerEventConversationItemCreated/event_id`.
            public var eventId: Swift.String
            /// The event type, must be `conversation.item.created`.
            ///
            /// - Remark: Generated from `#/components/schemas/RealtimeServerEventConversationItemCreated/type`.
            @frozen public enum _TypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                case conversation_item_created = "conversation.item.created"
            }
            /// The event type, must be `conversation.item.created`.
            ///
            /// - Remark: Generated from `#/components/schemas/RealtimeServerEventConversationItemCreated/type`.
            public var _type: Components.Schemas.RealtimeServerEventConversationItemCreated._TypePayload
            /// The ID of the preceding item in the Conversation context, allows the 
            /// client to understand the order of the conversation.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/RealtimeServerEventConversationItemCreated/previous_item_id`.
            public var previousItemId: Swift.String
            /// - Remark: Generated from `#/components/schemas/RealtimeServerEventConversationItemCreated/item`.
            public var item: Components.Schemas.RealtimeConversationItem
            /// Creates a new `RealtimeServerEventConversationItemCreated`.
            ///
            /// - Parameters:
            ///   - eventId: The unique ID of the server event.
            ///   - _type: The event type, must be `conversation.item.created`.
            ///   - previousItemId: The ID of the preceding item in the Conversation context, allows the 
            ///   - item:
            public init(
                eventId: Swift.String,
                _type: Components.Schemas.RealtimeServerEventConversationItemCreated._TypePayload,
                previousItemId: Swift.String,
                item: Components.Schemas.RealtimeConversationItem
            ) {
                self.eventId = eventId
                self._type = _type
                self.previousItemId = previousItemId
                self.item = item
            }
            public enum CodingKeys: String, CodingKey {
                case eventId = "event_id"
                case _type = "type"
                case previousItemId = "previous_item_id"
                case item
            }
        }
        /// Returned when an item in the conversation is deleted by the client with a 
        /// `conversation.item.delete` event. This event is used to synchronize the 
        /// server's understanding of the conversation history with the client's view.
        ///
        ///
        /// - Remark: Generated from `#/components/schemas/RealtimeServerEventConversationItemDeleted`.
        public struct RealtimeServerEventConversationItemDeleted: Codable, Hashable, Sendable {
            /// The unique ID of the server event.
            ///
            /// - Remark: Generated from `#/components/schemas/RealtimeServerEventConversationItemDeleted/event_id`.
            public var eventId: Swift.String
            /// The event type, must be `conversation.item.deleted`.
            ///
            /// - Remark: Generated from `#/components/schemas/RealtimeServerEventConversationItemDeleted/type`.
            @frozen public enum _TypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                case conversation_item_deleted = "conversation.item.deleted"
            }
            /// The event type, must be `conversation.item.deleted`.
            ///
            /// - Remark: Generated from `#/components/schemas/RealtimeServerEventConversationItemDeleted/type`.
            public var _type: Components.Schemas.RealtimeServerEventConversationItemDeleted._TypePayload
            /// The ID of the item that was deleted.
            ///
            /// - Remark: Generated from `#/components/schemas/RealtimeServerEventConversationItemDeleted/item_id`.
            public var itemId: Swift.String
            /// Creates a new `RealtimeServerEventConversationItemDeleted`.
            ///
            /// - Parameters:
            ///   - eventId: The unique ID of the server event.
            ///   - _type: The event type, must be `conversation.item.deleted`.
            ///   - itemId: The ID of the item that was deleted.
            public init(
                eventId: Swift.String,
                _type: Components.Schemas.RealtimeServerEventConversationItemDeleted._TypePayload,
                itemId: Swift.String
            ) {
                self.eventId = eventId
                self._type = _type
                self.itemId = itemId
            }
            public enum CodingKeys: String, CodingKey {
                case eventId = "event_id"
                case _type = "type"
                case itemId = "item_id"
            }
        }
        /// This event is the output of audio transcription for user audio written to the 
        /// user audio buffer. Transcription begins when the input audio buffer is 
        /// committed by the client or server (in `server_vad` mode). Transcription runs 
        /// asynchronously with Response creation, so this event may come before or after 
        /// the Response events.
        ///
        /// Realtime API models accept audio natively, and thus input transcription is a 
        /// separate process run on a separate ASR (Automatic Speech Recognition) model, 
        /// currently always `whisper-1`. Thus the transcript may diverge somewhat from 
        /// the model's interpretation, and should be treated as a rough guide.
        ///
        ///
        /// - Remark: Generated from `#/components/schemas/RealtimeServerEventConversationItemInputAudioTranscriptionCompleted`.
        public struct RealtimeServerEventConversationItemInputAudioTranscriptionCompleted: Codable, Hashable, Sendable {
            /// The unique ID of the server event.
            ///
            /// - Remark: Generated from `#/components/schemas/RealtimeServerEventConversationItemInputAudioTranscriptionCompleted/event_id`.
            public var eventId: Swift.String
            /// The event type, must be
            /// `conversation.item.input_audio_transcription.completed`.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/RealtimeServerEventConversationItemInputAudioTranscriptionCompleted/type`.
            @frozen public enum _TypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                case conversation_item_inputAudioTranscription_completed = "conversation.item.input_audio_transcription.completed"
            }
            /// The event type, must be
            /// `conversation.item.input_audio_transcription.completed`.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/RealtimeServerEventConversationItemInputAudioTranscriptionCompleted/type`.
            public var _type: Components.Schemas.RealtimeServerEventConversationItemInputAudioTranscriptionCompleted._TypePayload
            /// The ID of the user message item containing the audio.
            ///
            /// - Remark: Generated from `#/components/schemas/RealtimeServerEventConversationItemInputAudioTranscriptionCompleted/item_id`.
            public var itemId: Swift.String
            /// The index of the content part containing the audio.
            ///
            /// - Remark: Generated from `#/components/schemas/RealtimeServerEventConversationItemInputAudioTranscriptionCompleted/content_index`.
            public var contentIndex: Swift.Int
            /// The transcribed text.
            ///
            /// - Remark: Generated from `#/components/schemas/RealtimeServerEventConversationItemInputAudioTranscriptionCompleted/transcript`.
            public var transcript: Swift.String
            /// Creates a new `RealtimeServerEventConversationItemInputAudioTranscriptionCompleted`.
            ///
            /// - Parameters:
            ///   - eventId: The unique ID of the server event.
            ///   - _type: The event type, must be
            ///   - itemId: The ID of the user message item containing the audio.
            ///   - contentIndex: The index of the content part containing the audio.
            ///   - transcript: The transcribed text.
            public init(
                eventId: Swift.String,
                _type: Components.Schemas.RealtimeServerEventConversationItemInputAudioTranscriptionCompleted._TypePayload,
                itemId: Swift.String,
                contentIndex: Swift.Int,
                transcript: Swift.String
            ) {
                self.eventId = eventId
                self._type = _type
                self.itemId = itemId
                self.contentIndex = contentIndex
                self.transcript = transcript
            }
            public enum CodingKeys: String, CodingKey {
                case eventId = "event_id"
                case _type = "type"
                case itemId = "item_id"
                case contentIndex = "content_index"
                case transcript
            }
        }
        /// Returned when input audio transcription is configured, and a transcription 
        /// request for a user message failed. These events are separate from other 
        /// `error` events so that the client can identify the related Item.
        ///
        ///
        /// - Remark: Generated from `#/components/schemas/RealtimeServerEventConversationItemInputAudioTranscriptionFailed`.
        public struct RealtimeServerEventConversationItemInputAudioTranscriptionFailed: Codable, Hashable, Sendable {
            /// The unique ID of the server event.
            ///
            /// - Remark: Generated from `#/components/schemas/RealtimeServerEventConversationItemInputAudioTranscriptionFailed/event_id`.
            public var eventId: Swift.String
            /// The event type, must be
            /// `conversation.item.input_audio_transcription.failed`.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/RealtimeServerEventConversationItemInputAudioTranscriptionFailed/type`.
            @frozen public enum _TypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                case conversation_item_inputAudioTranscription_failed = "conversation.item.input_audio_transcription.failed"
            }
            /// The event type, must be
            /// `conversation.item.input_audio_transcription.failed`.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/RealtimeServerEventConversationItemInputAudioTranscriptionFailed/type`.
            public var _type: Components.Schemas.RealtimeServerEventConversationItemInputAudioTranscriptionFailed._TypePayload
            /// The ID of the user message item.
            ///
            /// - Remark: Generated from `#/components/schemas/RealtimeServerEventConversationItemInputAudioTranscriptionFailed/item_id`.
            public var itemId: Swift.String
            /// The index of the content part containing the audio.
            ///
            /// - Remark: Generated from `#/components/schemas/RealtimeServerEventConversationItemInputAudioTranscriptionFailed/content_index`.
            public var contentIndex: Swift.Int
            /// Details of the transcription error.
            ///
            /// - Remark: Generated from `#/components/schemas/RealtimeServerEventConversationItemInputAudioTranscriptionFailed/error`.
            public struct _ErrorPayload: Codable, Hashable, Sendable {
                /// The type of error.
                ///
                /// - Remark: Generated from `#/components/schemas/RealtimeServerEventConversationItemInputAudioTranscriptionFailed/error/type`.
                public var _type: Swift.String?
                /// Error code, if any.
                ///
                /// - Remark: Generated from `#/components/schemas/RealtimeServerEventConversationItemInputAudioTranscriptionFailed/error/code`.
                public var code: Swift.String?
                /// A human-readable error message.
                ///
                /// - Remark: Generated from `#/components/schemas/RealtimeServerEventConversationItemInputAudioTranscriptionFailed/error/message`.
                public var message: Swift.String?
                /// Parameter related to the error, if any.
                ///
                /// - Remark: Generated from `#/components/schemas/RealtimeServerEventConversationItemInputAudioTranscriptionFailed/error/param`.
                public var param: Swift.String?
                /// Creates a new `_ErrorPayload`.
                ///
                /// - Parameters:
                ///   - _type: The type of error.
                ///   - code: Error code, if any.
                ///   - message: A human-readable error message.
                ///   - param: Parameter related to the error, if any.
                public init(
                    _type: Swift.String? = nil,
                    code: Swift.String? = nil,
                    message: Swift.String? = nil,
                    param: Swift.String? = nil
                ) {
                    self._type = _type
                    self.code = code
                    self.message = message
                    self.param = param
                }
                public enum CodingKeys: String, CodingKey {
                    case _type = "type"
                    case code
                    case message
                    case param
                }
            }
            /// Details of the transcription error.
            ///
            /// - Remark: Generated from `#/components/schemas/RealtimeServerEventConversationItemInputAudioTranscriptionFailed/error`.
            public var error: Components.Schemas.RealtimeServerEventConversationItemInputAudioTranscriptionFailed._ErrorPayload
            /// Creates a new `RealtimeServerEventConversationItemInputAudioTranscriptionFailed`.
            ///
            /// - Parameters:
            ///   - eventId: The unique ID of the server event.
            ///   - _type: The event type, must be
            ///   - itemId: The ID of the user message item.
            ///   - contentIndex: The index of the content part containing the audio.
            ///   - error: Details of the transcription error.
            public init(
                eventId: Swift.String,
                _type: Components.Schemas.RealtimeServerEventConversationItemInputAudioTranscriptionFailed._TypePayload,
                itemId: Swift.String,
                contentIndex: Swift.Int,
                error: Components.Schemas.RealtimeServerEventConversationItemInputAudioTranscriptionFailed._ErrorPayload
            ) {
                self.eventId = eventId
                self._type = _type
                self.itemId = itemId
                self.contentIndex = contentIndex
                self.error = error
            }
            public enum CodingKeys: String, CodingKey {
                case eventId = "event_id"
                case _type = "type"
                case itemId = "item_id"
                case contentIndex = "content_index"
                case error
            }
        }
        /// Returned when an earlier assistant audio message item is truncated by the 
        /// client with a `conversation.item.truncate` event. This event is used to 
        /// synchronize the server's understanding of the audio with the client's playback.
        ///
        /// This action will truncate the audio and remove the server-side text transcript 
        /// to ensure there is no text in the context that hasn't been heard by the user.
        ///
        ///
        /// - Remark: Generated from `#/components/schemas/RealtimeServerEventConversationItemTruncated`.
        public struct RealtimeServerEventConversationItemTruncated: Codable, Hashable, Sendable {
            /// The unique ID of the server event.
            ///
            /// - Remark: Generated from `#/components/schemas/RealtimeServerEventConversationItemTruncated/event_id`.
            public var eventId: Swift.String
            /// The event type, must be `conversation.item.truncated`.
            ///
            /// - Remark: Generated from `#/components/schemas/RealtimeServerEventConversationItemTruncated/type`.
            @frozen public enum _TypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                case conversation_item_truncated = "conversation.item.truncated"
            }
            /// The event type, must be `conversation.item.truncated`.
            ///
            /// - Remark: Generated from `#/components/schemas/RealtimeServerEventConversationItemTruncated/type`.
            public var _type: Components.Schemas.RealtimeServerEventConversationItemTruncated._TypePayload
            /// The ID of the assistant message item that was truncated.
            ///
            /// - Remark: Generated from `#/components/schemas/RealtimeServerEventConversationItemTruncated/item_id`.
            public var itemId: Swift.String
            /// The index of the content part that was truncated.
            ///
            /// - Remark: Generated from `#/components/schemas/RealtimeServerEventConversationItemTruncated/content_index`.
            public var contentIndex: Swift.Int
            /// The duration up to which the audio was truncated, in milliseconds.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/RealtimeServerEventConversationItemTruncated/audio_end_ms`.
            public var audioEndMs: Swift.Int
            /// Creates a new `RealtimeServerEventConversationItemTruncated`.
            ///
            /// - Parameters:
            ///   - eventId: The unique ID of the server event.
            ///   - _type: The event type, must be `conversation.item.truncated`.
            ///   - itemId: The ID of the assistant message item that was truncated.
            ///   - contentIndex: The index of the content part that was truncated.
            ///   - audioEndMs: The duration up to which the audio was truncated, in milliseconds.
            public init(
                eventId: Swift.String,
                _type: Components.Schemas.RealtimeServerEventConversationItemTruncated._TypePayload,
                itemId: Swift.String,
                contentIndex: Swift.Int,
                audioEndMs: Swift.Int
            ) {
                self.eventId = eventId
                self._type = _type
                self.itemId = itemId
                self.contentIndex = contentIndex
                self.audioEndMs = audioEndMs
            }
            public enum CodingKeys: String, CodingKey {
                case eventId = "event_id"
                case _type = "type"
                case itemId = "item_id"
                case contentIndex = "content_index"
                case audioEndMs = "audio_end_ms"
            }
        }
        /// Returned when an error occurs, which could be a client problem or a server 
        /// problem. Most errors are recoverable and the session will stay open, we 
        /// recommend to implementors to monitor and log error messages by default.
        ///
        ///
        /// - Remark: Generated from `#/components/schemas/RealtimeServerEventError`.
        public struct RealtimeServerEventError: Codable, Hashable, Sendable {
            /// The unique ID of the server event.
            ///
            /// - Remark: Generated from `#/components/schemas/RealtimeServerEventError/event_id`.
            public var eventId: Swift.String
            /// The event type, must be `error`.
            ///
            /// - Remark: Generated from `#/components/schemas/RealtimeServerEventError/type`.
            @frozen public enum _TypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                case error = "error"
            }
            /// The event type, must be `error`.
            ///
            /// - Remark: Generated from `#/components/schemas/RealtimeServerEventError/type`.
            public var _type: Components.Schemas.RealtimeServerEventError._TypePayload
            /// Details of the error.
            ///
            /// - Remark: Generated from `#/components/schemas/RealtimeServerEventError/error`.
            public struct _ErrorPayload: Codable, Hashable, Sendable {
                /// The type of error (e.g., "invalid_request_error", "server_error").
                ///
                ///
                /// - Remark: Generated from `#/components/schemas/RealtimeServerEventError/error/type`.
                public var _type: Swift.String
                /// Error code, if any.
                ///
                /// - Remark: Generated from `#/components/schemas/RealtimeServerEventError/error/code`.
                public var code: Swift.String?
                /// A human-readable error message.
                ///
                /// - Remark: Generated from `#/components/schemas/RealtimeServerEventError/error/message`.
                public var message: Swift.String
                /// Parameter related to the error, if any.
                ///
                /// - Remark: Generated from `#/components/schemas/RealtimeServerEventError/error/param`.
                public var param: Swift.String?
                /// The event_id of the client event that caused the error, if applicable.
                ///
                ///
                /// - Remark: Generated from `#/components/schemas/RealtimeServerEventError/error/event_id`.
                public var eventId: Swift.String?
                /// Creates a new `_ErrorPayload`.
                ///
                /// - Parameters:
                ///   - _type: The type of error (e.g., "invalid_request_error", "server_error").
                ///   - code: Error code, if any.
                ///   - message: A human-readable error message.
                ///   - param: Parameter related to the error, if any.
                ///   - eventId: The event_id of the client event that caused the error, if applicable.
                public init(
                    _type: Swift.String,
                    code: Swift.String? = nil,
                    message: Swift.String,
                    param: Swift.String? = nil,
                    eventId: Swift.String? = nil
                ) {
                    self._type = _type
                    self.code = code
                    self.message = message
                    self.param = param
                    self.eventId = eventId
                }
                public enum CodingKeys: String, CodingKey {
                    case _type = "type"
                    case code
                    case message
                    case param
                    case eventId = "event_id"
                }
            }
            /// Details of the error.
            ///
            /// - Remark: Generated from `#/components/schemas/RealtimeServerEventError/error`.
            public var error: Components.Schemas.RealtimeServerEventError._ErrorPayload
            /// Creates a new `RealtimeServerEventError`.
            ///
            /// - Parameters:
            ///   - eventId: The unique ID of the server event.
            ///   - _type: The event type, must be `error`.
            ///   - error: Details of the error.
            public init(
                eventId: Swift.String,
                _type: Components.Schemas.RealtimeServerEventError._TypePayload,
                error: Components.Schemas.RealtimeServerEventError._ErrorPayload
            ) {
                self.eventId = eventId
                self._type = _type
                self.error = error
            }
            public enum CodingKeys: String, CodingKey {
                case eventId = "event_id"
                case _type = "type"
                case error
            }
        }
        /// Returned when the input audio buffer is cleared by the client with a 
        /// `input_audio_buffer.clear` event.
        ///
        ///
        /// - Remark: Generated from `#/components/schemas/RealtimeServerEventInputAudioBufferCleared`.
        public struct RealtimeServerEventInputAudioBufferCleared: Codable, Hashable, Sendable {
            /// The unique ID of the server event.
            ///
            /// - Remark: Generated from `#/components/schemas/RealtimeServerEventInputAudioBufferCleared/event_id`.
            public var eventId: Swift.String
            /// The event type, must be `input_audio_buffer.cleared`.
            ///
            /// - Remark: Generated from `#/components/schemas/RealtimeServerEventInputAudioBufferCleared/type`.
            @frozen public enum _TypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                case inputAudioBuffer_cleared = "input_audio_buffer.cleared"
            }
            /// The event type, must be `input_audio_buffer.cleared`.
            ///
            /// - Remark: Generated from `#/components/schemas/RealtimeServerEventInputAudioBufferCleared/type`.
            public var _type: Components.Schemas.RealtimeServerEventInputAudioBufferCleared._TypePayload
            /// Creates a new `RealtimeServerEventInputAudioBufferCleared`.
            ///
            /// - Parameters:
            ///   - eventId: The unique ID of the server event.
            ///   - _type: The event type, must be `input_audio_buffer.cleared`.
            public init(
                eventId: Swift.String,
                _type: Components.Schemas.RealtimeServerEventInputAudioBufferCleared._TypePayload
            ) {
                self.eventId = eventId
                self._type = _type
            }
            public enum CodingKeys: String, CodingKey {
                case eventId = "event_id"
                case _type = "type"
            }
        }
        /// Returned when an input audio buffer is committed, either by the client or 
        /// automatically in server VAD mode. The `item_id` property is the ID of the user
        /// message item that will be created, thus a `conversation.item.created` event 
        /// will also be sent to the client.
        ///
        ///
        /// - Remark: Generated from `#/components/schemas/RealtimeServerEventInputAudioBufferCommitted`.
        public struct RealtimeServerEventInputAudioBufferCommitted: Codable, Hashable, Sendable {
            /// The unique ID of the server event.
            ///
            /// - Remark: Generated from `#/components/schemas/RealtimeServerEventInputAudioBufferCommitted/event_id`.
            public var eventId: Swift.String
            /// The event type, must be `input_audio_buffer.committed`.
            ///
            /// - Remark: Generated from `#/components/schemas/RealtimeServerEventInputAudioBufferCommitted/type`.
            @frozen public enum _TypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                case inputAudioBuffer_committed = "input_audio_buffer.committed"
            }
            /// The event type, must be `input_audio_buffer.committed`.
            ///
            /// - Remark: Generated from `#/components/schemas/RealtimeServerEventInputAudioBufferCommitted/type`.
            public var _type: Components.Schemas.RealtimeServerEventInputAudioBufferCommitted._TypePayload
            /// The ID of the preceding item after which the new item will be inserted.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/RealtimeServerEventInputAudioBufferCommitted/previous_item_id`.
            public var previousItemId: Swift.String
            /// The ID of the user message item that will be created.
            ///
            /// - Remark: Generated from `#/components/schemas/RealtimeServerEventInputAudioBufferCommitted/item_id`.
            public var itemId: Swift.String
            /// Creates a new `RealtimeServerEventInputAudioBufferCommitted`.
            ///
            /// - Parameters:
            ///   - eventId: The unique ID of the server event.
            ///   - _type: The event type, must be `input_audio_buffer.committed`.
            ///   - previousItemId: The ID of the preceding item after which the new item will be inserted.
            ///   - itemId: The ID of the user message item that will be created.
            public init(
                eventId: Swift.String,
                _type: Components.Schemas.RealtimeServerEventInputAudioBufferCommitted._TypePayload,
                previousItemId: Swift.String,
                itemId: Swift.String
            ) {
                self.eventId = eventId
                self._type = _type
                self.previousItemId = previousItemId
                self.itemId = itemId
            }
            public enum CodingKeys: String, CodingKey {
                case eventId = "event_id"
                case _type = "type"
                case previousItemId = "previous_item_id"
                case itemId = "item_id"
            }
        }
        /// Sent by the server when in `server_vad` mode to indicate that speech has been 
        /// detected in the audio buffer. This can happen any time audio is added to the 
        /// buffer (unless speech is already detected). The client may want to use this 
        /// event to interrupt audio playback or provide visual feedback to the user. 
        ///
        /// The client should expect to receive a `input_audio_buffer.speech_stopped` event 
        /// when speech stops. The `item_id` property is the ID of the user message item 
        /// that will be created when speech stops and will also be included in the 
        /// `input_audio_buffer.speech_stopped` event (unless the client manually commits 
        /// the audio buffer during VAD activation).
        ///
        ///
        /// - Remark: Generated from `#/components/schemas/RealtimeServerEventInputAudioBufferSpeechStarted`.
        public struct RealtimeServerEventInputAudioBufferSpeechStarted: Codable, Hashable, Sendable {
            /// The unique ID of the server event.
            ///
            /// - Remark: Generated from `#/components/schemas/RealtimeServerEventInputAudioBufferSpeechStarted/event_id`.
            public var eventId: Swift.String
            /// The event type, must be `input_audio_buffer.speech_started`.
            ///
            /// - Remark: Generated from `#/components/schemas/RealtimeServerEventInputAudioBufferSpeechStarted/type`.
            @frozen public enum _TypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                case inputAudioBuffer_speechStarted = "input_audio_buffer.speech_started"
            }
            /// The event type, must be `input_audio_buffer.speech_started`.
            ///
            /// - Remark: Generated from `#/components/schemas/RealtimeServerEventInputAudioBufferSpeechStarted/type`.
            public var _type: Components.Schemas.RealtimeServerEventInputAudioBufferSpeechStarted._TypePayload
            /// Milliseconds from the start of all audio written to the buffer during the 
            /// session when speech was first detected. This will correspond to the 
            /// beginning of audio sent to the model, and thus includes the 
            /// `prefix_padding_ms` configured in the Session.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/RealtimeServerEventInputAudioBufferSpeechStarted/audio_start_ms`.
            public var audioStartMs: Swift.Int
            /// The ID of the user message item that will be created when speech stops.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/RealtimeServerEventInputAudioBufferSpeechStarted/item_id`.
            public var itemId: Swift.String
            /// Creates a new `RealtimeServerEventInputAudioBufferSpeechStarted`.
            ///
            /// - Parameters:
            ///   - eventId: The unique ID of the server event.
            ///   - _type: The event type, must be `input_audio_buffer.speech_started`.
            ///   - audioStartMs: Milliseconds from the start of all audio written to the buffer during the 
            ///   - itemId: The ID of the user message item that will be created when speech stops.
            public init(
                eventId: Swift.String,
                _type: Components.Schemas.RealtimeServerEventInputAudioBufferSpeechStarted._TypePayload,
                audioStartMs: Swift.Int,
                itemId: Swift.String
            ) {
                self.eventId = eventId
                self._type = _type
                self.audioStartMs = audioStartMs
                self.itemId = itemId
            }
            public enum CodingKeys: String, CodingKey {
                case eventId = "event_id"
                case _type = "type"
                case audioStartMs = "audio_start_ms"
                case itemId = "item_id"
            }
        }
        /// Returned in `server_vad` mode when the server detects the end of speech in 
        /// the audio buffer. The server will also send an `conversation.item.created` 
        /// event with the user message item that is created from the audio buffer.
        ///
        ///
        /// - Remark: Generated from `#/components/schemas/RealtimeServerEventInputAudioBufferSpeechStopped`.
        public struct RealtimeServerEventInputAudioBufferSpeechStopped: Codable, Hashable, Sendable {
            /// The unique ID of the server event.
            ///
            /// - Remark: Generated from `#/components/schemas/RealtimeServerEventInputAudioBufferSpeechStopped/event_id`.
            public var eventId: Swift.String
            /// The event type, must be `input_audio_buffer.speech_stopped`.
            ///
            /// - Remark: Generated from `#/components/schemas/RealtimeServerEventInputAudioBufferSpeechStopped/type`.
            @frozen public enum _TypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                case inputAudioBuffer_speechStopped = "input_audio_buffer.speech_stopped"
            }
            /// The event type, must be `input_audio_buffer.speech_stopped`.
            ///
            /// - Remark: Generated from `#/components/schemas/RealtimeServerEventInputAudioBufferSpeechStopped/type`.
            public var _type: Components.Schemas.RealtimeServerEventInputAudioBufferSpeechStopped._TypePayload
            /// Milliseconds since the session started when speech stopped. This will 
            /// correspond to the end of audio sent to the model, and thus includes the 
            /// `min_silence_duration_ms` configured in the Session.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/RealtimeServerEventInputAudioBufferSpeechStopped/audio_end_ms`.
            public var audioEndMs: Swift.Int
            /// The ID of the user message item that will be created.
            ///
            /// - Remark: Generated from `#/components/schemas/RealtimeServerEventInputAudioBufferSpeechStopped/item_id`.
            public var itemId: Swift.String
            /// Creates a new `RealtimeServerEventInputAudioBufferSpeechStopped`.
            ///
            /// - Parameters:
            ///   - eventId: The unique ID of the server event.
            ///   - _type: The event type, must be `input_audio_buffer.speech_stopped`.
            ///   - audioEndMs: Milliseconds since the session started when speech stopped. This will 
            ///   - itemId: The ID of the user message item that will be created.
            public init(
                eventId: Swift.String,
                _type: Components.Schemas.RealtimeServerEventInputAudioBufferSpeechStopped._TypePayload,
                audioEndMs: Swift.Int,
                itemId: Swift.String
            ) {
                self.eventId = eventId
                self._type = _type
                self.audioEndMs = audioEndMs
                self.itemId = itemId
            }
            public enum CodingKeys: String, CodingKey {
                case eventId = "event_id"
                case _type = "type"
                case audioEndMs = "audio_end_ms"
                case itemId = "item_id"
            }
        }
        /// Emitted at the beginning of a Response to indicate the updated rate limits. 
        /// When a Response is created some tokens will be "reserved" for the output 
        /// tokens, the rate limits shown here reflect that reservation, which is then 
        /// adjusted accordingly once the Response is completed.
        ///
        ///
        /// - Remark: Generated from `#/components/schemas/RealtimeServerEventRateLimitsUpdated`.
        public struct RealtimeServerEventRateLimitsUpdated: Codable, Hashable, Sendable {
            /// The unique ID of the server event.
            ///
            /// - Remark: Generated from `#/components/schemas/RealtimeServerEventRateLimitsUpdated/event_id`.
            public var eventId: Swift.String
            /// The event type, must be `rate_limits.updated`.
            ///
            /// - Remark: Generated from `#/components/schemas/RealtimeServerEventRateLimitsUpdated/type`.
            @frozen public enum _TypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                case rateLimits_updated = "rate_limits.updated"
            }
            /// The event type, must be `rate_limits.updated`.
            ///
            /// - Remark: Generated from `#/components/schemas/RealtimeServerEventRateLimitsUpdated/type`.
            public var _type: Components.Schemas.RealtimeServerEventRateLimitsUpdated._TypePayload
            /// - Remark: Generated from `#/components/schemas/RealtimeServerEventRateLimitsUpdated/RateLimitsPayload`.
            public struct RateLimitsPayloadPayload: Codable, Hashable, Sendable {
                /// The name of the rate limit (`requests`, `tokens`).
                ///
                ///
                /// - Remark: Generated from `#/components/schemas/RealtimeServerEventRateLimitsUpdated/RateLimitsPayload/name`.
                @frozen public enum NamePayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case requests = "requests"
                    case tokens = "tokens"
                }
                /// The name of the rate limit (`requests`, `tokens`).
                ///
                ///
                /// - Remark: Generated from `#/components/schemas/RealtimeServerEventRateLimitsUpdated/RateLimitsPayload/name`.
                public var name: Components.Schemas.RealtimeServerEventRateLimitsUpdated.RateLimitsPayloadPayload.NamePayload?
                /// The maximum allowed value for the rate limit.
                ///
                /// - Remark: Generated from `#/components/schemas/RealtimeServerEventRateLimitsUpdated/RateLimitsPayload/limit`.
                public var limit: Swift.Int?
                /// The remaining value before the limit is reached.
                ///
                /// - Remark: Generated from `#/components/schemas/RealtimeServerEventRateLimitsUpdated/RateLimitsPayload/remaining`.
                public var remaining: Swift.Int?
                /// Seconds until the rate limit resets.
                ///
                /// - Remark: Generated from `#/components/schemas/RealtimeServerEventRateLimitsUpdated/RateLimitsPayload/reset_seconds`.
                public var resetSeconds: Swift.Double?
                /// Creates a new `RateLimitsPayloadPayload`.
                ///
                /// - Parameters:
                ///   - name: The name of the rate limit (`requests`, `tokens`).
                ///   - limit: The maximum allowed value for the rate limit.
                ///   - remaining: The remaining value before the limit is reached.
                ///   - resetSeconds: Seconds until the rate limit resets.
                public init(
                    name: Components.Schemas.RealtimeServerEventRateLimitsUpdated.RateLimitsPayloadPayload.NamePayload? = nil,
                    limit: Swift.Int? = nil,
                    remaining: Swift.Int? = nil,
                    resetSeconds: Swift.Double? = nil
                ) {
                    self.name = name
                    self.limit = limit
                    self.remaining = remaining
                    self.resetSeconds = resetSeconds
                }
                public enum CodingKeys: String, CodingKey {
                    case name
                    case limit
                    case remaining
                    case resetSeconds = "reset_seconds"
                }
            }
            /// List of rate limit information.
            ///
            /// - Remark: Generated from `#/components/schemas/RealtimeServerEventRateLimitsUpdated/rate_limits`.
            public typealias RateLimitsPayload = [Components.Schemas.RealtimeServerEventRateLimitsUpdated.RateLimitsPayloadPayload]
            /// List of rate limit information.
            ///
            /// - Remark: Generated from `#/components/schemas/RealtimeServerEventRateLimitsUpdated/rate_limits`.
            public var rateLimits: Components.Schemas.RealtimeServerEventRateLimitsUpdated.RateLimitsPayload
            /// Creates a new `RealtimeServerEventRateLimitsUpdated`.
            ///
            /// - Parameters:
            ///   - eventId: The unique ID of the server event.
            ///   - _type: The event type, must be `rate_limits.updated`.
            ///   - rateLimits: List of rate limit information.
            public init(
                eventId: Swift.String,
                _type: Components.Schemas.RealtimeServerEventRateLimitsUpdated._TypePayload,
                rateLimits: Components.Schemas.RealtimeServerEventRateLimitsUpdated.RateLimitsPayload
            ) {
                self.eventId = eventId
                self._type = _type
                self.rateLimits = rateLimits
            }
            public enum CodingKeys: String, CodingKey {
                case eventId = "event_id"
                case _type = "type"
                case rateLimits = "rate_limits"
            }
        }
        /// Returned when the model-generated audio is updated.
        ///
        /// - Remark: Generated from `#/components/schemas/RealtimeServerEventResponseAudioDelta`.
        public struct RealtimeServerEventResponseAudioDelta: Codable, Hashable, Sendable {
            /// The unique ID of the server event.
            ///
            /// - Remark: Generated from `#/components/schemas/RealtimeServerEventResponseAudioDelta/event_id`.
            public var eventId: Swift.String
            /// The event type, must be `response.audio.delta`.
            ///
            /// - Remark: Generated from `#/components/schemas/RealtimeServerEventResponseAudioDelta/type`.
            @frozen public enum _TypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                case response_audio_delta = "response.audio.delta"
            }
            /// The event type, must be `response.audio.delta`.
            ///
            /// - Remark: Generated from `#/components/schemas/RealtimeServerEventResponseAudioDelta/type`.
            public var _type: Components.Schemas.RealtimeServerEventResponseAudioDelta._TypePayload
            /// The ID of the response.
            ///
            /// - Remark: Generated from `#/components/schemas/RealtimeServerEventResponseAudioDelta/response_id`.
            public var responseId: Swift.String
            /// The ID of the item.
            ///
            /// - Remark: Generated from `#/components/schemas/RealtimeServerEventResponseAudioDelta/item_id`.
            public var itemId: Swift.String
            /// The index of the output item in the response.
            ///
            /// - Remark: Generated from `#/components/schemas/RealtimeServerEventResponseAudioDelta/output_index`.
            public var outputIndex: Swift.Int
            /// The index of the content part in the item's content array.
            ///
            /// - Remark: Generated from `#/components/schemas/RealtimeServerEventResponseAudioDelta/content_index`.
            public var contentIndex: Swift.Int
            /// Base64-encoded audio data delta.
            ///
            /// - Remark: Generated from `#/components/schemas/RealtimeServerEventResponseAudioDelta/delta`.
            public var delta: Swift.String
            /// Creates a new `RealtimeServerEventResponseAudioDelta`.
            ///
            /// - Parameters:
            ///   - eventId: The unique ID of the server event.
            ///   - _type: The event type, must be `response.audio.delta`.
            ///   - responseId: The ID of the response.
            ///   - itemId: The ID of the item.
            ///   - outputIndex: The index of the output item in the response.
            ///   - contentIndex: The index of the content part in the item's content array.
            ///   - delta: Base64-encoded audio data delta.
            public init(
                eventId: Swift.String,
                _type: Components.Schemas.RealtimeServerEventResponseAudioDelta._TypePayload,
                responseId: Swift.String,
                itemId: Swift.String,
                outputIndex: Swift.Int,
                contentIndex: Swift.Int,
                delta: Swift.String
            ) {
                self.eventId = eventId
                self._type = _type
                self.responseId = responseId
                self.itemId = itemId
                self.outputIndex = outputIndex
                self.contentIndex = contentIndex
                self.delta = delta
            }
            public enum CodingKeys: String, CodingKey {
                case eventId = "event_id"
                case _type = "type"
                case responseId = "response_id"
                case itemId = "item_id"
                case outputIndex = "output_index"
                case contentIndex = "content_index"
                case delta
            }
        }
        /// Returned when the model-generated audio is done. Also emitted when a Response
        /// is interrupted, incomplete, or cancelled.
        ///
        ///
        /// - Remark: Generated from `#/components/schemas/RealtimeServerEventResponseAudioDone`.
        public struct RealtimeServerEventResponseAudioDone: Codable, Hashable, Sendable {
            /// The unique ID of the server event.
            ///
            /// - Remark: Generated from `#/components/schemas/RealtimeServerEventResponseAudioDone/event_id`.
            public var eventId: Swift.String
            /// The event type, must be `response.audio.done`.
            ///
            /// - Remark: Generated from `#/components/schemas/RealtimeServerEventResponseAudioDone/type`.
            @frozen public enum _TypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                case response_audio_done = "response.audio.done"
            }
            /// The event type, must be `response.audio.done`.
            ///
            /// - Remark: Generated from `#/components/schemas/RealtimeServerEventResponseAudioDone/type`.
            public var _type: Components.Schemas.RealtimeServerEventResponseAudioDone._TypePayload
            /// The ID of the response.
            ///
            /// - Remark: Generated from `#/components/schemas/RealtimeServerEventResponseAudioDone/response_id`.
            public var responseId: Swift.String
            /// The ID of the item.
            ///
            /// - Remark: Generated from `#/components/schemas/RealtimeServerEventResponseAudioDone/item_id`.
            public var itemId: Swift.String
            /// The index of the output item in the response.
            ///
            /// - Remark: Generated from `#/components/schemas/RealtimeServerEventResponseAudioDone/output_index`.
            public var outputIndex: Swift.Int
            /// The index of the content part in the item's content array.
            ///
            /// - Remark: Generated from `#/components/schemas/RealtimeServerEventResponseAudioDone/content_index`.
            public var contentIndex: Swift.Int
            /// Creates a new `RealtimeServerEventResponseAudioDone`.
            ///
            /// - Parameters:
            ///   - eventId: The unique ID of the server event.
            ///   - _type: The event type, must be `response.audio.done`.
            ///   - responseId: The ID of the response.
            ///   - itemId: The ID of the item.
            ///   - outputIndex: The index of the output item in the response.
            ///   - contentIndex: The index of the content part in the item's content array.
            public init(
                eventId: Swift.String,
                _type: Components.Schemas.RealtimeServerEventResponseAudioDone._TypePayload,
                responseId: Swift.String,
                itemId: Swift.String,
                outputIndex: Swift.Int,
                contentIndex: Swift.Int
            ) {
                self.eventId = eventId
                self._type = _type
                self.responseId = responseId
                self.itemId = itemId
                self.outputIndex = outputIndex
                self.contentIndex = contentIndex
            }
            public enum CodingKeys: String, CodingKey {
                case eventId = "event_id"
                case _type = "type"
                case responseId = "response_id"
                case itemId = "item_id"
                case outputIndex = "output_index"
                case contentIndex = "content_index"
            }
        }
        /// Returned when the model-generated transcription of audio output is updated.
        ///
        ///
        /// - Remark: Generated from `#/components/schemas/RealtimeServerEventResponseAudioTranscriptDelta`.
        public struct RealtimeServerEventResponseAudioTranscriptDelta: Codable, Hashable, Sendable {
            /// The unique ID of the server event.
            ///
            /// - Remark: Generated from `#/components/schemas/RealtimeServerEventResponseAudioTranscriptDelta/event_id`.
            public var eventId: Swift.String
            /// The event type, must be `response.audio_transcript.delta`.
            ///
            /// - Remark: Generated from `#/components/schemas/RealtimeServerEventResponseAudioTranscriptDelta/type`.
            @frozen public enum _TypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                case response_audioTranscript_delta = "response.audio_transcript.delta"
            }
            /// The event type, must be `response.audio_transcript.delta`.
            ///
            /// - Remark: Generated from `#/components/schemas/RealtimeServerEventResponseAudioTranscriptDelta/type`.
            public var _type: Components.Schemas.RealtimeServerEventResponseAudioTranscriptDelta._TypePayload
            /// The ID of the response.
            ///
            /// - Remark: Generated from `#/components/schemas/RealtimeServerEventResponseAudioTranscriptDelta/response_id`.
            public var responseId: Swift.String
            /// The ID of the item.
            ///
            /// - Remark: Generated from `#/components/schemas/RealtimeServerEventResponseAudioTranscriptDelta/item_id`.
            public var itemId: Swift.String
            /// The index of the output item in the response.
            ///
            /// - Remark: Generated from `#/components/schemas/RealtimeServerEventResponseAudioTranscriptDelta/output_index`.
            public var outputIndex: Swift.Int
            /// The index of the content part in the item's content array.
            ///
            /// - Remark: Generated from `#/components/schemas/RealtimeServerEventResponseAudioTranscriptDelta/content_index`.
            public var contentIndex: Swift.Int
            /// The transcript delta.
            ///
            /// - Remark: Generated from `#/components/schemas/RealtimeServerEventResponseAudioTranscriptDelta/delta`.
            public var delta: Swift.String
            /// Creates a new `RealtimeServerEventResponseAudioTranscriptDelta`.
            ///
            /// - Parameters:
            ///   - eventId: The unique ID of the server event.
            ///   - _type: The event type, must be `response.audio_transcript.delta`.
            ///   - responseId: The ID of the response.
            ///   - itemId: The ID of the item.
            ///   - outputIndex: The index of the output item in the response.
            ///   - contentIndex: The index of the content part in the item's content array.
            ///   - delta: The transcript delta.
            public init(
                eventId: Swift.String,
                _type: Components.Schemas.RealtimeServerEventResponseAudioTranscriptDelta._TypePayload,
                responseId: Swift.String,
                itemId: Swift.String,
                outputIndex: Swift.Int,
                contentIndex: Swift.Int,
                delta: Swift.String
            ) {
                self.eventId = eventId
                self._type = _type
                self.responseId = responseId
                self.itemId = itemId
                self.outputIndex = outputIndex
                self.contentIndex = contentIndex
                self.delta = delta
            }
            public enum CodingKeys: String, CodingKey {
                case eventId = "event_id"
                case _type = "type"
                case responseId = "response_id"
                case itemId = "item_id"
                case outputIndex = "output_index"
                case contentIndex = "content_index"
                case delta
            }
        }
        /// Returned when the model-generated transcription of audio output is done
        /// streaming. Also emitted when a Response is interrupted, incomplete, or
        /// cancelled.
        ///
        ///
        /// - Remark: Generated from `#/components/schemas/RealtimeServerEventResponseAudioTranscriptDone`.
        public struct RealtimeServerEventResponseAudioTranscriptDone: Codable, Hashable, Sendable {
            /// The unique ID of the server event.
            ///
            /// - Remark: Generated from `#/components/schemas/RealtimeServerEventResponseAudioTranscriptDone/event_id`.
            public var eventId: Swift.String
            /// The event type, must be `response.audio_transcript.done`.
            ///
            /// - Remark: Generated from `#/components/schemas/RealtimeServerEventResponseAudioTranscriptDone/type`.
            @frozen public enum _TypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                case response_audioTranscript_done = "response.audio_transcript.done"
            }
            /// The event type, must be `response.audio_transcript.done`.
            ///
            /// - Remark: Generated from `#/components/schemas/RealtimeServerEventResponseAudioTranscriptDone/type`.
            public var _type: Components.Schemas.RealtimeServerEventResponseAudioTranscriptDone._TypePayload
            /// The ID of the response.
            ///
            /// - Remark: Generated from `#/components/schemas/RealtimeServerEventResponseAudioTranscriptDone/response_id`.
            public var responseId: Swift.String
            /// The ID of the item.
            ///
            /// - Remark: Generated from `#/components/schemas/RealtimeServerEventResponseAudioTranscriptDone/item_id`.
            public var itemId: Swift.String
            /// The index of the output item in the response.
            ///
            /// - Remark: Generated from `#/components/schemas/RealtimeServerEventResponseAudioTranscriptDone/output_index`.
            public var outputIndex: Swift.Int
            /// The index of the content part in the item's content array.
            ///
            /// - Remark: Generated from `#/components/schemas/RealtimeServerEventResponseAudioTranscriptDone/content_index`.
            public var contentIndex: Swift.Int
            /// The final transcript of the audio.
            ///
            /// - Remark: Generated from `#/components/schemas/RealtimeServerEventResponseAudioTranscriptDone/transcript`.
            public var transcript: Swift.String
            /// Creates a new `RealtimeServerEventResponseAudioTranscriptDone`.
            ///
            /// - Parameters:
            ///   - eventId: The unique ID of the server event.
            ///   - _type: The event type, must be `response.audio_transcript.done`.
            ///   - responseId: The ID of the response.
            ///   - itemId: The ID of the item.
            ///   - outputIndex: The index of the output item in the response.
            ///   - contentIndex: The index of the content part in the item's content array.
            ///   - transcript: The final transcript of the audio.
            public init(
                eventId: Swift.String,
                _type: Components.Schemas.RealtimeServerEventResponseAudioTranscriptDone._TypePayload,
                responseId: Swift.String,
                itemId: Swift.String,
                outputIndex: Swift.Int,
                contentIndex: Swift.Int,
                transcript: Swift.String
            ) {
                self.eventId = eventId
                self._type = _type
                self.responseId = responseId
                self.itemId = itemId
                self.outputIndex = outputIndex
                self.contentIndex = contentIndex
                self.transcript = transcript
            }
            public enum CodingKeys: String, CodingKey {
                case eventId = "event_id"
                case _type = "type"
                case responseId = "response_id"
                case itemId = "item_id"
                case outputIndex = "output_index"
                case contentIndex = "content_index"
                case transcript
            }
        }
        /// Returned when a new content part is added to an assistant message item during
        /// response generation.
        ///
        ///
        /// - Remark: Generated from `#/components/schemas/RealtimeServerEventResponseContentPartAdded`.
        public struct RealtimeServerEventResponseContentPartAdded: Codable, Hashable, Sendable {
            /// The unique ID of the server event.
            ///
            /// - Remark: Generated from `#/components/schemas/RealtimeServerEventResponseContentPartAdded/event_id`.
            public var eventId: Swift.String
            /// The event type, must be `response.content_part.added`.
            ///
            /// - Remark: Generated from `#/components/schemas/RealtimeServerEventResponseContentPartAdded/type`.
            @frozen public enum _TypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                case response_contentPart_added = "response.content_part.added"
            }
            /// The event type, must be `response.content_part.added`.
            ///
            /// - Remark: Generated from `#/components/schemas/RealtimeServerEventResponseContentPartAdded/type`.
            public var _type: Components.Schemas.RealtimeServerEventResponseContentPartAdded._TypePayload
            /// The ID of the response.
            ///
            /// - Remark: Generated from `#/components/schemas/RealtimeServerEventResponseContentPartAdded/response_id`.
            public var responseId: Swift.String
            /// The ID of the item to which the content part was added.
            ///
            /// - Remark: Generated from `#/components/schemas/RealtimeServerEventResponseContentPartAdded/item_id`.
            public var itemId: Swift.String
            /// The index of the output item in the response.
            ///
            /// - Remark: Generated from `#/components/schemas/RealtimeServerEventResponseContentPartAdded/output_index`.
            public var outputIndex: Swift.Int
            /// The index of the content part in the item's content array.
            ///
            /// - Remark: Generated from `#/components/schemas/RealtimeServerEventResponseContentPartAdded/content_index`.
            public var contentIndex: Swift.Int
            /// The content part that was added.
            ///
            /// - Remark: Generated from `#/components/schemas/RealtimeServerEventResponseContentPartAdded/part`.
            public struct PartPayload: Codable, Hashable, Sendable {
                /// The content type ("text", "audio").
                ///
                /// - Remark: Generated from `#/components/schemas/RealtimeServerEventResponseContentPartAdded/part/type`.
                @frozen public enum _TypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case audio = "audio"
                    case text = "text"
                }
                /// The content type ("text", "audio").
                ///
                /// - Remark: Generated from `#/components/schemas/RealtimeServerEventResponseContentPartAdded/part/type`.
                public var _type: Components.Schemas.RealtimeServerEventResponseContentPartAdded.PartPayload._TypePayload?
                /// The text content (if type is "text").
                ///
                /// - Remark: Generated from `#/components/schemas/RealtimeServerEventResponseContentPartAdded/part/text`.
                public var text: Swift.String?
                /// Base64-encoded audio data (if type is "audio").
                ///
                /// - Remark: Generated from `#/components/schemas/RealtimeServerEventResponseContentPartAdded/part/audio`.
                public var audio: Swift.String?
                /// The transcript of the audio (if type is "audio").
                ///
                /// - Remark: Generated from `#/components/schemas/RealtimeServerEventResponseContentPartAdded/part/transcript`.
                public var transcript: Swift.String?
                /// Creates a new `PartPayload`.
                ///
                /// - Parameters:
                ///   - _type: The content type ("text", "audio").
                ///   - text: The text content (if type is "text").
                ///   - audio: Base64-encoded audio data (if type is "audio").
                ///   - transcript: The transcript of the audio (if type is "audio").
                public init(
                    _type: Components.Schemas.RealtimeServerEventResponseContentPartAdded.PartPayload._TypePayload? = nil,
                    text: Swift.String? = nil,
                    audio: Swift.String? = nil,
                    transcript: Swift.String? = nil
                ) {
                    self._type = _type
                    self.text = text
                    self.audio = audio
                    self.transcript = transcript
                }
                public enum CodingKeys: String, CodingKey {
                    case _type = "type"
                    case text
                    case audio
                    case transcript
                }
            }
            /// The content part that was added.
            ///
            /// - Remark: Generated from `#/components/schemas/RealtimeServerEventResponseContentPartAdded/part`.
            public var part: Components.Schemas.RealtimeServerEventResponseContentPartAdded.PartPayload
            /// Creates a new `RealtimeServerEventResponseContentPartAdded`.
            ///
            /// - Parameters:
            ///   - eventId: The unique ID of the server event.
            ///   - _type: The event type, must be `response.content_part.added`.
            ///   - responseId: The ID of the response.
            ///   - itemId: The ID of the item to which the content part was added.
            ///   - outputIndex: The index of the output item in the response.
            ///   - contentIndex: The index of the content part in the item's content array.
            ///   - part: The content part that was added.
            public init(
                eventId: Swift.String,
                _type: Components.Schemas.RealtimeServerEventResponseContentPartAdded._TypePayload,
                responseId: Swift.String,
                itemId: Swift.String,
                outputIndex: Swift.Int,
                contentIndex: Swift.Int,
                part: Components.Schemas.RealtimeServerEventResponseContentPartAdded.PartPayload
            ) {
                self.eventId = eventId
                self._type = _type
                self.responseId = responseId
                self.itemId = itemId
                self.outputIndex = outputIndex
                self.contentIndex = contentIndex
                self.part = part
            }
            public enum CodingKeys: String, CodingKey {
                case eventId = "event_id"
                case _type = "type"
                case responseId = "response_id"
                case itemId = "item_id"
                case outputIndex = "output_index"
                case contentIndex = "content_index"
                case part
            }
        }
        /// Returned when a content part is done streaming in an assistant message item.
        /// Also emitted when a Response is interrupted, incomplete, or cancelled.
        ///
        ///
        /// - Remark: Generated from `#/components/schemas/RealtimeServerEventResponseContentPartDone`.
        public struct RealtimeServerEventResponseContentPartDone: Codable, Hashable, Sendable {
            /// The unique ID of the server event.
            ///
            /// - Remark: Generated from `#/components/schemas/RealtimeServerEventResponseContentPartDone/event_id`.
            public var eventId: Swift.String
            /// The event type, must be `response.content_part.done`.
            ///
            /// - Remark: Generated from `#/components/schemas/RealtimeServerEventResponseContentPartDone/type`.
            @frozen public enum _TypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                case response_contentPart_done = "response.content_part.done"
            }
            /// The event type, must be `response.content_part.done`.
            ///
            /// - Remark: Generated from `#/components/schemas/RealtimeServerEventResponseContentPartDone/type`.
            public var _type: Components.Schemas.RealtimeServerEventResponseContentPartDone._TypePayload
            /// The ID of the response.
            ///
            /// - Remark: Generated from `#/components/schemas/RealtimeServerEventResponseContentPartDone/response_id`.
            public var responseId: Swift.String
            /// The ID of the item.
            ///
            /// - Remark: Generated from `#/components/schemas/RealtimeServerEventResponseContentPartDone/item_id`.
            public var itemId: Swift.String
            /// The index of the output item in the response.
            ///
            /// - Remark: Generated from `#/components/schemas/RealtimeServerEventResponseContentPartDone/output_index`.
            public var outputIndex: Swift.Int
            /// The index of the content part in the item's content array.
            ///
            /// - Remark: Generated from `#/components/schemas/RealtimeServerEventResponseContentPartDone/content_index`.
            public var contentIndex: Swift.Int
            /// The content part that is done.
            ///
            /// - Remark: Generated from `#/components/schemas/RealtimeServerEventResponseContentPartDone/part`.
            public struct PartPayload: Codable, Hashable, Sendable {
                /// The content type ("text", "audio").
                ///
                /// - Remark: Generated from `#/components/schemas/RealtimeServerEventResponseContentPartDone/part/type`.
                @frozen public enum _TypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case audio = "audio"
                    case text = "text"
                }
                /// The content type ("text", "audio").
                ///
                /// - Remark: Generated from `#/components/schemas/RealtimeServerEventResponseContentPartDone/part/type`.
                public var _type: Components.Schemas.RealtimeServerEventResponseContentPartDone.PartPayload._TypePayload?
                /// The text content (if type is "text").
                ///
                /// - Remark: Generated from `#/components/schemas/RealtimeServerEventResponseContentPartDone/part/text`.
                public var text: Swift.String?
                /// Base64-encoded audio data (if type is "audio").
                ///
                /// - Remark: Generated from `#/components/schemas/RealtimeServerEventResponseContentPartDone/part/audio`.
                public var audio: Swift.String?
                /// The transcript of the audio (if type is "audio").
                ///
                /// - Remark: Generated from `#/components/schemas/RealtimeServerEventResponseContentPartDone/part/transcript`.
                public var transcript: Swift.String?
                /// Creates a new `PartPayload`.
                ///
                /// - Parameters:
                ///   - _type: The content type ("text", "audio").
                ///   - text: The text content (if type is "text").
                ///   - audio: Base64-encoded audio data (if type is "audio").
                ///   - transcript: The transcript of the audio (if type is "audio").
                public init(
                    _type: Components.Schemas.RealtimeServerEventResponseContentPartDone.PartPayload._TypePayload? = nil,
                    text: Swift.String? = nil,
                    audio: Swift.String? = nil,
                    transcript: Swift.String? = nil
                ) {
                    self._type = _type
                    self.text = text
                    self.audio = audio
                    self.transcript = transcript
                }
                public enum CodingKeys: String, CodingKey {
                    case _type = "type"
                    case text
                    case audio
                    case transcript
                }
            }
            /// The content part that is done.
            ///
            /// - Remark: Generated from `#/components/schemas/RealtimeServerEventResponseContentPartDone/part`.
            public var part: Components.Schemas.RealtimeServerEventResponseContentPartDone.PartPayload
            /// Creates a new `RealtimeServerEventResponseContentPartDone`.
            ///
            /// - Parameters:
            ///   - eventId: The unique ID of the server event.
            ///   - _type: The event type, must be `response.content_part.done`.
            ///   - responseId: The ID of the response.
            ///   - itemId: The ID of the item.
            ///   - outputIndex: The index of the output item in the response.
            ///   - contentIndex: The index of the content part in the item's content array.
            ///   - part: The content part that is done.
            public init(
                eventId: Swift.String,
                _type: Components.Schemas.RealtimeServerEventResponseContentPartDone._TypePayload,
                responseId: Swift.String,
                itemId: Swift.String,
                outputIndex: Swift.Int,
                contentIndex: Swift.Int,
                part: Components.Schemas.RealtimeServerEventResponseContentPartDone.PartPayload
            ) {
                self.eventId = eventId
                self._type = _type
                self.responseId = responseId
                self.itemId = itemId
                self.outputIndex = outputIndex
                self.contentIndex = contentIndex
                self.part = part
            }
            public enum CodingKeys: String, CodingKey {
                case eventId = "event_id"
                case _type = "type"
                case responseId = "response_id"
                case itemId = "item_id"
                case outputIndex = "output_index"
                case contentIndex = "content_index"
                case part
            }
        }
        /// Returned when a new Response is created. The first event of response creation,
        /// where the response is in an initial state of `in_progress`.
        ///
        ///
        /// - Remark: Generated from `#/components/schemas/RealtimeServerEventResponseCreated`.
        public struct RealtimeServerEventResponseCreated: Codable, Hashable, Sendable {
            /// The unique ID of the server event.
            ///
            /// - Remark: Generated from `#/components/schemas/RealtimeServerEventResponseCreated/event_id`.
            public var eventId: Swift.String
            /// The event type, must be `response.created`.
            ///
            /// - Remark: Generated from `#/components/schemas/RealtimeServerEventResponseCreated/type`.
            @frozen public enum _TypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                case response_created = "response.created"
            }
            /// The event type, must be `response.created`.
            ///
            /// - Remark: Generated from `#/components/schemas/RealtimeServerEventResponseCreated/type`.
            public var _type: Components.Schemas.RealtimeServerEventResponseCreated._TypePayload
            /// - Remark: Generated from `#/components/schemas/RealtimeServerEventResponseCreated/response`.
            public var response: Components.Schemas.RealtimeResponse
            /// Creates a new `RealtimeServerEventResponseCreated`.
            ///
            /// - Parameters:
            ///   - eventId: The unique ID of the server event.
            ///   - _type: The event type, must be `response.created`.
            ///   - response:
            public init(
                eventId: Swift.String,
                _type: Components.Schemas.RealtimeServerEventResponseCreated._TypePayload,
                response: Components.Schemas.RealtimeResponse
            ) {
                self.eventId = eventId
                self._type = _type
                self.response = response
            }
            public enum CodingKeys: String, CodingKey {
                case eventId = "event_id"
                case _type = "type"
                case response
            }
        }
        /// Returned when a Response is done streaming. Always emitted, no matter the 
        /// final state. The Response object included in the `response.done` event will 
        /// include all output Items in the Response but will omit the raw audio data.
        ///
        ///
        /// - Remark: Generated from `#/components/schemas/RealtimeServerEventResponseDone`.
        public struct RealtimeServerEventResponseDone: Codable, Hashable, Sendable {
            /// The unique ID of the server event.
            ///
            /// - Remark: Generated from `#/components/schemas/RealtimeServerEventResponseDone/event_id`.
            public var eventId: Swift.String
            /// The event type, must be `response.done`.
            ///
            /// - Remark: Generated from `#/components/schemas/RealtimeServerEventResponseDone/type`.
            @frozen public enum _TypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                case response_done = "response.done"
            }
            /// The event type, must be `response.done`.
            ///
            /// - Remark: Generated from `#/components/schemas/RealtimeServerEventResponseDone/type`.
            public var _type: Components.Schemas.RealtimeServerEventResponseDone._TypePayload
            /// - Remark: Generated from `#/components/schemas/RealtimeServerEventResponseDone/response`.
            public var response: Components.Schemas.RealtimeResponse
            /// Creates a new `RealtimeServerEventResponseDone`.
            ///
            /// - Parameters:
            ///   - eventId: The unique ID of the server event.
            ///   - _type: The event type, must be `response.done`.
            ///   - response:
            public init(
                eventId: Swift.String,
                _type: Components.Schemas.RealtimeServerEventResponseDone._TypePayload,
                response: Components.Schemas.RealtimeResponse
            ) {
                self.eventId = eventId
                self._type = _type
                self.response = response
            }
            public enum CodingKeys: String, CodingKey {
                case eventId = "event_id"
                case _type = "type"
                case response
            }
        }
        /// Returned when the model-generated function call arguments are updated.
        ///
        ///
        /// - Remark: Generated from `#/components/schemas/RealtimeServerEventResponseFunctionCallArgumentsDelta`.
        public struct RealtimeServerEventResponseFunctionCallArgumentsDelta: Codable, Hashable, Sendable {
            /// The unique ID of the server event.
            ///
            /// - Remark: Generated from `#/components/schemas/RealtimeServerEventResponseFunctionCallArgumentsDelta/event_id`.
            public var eventId: Swift.String
            /// The event type, must be `response.function_call_arguments.delta`.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/RealtimeServerEventResponseFunctionCallArgumentsDelta/type`.
            @frozen public enum _TypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                case response_functionCallArguments_delta = "response.function_call_arguments.delta"
            }
            /// The event type, must be `response.function_call_arguments.delta`.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/RealtimeServerEventResponseFunctionCallArgumentsDelta/type`.
            public var _type: Components.Schemas.RealtimeServerEventResponseFunctionCallArgumentsDelta._TypePayload
            /// The ID of the response.
            ///
            /// - Remark: Generated from `#/components/schemas/RealtimeServerEventResponseFunctionCallArgumentsDelta/response_id`.
            public var responseId: Swift.String
            /// The ID of the function call item.
            ///
            /// - Remark: Generated from `#/components/schemas/RealtimeServerEventResponseFunctionCallArgumentsDelta/item_id`.
            public var itemId: Swift.String
            /// The index of the output item in the response.
            ///
            /// - Remark: Generated from `#/components/schemas/RealtimeServerEventResponseFunctionCallArgumentsDelta/output_index`.
            public var outputIndex: Swift.Int
            /// The ID of the function call.
            ///
            /// - Remark: Generated from `#/components/schemas/RealtimeServerEventResponseFunctionCallArgumentsDelta/call_id`.
            public var callId: Swift.String
            /// The arguments delta as a JSON string.
            ///
            /// - Remark: Generated from `#/components/schemas/RealtimeServerEventResponseFunctionCallArgumentsDelta/delta`.
            public var delta: Swift.String
            /// Creates a new `RealtimeServerEventResponseFunctionCallArgumentsDelta`.
            ///
            /// - Parameters:
            ///   - eventId: The unique ID of the server event.
            ///   - _type: The event type, must be `response.function_call_arguments.delta`.
            ///   - responseId: The ID of the response.
            ///   - itemId: The ID of the function call item.
            ///   - outputIndex: The index of the output item in the response.
            ///   - callId: The ID of the function call.
            ///   - delta: The arguments delta as a JSON string.
            public init(
                eventId: Swift.String,
                _type: Components.Schemas.RealtimeServerEventResponseFunctionCallArgumentsDelta._TypePayload,
                responseId: Swift.String,
                itemId: Swift.String,
                outputIndex: Swift.Int,
                callId: Swift.String,
                delta: Swift.String
            ) {
                self.eventId = eventId
                self._type = _type
                self.responseId = responseId
                self.itemId = itemId
                self.outputIndex = outputIndex
                self.callId = callId
                self.delta = delta
            }
            public enum CodingKeys: String, CodingKey {
                case eventId = "event_id"
                case _type = "type"
                case responseId = "response_id"
                case itemId = "item_id"
                case outputIndex = "output_index"
                case callId = "call_id"
                case delta
            }
        }
        /// Returned when the model-generated function call arguments are done streaming.
        /// Also emitted when a Response is interrupted, incomplete, or cancelled.
        ///
        ///
        /// - Remark: Generated from `#/components/schemas/RealtimeServerEventResponseFunctionCallArgumentsDone`.
        public struct RealtimeServerEventResponseFunctionCallArgumentsDone: Codable, Hashable, Sendable {
            /// The unique ID of the server event.
            ///
            /// - Remark: Generated from `#/components/schemas/RealtimeServerEventResponseFunctionCallArgumentsDone/event_id`.
            public var eventId: Swift.String
            /// The event type, must be `response.function_call_arguments.done`.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/RealtimeServerEventResponseFunctionCallArgumentsDone/type`.
            @frozen public enum _TypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                case response_functionCallArguments_done = "response.function_call_arguments.done"
            }
            /// The event type, must be `response.function_call_arguments.done`.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/RealtimeServerEventResponseFunctionCallArgumentsDone/type`.
            public var _type: Components.Schemas.RealtimeServerEventResponseFunctionCallArgumentsDone._TypePayload
            /// The ID of the response.
            ///
            /// - Remark: Generated from `#/components/schemas/RealtimeServerEventResponseFunctionCallArgumentsDone/response_id`.
            public var responseId: Swift.String
            /// The ID of the function call item.
            ///
            /// - Remark: Generated from `#/components/schemas/RealtimeServerEventResponseFunctionCallArgumentsDone/item_id`.
            public var itemId: Swift.String
            /// The index of the output item in the response.
            ///
            /// - Remark: Generated from `#/components/schemas/RealtimeServerEventResponseFunctionCallArgumentsDone/output_index`.
            public var outputIndex: Swift.Int
            /// The ID of the function call.
            ///
            /// - Remark: Generated from `#/components/schemas/RealtimeServerEventResponseFunctionCallArgumentsDone/call_id`.
            public var callId: Swift.String
            /// The final arguments as a JSON string.
            ///
            /// - Remark: Generated from `#/components/schemas/RealtimeServerEventResponseFunctionCallArgumentsDone/arguments`.
            public var arguments: Swift.String
            /// Creates a new `RealtimeServerEventResponseFunctionCallArgumentsDone`.
            ///
            /// - Parameters:
            ///   - eventId: The unique ID of the server event.
            ///   - _type: The event type, must be `response.function_call_arguments.done`.
            ///   - responseId: The ID of the response.
            ///   - itemId: The ID of the function call item.
            ///   - outputIndex: The index of the output item in the response.
            ///   - callId: The ID of the function call.
            ///   - arguments: The final arguments as a JSON string.
            public init(
                eventId: Swift.String,
                _type: Components.Schemas.RealtimeServerEventResponseFunctionCallArgumentsDone._TypePayload,
                responseId: Swift.String,
                itemId: Swift.String,
                outputIndex: Swift.Int,
                callId: Swift.String,
                arguments: Swift.String
            ) {
                self.eventId = eventId
                self._type = _type
                self.responseId = responseId
                self.itemId = itemId
                self.outputIndex = outputIndex
                self.callId = callId
                self.arguments = arguments
            }
            public enum CodingKeys: String, CodingKey {
                case eventId = "event_id"
                case _type = "type"
                case responseId = "response_id"
                case itemId = "item_id"
                case outputIndex = "output_index"
                case callId = "call_id"
                case arguments
            }
        }
        /// Returned when a new Item is created during Response generation.
        ///
        /// - Remark: Generated from `#/components/schemas/RealtimeServerEventResponseOutputItemAdded`.
        public struct RealtimeServerEventResponseOutputItemAdded: Codable, Hashable, Sendable {
            /// The unique ID of the server event.
            ///
            /// - Remark: Generated from `#/components/schemas/RealtimeServerEventResponseOutputItemAdded/event_id`.
            public var eventId: Swift.String
            /// The event type, must be `response.output_item.added`.
            ///
            /// - Remark: Generated from `#/components/schemas/RealtimeServerEventResponseOutputItemAdded/type`.
            @frozen public enum _TypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                case response_outputItem_added = "response.output_item.added"
            }
            /// The event type, must be `response.output_item.added`.
            ///
            /// - Remark: Generated from `#/components/schemas/RealtimeServerEventResponseOutputItemAdded/type`.
            public var _type: Components.Schemas.RealtimeServerEventResponseOutputItemAdded._TypePayload
            /// The ID of the Response to which the item belongs.
            ///
            /// - Remark: Generated from `#/components/schemas/RealtimeServerEventResponseOutputItemAdded/response_id`.
            public var responseId: Swift.String
            /// The index of the output item in the Response.
            ///
            /// - Remark: Generated from `#/components/schemas/RealtimeServerEventResponseOutputItemAdded/output_index`.
            public var outputIndex: Swift.Int
            /// - Remark: Generated from `#/components/schemas/RealtimeServerEventResponseOutputItemAdded/item`.
            public var item: Components.Schemas.RealtimeConversationItem
            /// Creates a new `RealtimeServerEventResponseOutputItemAdded`.
            ///
            /// - Parameters:
            ///   - eventId: The unique ID of the server event.
            ///   - _type: The event type, must be `response.output_item.added`.
            ///   - responseId: The ID of the Response to which the item belongs.
            ///   - outputIndex: The index of the output item in the Response.
            ///   - item:
            public init(
                eventId: Swift.String,
                _type: Components.Schemas.RealtimeServerEventResponseOutputItemAdded._TypePayload,
                responseId: Swift.String,
                outputIndex: Swift.Int,
                item: Components.Schemas.RealtimeConversationItem
            ) {
                self.eventId = eventId
                self._type = _type
                self.responseId = responseId
                self.outputIndex = outputIndex
                self.item = item
            }
            public enum CodingKeys: String, CodingKey {
                case eventId = "event_id"
                case _type = "type"
                case responseId = "response_id"
                case outputIndex = "output_index"
                case item
            }
        }
        /// Returned when an Item is done streaming. Also emitted when a Response is 
        /// interrupted, incomplete, or cancelled.
        ///
        ///
        /// - Remark: Generated from `#/components/schemas/RealtimeServerEventResponseOutputItemDone`.
        public struct RealtimeServerEventResponseOutputItemDone: Codable, Hashable, Sendable {
            /// The unique ID of the server event.
            ///
            /// - Remark: Generated from `#/components/schemas/RealtimeServerEventResponseOutputItemDone/event_id`.
            public var eventId: Swift.String
            /// The event type, must be `response.output_item.done`.
            ///
            /// - Remark: Generated from `#/components/schemas/RealtimeServerEventResponseOutputItemDone/type`.
            @frozen public enum _TypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                case response_outputItem_done = "response.output_item.done"
            }
            /// The event type, must be `response.output_item.done`.
            ///
            /// - Remark: Generated from `#/components/schemas/RealtimeServerEventResponseOutputItemDone/type`.
            public var _type: Components.Schemas.RealtimeServerEventResponseOutputItemDone._TypePayload
            /// The ID of the Response to which the item belongs.
            ///
            /// - Remark: Generated from `#/components/schemas/RealtimeServerEventResponseOutputItemDone/response_id`.
            public var responseId: Swift.String
            /// The index of the output item in the Response.
            ///
            /// - Remark: Generated from `#/components/schemas/RealtimeServerEventResponseOutputItemDone/output_index`.
            public var outputIndex: Swift.Int
            /// - Remark: Generated from `#/components/schemas/RealtimeServerEventResponseOutputItemDone/item`.
            public var item: Components.Schemas.RealtimeConversationItem
            /// Creates a new `RealtimeServerEventResponseOutputItemDone`.
            ///
            /// - Parameters:
            ///   - eventId: The unique ID of the server event.
            ///   - _type: The event type, must be `response.output_item.done`.
            ///   - responseId: The ID of the Response to which the item belongs.
            ///   - outputIndex: The index of the output item in the Response.
            ///   - item:
            public init(
                eventId: Swift.String,
                _type: Components.Schemas.RealtimeServerEventResponseOutputItemDone._TypePayload,
                responseId: Swift.String,
                outputIndex: Swift.Int,
                item: Components.Schemas.RealtimeConversationItem
            ) {
                self.eventId = eventId
                self._type = _type
                self.responseId = responseId
                self.outputIndex = outputIndex
                self.item = item
            }
            public enum CodingKeys: String, CodingKey {
                case eventId = "event_id"
                case _type = "type"
                case responseId = "response_id"
                case outputIndex = "output_index"
                case item
            }
        }
        /// Returned when the text value of a "text" content part is updated.
        ///
        /// - Remark: Generated from `#/components/schemas/RealtimeServerEventResponseTextDelta`.
        public struct RealtimeServerEventResponseTextDelta: Codable, Hashable, Sendable {
            /// The unique ID of the server event.
            ///
            /// - Remark: Generated from `#/components/schemas/RealtimeServerEventResponseTextDelta/event_id`.
            public var eventId: Swift.String
            /// The event type, must be `response.text.delta`.
            ///
            /// - Remark: Generated from `#/components/schemas/RealtimeServerEventResponseTextDelta/type`.
            @frozen public enum _TypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                case response_text_delta = "response.text.delta"
            }
            /// The event type, must be `response.text.delta`.
            ///
            /// - Remark: Generated from `#/components/schemas/RealtimeServerEventResponseTextDelta/type`.
            public var _type: Components.Schemas.RealtimeServerEventResponseTextDelta._TypePayload
            /// The ID of the response.
            ///
            /// - Remark: Generated from `#/components/schemas/RealtimeServerEventResponseTextDelta/response_id`.
            public var responseId: Swift.String
            /// The ID of the item.
            ///
            /// - Remark: Generated from `#/components/schemas/RealtimeServerEventResponseTextDelta/item_id`.
            public var itemId: Swift.String
            /// The index of the output item in the response.
            ///
            /// - Remark: Generated from `#/components/schemas/RealtimeServerEventResponseTextDelta/output_index`.
            public var outputIndex: Swift.Int
            /// The index of the content part in the item's content array.
            ///
            /// - Remark: Generated from `#/components/schemas/RealtimeServerEventResponseTextDelta/content_index`.
            public var contentIndex: Swift.Int
            /// The text delta.
            ///
            /// - Remark: Generated from `#/components/schemas/RealtimeServerEventResponseTextDelta/delta`.
            public var delta: Swift.String
            /// Creates a new `RealtimeServerEventResponseTextDelta`.
            ///
            /// - Parameters:
            ///   - eventId: The unique ID of the server event.
            ///   - _type: The event type, must be `response.text.delta`.
            ///   - responseId: The ID of the response.
            ///   - itemId: The ID of the item.
            ///   - outputIndex: The index of the output item in the response.
            ///   - contentIndex: The index of the content part in the item's content array.
            ///   - delta: The text delta.
            public init(
                eventId: Swift.String,
                _type: Components.Schemas.RealtimeServerEventResponseTextDelta._TypePayload,
                responseId: Swift.String,
                itemId: Swift.String,
                outputIndex: Swift.Int,
                contentIndex: Swift.Int,
                delta: Swift.String
            ) {
                self.eventId = eventId
                self._type = _type
                self.responseId = responseId
                self.itemId = itemId
                self.outputIndex = outputIndex
                self.contentIndex = contentIndex
                self.delta = delta
            }
            public enum CodingKeys: String, CodingKey {
                case eventId = "event_id"
                case _type = "type"
                case responseId = "response_id"
                case itemId = "item_id"
                case outputIndex = "output_index"
                case contentIndex = "content_index"
                case delta
            }
        }
        /// Returned when the text value of a "text" content part is done streaming. Also
        /// emitted when a Response is interrupted, incomplete, or cancelled.
        ///
        ///
        /// - Remark: Generated from `#/components/schemas/RealtimeServerEventResponseTextDone`.
        public struct RealtimeServerEventResponseTextDone: Codable, Hashable, Sendable {
            /// The unique ID of the server event.
            ///
            /// - Remark: Generated from `#/components/schemas/RealtimeServerEventResponseTextDone/event_id`.
            public var eventId: Swift.String
            /// The event type, must be `response.text.done`.
            ///
            /// - Remark: Generated from `#/components/schemas/RealtimeServerEventResponseTextDone/type`.
            @frozen public enum _TypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                case response_text_done = "response.text.done"
            }
            /// The event type, must be `response.text.done`.
            ///
            /// - Remark: Generated from `#/components/schemas/RealtimeServerEventResponseTextDone/type`.
            public var _type: Components.Schemas.RealtimeServerEventResponseTextDone._TypePayload
            /// The ID of the response.
            ///
            /// - Remark: Generated from `#/components/schemas/RealtimeServerEventResponseTextDone/response_id`.
            public var responseId: Swift.String
            /// The ID of the item.
            ///
            /// - Remark: Generated from `#/components/schemas/RealtimeServerEventResponseTextDone/item_id`.
            public var itemId: Swift.String
            /// The index of the output item in the response.
            ///
            /// - Remark: Generated from `#/components/schemas/RealtimeServerEventResponseTextDone/output_index`.
            public var outputIndex: Swift.Int
            /// The index of the content part in the item's content array.
            ///
            /// - Remark: Generated from `#/components/schemas/RealtimeServerEventResponseTextDone/content_index`.
            public var contentIndex: Swift.Int
            /// The final text content.
            ///
            /// - Remark: Generated from `#/components/schemas/RealtimeServerEventResponseTextDone/text`.
            public var text: Swift.String
            /// Creates a new `RealtimeServerEventResponseTextDone`.
            ///
            /// - Parameters:
            ///   - eventId: The unique ID of the server event.
            ///   - _type: The event type, must be `response.text.done`.
            ///   - responseId: The ID of the response.
            ///   - itemId: The ID of the item.
            ///   - outputIndex: The index of the output item in the response.
            ///   - contentIndex: The index of the content part in the item's content array.
            ///   - text: The final text content.
            public init(
                eventId: Swift.String,
                _type: Components.Schemas.RealtimeServerEventResponseTextDone._TypePayload,
                responseId: Swift.String,
                itemId: Swift.String,
                outputIndex: Swift.Int,
                contentIndex: Swift.Int,
                text: Swift.String
            ) {
                self.eventId = eventId
                self._type = _type
                self.responseId = responseId
                self.itemId = itemId
                self.outputIndex = outputIndex
                self.contentIndex = contentIndex
                self.text = text
            }
            public enum CodingKeys: String, CodingKey {
                case eventId = "event_id"
                case _type = "type"
                case responseId = "response_id"
                case itemId = "item_id"
                case outputIndex = "output_index"
                case contentIndex = "content_index"
                case text
            }
        }
        /// Returned when a Session is created. Emitted automatically when a new 
        /// connection is established as the first server event. This event will contain 
        /// the default Session configuration.
        ///
        ///
        /// - Remark: Generated from `#/components/schemas/RealtimeServerEventSessionCreated`.
        public struct RealtimeServerEventSessionCreated: Codable, Hashable, Sendable {
            /// The unique ID of the server event.
            ///
            /// - Remark: Generated from `#/components/schemas/RealtimeServerEventSessionCreated/event_id`.
            public var eventId: Swift.String
            /// The event type, must be `session.created`.
            ///
            /// - Remark: Generated from `#/components/schemas/RealtimeServerEventSessionCreated/type`.
            @frozen public enum _TypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                case session_created = "session.created"
            }
            /// The event type, must be `session.created`.
            ///
            /// - Remark: Generated from `#/components/schemas/RealtimeServerEventSessionCreated/type`.
            public var _type: Components.Schemas.RealtimeServerEventSessionCreated._TypePayload
            /// - Remark: Generated from `#/components/schemas/RealtimeServerEventSessionCreated/session`.
            public var session: Components.Schemas.RealtimeSession
            /// Creates a new `RealtimeServerEventSessionCreated`.
            ///
            /// - Parameters:
            ///   - eventId: The unique ID of the server event.
            ///   - _type: The event type, must be `session.created`.
            ///   - session:
            public init(
                eventId: Swift.String,
                _type: Components.Schemas.RealtimeServerEventSessionCreated._TypePayload,
                session: Components.Schemas.RealtimeSession
            ) {
                self.eventId = eventId
                self._type = _type
                self.session = session
            }
            public enum CodingKeys: String, CodingKey {
                case eventId = "event_id"
                case _type = "type"
                case session
            }
        }
        /// Returned when a session is updated with a `session.update` event, unless 
        /// there is an error.
        ///
        ///
        /// - Remark: Generated from `#/components/schemas/RealtimeServerEventSessionUpdated`.
        public struct RealtimeServerEventSessionUpdated: Codable, Hashable, Sendable {
            /// The unique ID of the server event.
            ///
            /// - Remark: Generated from `#/components/schemas/RealtimeServerEventSessionUpdated/event_id`.
            public var eventId: Swift.String
            /// The event type, must be `session.updated`.
            ///
            /// - Remark: Generated from `#/components/schemas/RealtimeServerEventSessionUpdated/type`.
            @frozen public enum _TypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                case session_updated = "session.updated"
            }
            /// The event type, must be `session.updated`.
            ///
            /// - Remark: Generated from `#/components/schemas/RealtimeServerEventSessionUpdated/type`.
            public var _type: Components.Schemas.RealtimeServerEventSessionUpdated._TypePayload
            /// - Remark: Generated from `#/components/schemas/RealtimeServerEventSessionUpdated/session`.
            public var session: Components.Schemas.RealtimeSession
            /// Creates a new `RealtimeServerEventSessionUpdated`.
            ///
            /// - Parameters:
            ///   - eventId: The unique ID of the server event.
            ///   - _type: The event type, must be `session.updated`.
            ///   - session:
            public init(
                eventId: Swift.String,
                _type: Components.Schemas.RealtimeServerEventSessionUpdated._TypePayload,
                session: Components.Schemas.RealtimeSession
            ) {
                self.eventId = eventId
                self._type = _type
                self.session = session
            }
            public enum CodingKeys: String, CodingKey {
                case eventId = "event_id"
                case _type = "type"
                case session
            }
        }
        /// Realtime session object configuration.
        ///
        /// - Remark: Generated from `#/components/schemas/RealtimeSession`.
        public struct RealtimeSession: Codable, Hashable, Sendable {
            /// Unique identifier for the session object.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/RealtimeSession/id`.
            public var id: Swift.String?
            /// - Remark: Generated from `#/components/schemas/RealtimeSession/ModalitiesPayload`.
            @frozen public enum ModalitiesPayloadPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case text = "text"
                case audio = "audio"
            }
            /// The set of modalities the model can respond with. To disable audio,
            /// set this to ["text"].
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/RealtimeSession/modalities`.
            public typealias ModalitiesPayload = [Components.Schemas.RealtimeSession.ModalitiesPayloadPayload]
            /// The set of modalities the model can respond with. To disable audio,
            /// set this to ["text"].
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/RealtimeSession/modalities`.
            public var modalities: Components.Schemas.RealtimeSession.ModalitiesPayload?
            /// The Realtime model used for this session.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/RealtimeSession/model`.
            public struct ModelPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/RealtimeSession/model/value1`.
                public var value1: Swift.String?
                /// - Remark: Generated from `#/components/schemas/RealtimeSession/model/value2`.
                @frozen public enum Value2Payload: String, Codable, Hashable, Sendable, CaseIterable {
                    case gpt4oRealtimePreview = "gpt-4o-realtime-preview"
                    case gpt4oRealtimePreview20241001 = "gpt-4o-realtime-preview-2024-10-01"
                    case gpt4oRealtimePreview20241217 = "gpt-4o-realtime-preview-2024-12-17"
                    case gpt4oMiniRealtimePreview = "gpt-4o-mini-realtime-preview"
                    case gpt4oMiniRealtimePreview20241217 = "gpt-4o-mini-realtime-preview-2024-12-17"
                }
                /// - Remark: Generated from `#/components/schemas/RealtimeSession/model/value2`.
                public var value2: Components.Schemas.RealtimeSession.ModelPayload.Value2Payload?
                /// Creates a new `ModelPayload`.
                ///
                /// - Parameters:
                ///   - value1:
                ///   - value2:
                public init(
                    value1: Swift.String? = nil,
                    value2: Components.Schemas.RealtimeSession.ModelPayload.Value2Payload? = nil
                ) {
                    self.value1 = value1
                    self.value2 = value2
                }
                public init(from decoder: any Decoder) throws {
                    var errors: [any Error] = []
                    do {
                        self.value1 = try decoder.decodeFromSingleValueContainer()
                    } catch {
                        errors.append(error)
                    }
                    do {
                        self.value2 = try decoder.decodeFromSingleValueContainer()
                    } catch {
                        errors.append(error)
                    }
                    try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                        [
                            self.value1,
                            self.value2
                        ],
                        type: Self.self,
                        codingPath: decoder.codingPath,
                        errors: errors
                    )
                }
                public func encode(to encoder: any Encoder) throws {
                    try encoder.encodeFirstNonNilValueToSingleValueContainer([
                        self.value1,
                        self.value2
                    ])
                }
            }
            /// The Realtime model used for this session.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/RealtimeSession/model`.
            public var model: Components.Schemas.RealtimeSession.ModelPayload?
            /// The default system instructions (i.e. system message) prepended to model 
            /// calls. This field allows the client to guide the model on desired 
            /// responses. The model can be instructed on response content and format, 
            /// (e.g. "be extremely succinct", "act friendly", "here are examples of good 
            /// responses") and on audio behavior (e.g. "talk quickly", "inject emotion 
            /// into your voice", "laugh frequently"). The instructions are not guaranteed 
            /// to be followed by the model, but they provide guidance to the model on the 
            /// desired behavior.
            ///
            /// Note that the server sets default instructions which will be used if this 
            /// field is not set and are visible in the `session.created` event at the 
            /// start of the session.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/RealtimeSession/instructions`.
            public var instructions: Swift.String?
            /// The voice the model uses to respond. Voice cannot be changed during the 
            /// session once the model has responded with audio at least once. Current 
            /// voice options are `alloy`, `ash`, `ballad`, `coral`, `echo` `sage`, 
            /// `shimmer` and `verse`.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/RealtimeSession/voice`.
            @frozen public enum VoicePayload: String, Codable, Hashable, Sendable, CaseIterable {
                case alloy = "alloy"
                case ash = "ash"
                case ballad = "ballad"
                case coral = "coral"
                case echo = "echo"
                case sage = "sage"
                case shimmer = "shimmer"
                case verse = "verse"
            }
            /// The voice the model uses to respond. Voice cannot be changed during the 
            /// session once the model has responded with audio at least once. Current 
            /// voice options are `alloy`, `ash`, `ballad`, `coral`, `echo` `sage`, 
            /// `shimmer` and `verse`.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/RealtimeSession/voice`.
            public var voice: Components.Schemas.RealtimeSession.VoicePayload?
            /// The format of input audio. Options are `pcm16`, `g711_ulaw`, or `g711_alaw`.
            /// For `pcm16`, input audio must be 16-bit PCM at a 24kHz sample rate, 
            /// single channel (mono), and little-endian byte order.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/RealtimeSession/input_audio_format`.
            @frozen public enum InputAudioFormatPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case pcm16 = "pcm16"
                case g711Ulaw = "g711_ulaw"
                case g711Alaw = "g711_alaw"
            }
            /// The format of input audio. Options are `pcm16`, `g711_ulaw`, or `g711_alaw`.
            /// For `pcm16`, input audio must be 16-bit PCM at a 24kHz sample rate, 
            /// single channel (mono), and little-endian byte order.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/RealtimeSession/input_audio_format`.
            public var inputAudioFormat: Components.Schemas.RealtimeSession.InputAudioFormatPayload?
            /// The format of output audio. Options are `pcm16`, `g711_ulaw`, or `g711_alaw`.
            /// For `pcm16`, output audio is sampled at a rate of 24kHz.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/RealtimeSession/output_audio_format`.
            @frozen public enum OutputAudioFormatPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case pcm16 = "pcm16"
                case g711Ulaw = "g711_ulaw"
                case g711Alaw = "g711_alaw"
            }
            /// The format of output audio. Options are `pcm16`, `g711_ulaw`, or `g711_alaw`.
            /// For `pcm16`, output audio is sampled at a rate of 24kHz.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/RealtimeSession/output_audio_format`.
            public var outputAudioFormat: Components.Schemas.RealtimeSession.OutputAudioFormatPayload?
            /// Configuration for input audio transcription, defaults to off and can be 
            /// set to `null` to turn off once on. Input audio transcription is not native 
            /// to the model, since the model consumes audio directly. Transcription runs 
            /// asynchronously through Whisper and should be treated as rough guidance 
            /// rather than the representation understood by the model.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/RealtimeSession/input_audio_transcription`.
            public struct InputAudioTranscriptionPayload: Codable, Hashable, Sendable {
                /// The model to use for transcription, `whisper-1` is the only currently 
                /// supported model.
                ///
                ///
                /// - Remark: Generated from `#/components/schemas/RealtimeSession/input_audio_transcription/model`.
                public var model: Swift.String?
                /// Creates a new `InputAudioTranscriptionPayload`.
                ///
                /// - Parameters:
                ///   - model: The model to use for transcription, `whisper-1` is the only currently 
                public init(model: Swift.String? = nil) {
                    self.model = model
                }
                public enum CodingKeys: String, CodingKey {
                    case model
                }
            }
            /// Configuration for input audio transcription, defaults to off and can be 
            /// set to `null` to turn off once on. Input audio transcription is not native 
            /// to the model, since the model consumes audio directly. Transcription runs 
            /// asynchronously through Whisper and should be treated as rough guidance 
            /// rather than the representation understood by the model.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/RealtimeSession/input_audio_transcription`.
            public var inputAudioTranscription: Components.Schemas.RealtimeSession.InputAudioTranscriptionPayload?
            /// Configuration for turn detection. Can be set to `null` to turn off. Server 
            /// VAD means that the model will detect the start and end of speech based on 
            /// audio volume and respond at the end of user speech.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/RealtimeSession/turn_detection`.
            public struct TurnDetectionPayload: Codable, Hashable, Sendable {
                /// Type of turn detection, only `server_vad` is currently supported.
                ///
                ///
                /// - Remark: Generated from `#/components/schemas/RealtimeSession/turn_detection/type`.
                @frozen public enum _TypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case serverVad = "server_vad"
                }
                /// Type of turn detection, only `server_vad` is currently supported.
                ///
                ///
                /// - Remark: Generated from `#/components/schemas/RealtimeSession/turn_detection/type`.
                public var _type: Components.Schemas.RealtimeSession.TurnDetectionPayload._TypePayload?
                /// Activation threshold for VAD (0.0 to 1.0), this defaults to 0.5. A 
                /// higher threshold will require louder audio to activate the model, and 
                /// thus might perform better in noisy environments.
                ///
                ///
                /// - Remark: Generated from `#/components/schemas/RealtimeSession/turn_detection/threshold`.
                public var threshold: Swift.Double?
                /// Amount of audio to include before the VAD detected speech (in 
                /// milliseconds). Defaults to 300ms.
                ///
                ///
                /// - Remark: Generated from `#/components/schemas/RealtimeSession/turn_detection/prefix_padding_ms`.
                public var prefixPaddingMs: Swift.Int?
                /// Duration of silence to detect speech stop (in milliseconds). Defaults 
                /// to 500ms. With shorter values the model will respond more quickly, 
                /// but may jump in on short pauses from the user.
                ///
                ///
                /// - Remark: Generated from `#/components/schemas/RealtimeSession/turn_detection/silence_duration_ms`.
                public var silenceDurationMs: Swift.Int?
                /// Creates a new `TurnDetectionPayload`.
                ///
                /// - Parameters:
                ///   - _type: Type of turn detection, only `server_vad` is currently supported.
                ///   - threshold: Activation threshold for VAD (0.0 to 1.0), this defaults to 0.5. A 
                ///   - prefixPaddingMs: Amount of audio to include before the VAD detected speech (in 
                ///   - silenceDurationMs: Duration of silence to detect speech stop (in milliseconds). Defaults 
                public init(
                    _type: Components.Schemas.RealtimeSession.TurnDetectionPayload._TypePayload? = nil,
                    threshold: Swift.Double? = nil,
                    prefixPaddingMs: Swift.Int? = nil,
                    silenceDurationMs: Swift.Int? = nil
                ) {
                    self._type = _type
                    self.threshold = threshold
                    self.prefixPaddingMs = prefixPaddingMs
                    self.silenceDurationMs = silenceDurationMs
                }
                public enum CodingKeys: String, CodingKey {
                    case _type = "type"
                    case threshold
                    case prefixPaddingMs = "prefix_padding_ms"
                    case silenceDurationMs = "silence_duration_ms"
                }
            }
            /// Configuration for turn detection. Can be set to `null` to turn off. Server 
            /// VAD means that the model will detect the start and end of speech based on 
            /// audio volume and respond at the end of user speech.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/RealtimeSession/turn_detection`.
            public var turnDetection: Components.Schemas.RealtimeSession.TurnDetectionPayload?
            /// - Remark: Generated from `#/components/schemas/RealtimeSession/ToolsPayload`.
            public struct ToolsPayloadPayload: Codable, Hashable, Sendable {
                /// The type of the tool, i.e. `function`.
                ///
                /// - Remark: Generated from `#/components/schemas/RealtimeSession/ToolsPayload/type`.
                @frozen public enum _TypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case function = "function"
                }
                /// The type of the tool, i.e. `function`.
                ///
                /// - Remark: Generated from `#/components/schemas/RealtimeSession/ToolsPayload/type`.
                public var _type: Components.Schemas.RealtimeSession.ToolsPayloadPayload._TypePayload?
                /// The name of the function.
                ///
                /// - Remark: Generated from `#/components/schemas/RealtimeSession/ToolsPayload/name`.
                public var name: Swift.String?
                /// The description of the function, including guidance on when and how 
                /// to call it, and guidance about what to tell the user when calling 
                /// (if anything).
                ///
                ///
                /// - Remark: Generated from `#/components/schemas/RealtimeSession/ToolsPayload/description`.
                public var description: Swift.String?
                /// Parameters of the function in JSON Schema.
                ///
                /// - Remark: Generated from `#/components/schemas/RealtimeSession/ToolsPayload/parameters`.
                public var parameters: OpenAPIRuntime.OpenAPIObjectContainer?
                /// Creates a new `ToolsPayloadPayload`.
                ///
                /// - Parameters:
                ///   - _type: The type of the tool, i.e. `function`.
                ///   - name: The name of the function.
                ///   - description: The description of the function, including guidance on when and how 
                ///   - parameters: Parameters of the function in JSON Schema.
                public init(
                    _type: Components.Schemas.RealtimeSession.ToolsPayloadPayload._TypePayload? = nil,
                    name: Swift.String? = nil,
                    description: Swift.String? = nil,
                    parameters: OpenAPIRuntime.OpenAPIObjectContainer? = nil
                ) {
                    self._type = _type
                    self.name = name
                    self.description = description
                    self.parameters = parameters
                }
                public enum CodingKeys: String, CodingKey {
                    case _type = "type"
                    case name
                    case description
                    case parameters
                }
            }
            /// Tools (functions) available to the model.
            ///
            /// - Remark: Generated from `#/components/schemas/RealtimeSession/tools`.
            public typealias ToolsPayload = [Components.Schemas.RealtimeSession.ToolsPayloadPayload]
            /// Tools (functions) available to the model.
            ///
            /// - Remark: Generated from `#/components/schemas/RealtimeSession/tools`.
            public var tools: Components.Schemas.RealtimeSession.ToolsPayload?
            /// How the model chooses tools. Options are `auto`, `none`, `required`, or 
            /// specify a function.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/RealtimeSession/tool_choice`.
            public var toolChoice: Swift.String?
            /// Sampling temperature for the model, limited to [0.6, 1.2]. Defaults to 0.8.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/RealtimeSession/temperature`.
            public var temperature: Swift.Double?
            /// Maximum number of output tokens for a single assistant response,
            /// inclusive of tool calls. Provide an integer between 1 and 4096 to
            /// limit output tokens, or `inf` for the maximum available tokens for a
            /// given model. Defaults to `inf`.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/RealtimeSession/max_response_output_tokens`.
            @frozen public enum MaxResponseOutputTokensPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/RealtimeSession/max_response_output_tokens/case1`.
                case case1(Swift.Int)
                /// - Remark: Generated from `#/components/schemas/RealtimeSession/max_response_output_tokens/case2`.
                @frozen public enum Case2Payload: String, Codable, Hashable, Sendable, CaseIterable {
                    case inf = "inf"
                }
                /// - Remark: Generated from `#/components/schemas/RealtimeSession/max_response_output_tokens/case2`.
                case case2(Components.Schemas.RealtimeSession.MaxResponseOutputTokensPayload.Case2Payload)
                public init(from decoder: any Decoder) throws {
                    var errors: [any Error] = []
                    do {
                        self = .case1(try decoder.decodeFromSingleValueContainer())
                        return
                    } catch {
                        errors.append(error)
                    }
                    do {
                        self = .case2(try decoder.decodeFromSingleValueContainer())
                        return
                    } catch {
                        errors.append(error)
                    }
                    throw Swift.DecodingError.failedToDecodeOneOfSchema(
                        type: Self.self,
                        codingPath: decoder.codingPath,
                        errors: errors
                    )
                }
                public func encode(to encoder: any Encoder) throws {
                    switch self {
                    case let .case1(value):
                        try encoder.encodeToSingleValueContainer(value)
                    case let .case2(value):
                        try encoder.encodeToSingleValueContainer(value)
                    }
                }
            }
            /// Maximum number of output tokens for a single assistant response,
            /// inclusive of tool calls. Provide an integer between 1 and 4096 to
            /// limit output tokens, or `inf` for the maximum available tokens for a
            /// given model. Defaults to `inf`.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/RealtimeSession/max_response_output_tokens`.
            public var maxResponseOutputTokens: Components.Schemas.RealtimeSession.MaxResponseOutputTokensPayload?
            /// Creates a new `RealtimeSession`.
            ///
            /// - Parameters:
            ///   - id: Unique identifier for the session object.
            ///   - modalities: The set of modalities the model can respond with. To disable audio,
            ///   - model: The Realtime model used for this session.
            ///   - instructions: The default system instructions (i.e. system message) prepended to model 
            ///   - voice: The voice the model uses to respond. Voice cannot be changed during the 
            ///   - inputAudioFormat: The format of input audio. Options are `pcm16`, `g711_ulaw`, or `g711_alaw`.
            ///   - outputAudioFormat: The format of output audio. Options are `pcm16`, `g711_ulaw`, or `g711_alaw`.
            ///   - inputAudioTranscription: Configuration for input audio transcription, defaults to off and can be 
            ///   - turnDetection: Configuration for turn detection. Can be set to `null` to turn off. Server 
            ///   - tools: Tools (functions) available to the model.
            ///   - toolChoice: How the model chooses tools. Options are `auto`, `none`, `required`, or 
            ///   - temperature: Sampling temperature for the model, limited to [0.6, 1.2]. Defaults to 0.8.
            ///   - maxResponseOutputTokens: Maximum number of output tokens for a single assistant response,
            public init(
                id: Swift.String? = nil,
                modalities: Components.Schemas.RealtimeSession.ModalitiesPayload? = nil,
                model: Components.Schemas.RealtimeSession.ModelPayload? = nil,
                instructions: Swift.String? = nil,
                voice: Components.Schemas.RealtimeSession.VoicePayload? = nil,
                inputAudioFormat: Components.Schemas.RealtimeSession.InputAudioFormatPayload? = nil,
                outputAudioFormat: Components.Schemas.RealtimeSession.OutputAudioFormatPayload? = nil,
                inputAudioTranscription: Components.Schemas.RealtimeSession.InputAudioTranscriptionPayload? = nil,
                turnDetection: Components.Schemas.RealtimeSession.TurnDetectionPayload? = nil,
                tools: Components.Schemas.RealtimeSession.ToolsPayload? = nil,
                toolChoice: Swift.String? = nil,
                temperature: Swift.Double? = nil,
                maxResponseOutputTokens: Components.Schemas.RealtimeSession.MaxResponseOutputTokensPayload? = nil
            ) {
                self.id = id
                self.modalities = modalities
                self.model = model
                self.instructions = instructions
                self.voice = voice
                self.inputAudioFormat = inputAudioFormat
                self.outputAudioFormat = outputAudioFormat
                self.inputAudioTranscription = inputAudioTranscription
                self.turnDetection = turnDetection
                self.tools = tools
                self.toolChoice = toolChoice
                self.temperature = temperature
                self.maxResponseOutputTokens = maxResponseOutputTokens
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case modalities
                case model
                case instructions
                case voice
                case inputAudioFormat = "input_audio_format"
                case outputAudioFormat = "output_audio_format"
                case inputAudioTranscription = "input_audio_transcription"
                case turnDetection = "turn_detection"
                case tools
                case toolChoice = "tool_choice"
                case temperature
                case maxResponseOutputTokens = "max_response_output_tokens"
            }
        }
        /// Realtime session object configuration.
        ///
        /// - Remark: Generated from `#/components/schemas/RealtimeSessionCreateRequest`.
        public struct RealtimeSessionCreateRequest: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/RealtimeSessionCreateRequest/ModalitiesPayload`.
            @frozen public enum ModalitiesPayloadPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case text = "text"
                case audio = "audio"
            }
            /// The set of modalities the model can respond with. To disable audio,
            /// set this to ["text"].
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/RealtimeSessionCreateRequest/modalities`.
            public typealias ModalitiesPayload = [Components.Schemas.RealtimeSessionCreateRequest.ModalitiesPayloadPayload]
            /// The set of modalities the model can respond with. To disable audio,
            /// set this to ["text"].
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/RealtimeSessionCreateRequest/modalities`.
            public var modalities: Components.Schemas.RealtimeSessionCreateRequest.ModalitiesPayload?
            /// The Realtime model used for this session.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/RealtimeSessionCreateRequest/model`.
            @frozen public enum ModelPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case gpt4oRealtimePreview = "gpt-4o-realtime-preview"
                case gpt4oRealtimePreview20241001 = "gpt-4o-realtime-preview-2024-10-01"
                case gpt4oRealtimePreview20241217 = "gpt-4o-realtime-preview-2024-12-17"
                case gpt4oMiniRealtimePreview = "gpt-4o-mini-realtime-preview"
                case gpt4oMiniRealtimePreview20241217 = "gpt-4o-mini-realtime-preview-2024-12-17"
            }
            /// The Realtime model used for this session.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/RealtimeSessionCreateRequest/model`.
            public var model: Components.Schemas.RealtimeSessionCreateRequest.ModelPayload?
            /// The default system instructions (i.e. system message) prepended to model 
            /// calls. This field allows the client to guide the model on desired 
            /// responses. The model can be instructed on response content and format, 
            /// (e.g. "be extremely succinct", "act friendly", "here are examples of good 
            /// responses") and on audio behavior (e.g. "talk quickly", "inject emotion 
            /// into your voice", "laugh frequently"). The instructions are not guaranteed 
            /// to be followed by the model, but they provide guidance to the model on the 
            /// desired behavior.
            ///
            /// Note that the server sets default instructions which will be used if this 
            /// field is not set and are visible in the `session.created` event at the 
            /// start of the session.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/RealtimeSessionCreateRequest/instructions`.
            public var instructions: Swift.String?
            /// The voice the model uses to respond. Voice cannot be changed during the 
            /// session once the model has responded with audio at least once. Current 
            /// voice options are `alloy`, `ash`, `ballad`, `coral`, `echo` `sage`, 
            /// `shimmer` and `verse`.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/RealtimeSessionCreateRequest/voice`.
            @frozen public enum VoicePayload: String, Codable, Hashable, Sendable, CaseIterable {
                case alloy = "alloy"
                case ash = "ash"
                case ballad = "ballad"
                case coral = "coral"
                case echo = "echo"
                case sage = "sage"
                case shimmer = "shimmer"
                case verse = "verse"
            }
            /// The voice the model uses to respond. Voice cannot be changed during the 
            /// session once the model has responded with audio at least once. Current 
            /// voice options are `alloy`, `ash`, `ballad`, `coral`, `echo` `sage`, 
            /// `shimmer` and `verse`.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/RealtimeSessionCreateRequest/voice`.
            public var voice: Components.Schemas.RealtimeSessionCreateRequest.VoicePayload?
            /// The format of input audio. Options are `pcm16`, `g711_ulaw`, or `g711_alaw`.
            /// For `pcm16`, input audio must be 16-bit PCM at a 24kHz sample rate, 
            /// single channel (mono), and little-endian byte order.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/RealtimeSessionCreateRequest/input_audio_format`.
            @frozen public enum InputAudioFormatPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case pcm16 = "pcm16"
                case g711Ulaw = "g711_ulaw"
                case g711Alaw = "g711_alaw"
            }
            /// The format of input audio. Options are `pcm16`, `g711_ulaw`, or `g711_alaw`.
            /// For `pcm16`, input audio must be 16-bit PCM at a 24kHz sample rate, 
            /// single channel (mono), and little-endian byte order.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/RealtimeSessionCreateRequest/input_audio_format`.
            public var inputAudioFormat: Components.Schemas.RealtimeSessionCreateRequest.InputAudioFormatPayload?
            /// The format of output audio. Options are `pcm16`, `g711_ulaw`, or `g711_alaw`.
            /// For `pcm16`, output audio is sampled at a rate of 24kHz.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/RealtimeSessionCreateRequest/output_audio_format`.
            @frozen public enum OutputAudioFormatPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case pcm16 = "pcm16"
                case g711Ulaw = "g711_ulaw"
                case g711Alaw = "g711_alaw"
            }
            /// The format of output audio. Options are `pcm16`, `g711_ulaw`, or `g711_alaw`.
            /// For `pcm16`, output audio is sampled at a rate of 24kHz.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/RealtimeSessionCreateRequest/output_audio_format`.
            public var outputAudioFormat: Components.Schemas.RealtimeSessionCreateRequest.OutputAudioFormatPayload?
            /// Configuration for input audio transcription, defaults to off and can be  set to `null` to turn off once on. Input audio transcription is not native to the model, since the model consumes audio directly. Transcription runs  asynchronously through [OpenAI Whisper transcription](https://platform.openai.com/docs/api-reference/audio/createTranscription) and should be treated as rough guidance rather than the representation understood by the model. The client can optionally set the language and prompt for transcription, these fields will be passed to the Whisper API.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/RealtimeSessionCreateRequest/input_audio_transcription`.
            public struct InputAudioTranscriptionPayload: Codable, Hashable, Sendable {
                /// The model to use for transcription, `whisper-1` is the only currently 
                /// supported model.
                ///
                ///
                /// - Remark: Generated from `#/components/schemas/RealtimeSessionCreateRequest/input_audio_transcription/model`.
                public var model: Swift.String?
                /// The language of the input audio. Supplying the input language in
                /// [ISO-639-1](https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes) (e.g. `en`) format
                /// will improve accuracy and latency.
                ///
                ///
                /// - Remark: Generated from `#/components/schemas/RealtimeSessionCreateRequest/input_audio_transcription/language`.
                public var language: Swift.String?
                /// An optional text to guide the model's style or continue a previous audio
                /// segment. The [prompt](/docs/guides/speech-to-text#prompting) should match
                /// the audio language.
                ///
                ///
                /// - Remark: Generated from `#/components/schemas/RealtimeSessionCreateRequest/input_audio_transcription/prompt`.
                public var prompt: Swift.String?
                /// Creates a new `InputAudioTranscriptionPayload`.
                ///
                /// - Parameters:
                ///   - model: The model to use for transcription, `whisper-1` is the only currently 
                ///   - language: The language of the input audio. Supplying the input language in
                ///   - prompt: An optional text to guide the model's style or continue a previous audio
                public init(
                    model: Swift.String? = nil,
                    language: Swift.String? = nil,
                    prompt: Swift.String? = nil
                ) {
                    self.model = model
                    self.language = language
                    self.prompt = prompt
                }
                public enum CodingKeys: String, CodingKey {
                    case model
                    case language
                    case prompt
                }
            }
            /// Configuration for input audio transcription, defaults to off and can be  set to `null` to turn off once on. Input audio transcription is not native to the model, since the model consumes audio directly. Transcription runs  asynchronously through [OpenAI Whisper transcription](https://platform.openai.com/docs/api-reference/audio/createTranscription) and should be treated as rough guidance rather than the representation understood by the model. The client can optionally set the language and prompt for transcription, these fields will be passed to the Whisper API.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/RealtimeSessionCreateRequest/input_audio_transcription`.
            public var inputAudioTranscription: Components.Schemas.RealtimeSessionCreateRequest.InputAudioTranscriptionPayload?
            /// Configuration for turn detection. Can be set to `null` to turn off. Server 
            /// VAD means that the model will detect the start and end of speech based on 
            /// audio volume and respond at the end of user speech.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/RealtimeSessionCreateRequest/turn_detection`.
            public struct TurnDetectionPayload: Codable, Hashable, Sendable {
                /// Type of turn detection, only `server_vad` is currently supported.
                ///
                ///
                /// - Remark: Generated from `#/components/schemas/RealtimeSessionCreateRequest/turn_detection/type`.
                public var _type: Swift.String?
                /// Activation threshold for VAD (0.0 to 1.0), this defaults to 0.5. A 
                /// higher threshold will require louder audio to activate the model, and 
                /// thus might perform better in noisy environments.
                ///
                ///
                /// - Remark: Generated from `#/components/schemas/RealtimeSessionCreateRequest/turn_detection/threshold`.
                public var threshold: Swift.Double?
                /// Amount of audio to include before the VAD detected speech (in 
                /// milliseconds). Defaults to 300ms.
                ///
                ///
                /// - Remark: Generated from `#/components/schemas/RealtimeSessionCreateRequest/turn_detection/prefix_padding_ms`.
                public var prefixPaddingMs: Swift.Int?
                /// Duration of silence to detect speech stop (in milliseconds). Defaults 
                /// to 500ms. With shorter values the model will respond more quickly, 
                /// but may jump in on short pauses from the user.
                ///
                ///
                /// - Remark: Generated from `#/components/schemas/RealtimeSessionCreateRequest/turn_detection/silence_duration_ms`.
                public var silenceDurationMs: Swift.Int?
                /// Whether or not to automatically generate a response when VAD is
                /// enabled. `true` by default.
                ///
                ///
                /// - Remark: Generated from `#/components/schemas/RealtimeSessionCreateRequest/turn_detection/create_response`.
                public var createResponse: Swift.Bool?
                /// Creates a new `TurnDetectionPayload`.
                ///
                /// - Parameters:
                ///   - _type: Type of turn detection, only `server_vad` is currently supported.
                ///   - threshold: Activation threshold for VAD (0.0 to 1.0), this defaults to 0.5. A 
                ///   - prefixPaddingMs: Amount of audio to include before the VAD detected speech (in 
                ///   - silenceDurationMs: Duration of silence to detect speech stop (in milliseconds). Defaults 
                ///   - createResponse: Whether or not to automatically generate a response when VAD is
                public init(
                    _type: Swift.String? = nil,
                    threshold: Swift.Double? = nil,
                    prefixPaddingMs: Swift.Int? = nil,
                    silenceDurationMs: Swift.Int? = nil,
                    createResponse: Swift.Bool? = nil
                ) {
                    self._type = _type
                    self.threshold = threshold
                    self.prefixPaddingMs = prefixPaddingMs
                    self.silenceDurationMs = silenceDurationMs
                    self.createResponse = createResponse
                }
                public enum CodingKeys: String, CodingKey {
                    case _type = "type"
                    case threshold
                    case prefixPaddingMs = "prefix_padding_ms"
                    case silenceDurationMs = "silence_duration_ms"
                    case createResponse = "create_response"
                }
            }
            /// Configuration for turn detection. Can be set to `null` to turn off. Server 
            /// VAD means that the model will detect the start and end of speech based on 
            /// audio volume and respond at the end of user speech.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/RealtimeSessionCreateRequest/turn_detection`.
            public var turnDetection: Components.Schemas.RealtimeSessionCreateRequest.TurnDetectionPayload?
            /// - Remark: Generated from `#/components/schemas/RealtimeSessionCreateRequest/ToolsPayload`.
            public struct ToolsPayloadPayload: Codable, Hashable, Sendable {
                /// The type of the tool, i.e. `function`.
                ///
                /// - Remark: Generated from `#/components/schemas/RealtimeSessionCreateRequest/ToolsPayload/type`.
                @frozen public enum _TypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case function = "function"
                }
                /// The type of the tool, i.e. `function`.
                ///
                /// - Remark: Generated from `#/components/schemas/RealtimeSessionCreateRequest/ToolsPayload/type`.
                public var _type: Components.Schemas.RealtimeSessionCreateRequest.ToolsPayloadPayload._TypePayload?
                /// The name of the function.
                ///
                /// - Remark: Generated from `#/components/schemas/RealtimeSessionCreateRequest/ToolsPayload/name`.
                public var name: Swift.String?
                /// The description of the function, including guidance on when and how 
                /// to call it, and guidance about what to tell the user when calling 
                /// (if anything).
                ///
                ///
                /// - Remark: Generated from `#/components/schemas/RealtimeSessionCreateRequest/ToolsPayload/description`.
                public var description: Swift.String?
                /// Parameters of the function in JSON Schema.
                ///
                /// - Remark: Generated from `#/components/schemas/RealtimeSessionCreateRequest/ToolsPayload/parameters`.
                public var parameters: OpenAPIRuntime.OpenAPIObjectContainer?
                /// Creates a new `ToolsPayloadPayload`.
                ///
                /// - Parameters:
                ///   - _type: The type of the tool, i.e. `function`.
                ///   - name: The name of the function.
                ///   - description: The description of the function, including guidance on when and how 
                ///   - parameters: Parameters of the function in JSON Schema.
                public init(
                    _type: Components.Schemas.RealtimeSessionCreateRequest.ToolsPayloadPayload._TypePayload? = nil,
                    name: Swift.String? = nil,
                    description: Swift.String? = nil,
                    parameters: OpenAPIRuntime.OpenAPIObjectContainer? = nil
                ) {
                    self._type = _type
                    self.name = name
                    self.description = description
                    self.parameters = parameters
                }
                public enum CodingKeys: String, CodingKey {
                    case _type = "type"
                    case name
                    case description
                    case parameters
                }
            }
            /// Tools (functions) available to the model.
            ///
            /// - Remark: Generated from `#/components/schemas/RealtimeSessionCreateRequest/tools`.
            public typealias ToolsPayload = [Components.Schemas.RealtimeSessionCreateRequest.ToolsPayloadPayload]
            /// Tools (functions) available to the model.
            ///
            /// - Remark: Generated from `#/components/schemas/RealtimeSessionCreateRequest/tools`.
            public var tools: Components.Schemas.RealtimeSessionCreateRequest.ToolsPayload?
            /// How the model chooses tools. Options are `auto`, `none`, `required`, or 
            /// specify a function.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/RealtimeSessionCreateRequest/tool_choice`.
            public var toolChoice: Swift.String?
            /// Sampling temperature for the model, limited to [0.6, 1.2]. Defaults to 0.8.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/RealtimeSessionCreateRequest/temperature`.
            public var temperature: Swift.Double?
            /// Maximum number of output tokens for a single assistant response,
            /// inclusive of tool calls. Provide an integer between 1 and 4096 to
            /// limit output tokens, or `inf` for the maximum available tokens for a
            /// given model. Defaults to `inf`.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/RealtimeSessionCreateRequest/max_response_output_tokens`.
            @frozen public enum MaxResponseOutputTokensPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/RealtimeSessionCreateRequest/max_response_output_tokens/case1`.
                case case1(Swift.Int)
                /// - Remark: Generated from `#/components/schemas/RealtimeSessionCreateRequest/max_response_output_tokens/case2`.
                @frozen public enum Case2Payload: String, Codable, Hashable, Sendable, CaseIterable {
                    case inf = "inf"
                }
                /// - Remark: Generated from `#/components/schemas/RealtimeSessionCreateRequest/max_response_output_tokens/case2`.
                case case2(Components.Schemas.RealtimeSessionCreateRequest.MaxResponseOutputTokensPayload.Case2Payload)
                public init(from decoder: any Decoder) throws {
                    var errors: [any Error] = []
                    do {
                        self = .case1(try decoder.decodeFromSingleValueContainer())
                        return
                    } catch {
                        errors.append(error)
                    }
                    do {
                        self = .case2(try decoder.decodeFromSingleValueContainer())
                        return
                    } catch {
                        errors.append(error)
                    }
                    throw Swift.DecodingError.failedToDecodeOneOfSchema(
                        type: Self.self,
                        codingPath: decoder.codingPath,
                        errors: errors
                    )
                }
                public func encode(to encoder: any Encoder) throws {
                    switch self {
                    case let .case1(value):
                        try encoder.encodeToSingleValueContainer(value)
                    case let .case2(value):
                        try encoder.encodeToSingleValueContainer(value)
                    }
                }
            }
            /// Maximum number of output tokens for a single assistant response,
            /// inclusive of tool calls. Provide an integer between 1 and 4096 to
            /// limit output tokens, or `inf` for the maximum available tokens for a
            /// given model. Defaults to `inf`.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/RealtimeSessionCreateRequest/max_response_output_tokens`.
            public var maxResponseOutputTokens: Components.Schemas.RealtimeSessionCreateRequest.MaxResponseOutputTokensPayload?
            /// Creates a new `RealtimeSessionCreateRequest`.
            ///
            /// - Parameters:
            ///   - modalities: The set of modalities the model can respond with. To disable audio,
            ///   - model: The Realtime model used for this session.
            ///   - instructions: The default system instructions (i.e. system message) prepended to model 
            ///   - voice: The voice the model uses to respond. Voice cannot be changed during the 
            ///   - inputAudioFormat: The format of input audio. Options are `pcm16`, `g711_ulaw`, or `g711_alaw`.
            ///   - outputAudioFormat: The format of output audio. Options are `pcm16`, `g711_ulaw`, or `g711_alaw`.
            ///   - inputAudioTranscription: Configuration for input audio transcription, defaults to off and can be  set to `null` to turn off once on. Input audio transcription is not native to the model, since the model consumes audio directly. Transcription runs  asynchronously through [OpenAI Whisper transcription](https://platform.openai.com/docs/api-reference/audio/createTranscription) and should be treated as rough guidance rather than the representation understood by the model. The client can optionally set the language and prompt for transcription, these fields will be passed to the Whisper API.
            ///   - turnDetection: Configuration for turn detection. Can be set to `null` to turn off. Server 
            ///   - tools: Tools (functions) available to the model.
            ///   - toolChoice: How the model chooses tools. Options are `auto`, `none`, `required`, or 
            ///   - temperature: Sampling temperature for the model, limited to [0.6, 1.2]. Defaults to 0.8.
            ///   - maxResponseOutputTokens: Maximum number of output tokens for a single assistant response,
            public init(
                modalities: Components.Schemas.RealtimeSessionCreateRequest.ModalitiesPayload? = nil,
                model: Components.Schemas.RealtimeSessionCreateRequest.ModelPayload? = nil,
                instructions: Swift.String? = nil,
                voice: Components.Schemas.RealtimeSessionCreateRequest.VoicePayload? = nil,
                inputAudioFormat: Components.Schemas.RealtimeSessionCreateRequest.InputAudioFormatPayload? = nil,
                outputAudioFormat: Components.Schemas.RealtimeSessionCreateRequest.OutputAudioFormatPayload? = nil,
                inputAudioTranscription: Components.Schemas.RealtimeSessionCreateRequest.InputAudioTranscriptionPayload? = nil,
                turnDetection: Components.Schemas.RealtimeSessionCreateRequest.TurnDetectionPayload? = nil,
                tools: Components.Schemas.RealtimeSessionCreateRequest.ToolsPayload? = nil,
                toolChoice: Swift.String? = nil,
                temperature: Swift.Double? = nil,
                maxResponseOutputTokens: Components.Schemas.RealtimeSessionCreateRequest.MaxResponseOutputTokensPayload? = nil
            ) {
                self.modalities = modalities
                self.model = model
                self.instructions = instructions
                self.voice = voice
                self.inputAudioFormat = inputAudioFormat
                self.outputAudioFormat = outputAudioFormat
                self.inputAudioTranscription = inputAudioTranscription
                self.turnDetection = turnDetection
                self.tools = tools
                self.toolChoice = toolChoice
                self.temperature = temperature
                self.maxResponseOutputTokens = maxResponseOutputTokens
            }
            public enum CodingKeys: String, CodingKey {
                case modalities
                case model
                case instructions
                case voice
                case inputAudioFormat = "input_audio_format"
                case outputAudioFormat = "output_audio_format"
                case inputAudioTranscription = "input_audio_transcription"
                case turnDetection = "turn_detection"
                case tools
                case toolChoice = "tool_choice"
                case temperature
                case maxResponseOutputTokens = "max_response_output_tokens"
            }
        }
        /// A new Realtime session configuration, with an ephermeral key. Default TTL
        /// for keys is one minute.
        ///
        ///
        /// - Remark: Generated from `#/components/schemas/RealtimeSessionCreateResponse`.
        public struct RealtimeSessionCreateResponse: Codable, Hashable, Sendable {
            /// Ephemeral key returned by the API.
            ///
            /// - Remark: Generated from `#/components/schemas/RealtimeSessionCreateResponse/client_secret`.
            public struct ClientSecretPayload: Codable, Hashable, Sendable {
                /// Ephemeral key usable in client environments to authenticate connections
                /// to the Realtime API. Use this in client-side environments rather than
                /// a standard API token, which should only be used server-side.
                ///
                ///
                /// - Remark: Generated from `#/components/schemas/RealtimeSessionCreateResponse/client_secret/value`.
                public var value: Swift.String
                /// Timestamp for when the token expires. Currently, all tokens expire
                /// after one minute.
                ///
                ///
                /// - Remark: Generated from `#/components/schemas/RealtimeSessionCreateResponse/client_secret/expires_at`.
                public var expiresAt: Swift.Int
                /// Creates a new `ClientSecretPayload`.
                ///
                /// - Parameters:
                ///   - value: Ephemeral key usable in client environments to authenticate connections
                ///   - expiresAt: Timestamp for when the token expires. Currently, all tokens expire
                public init(
                    value: Swift.String,
                    expiresAt: Swift.Int
                ) {
                    self.value = value
                    self.expiresAt = expiresAt
                }
                public enum CodingKeys: String, CodingKey {
                    case value
                    case expiresAt = "expires_at"
                }
            }
            /// Ephemeral key returned by the API.
            ///
            /// - Remark: Generated from `#/components/schemas/RealtimeSessionCreateResponse/client_secret`.
            public var clientSecret: Components.Schemas.RealtimeSessionCreateResponse.ClientSecretPayload
            /// - Remark: Generated from `#/components/schemas/RealtimeSessionCreateResponse/ModalitiesPayload`.
            @frozen public enum ModalitiesPayloadPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case text = "text"
                case audio = "audio"
            }
            /// The set of modalities the model can respond with. To disable audio,
            /// set this to ["text"].
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/RealtimeSessionCreateResponse/modalities`.
            public typealias ModalitiesPayload = [Components.Schemas.RealtimeSessionCreateResponse.ModalitiesPayloadPayload]
            /// The set of modalities the model can respond with. To disable audio,
            /// set this to ["text"].
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/RealtimeSessionCreateResponse/modalities`.
            public var modalities: Components.Schemas.RealtimeSessionCreateResponse.ModalitiesPayload?
            /// The default system instructions (i.e. system message) prepended to model 
            /// calls. This field allows the client to guide the model on desired 
            /// responses. The model can be instructed on response content and format, 
            /// (e.g. "be extremely succinct", "act friendly", "here are examples of good 
            /// responses") and on audio behavior (e.g. "talk quickly", "inject emotion 
            /// into your voice", "laugh frequently"). The instructions are not guaranteed 
            /// to be followed by the model, but they provide guidance to the model on the 
            /// desired behavior.
            ///
            /// Note that the server sets default instructions which will be used if this 
            /// field is not set and are visible in the `session.created` event at the 
            /// start of the session.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/RealtimeSessionCreateResponse/instructions`.
            public var instructions: Swift.String?
            /// The voice the model uses to respond. Voice cannot be changed during the 
            /// session once the model has responded with audio at least once. Current 
            /// voice options are `alloy`, `ash`, `ballad`, `coral`, `echo` `sage`, 
            /// `shimmer` and `verse`.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/RealtimeSessionCreateResponse/voice`.
            @frozen public enum VoicePayload: String, Codable, Hashable, Sendable, CaseIterable {
                case alloy = "alloy"
                case ash = "ash"
                case ballad = "ballad"
                case coral = "coral"
                case echo = "echo"
                case sage = "sage"
                case shimmer = "shimmer"
                case verse = "verse"
            }
            /// The voice the model uses to respond. Voice cannot be changed during the 
            /// session once the model has responded with audio at least once. Current 
            /// voice options are `alloy`, `ash`, `ballad`, `coral`, `echo` `sage`, 
            /// `shimmer` and `verse`.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/RealtimeSessionCreateResponse/voice`.
            public var voice: Components.Schemas.RealtimeSessionCreateResponse.VoicePayload?
            /// The format of input audio. Options are `pcm16`, `g711_ulaw`, or `g711_alaw`.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/RealtimeSessionCreateResponse/input_audio_format`.
            public var inputAudioFormat: Swift.String?
            /// The format of output audio. Options are `pcm16`, `g711_ulaw`, or `g711_alaw`.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/RealtimeSessionCreateResponse/output_audio_format`.
            public var outputAudioFormat: Swift.String?
            /// Configuration for input audio transcription, defaults to off and can be 
            /// set to `null` to turn off once on. Input audio transcription is not native 
            /// to the model, since the model consumes audio directly. Transcription runs 
            /// asynchronously through Whisper and should be treated as rough guidance 
            /// rather than the representation understood by the model.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/RealtimeSessionCreateResponse/input_audio_transcription`.
            public struct InputAudioTranscriptionPayload: Codable, Hashable, Sendable {
                /// The model to use for transcription, `whisper-1` is the only currently 
                /// supported model.
                ///
                ///
                /// - Remark: Generated from `#/components/schemas/RealtimeSessionCreateResponse/input_audio_transcription/model`.
                public var model: Swift.String?
                /// Creates a new `InputAudioTranscriptionPayload`.
                ///
                /// - Parameters:
                ///   - model: The model to use for transcription, `whisper-1` is the only currently 
                public init(model: Swift.String? = nil) {
                    self.model = model
                }
                public enum CodingKeys: String, CodingKey {
                    case model
                }
            }
            /// Configuration for input audio transcription, defaults to off and can be 
            /// set to `null` to turn off once on. Input audio transcription is not native 
            /// to the model, since the model consumes audio directly. Transcription runs 
            /// asynchronously through Whisper and should be treated as rough guidance 
            /// rather than the representation understood by the model.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/RealtimeSessionCreateResponse/input_audio_transcription`.
            public var inputAudioTranscription: Components.Schemas.RealtimeSessionCreateResponse.InputAudioTranscriptionPayload?
            /// Configuration for turn detection. Can be set to `null` to turn off. Server 
            /// VAD means that the model will detect the start and end of speech based on 
            /// audio volume and respond at the end of user speech.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/RealtimeSessionCreateResponse/turn_detection`.
            public struct TurnDetectionPayload: Codable, Hashable, Sendable {
                /// Type of turn detection, only `server_vad` is currently supported.
                ///
                ///
                /// - Remark: Generated from `#/components/schemas/RealtimeSessionCreateResponse/turn_detection/type`.
                public var _type: Swift.String?
                /// Activation threshold for VAD (0.0 to 1.0), this defaults to 0.5. A 
                /// higher threshold will require louder audio to activate the model, and 
                /// thus might perform better in noisy environments.
                ///
                ///
                /// - Remark: Generated from `#/components/schemas/RealtimeSessionCreateResponse/turn_detection/threshold`.
                public var threshold: Swift.Double?
                /// Amount of audio to include before the VAD detected speech (in 
                /// milliseconds). Defaults to 300ms.
                ///
                ///
                /// - Remark: Generated from `#/components/schemas/RealtimeSessionCreateResponse/turn_detection/prefix_padding_ms`.
                public var prefixPaddingMs: Swift.Int?
                /// Duration of silence to detect speech stop (in milliseconds). Defaults 
                /// to 500ms. With shorter values the model will respond more quickly, 
                /// but may jump in on short pauses from the user.
                ///
                ///
                /// - Remark: Generated from `#/components/schemas/RealtimeSessionCreateResponse/turn_detection/silence_duration_ms`.
                public var silenceDurationMs: Swift.Int?
                /// Creates a new `TurnDetectionPayload`.
                ///
                /// - Parameters:
                ///   - _type: Type of turn detection, only `server_vad` is currently supported.
                ///   - threshold: Activation threshold for VAD (0.0 to 1.0), this defaults to 0.5. A 
                ///   - prefixPaddingMs: Amount of audio to include before the VAD detected speech (in 
                ///   - silenceDurationMs: Duration of silence to detect speech stop (in milliseconds). Defaults 
                public init(
                    _type: Swift.String? = nil,
                    threshold: Swift.Double? = nil,
                    prefixPaddingMs: Swift.Int? = nil,
                    silenceDurationMs: Swift.Int? = nil
                ) {
                    self._type = _type
                    self.threshold = threshold
                    self.prefixPaddingMs = prefixPaddingMs
                    self.silenceDurationMs = silenceDurationMs
                }
                public enum CodingKeys: String, CodingKey {
                    case _type = "type"
                    case threshold
                    case prefixPaddingMs = "prefix_padding_ms"
                    case silenceDurationMs = "silence_duration_ms"
                }
            }
            /// Configuration for turn detection. Can be set to `null` to turn off. Server 
            /// VAD means that the model will detect the start and end of speech based on 
            /// audio volume and respond at the end of user speech.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/RealtimeSessionCreateResponse/turn_detection`.
            public var turnDetection: Components.Schemas.RealtimeSessionCreateResponse.TurnDetectionPayload?
            /// - Remark: Generated from `#/components/schemas/RealtimeSessionCreateResponse/ToolsPayload`.
            public struct ToolsPayloadPayload: Codable, Hashable, Sendable {
                /// The type of the tool, i.e. `function`.
                ///
                /// - Remark: Generated from `#/components/schemas/RealtimeSessionCreateResponse/ToolsPayload/type`.
                @frozen public enum _TypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case function = "function"
                }
                /// The type of the tool, i.e. `function`.
                ///
                /// - Remark: Generated from `#/components/schemas/RealtimeSessionCreateResponse/ToolsPayload/type`.
                public var _type: Components.Schemas.RealtimeSessionCreateResponse.ToolsPayloadPayload._TypePayload?
                /// The name of the function.
                ///
                /// - Remark: Generated from `#/components/schemas/RealtimeSessionCreateResponse/ToolsPayload/name`.
                public var name: Swift.String?
                /// The description of the function, including guidance on when and how 
                /// to call it, and guidance about what to tell the user when calling 
                /// (if anything).
                ///
                ///
                /// - Remark: Generated from `#/components/schemas/RealtimeSessionCreateResponse/ToolsPayload/description`.
                public var description: Swift.String?
                /// Parameters of the function in JSON Schema.
                ///
                /// - Remark: Generated from `#/components/schemas/RealtimeSessionCreateResponse/ToolsPayload/parameters`.
                public var parameters: OpenAPIRuntime.OpenAPIObjectContainer?
                /// Creates a new `ToolsPayloadPayload`.
                ///
                /// - Parameters:
                ///   - _type: The type of the tool, i.e. `function`.
                ///   - name: The name of the function.
                ///   - description: The description of the function, including guidance on when and how 
                ///   - parameters: Parameters of the function in JSON Schema.
                public init(
                    _type: Components.Schemas.RealtimeSessionCreateResponse.ToolsPayloadPayload._TypePayload? = nil,
                    name: Swift.String? = nil,
                    description: Swift.String? = nil,
                    parameters: OpenAPIRuntime.OpenAPIObjectContainer? = nil
                ) {
                    self._type = _type
                    self.name = name
                    self.description = description
                    self.parameters = parameters
                }
                public enum CodingKeys: String, CodingKey {
                    case _type = "type"
                    case name
                    case description
                    case parameters
                }
            }
            /// Tools (functions) available to the model.
            ///
            /// - Remark: Generated from `#/components/schemas/RealtimeSessionCreateResponse/tools`.
            public typealias ToolsPayload = [Components.Schemas.RealtimeSessionCreateResponse.ToolsPayloadPayload]
            /// Tools (functions) available to the model.
            ///
            /// - Remark: Generated from `#/components/schemas/RealtimeSessionCreateResponse/tools`.
            public var tools: Components.Schemas.RealtimeSessionCreateResponse.ToolsPayload?
            /// How the model chooses tools. Options are `auto`, `none`, `required`, or 
            /// specify a function.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/RealtimeSessionCreateResponse/tool_choice`.
            public var toolChoice: Swift.String?
            /// Sampling temperature for the model, limited to [0.6, 1.2]. Defaults to 0.8.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/RealtimeSessionCreateResponse/temperature`.
            public var temperature: Swift.Double?
            /// Maximum number of output tokens for a single assistant response,
            /// inclusive of tool calls. Provide an integer between 1 and 4096 to
            /// limit output tokens, or `inf` for the maximum available tokens for a
            /// given model. Defaults to `inf`.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/RealtimeSessionCreateResponse/max_response_output_tokens`.
            @frozen public enum MaxResponseOutputTokensPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/RealtimeSessionCreateResponse/max_response_output_tokens/case1`.
                case case1(Swift.Int)
                /// - Remark: Generated from `#/components/schemas/RealtimeSessionCreateResponse/max_response_output_tokens/case2`.
                @frozen public enum Case2Payload: String, Codable, Hashable, Sendable, CaseIterable {
                    case inf = "inf"
                }
                /// - Remark: Generated from `#/components/schemas/RealtimeSessionCreateResponse/max_response_output_tokens/case2`.
                case case2(Components.Schemas.RealtimeSessionCreateResponse.MaxResponseOutputTokensPayload.Case2Payload)
                public init(from decoder: any Decoder) throws {
                    var errors: [any Error] = []
                    do {
                        self = .case1(try decoder.decodeFromSingleValueContainer())
                        return
                    } catch {
                        errors.append(error)
                    }
                    do {
                        self = .case2(try decoder.decodeFromSingleValueContainer())
                        return
                    } catch {
                        errors.append(error)
                    }
                    throw Swift.DecodingError.failedToDecodeOneOfSchema(
                        type: Self.self,
                        codingPath: decoder.codingPath,
                        errors: errors
                    )
                }
                public func encode(to encoder: any Encoder) throws {
                    switch self {
                    case let .case1(value):
                        try encoder.encodeToSingleValueContainer(value)
                    case let .case2(value):
                        try encoder.encodeToSingleValueContainer(value)
                    }
                }
            }
            /// Maximum number of output tokens for a single assistant response,
            /// inclusive of tool calls. Provide an integer between 1 and 4096 to
            /// limit output tokens, or `inf` for the maximum available tokens for a
            /// given model. Defaults to `inf`.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/RealtimeSessionCreateResponse/max_response_output_tokens`.
            public var maxResponseOutputTokens: Components.Schemas.RealtimeSessionCreateResponse.MaxResponseOutputTokensPayload?
            /// Creates a new `RealtimeSessionCreateResponse`.
            ///
            /// - Parameters:
            ///   - clientSecret: Ephemeral key returned by the API.
            ///   - modalities: The set of modalities the model can respond with. To disable audio,
            ///   - instructions: The default system instructions (i.e. system message) prepended to model 
            ///   - voice: The voice the model uses to respond. Voice cannot be changed during the 
            ///   - inputAudioFormat: The format of input audio. Options are `pcm16`, `g711_ulaw`, or `g711_alaw`.
            ///   - outputAudioFormat: The format of output audio. Options are `pcm16`, `g711_ulaw`, or `g711_alaw`.
            ///   - inputAudioTranscription: Configuration for input audio transcription, defaults to off and can be 
            ///   - turnDetection: Configuration for turn detection. Can be set to `null` to turn off. Server 
            ///   - tools: Tools (functions) available to the model.
            ///   - toolChoice: How the model chooses tools. Options are `auto`, `none`, `required`, or 
            ///   - temperature: Sampling temperature for the model, limited to [0.6, 1.2]. Defaults to 0.8.
            ///   - maxResponseOutputTokens: Maximum number of output tokens for a single assistant response,
            public init(
                clientSecret: Components.Schemas.RealtimeSessionCreateResponse.ClientSecretPayload,
                modalities: Components.Schemas.RealtimeSessionCreateResponse.ModalitiesPayload? = nil,
                instructions: Swift.String? = nil,
                voice: Components.Schemas.RealtimeSessionCreateResponse.VoicePayload? = nil,
                inputAudioFormat: Swift.String? = nil,
                outputAudioFormat: Swift.String? = nil,
                inputAudioTranscription: Components.Schemas.RealtimeSessionCreateResponse.InputAudioTranscriptionPayload? = nil,
                turnDetection: Components.Schemas.RealtimeSessionCreateResponse.TurnDetectionPayload? = nil,
                tools: Components.Schemas.RealtimeSessionCreateResponse.ToolsPayload? = nil,
                toolChoice: Swift.String? = nil,
                temperature: Swift.Double? = nil,
                maxResponseOutputTokens: Components.Schemas.RealtimeSessionCreateResponse.MaxResponseOutputTokensPayload? = nil
            ) {
                self.clientSecret = clientSecret
                self.modalities = modalities
                self.instructions = instructions
                self.voice = voice
                self.inputAudioFormat = inputAudioFormat
                self.outputAudioFormat = outputAudioFormat
                self.inputAudioTranscription = inputAudioTranscription
                self.turnDetection = turnDetection
                self.tools = tools
                self.toolChoice = toolChoice
                self.temperature = temperature
                self.maxResponseOutputTokens = maxResponseOutputTokens
            }
            public enum CodingKeys: String, CodingKey {
                case clientSecret = "client_secret"
                case modalities
                case instructions
                case voice
                case inputAudioFormat = "input_audio_format"
                case outputAudioFormat = "output_audio_format"
                case inputAudioTranscription = "input_audio_transcription"
                case turnDetection = "turn_detection"
                case tools
                case toolChoice = "tool_choice"
                case temperature
                case maxResponseOutputTokens = "max_response_output_tokens"
            }
        }
        /// - Remark: Generated from `#/components/schemas/ResponseFormatJsonObject`.
        public struct ResponseFormatJsonObject: Codable, Hashable, Sendable {
            /// The type of response format being defined: `json_object`
            ///
            /// - Remark: Generated from `#/components/schemas/ResponseFormatJsonObject/type`.
            @frozen public enum _TypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                case jsonObject = "json_object"
            }
            /// The type of response format being defined: `json_object`
            ///
            /// - Remark: Generated from `#/components/schemas/ResponseFormatJsonObject/type`.
            public var _type: Components.Schemas.ResponseFormatJsonObject._TypePayload
            /// Creates a new `ResponseFormatJsonObject`.
            ///
            /// - Parameters:
            ///   - _type: The type of response format being defined: `json_object`
            public init(_type: Components.Schemas.ResponseFormatJsonObject._TypePayload) {
                self._type = _type
            }
            public enum CodingKeys: String, CodingKey {
                case _type = "type"
            }
        }
        /// - Remark: Generated from `#/components/schemas/ResponseFormatJsonSchema`.
        public struct ResponseFormatJsonSchema: Codable, Hashable, Sendable {
            /// The type of response format being defined: `json_schema`
            ///
            /// - Remark: Generated from `#/components/schemas/ResponseFormatJsonSchema/type`.
            @frozen public enum _TypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                case jsonSchema = "json_schema"
            }
            /// The type of response format being defined: `json_schema`
            ///
            /// - Remark: Generated from `#/components/schemas/ResponseFormatJsonSchema/type`.
            public var _type: Components.Schemas.ResponseFormatJsonSchema._TypePayload
            /// - Remark: Generated from `#/components/schemas/ResponseFormatJsonSchema/json_schema`.
            public struct JsonSchemaPayload: Codable, Hashable, Sendable {
                /// A description of what the response format is for, used by the model to determine how to respond in the format.
                ///
                /// - Remark: Generated from `#/components/schemas/ResponseFormatJsonSchema/json_schema/description`.
                public var description: Swift.String?
                /// The name of the response format. Must be a-z, A-Z, 0-9, or contain underscores and dashes, with a maximum length of 64.
                ///
                /// - Remark: Generated from `#/components/schemas/ResponseFormatJsonSchema/json_schema/name`.
                public var name: Swift.String
                /// - Remark: Generated from `#/components/schemas/ResponseFormatJsonSchema/json_schema/schema`.
                public var schema: Components.Schemas.ResponseFormatJsonSchemaSchema?
                /// Whether to enable strict schema adherence when generating the output. If set to true, the model will always follow the exact schema defined in the `schema` field. Only a subset of JSON Schema is supported when `strict` is `true`. To learn more, read the [Structured Outputs guide](/docs/guides/structured-outputs).
                ///
                /// - Remark: Generated from `#/components/schemas/ResponseFormatJsonSchema/json_schema/strict`.
                public var strict: Swift.Bool?
                /// Creates a new `JsonSchemaPayload`.
                ///
                /// - Parameters:
                ///   - description: A description of what the response format is for, used by the model to determine how to respond in the format.
                ///   - name: The name of the response format. Must be a-z, A-Z, 0-9, or contain underscores and dashes, with a maximum length of 64.
                ///   - schema:
                ///   - strict: Whether to enable strict schema adherence when generating the output. If set to true, the model will always follow the exact schema defined in the `schema` field. Only a subset of JSON Schema is supported when `strict` is `true`. To learn more, read the [Structured Outputs guide](/docs/guides/structured-outputs).
                public init(
                    description: Swift.String? = nil,
                    name: Swift.String,
                    schema: Components.Schemas.ResponseFormatJsonSchemaSchema? = nil,
                    strict: Swift.Bool? = nil
                ) {
                    self.description = description
                    self.name = name
                    self.schema = schema
                    self.strict = strict
                }
                public enum CodingKeys: String, CodingKey {
                    case description
                    case name
                    case schema
                    case strict
                }
            }
            /// - Remark: Generated from `#/components/schemas/ResponseFormatJsonSchema/json_schema`.
            public var jsonSchema: Components.Schemas.ResponseFormatJsonSchema.JsonSchemaPayload
            /// Creates a new `ResponseFormatJsonSchema`.
            ///
            /// - Parameters:
            ///   - _type: The type of response format being defined: `json_schema`
            ///   - jsonSchema:
            public init(
                _type: Components.Schemas.ResponseFormatJsonSchema._TypePayload,
                jsonSchema: Components.Schemas.ResponseFormatJsonSchema.JsonSchemaPayload
            ) {
                self._type = _type
                self.jsonSchema = jsonSchema
            }
            public enum CodingKeys: String, CodingKey {
                case _type = "type"
                case jsonSchema = "json_schema"
            }
        }
        /// The schema for the response format, described as a JSON Schema object.
        ///
        /// - Remark: Generated from `#/components/schemas/ResponseFormatJsonSchemaSchema`.
        public struct ResponseFormatJsonSchemaSchema: Codable, Hashable, Sendable {
            /// A container of undocumented properties.
            public var additionalProperties: OpenAPIRuntime.OpenAPIObjectContainer
            /// Creates a new `ResponseFormatJsonSchemaSchema`.
            ///
            /// - Parameters:
            ///   - additionalProperties: A container of undocumented properties.
            public init(additionalProperties: OpenAPIRuntime.OpenAPIObjectContainer = .init()) {
                self.additionalProperties = additionalProperties
            }
            public init(from decoder: any Decoder) throws {
                additionalProperties = try decoder.decodeAdditionalProperties(knownKeys: [])
            }
            public func encode(to encoder: any Encoder) throws {
                try encoder.encodeAdditionalProperties(additionalProperties)
            }
        }
        /// - Remark: Generated from `#/components/schemas/ResponseFormatText`.
        public struct ResponseFormatText: Codable, Hashable, Sendable {
            /// The type of response format being defined: `text`
            ///
            /// - Remark: Generated from `#/components/schemas/ResponseFormatText/type`.
            @frozen public enum _TypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                case text = "text"
            }
            /// The type of response format being defined: `text`
            ///
            /// - Remark: Generated from `#/components/schemas/ResponseFormatText/type`.
            public var _type: Components.Schemas.ResponseFormatText._TypePayload
            /// Creates a new `ResponseFormatText`.
            ///
            /// - Parameters:
            ///   - _type: The type of response format being defined: `text`
            public init(_type: Components.Schemas.ResponseFormatText._TypePayload) {
                self._type = _type
            }
            public enum CodingKeys: String, CodingKey {
                case _type = "type"
            }
        }
        /// Usage statistics related to the run. This value will be `null` if the run is not in a terminal state (i.e. `in_progress`, `queued`, etc.).
        ///
        /// - Remark: Generated from `#/components/schemas/RunCompletionUsage`.
        public struct RunCompletionUsage: Codable, Hashable, Sendable {
            /// Number of completion tokens used over the course of the run.
            ///
            /// - Remark: Generated from `#/components/schemas/RunCompletionUsage/completion_tokens`.
            public var completionTokens: Swift.Int
            /// Number of prompt tokens used over the course of the run.
            ///
            /// - Remark: Generated from `#/components/schemas/RunCompletionUsage/prompt_tokens`.
            public var promptTokens: Swift.Int
            /// Total number of tokens used (prompt + completion).
            ///
            /// - Remark: Generated from `#/components/schemas/RunCompletionUsage/total_tokens`.
            public var totalTokens: Swift.Int
            /// Creates a new `RunCompletionUsage`.
            ///
            /// - Parameters:
            ///   - completionTokens: Number of completion tokens used over the course of the run.
            ///   - promptTokens: Number of prompt tokens used over the course of the run.
            ///   - totalTokens: Total number of tokens used (prompt + completion).
            public init(
                completionTokens: Swift.Int,
                promptTokens: Swift.Int,
                totalTokens: Swift.Int
            ) {
                self.completionTokens = completionTokens
                self.promptTokens = promptTokens
                self.totalTokens = totalTokens
            }
            public enum CodingKeys: String, CodingKey {
                case completionTokens = "completion_tokens"
                case promptTokens = "prompt_tokens"
                case totalTokens = "total_tokens"
            }
        }
        /// Represents an execution run on a [thread](/docs/api-reference/threads).
        ///
        /// - Remark: Generated from `#/components/schemas/RunObject`.
        public struct RunObject: Codable, Hashable, Sendable {
            /// The identifier, which can be referenced in API endpoints.
            ///
            /// - Remark: Generated from `#/components/schemas/RunObject/id`.
            public var id: Swift.String
            /// The object type, which is always `thread.run`.
            ///
            /// - Remark: Generated from `#/components/schemas/RunObject/object`.
            @frozen public enum ObjectPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case thread_run = "thread.run"
            }
            /// The object type, which is always `thread.run`.
            ///
            /// - Remark: Generated from `#/components/schemas/RunObject/object`.
            public var object: Components.Schemas.RunObject.ObjectPayload
            /// The Unix timestamp (in seconds) for when the run was created.
            ///
            /// - Remark: Generated from `#/components/schemas/RunObject/created_at`.
            public var createdAt: Swift.Int
            /// The ID of the [thread](/docs/api-reference/threads) that was executed on as a part of this run.
            ///
            /// - Remark: Generated from `#/components/schemas/RunObject/thread_id`.
            public var threadId: Swift.String
            /// The ID of the [assistant](/docs/api-reference/assistants) used for execution of this run.
            ///
            /// - Remark: Generated from `#/components/schemas/RunObject/assistant_id`.
            public var assistantId: Swift.String
            /// The status of the run, which can be either `queued`, `in_progress`, `requires_action`, `cancelling`, `cancelled`, `failed`, `completed`, `incomplete`, or `expired`.
            ///
            /// - Remark: Generated from `#/components/schemas/RunObject/status`.
            @frozen public enum StatusPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case queued = "queued"
                case inProgress = "in_progress"
                case requiresAction = "requires_action"
                case cancelling = "cancelling"
                case cancelled = "cancelled"
                case failed = "failed"
                case completed = "completed"
                case incomplete = "incomplete"
                case expired = "expired"
            }
            /// The status of the run, which can be either `queued`, `in_progress`, `requires_action`, `cancelling`, `cancelled`, `failed`, `completed`, `incomplete`, or `expired`.
            ///
            /// - Remark: Generated from `#/components/schemas/RunObject/status`.
            public var status: Components.Schemas.RunObject.StatusPayload
            /// Details on the action required to continue the run. Will be `null` if no action is required.
            ///
            /// - Remark: Generated from `#/components/schemas/RunObject/required_action`.
            public struct RequiredActionPayload: Codable, Hashable, Sendable {
                /// For now, this is always `submit_tool_outputs`.
                ///
                /// - Remark: Generated from `#/components/schemas/RunObject/required_action/type`.
                @frozen public enum _TypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case submitToolOutputs = "submit_tool_outputs"
                }
                /// For now, this is always `submit_tool_outputs`.
                ///
                /// - Remark: Generated from `#/components/schemas/RunObject/required_action/type`.
                public var _type: Components.Schemas.RunObject.RequiredActionPayload._TypePayload
                /// Details on the tool outputs needed for this run to continue.
                ///
                /// - Remark: Generated from `#/components/schemas/RunObject/required_action/submit_tool_outputs`.
                public struct SubmitToolOutputsPayload: Codable, Hashable, Sendable {
                    /// A list of the relevant tool calls.
                    ///
                    /// - Remark: Generated from `#/components/schemas/RunObject/required_action/submit_tool_outputs/tool_calls`.
                    public var toolCalls: [Components.Schemas.RunToolCallObject]
                    /// Creates a new `SubmitToolOutputsPayload`.
                    ///
                    /// - Parameters:
                    ///   - toolCalls: A list of the relevant tool calls.
                    public init(toolCalls: [Components.Schemas.RunToolCallObject]) {
                        self.toolCalls = toolCalls
                    }
                    public enum CodingKeys: String, CodingKey {
                        case toolCalls = "tool_calls"
                    }
                }
                /// Details on the tool outputs needed for this run to continue.
                ///
                /// - Remark: Generated from `#/components/schemas/RunObject/required_action/submit_tool_outputs`.
                public var submitToolOutputs: Components.Schemas.RunObject.RequiredActionPayload.SubmitToolOutputsPayload
                /// Creates a new `RequiredActionPayload`.
                ///
                /// - Parameters:
                ///   - _type: For now, this is always `submit_tool_outputs`.
                ///   - submitToolOutputs: Details on the tool outputs needed for this run to continue.
                public init(
                    _type: Components.Schemas.RunObject.RequiredActionPayload._TypePayload,
                    submitToolOutputs: Components.Schemas.RunObject.RequiredActionPayload.SubmitToolOutputsPayload
                ) {
                    self._type = _type
                    self.submitToolOutputs = submitToolOutputs
                }
                public enum CodingKeys: String, CodingKey {
                    case _type = "type"
                    case submitToolOutputs = "submit_tool_outputs"
                }
            }
            /// Details on the action required to continue the run. Will be `null` if no action is required.
            ///
            /// - Remark: Generated from `#/components/schemas/RunObject/required_action`.
            public var requiredAction: Components.Schemas.RunObject.RequiredActionPayload?
            /// The last error associated with this run. Will be `null` if there are no errors.
            ///
            /// - Remark: Generated from `#/components/schemas/RunObject/last_error`.
            public struct LastErrorPayload: Codable, Hashable, Sendable {
                /// One of `server_error`, `rate_limit_exceeded`, or `invalid_prompt`.
                ///
                /// - Remark: Generated from `#/components/schemas/RunObject/last_error/code`.
                @frozen public enum CodePayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case serverError = "server_error"
                    case rateLimitExceeded = "rate_limit_exceeded"
                    case invalidPrompt = "invalid_prompt"
                }
                /// One of `server_error`, `rate_limit_exceeded`, or `invalid_prompt`.
                ///
                /// - Remark: Generated from `#/components/schemas/RunObject/last_error/code`.
                public var code: Components.Schemas.RunObject.LastErrorPayload.CodePayload
                /// A human-readable description of the error.
                ///
                /// - Remark: Generated from `#/components/schemas/RunObject/last_error/message`.
                public var message: Swift.String
                /// Creates a new `LastErrorPayload`.
                ///
                /// - Parameters:
                ///   - code: One of `server_error`, `rate_limit_exceeded`, or `invalid_prompt`.
                ///   - message: A human-readable description of the error.
                public init(
                    code: Components.Schemas.RunObject.LastErrorPayload.CodePayload,
                    message: Swift.String
                ) {
                    self.code = code
                    self.message = message
                }
                public enum CodingKeys: String, CodingKey {
                    case code
                    case message
                }
            }
            /// The last error associated with this run. Will be `null` if there are no errors.
            ///
            /// - Remark: Generated from `#/components/schemas/RunObject/last_error`.
            public var lastError: Components.Schemas.RunObject.LastErrorPayload?
            /// The Unix timestamp (in seconds) for when the run will expire.
            ///
            /// - Remark: Generated from `#/components/schemas/RunObject/expires_at`.
            public var expiresAt: Swift.Int?
            /// The Unix timestamp (in seconds) for when the run was started.
            ///
            /// - Remark: Generated from `#/components/schemas/RunObject/started_at`.
            public var startedAt: Swift.Int?
            /// The Unix timestamp (in seconds) for when the run was cancelled.
            ///
            /// - Remark: Generated from `#/components/schemas/RunObject/cancelled_at`.
            public var cancelledAt: Swift.Int?
            /// The Unix timestamp (in seconds) for when the run failed.
            ///
            /// - Remark: Generated from `#/components/schemas/RunObject/failed_at`.
            public var failedAt: Swift.Int?
            /// The Unix timestamp (in seconds) for when the run was completed.
            ///
            /// - Remark: Generated from `#/components/schemas/RunObject/completed_at`.
            public var completedAt: Swift.Int?
            /// Details on why the run is incomplete. Will be `null` if the run is not incomplete.
            ///
            /// - Remark: Generated from `#/components/schemas/RunObject/incomplete_details`.
            public struct IncompleteDetailsPayload: Codable, Hashable, Sendable {
                /// The reason why the run is incomplete. This will point to which specific token limit was reached over the course of the run.
                ///
                /// - Remark: Generated from `#/components/schemas/RunObject/incomplete_details/reason`.
                @frozen public enum ReasonPayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case maxCompletionTokens = "max_completion_tokens"
                    case maxPromptTokens = "max_prompt_tokens"
                }
                /// The reason why the run is incomplete. This will point to which specific token limit was reached over the course of the run.
                ///
                /// - Remark: Generated from `#/components/schemas/RunObject/incomplete_details/reason`.
                public var reason: Components.Schemas.RunObject.IncompleteDetailsPayload.ReasonPayload?
                /// Creates a new `IncompleteDetailsPayload`.
                ///
                /// - Parameters:
                ///   - reason: The reason why the run is incomplete. This will point to which specific token limit was reached over the course of the run.
                public init(reason: Components.Schemas.RunObject.IncompleteDetailsPayload.ReasonPayload? = nil) {
                    self.reason = reason
                }
                public enum CodingKeys: String, CodingKey {
                    case reason
                }
            }
            /// Details on why the run is incomplete. Will be `null` if the run is not incomplete.
            ///
            /// - Remark: Generated from `#/components/schemas/RunObject/incomplete_details`.
            public var incompleteDetails: Components.Schemas.RunObject.IncompleteDetailsPayload?
            /// The model that the [assistant](/docs/api-reference/assistants) used for this run.
            ///
            /// - Remark: Generated from `#/components/schemas/RunObject/model`.
            public var model: Swift.String
            /// The instructions that the [assistant](/docs/api-reference/assistants) used for this run.
            ///
            /// - Remark: Generated from `#/components/schemas/RunObject/instructions`.
            public var instructions: Swift.String
            /// - Remark: Generated from `#/components/schemas/RunObject/ToolsPayload`.
            @frozen public enum ToolsPayloadPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/RunObject/ToolsPayload/case1`.
                case AssistantToolsCode(Components.Schemas.AssistantToolsCode)
                /// - Remark: Generated from `#/components/schemas/RunObject/ToolsPayload/case2`.
                case AssistantToolsFileSearch(Components.Schemas.AssistantToolsFileSearch)
                /// - Remark: Generated from `#/components/schemas/RunObject/ToolsPayload/case3`.
                case AssistantToolsFunction(Components.Schemas.AssistantToolsFunction)
                public init(from decoder: any Decoder) throws {
                    var errors: [any Error] = []
                    do {
                        self = .AssistantToolsCode(try .init(from: decoder))
                        return
                    } catch {
                        errors.append(error)
                    }
                    do {
                        self = .AssistantToolsFileSearch(try .init(from: decoder))
                        return
                    } catch {
                        errors.append(error)
                    }
                    do {
                        self = .AssistantToolsFunction(try .init(from: decoder))
                        return
                    } catch {
                        errors.append(error)
                    }
                    throw Swift.DecodingError.failedToDecodeOneOfSchema(
                        type: Self.self,
                        codingPath: decoder.codingPath,
                        errors: errors
                    )
                }
                public func encode(to encoder: any Encoder) throws {
                    switch self {
                    case let .AssistantToolsCode(value):
                        try value.encode(to: encoder)
                    case let .AssistantToolsFileSearch(value):
                        try value.encode(to: encoder)
                    case let .AssistantToolsFunction(value):
                        try value.encode(to: encoder)
                    }
                }
            }
            /// The list of tools that the [assistant](/docs/api-reference/assistants) used for this run.
            ///
            /// - Remark: Generated from `#/components/schemas/RunObject/tools`.
            public typealias ToolsPayload = [Components.Schemas.RunObject.ToolsPayloadPayload]
            /// The list of tools that the [assistant](/docs/api-reference/assistants) used for this run.
            ///
            /// - Remark: Generated from `#/components/schemas/RunObject/tools`.
            public var tools: Components.Schemas.RunObject.ToolsPayload
            /// - Remark: Generated from `#/components/schemas/RunObject/metadata`.
            public var metadata: Components.Schemas.Metadata?
            /// - Remark: Generated from `#/components/schemas/RunObject/usage`.
            public var usage: Components.Schemas.RunCompletionUsage?
            /// The sampling temperature used for this run. If not set, defaults to 1.
            ///
            /// - Remark: Generated from `#/components/schemas/RunObject/temperature`.
            public var temperature: Swift.Double?
            /// The nucleus sampling value used for this run. If not set, defaults to 1.
            ///
            /// - Remark: Generated from `#/components/schemas/RunObject/top_p`.
            public var topP: Swift.Double?
            /// The maximum number of prompt tokens specified to have been used over the course of the run.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/RunObject/max_prompt_tokens`.
            public var maxPromptTokens: Swift.Int?
            /// The maximum number of completion tokens specified to have been used over the course of the run.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/RunObject/max_completion_tokens`.
            public var maxCompletionTokens: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/RunObject/truncation_strategy`.
            public struct TruncationStrategyPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/RunObject/truncation_strategy/value1`.
                public var value1: Components.Schemas.TruncationObject
                /// - Remark: Generated from `#/components/schemas/RunObject/truncation_strategy/value2`.
                public var value2: OpenAPIRuntime.OpenAPIValueContainer
                /// Creates a new `TruncationStrategyPayload`.
                ///
                /// - Parameters:
                ///   - value1:
                ///   - value2:
                public init(
                    value1: Components.Schemas.TruncationObject,
                    value2: OpenAPIRuntime.OpenAPIValueContainer
                ) {
                    self.value1 = value1
                    self.value2 = value2
                }
                public init(from decoder: any Decoder) throws {
                    self.value1 = try .init(from: decoder)
                    self.value2 = try .init(from: decoder)
                }
                public func encode(to encoder: any Encoder) throws {
                    try self.value1.encode(to: encoder)
                    try self.value2.encode(to: encoder)
                }
            }
            /// - Remark: Generated from `#/components/schemas/RunObject/truncation_strategy`.
            public var truncationStrategy: Components.Schemas.RunObject.TruncationStrategyPayload?
            /// - Remark: Generated from `#/components/schemas/RunObject/tool_choice`.
            public struct ToolChoicePayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/RunObject/tool_choice/value1`.
                public var value1: Components.Schemas.AssistantsApiToolChoiceOption
                /// - Remark: Generated from `#/components/schemas/RunObject/tool_choice/value2`.
                public var value2: OpenAPIRuntime.OpenAPIValueContainer
                /// Creates a new `ToolChoicePayload`.
                ///
                /// - Parameters:
                ///   - value1:
                ///   - value2:
                public init(
                    value1: Components.Schemas.AssistantsApiToolChoiceOption,
                    value2: OpenAPIRuntime.OpenAPIValueContainer
                ) {
                    self.value1 = value1
                    self.value2 = value2
                }
                public init(from decoder: any Decoder) throws {
                    self.value1 = try .init(from: decoder)
                    self.value2 = try .init(from: decoder)
                }
                public func encode(to encoder: any Encoder) throws {
                    try self.value1.encode(to: encoder)
                    try self.value2.encode(to: encoder)
                }
            }
            /// - Remark: Generated from `#/components/schemas/RunObject/tool_choice`.
            public var toolChoice: Components.Schemas.RunObject.ToolChoicePayload?
            /// - Remark: Generated from `#/components/schemas/RunObject/parallel_tool_calls`.
            public var parallelToolCalls: Components.Schemas.ParallelToolCalls
            /// - Remark: Generated from `#/components/schemas/RunObject/response_format`.
            public struct ResponseFormatPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/RunObject/response_format/value1`.
                public var value1: Components.Schemas.AssistantsApiResponseFormatOption
                /// - Remark: Generated from `#/components/schemas/RunObject/response_format/value2`.
                public var value2: OpenAPIRuntime.OpenAPIValueContainer
                /// Creates a new `ResponseFormatPayload`.
                ///
                /// - Parameters:
                ///   - value1:
                ///   - value2:
                public init(
                    value1: Components.Schemas.AssistantsApiResponseFormatOption,
                    value2: OpenAPIRuntime.OpenAPIValueContainer
                ) {
                    self.value1 = value1
                    self.value2 = value2
                }
                public init(from decoder: any Decoder) throws {
                    self.value1 = try .init(from: decoder)
                    self.value2 = try .init(from: decoder)
                }
                public func encode(to encoder: any Encoder) throws {
                    try self.value1.encode(to: encoder)
                    try self.value2.encode(to: encoder)
                }
            }
            /// - Remark: Generated from `#/components/schemas/RunObject/response_format`.
            public var responseFormat: Components.Schemas.RunObject.ResponseFormatPayload?
            /// Creates a new `RunObject`.
            ///
            /// - Parameters:
            ///   - id: The identifier, which can be referenced in API endpoints.
            ///   - object: The object type, which is always `thread.run`.
            ///   - createdAt: The Unix timestamp (in seconds) for when the run was created.
            ///   - threadId: The ID of the [thread](/docs/api-reference/threads) that was executed on as a part of this run.
            ///   - assistantId: The ID of the [assistant](/docs/api-reference/assistants) used for execution of this run.
            ///   - status: The status of the run, which can be either `queued`, `in_progress`, `requires_action`, `cancelling`, `cancelled`, `failed`, `completed`, `incomplete`, or `expired`.
            ///   - requiredAction: Details on the action required to continue the run. Will be `null` if no action is required.
            ///   - lastError: The last error associated with this run. Will be `null` if there are no errors.
            ///   - expiresAt: The Unix timestamp (in seconds) for when the run will expire.
            ///   - startedAt: The Unix timestamp (in seconds) for when the run was started.
            ///   - cancelledAt: The Unix timestamp (in seconds) for when the run was cancelled.
            ///   - failedAt: The Unix timestamp (in seconds) for when the run failed.
            ///   - completedAt: The Unix timestamp (in seconds) for when the run was completed.
            ///   - incompleteDetails: Details on why the run is incomplete. Will be `null` if the run is not incomplete.
            ///   - model: The model that the [assistant](/docs/api-reference/assistants) used for this run.
            ///   - instructions: The instructions that the [assistant](/docs/api-reference/assistants) used for this run.
            ///   - tools: The list of tools that the [assistant](/docs/api-reference/assistants) used for this run.
            ///   - metadata:
            ///   - usage:
            ///   - temperature: The sampling temperature used for this run. If not set, defaults to 1.
            ///   - topP: The nucleus sampling value used for this run. If not set, defaults to 1.
            ///   - maxPromptTokens: The maximum number of prompt tokens specified to have been used over the course of the run.
            ///   - maxCompletionTokens: The maximum number of completion tokens specified to have been used over the course of the run.
            ///   - truncationStrategy:
            ///   - toolChoice:
            ///   - parallelToolCalls:
            ///   - responseFormat:
            public init(
                id: Swift.String,
                object: Components.Schemas.RunObject.ObjectPayload,
                createdAt: Swift.Int,
                threadId: Swift.String,
                assistantId: Swift.String,
                status: Components.Schemas.RunObject.StatusPayload,
                requiredAction: Components.Schemas.RunObject.RequiredActionPayload? = nil,
                lastError: Components.Schemas.RunObject.LastErrorPayload? = nil,
                expiresAt: Swift.Int? = nil,
                startedAt: Swift.Int? = nil,
                cancelledAt: Swift.Int? = nil,
                failedAt: Swift.Int? = nil,
                completedAt: Swift.Int? = nil,
                incompleteDetails: Components.Schemas.RunObject.IncompleteDetailsPayload? = nil,
                model: Swift.String,
                instructions: Swift.String,
                tools: Components.Schemas.RunObject.ToolsPayload,
                metadata: Components.Schemas.Metadata? = nil,
                usage: Components.Schemas.RunCompletionUsage? = nil,
                temperature: Swift.Double? = nil,
                topP: Swift.Double? = nil,
                maxPromptTokens: Swift.Int? = nil,
                maxCompletionTokens: Swift.Int? = nil,
                truncationStrategy: Components.Schemas.RunObject.TruncationStrategyPayload? = nil,
                toolChoice: Components.Schemas.RunObject.ToolChoicePayload? = nil,
                parallelToolCalls: Components.Schemas.ParallelToolCalls,
                responseFormat: Components.Schemas.RunObject.ResponseFormatPayload? = nil
            ) {
                self.id = id
                self.object = object
                self.createdAt = createdAt
                self.threadId = threadId
                self.assistantId = assistantId
                self.status = status
                self.requiredAction = requiredAction
                self.lastError = lastError
                self.expiresAt = expiresAt
                self.startedAt = startedAt
                self.cancelledAt = cancelledAt
                self.failedAt = failedAt
                self.completedAt = completedAt
                self.incompleteDetails = incompleteDetails
                self.model = model
                self.instructions = instructions
                self.tools = tools
                self.metadata = metadata
                self.usage = usage
                self.temperature = temperature
                self.topP = topP
                self.maxPromptTokens = maxPromptTokens
                self.maxCompletionTokens = maxCompletionTokens
                self.truncationStrategy = truncationStrategy
                self.toolChoice = toolChoice
                self.parallelToolCalls = parallelToolCalls
                self.responseFormat = responseFormat
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case object
                case createdAt = "created_at"
                case threadId = "thread_id"
                case assistantId = "assistant_id"
                case status
                case requiredAction = "required_action"
                case lastError = "last_error"
                case expiresAt = "expires_at"
                case startedAt = "started_at"
                case cancelledAt = "cancelled_at"
                case failedAt = "failed_at"
                case completedAt = "completed_at"
                case incompleteDetails = "incomplete_details"
                case model
                case instructions
                case tools
                case metadata
                case usage
                case temperature
                case topP = "top_p"
                case maxPromptTokens = "max_prompt_tokens"
                case maxCompletionTokens = "max_completion_tokens"
                case truncationStrategy = "truncation_strategy"
                case toolChoice = "tool_choice"
                case parallelToolCalls = "parallel_tool_calls"
                case responseFormat = "response_format"
            }
        }
        /// Usage statistics related to the run step. This value will be `null` while the run step's status is `in_progress`.
        ///
        /// - Remark: Generated from `#/components/schemas/RunStepCompletionUsage`.
        public struct RunStepCompletionUsage: Codable, Hashable, Sendable {
            /// Number of completion tokens used over the course of the run step.
            ///
            /// - Remark: Generated from `#/components/schemas/RunStepCompletionUsage/completion_tokens`.
            public var completionTokens: Swift.Int
            /// Number of prompt tokens used over the course of the run step.
            ///
            /// - Remark: Generated from `#/components/schemas/RunStepCompletionUsage/prompt_tokens`.
            public var promptTokens: Swift.Int
            /// Total number of tokens used (prompt + completion).
            ///
            /// - Remark: Generated from `#/components/schemas/RunStepCompletionUsage/total_tokens`.
            public var totalTokens: Swift.Int
            /// Creates a new `RunStepCompletionUsage`.
            ///
            /// - Parameters:
            ///   - completionTokens: Number of completion tokens used over the course of the run step.
            ///   - promptTokens: Number of prompt tokens used over the course of the run step.
            ///   - totalTokens: Total number of tokens used (prompt + completion).
            public init(
                completionTokens: Swift.Int,
                promptTokens: Swift.Int,
                totalTokens: Swift.Int
            ) {
                self.completionTokens = completionTokens
                self.promptTokens = promptTokens
                self.totalTokens = totalTokens
            }
            public enum CodingKeys: String, CodingKey {
                case completionTokens = "completion_tokens"
                case promptTokens = "prompt_tokens"
                case totalTokens = "total_tokens"
            }
        }
        /// Represents a run step delta i.e. any changed fields on a run step during streaming.
        ///
        ///
        /// - Remark: Generated from `#/components/schemas/RunStepDeltaObject`.
        public struct RunStepDeltaObject: Codable, Hashable, Sendable {
            /// The identifier of the run step, which can be referenced in API endpoints.
            ///
            /// - Remark: Generated from `#/components/schemas/RunStepDeltaObject/id`.
            public var id: Swift.String
            /// The object type, which is always `thread.run.step.delta`.
            ///
            /// - Remark: Generated from `#/components/schemas/RunStepDeltaObject/object`.
            @frozen public enum ObjectPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case thread_run_step_delta = "thread.run.step.delta"
            }
            /// The object type, which is always `thread.run.step.delta`.
            ///
            /// - Remark: Generated from `#/components/schemas/RunStepDeltaObject/object`.
            public var object: Components.Schemas.RunStepDeltaObject.ObjectPayload
            /// The delta containing the fields that have changed on the run step.
            ///
            /// - Remark: Generated from `#/components/schemas/RunStepDeltaObject/delta`.
            public struct DeltaPayload: Codable, Hashable, Sendable {
                /// The details of the run step.
                ///
                /// - Remark: Generated from `#/components/schemas/RunStepDeltaObject/delta/step_details`.
                @frozen public enum StepDetailsPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/RunStepDeltaObject/delta/step_details/case1`.
                    case RunStepDeltaStepDetailsMessageCreationObject(Components.Schemas.RunStepDeltaStepDetailsMessageCreationObject)
                    /// - Remark: Generated from `#/components/schemas/RunStepDeltaObject/delta/step_details/case2`.
                    case RunStepDeltaStepDetailsToolCallsObject(Components.Schemas.RunStepDeltaStepDetailsToolCallsObject)
                    public init(from decoder: any Decoder) throws {
                        var errors: [any Error] = []
                        do {
                            self = .RunStepDeltaStepDetailsMessageCreationObject(try .init(from: decoder))
                            return
                        } catch {
                            errors.append(error)
                        }
                        do {
                            self = .RunStepDeltaStepDetailsToolCallsObject(try .init(from: decoder))
                            return
                        } catch {
                            errors.append(error)
                        }
                        throw Swift.DecodingError.failedToDecodeOneOfSchema(
                            type: Self.self,
                            codingPath: decoder.codingPath,
                            errors: errors
                        )
                    }
                    public func encode(to encoder: any Encoder) throws {
                        switch self {
                        case let .RunStepDeltaStepDetailsMessageCreationObject(value):
                            try value.encode(to: encoder)
                        case let .RunStepDeltaStepDetailsToolCallsObject(value):
                            try value.encode(to: encoder)
                        }
                    }
                }
                /// The details of the run step.
                ///
                /// - Remark: Generated from `#/components/schemas/RunStepDeltaObject/delta/step_details`.
                public var stepDetails: Components.Schemas.RunStepDeltaObject.DeltaPayload.StepDetailsPayload?
                /// Creates a new `DeltaPayload`.
                ///
                /// - Parameters:
                ///   - stepDetails: The details of the run step.
                public init(stepDetails: Components.Schemas.RunStepDeltaObject.DeltaPayload.StepDetailsPayload? = nil) {
                    self.stepDetails = stepDetails
                }
                public enum CodingKeys: String, CodingKey {
                    case stepDetails = "step_details"
                }
            }
            /// The delta containing the fields that have changed on the run step.
            ///
            /// - Remark: Generated from `#/components/schemas/RunStepDeltaObject/delta`.
            public var delta: Components.Schemas.RunStepDeltaObject.DeltaPayload
            /// Creates a new `RunStepDeltaObject`.
            ///
            /// - Parameters:
            ///   - id: The identifier of the run step, which can be referenced in API endpoints.
            ///   - object: The object type, which is always `thread.run.step.delta`.
            ///   - delta: The delta containing the fields that have changed on the run step.
            public init(
                id: Swift.String,
                object: Components.Schemas.RunStepDeltaObject.ObjectPayload,
                delta: Components.Schemas.RunStepDeltaObject.DeltaPayload
            ) {
                self.id = id
                self.object = object
                self.delta = delta
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case object
                case delta
            }
        }
        /// Details of the message creation by the run step.
        ///
        /// - Remark: Generated from `#/components/schemas/RunStepDeltaStepDetailsMessageCreationObject`.
        public struct RunStepDeltaStepDetailsMessageCreationObject: Codable, Hashable, Sendable {
            /// Always `message_creation`.
            ///
            /// - Remark: Generated from `#/components/schemas/RunStepDeltaStepDetailsMessageCreationObject/type`.
            @frozen public enum _TypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                case messageCreation = "message_creation"
            }
            /// Always `message_creation`.
            ///
            /// - Remark: Generated from `#/components/schemas/RunStepDeltaStepDetailsMessageCreationObject/type`.
            public var _type: Components.Schemas.RunStepDeltaStepDetailsMessageCreationObject._TypePayload
            /// - Remark: Generated from `#/components/schemas/RunStepDeltaStepDetailsMessageCreationObject/message_creation`.
            public struct MessageCreationPayload: Codable, Hashable, Sendable {
                /// The ID of the message that was created by this run step.
                ///
                /// - Remark: Generated from `#/components/schemas/RunStepDeltaStepDetailsMessageCreationObject/message_creation/message_id`.
                public var messageId: Swift.String?
                /// Creates a new `MessageCreationPayload`.
                ///
                /// - Parameters:
                ///   - messageId: The ID of the message that was created by this run step.
                public init(messageId: Swift.String? = nil) {
                    self.messageId = messageId
                }
                public enum CodingKeys: String, CodingKey {
                    case messageId = "message_id"
                }
            }
            /// - Remark: Generated from `#/components/schemas/RunStepDeltaStepDetailsMessageCreationObject/message_creation`.
            public var messageCreation: Components.Schemas.RunStepDeltaStepDetailsMessageCreationObject.MessageCreationPayload?
            /// Creates a new `RunStepDeltaStepDetailsMessageCreationObject`.
            ///
            /// - Parameters:
            ///   - _type: Always `message_creation`.
            ///   - messageCreation:
            public init(
                _type: Components.Schemas.RunStepDeltaStepDetailsMessageCreationObject._TypePayload,
                messageCreation: Components.Schemas.RunStepDeltaStepDetailsMessageCreationObject.MessageCreationPayload? = nil
            ) {
                self._type = _type
                self.messageCreation = messageCreation
            }
            public enum CodingKeys: String, CodingKey {
                case _type = "type"
                case messageCreation = "message_creation"
            }
        }
        /// Details of the Code Interpreter tool call the run step was involved in.
        ///
        /// - Remark: Generated from `#/components/schemas/RunStepDeltaStepDetailsToolCallsCodeObject`.
        public struct RunStepDeltaStepDetailsToolCallsCodeObject: Codable, Hashable, Sendable {
            /// The index of the tool call in the tool calls array.
            ///
            /// - Remark: Generated from `#/components/schemas/RunStepDeltaStepDetailsToolCallsCodeObject/index`.
            public var index: Swift.Int
            /// The ID of the tool call.
            ///
            /// - Remark: Generated from `#/components/schemas/RunStepDeltaStepDetailsToolCallsCodeObject/id`.
            public var id: Swift.String?
            /// The type of tool call. This is always going to be `code_interpreter` for this type of tool call.
            ///
            /// - Remark: Generated from `#/components/schemas/RunStepDeltaStepDetailsToolCallsCodeObject/type`.
            @frozen public enum _TypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                case codeInterpreter = "code_interpreter"
            }
            /// The type of tool call. This is always going to be `code_interpreter` for this type of tool call.
            ///
            /// - Remark: Generated from `#/components/schemas/RunStepDeltaStepDetailsToolCallsCodeObject/type`.
            public var _type: Components.Schemas.RunStepDeltaStepDetailsToolCallsCodeObject._TypePayload
            /// The Code Interpreter tool call definition.
            ///
            /// - Remark: Generated from `#/components/schemas/RunStepDeltaStepDetailsToolCallsCodeObject/code_interpreter`.
            public struct CodeInterpreterPayload: Codable, Hashable, Sendable {
                /// The input to the Code Interpreter tool call.
                ///
                /// - Remark: Generated from `#/components/schemas/RunStepDeltaStepDetailsToolCallsCodeObject/code_interpreter/input`.
                public var input: Swift.String?
                /// - Remark: Generated from `#/components/schemas/RunStepDeltaStepDetailsToolCallsCodeObject/code_interpreter/OutputsPayload`.
                @frozen public enum OutputsPayloadPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/RunStepDeltaStepDetailsToolCallsCodeObject/code_interpreter/OutputsPayload/case1`.
                    case RunStepDeltaStepDetailsToolCallsCodeOutputLogsObject(Components.Schemas.RunStepDeltaStepDetailsToolCallsCodeOutputLogsObject)
                    /// - Remark: Generated from `#/components/schemas/RunStepDeltaStepDetailsToolCallsCodeObject/code_interpreter/OutputsPayload/case2`.
                    case RunStepDeltaStepDetailsToolCallsCodeOutputImageObject(Components.Schemas.RunStepDeltaStepDetailsToolCallsCodeOutputImageObject)
                    public init(from decoder: any Decoder) throws {
                        var errors: [any Error] = []
                        do {
                            self = .RunStepDeltaStepDetailsToolCallsCodeOutputLogsObject(try .init(from: decoder))
                            return
                        } catch {
                            errors.append(error)
                        }
                        do {
                            self = .RunStepDeltaStepDetailsToolCallsCodeOutputImageObject(try .init(from: decoder))
                            return
                        } catch {
                            errors.append(error)
                        }
                        throw Swift.DecodingError.failedToDecodeOneOfSchema(
                            type: Self.self,
                            codingPath: decoder.codingPath,
                            errors: errors
                        )
                    }
                    public func encode(to encoder: any Encoder) throws {
                        switch self {
                        case let .RunStepDeltaStepDetailsToolCallsCodeOutputLogsObject(value):
                            try value.encode(to: encoder)
                        case let .RunStepDeltaStepDetailsToolCallsCodeOutputImageObject(value):
                            try value.encode(to: encoder)
                        }
                    }
                }
                /// The outputs from the Code Interpreter tool call. Code Interpreter can output one or more items, including text (`logs`) or images (`image`). Each of these are represented by a different object type.
                ///
                /// - Remark: Generated from `#/components/schemas/RunStepDeltaStepDetailsToolCallsCodeObject/code_interpreter/outputs`.
                public typealias OutputsPayload = [Components.Schemas.RunStepDeltaStepDetailsToolCallsCodeObject.CodeInterpreterPayload.OutputsPayloadPayload]
                /// The outputs from the Code Interpreter tool call. Code Interpreter can output one or more items, including text (`logs`) or images (`image`). Each of these are represented by a different object type.
                ///
                /// - Remark: Generated from `#/components/schemas/RunStepDeltaStepDetailsToolCallsCodeObject/code_interpreter/outputs`.
                public var outputs: Components.Schemas.RunStepDeltaStepDetailsToolCallsCodeObject.CodeInterpreterPayload.OutputsPayload?
                /// Creates a new `CodeInterpreterPayload`.
                ///
                /// - Parameters:
                ///   - input: The input to the Code Interpreter tool call.
                ///   - outputs: The outputs from the Code Interpreter tool call. Code Interpreter can output one or more items, including text (`logs`) or images (`image`). Each of these are represented by a different object type.
                public init(
                    input: Swift.String? = nil,
                    outputs: Components.Schemas.RunStepDeltaStepDetailsToolCallsCodeObject.CodeInterpreterPayload.OutputsPayload? = nil
                ) {
                    self.input = input
                    self.outputs = outputs
                }
                public enum CodingKeys: String, CodingKey {
                    case input
                    case outputs
                }
            }
            /// The Code Interpreter tool call definition.
            ///
            /// - Remark: Generated from `#/components/schemas/RunStepDeltaStepDetailsToolCallsCodeObject/code_interpreter`.
            public var codeInterpreter: Components.Schemas.RunStepDeltaStepDetailsToolCallsCodeObject.CodeInterpreterPayload?
            /// Creates a new `RunStepDeltaStepDetailsToolCallsCodeObject`.
            ///
            /// - Parameters:
            ///   - index: The index of the tool call in the tool calls array.
            ///   - id: The ID of the tool call.
            ///   - _type: The type of tool call. This is always going to be `code_interpreter` for this type of tool call.
            ///   - codeInterpreter: The Code Interpreter tool call definition.
            public init(
                index: Swift.Int,
                id: Swift.String? = nil,
                _type: Components.Schemas.RunStepDeltaStepDetailsToolCallsCodeObject._TypePayload,
                codeInterpreter: Components.Schemas.RunStepDeltaStepDetailsToolCallsCodeObject.CodeInterpreterPayload? = nil
            ) {
                self.index = index
                self.id = id
                self._type = _type
                self.codeInterpreter = codeInterpreter
            }
            public enum CodingKeys: String, CodingKey {
                case index
                case id
                case _type = "type"
                case codeInterpreter = "code_interpreter"
            }
        }
        /// - Remark: Generated from `#/components/schemas/RunStepDeltaStepDetailsToolCallsCodeOutputImageObject`.
        public struct RunStepDeltaStepDetailsToolCallsCodeOutputImageObject: Codable, Hashable, Sendable {
            /// The index of the output in the outputs array.
            ///
            /// - Remark: Generated from `#/components/schemas/RunStepDeltaStepDetailsToolCallsCodeOutputImageObject/index`.
            public var index: Swift.Int
            /// Always `image`.
            ///
            /// - Remark: Generated from `#/components/schemas/RunStepDeltaStepDetailsToolCallsCodeOutputImageObject/type`.
            @frozen public enum _TypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                case image = "image"
            }
            /// Always `image`.
            ///
            /// - Remark: Generated from `#/components/schemas/RunStepDeltaStepDetailsToolCallsCodeOutputImageObject/type`.
            public var _type: Components.Schemas.RunStepDeltaStepDetailsToolCallsCodeOutputImageObject._TypePayload
            /// - Remark: Generated from `#/components/schemas/RunStepDeltaStepDetailsToolCallsCodeOutputImageObject/image`.
            public struct ImagePayload: Codable, Hashable, Sendable {
                /// The [file](/docs/api-reference/files) ID of the image.
                ///
                /// - Remark: Generated from `#/components/schemas/RunStepDeltaStepDetailsToolCallsCodeOutputImageObject/image/file_id`.
                public var fileId: Swift.String?
                /// Creates a new `ImagePayload`.
                ///
                /// - Parameters:
                ///   - fileId: The [file](/docs/api-reference/files) ID of the image.
                public init(fileId: Swift.String? = nil) {
                    self.fileId = fileId
                }
                public enum CodingKeys: String, CodingKey {
                    case fileId = "file_id"
                }
            }
            /// - Remark: Generated from `#/components/schemas/RunStepDeltaStepDetailsToolCallsCodeOutputImageObject/image`.
            public var image: Components.Schemas.RunStepDeltaStepDetailsToolCallsCodeOutputImageObject.ImagePayload?
            /// Creates a new `RunStepDeltaStepDetailsToolCallsCodeOutputImageObject`.
            ///
            /// - Parameters:
            ///   - index: The index of the output in the outputs array.
            ///   - _type: Always `image`.
            ///   - image:
            public init(
                index: Swift.Int,
                _type: Components.Schemas.RunStepDeltaStepDetailsToolCallsCodeOutputImageObject._TypePayload,
                image: Components.Schemas.RunStepDeltaStepDetailsToolCallsCodeOutputImageObject.ImagePayload? = nil
            ) {
                self.index = index
                self._type = _type
                self.image = image
            }
            public enum CodingKeys: String, CodingKey {
                case index
                case _type = "type"
                case image
            }
        }
        /// Text output from the Code Interpreter tool call as part of a run step.
        ///
        /// - Remark: Generated from `#/components/schemas/RunStepDeltaStepDetailsToolCallsCodeOutputLogsObject`.
        public struct RunStepDeltaStepDetailsToolCallsCodeOutputLogsObject: Codable, Hashable, Sendable {
            /// The index of the output in the outputs array.
            ///
            /// - Remark: Generated from `#/components/schemas/RunStepDeltaStepDetailsToolCallsCodeOutputLogsObject/index`.
            public var index: Swift.Int
            /// Always `logs`.
            ///
            /// - Remark: Generated from `#/components/schemas/RunStepDeltaStepDetailsToolCallsCodeOutputLogsObject/type`.
            @frozen public enum _TypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                case logs = "logs"
            }
            /// Always `logs`.
            ///
            /// - Remark: Generated from `#/components/schemas/RunStepDeltaStepDetailsToolCallsCodeOutputLogsObject/type`.
            public var _type: Components.Schemas.RunStepDeltaStepDetailsToolCallsCodeOutputLogsObject._TypePayload
            /// The text output from the Code Interpreter tool call.
            ///
            /// - Remark: Generated from `#/components/schemas/RunStepDeltaStepDetailsToolCallsCodeOutputLogsObject/logs`.
            public var logs: Swift.String?
            /// Creates a new `RunStepDeltaStepDetailsToolCallsCodeOutputLogsObject`.
            ///
            /// - Parameters:
            ///   - index: The index of the output in the outputs array.
            ///   - _type: Always `logs`.
            ///   - logs: The text output from the Code Interpreter tool call.
            public init(
                index: Swift.Int,
                _type: Components.Schemas.RunStepDeltaStepDetailsToolCallsCodeOutputLogsObject._TypePayload,
                logs: Swift.String? = nil
            ) {
                self.index = index
                self._type = _type
                self.logs = logs
            }
            public enum CodingKeys: String, CodingKey {
                case index
                case _type = "type"
                case logs
            }
        }
        /// - Remark: Generated from `#/components/schemas/RunStepDeltaStepDetailsToolCallsFileSearchObject`.
        public struct RunStepDeltaStepDetailsToolCallsFileSearchObject: Codable, Hashable, Sendable {
            /// The index of the tool call in the tool calls array.
            ///
            /// - Remark: Generated from `#/components/schemas/RunStepDeltaStepDetailsToolCallsFileSearchObject/index`.
            public var index: Swift.Int
            /// The ID of the tool call object.
            ///
            /// - Remark: Generated from `#/components/schemas/RunStepDeltaStepDetailsToolCallsFileSearchObject/id`.
            public var id: Swift.String?
            /// The type of tool call. This is always going to be `file_search` for this type of tool call.
            ///
            /// - Remark: Generated from `#/components/schemas/RunStepDeltaStepDetailsToolCallsFileSearchObject/type`.
            @frozen public enum _TypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                case fileSearch = "file_search"
            }
            /// The type of tool call. This is always going to be `file_search` for this type of tool call.
            ///
            /// - Remark: Generated from `#/components/schemas/RunStepDeltaStepDetailsToolCallsFileSearchObject/type`.
            public var _type: Components.Schemas.RunStepDeltaStepDetailsToolCallsFileSearchObject._TypePayload
            /// For now, this is always going to be an empty object.
            ///
            /// - Remark: Generated from `#/components/schemas/RunStepDeltaStepDetailsToolCallsFileSearchObject/file_search`.
            public var fileSearch: OpenAPIRuntime.OpenAPIObjectContainer
            /// Creates a new `RunStepDeltaStepDetailsToolCallsFileSearchObject`.
            ///
            /// - Parameters:
            ///   - index: The index of the tool call in the tool calls array.
            ///   - id: The ID of the tool call object.
            ///   - _type: The type of tool call. This is always going to be `file_search` for this type of tool call.
            ///   - fileSearch: For now, this is always going to be an empty object.
            public init(
                index: Swift.Int,
                id: Swift.String? = nil,
                _type: Components.Schemas.RunStepDeltaStepDetailsToolCallsFileSearchObject._TypePayload,
                fileSearch: OpenAPIRuntime.OpenAPIObjectContainer
            ) {
                self.index = index
                self.id = id
                self._type = _type
                self.fileSearch = fileSearch
            }
            public enum CodingKeys: String, CodingKey {
                case index
                case id
                case _type = "type"
                case fileSearch = "file_search"
            }
        }
        /// - Remark: Generated from `#/components/schemas/RunStepDeltaStepDetailsToolCallsFunctionObject`.
        public struct RunStepDeltaStepDetailsToolCallsFunctionObject: Codable, Hashable, Sendable {
            /// The index of the tool call in the tool calls array.
            ///
            /// - Remark: Generated from `#/components/schemas/RunStepDeltaStepDetailsToolCallsFunctionObject/index`.
            public var index: Swift.Int
            /// The ID of the tool call object.
            ///
            /// - Remark: Generated from `#/components/schemas/RunStepDeltaStepDetailsToolCallsFunctionObject/id`.
            public var id: Swift.String?
            /// The type of tool call. This is always going to be `function` for this type of tool call.
            ///
            /// - Remark: Generated from `#/components/schemas/RunStepDeltaStepDetailsToolCallsFunctionObject/type`.
            @frozen public enum _TypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                case function = "function"
            }
            /// The type of tool call. This is always going to be `function` for this type of tool call.
            ///
            /// - Remark: Generated from `#/components/schemas/RunStepDeltaStepDetailsToolCallsFunctionObject/type`.
            public var _type: Components.Schemas.RunStepDeltaStepDetailsToolCallsFunctionObject._TypePayload
            /// The definition of the function that was called.
            ///
            /// - Remark: Generated from `#/components/schemas/RunStepDeltaStepDetailsToolCallsFunctionObject/function`.
            public struct FunctionPayload: Codable, Hashable, Sendable {
                /// The name of the function.
                ///
                /// - Remark: Generated from `#/components/schemas/RunStepDeltaStepDetailsToolCallsFunctionObject/function/name`.
                public var name: Swift.String?
                /// The arguments passed to the function.
                ///
                /// - Remark: Generated from `#/components/schemas/RunStepDeltaStepDetailsToolCallsFunctionObject/function/arguments`.
                public var arguments: Swift.String?
                /// The output of the function. This will be `null` if the outputs have not been [submitted](/docs/api-reference/runs/submitToolOutputs) yet.
                ///
                /// - Remark: Generated from `#/components/schemas/RunStepDeltaStepDetailsToolCallsFunctionObject/function/output`.
                public var output: Swift.String?
                /// Creates a new `FunctionPayload`.
                ///
                /// - Parameters:
                ///   - name: The name of the function.
                ///   - arguments: The arguments passed to the function.
                ///   - output: The output of the function. This will be `null` if the outputs have not been [submitted](/docs/api-reference/runs/submitToolOutputs) yet.
                public init(
                    name: Swift.String? = nil,
                    arguments: Swift.String? = nil,
                    output: Swift.String? = nil
                ) {
                    self.name = name
                    self.arguments = arguments
                    self.output = output
                }
                public enum CodingKeys: String, CodingKey {
                    case name
                    case arguments
                    case output
                }
            }
            /// The definition of the function that was called.
            ///
            /// - Remark: Generated from `#/components/schemas/RunStepDeltaStepDetailsToolCallsFunctionObject/function`.
            public var function: Components.Schemas.RunStepDeltaStepDetailsToolCallsFunctionObject.FunctionPayload?
            /// Creates a new `RunStepDeltaStepDetailsToolCallsFunctionObject`.
            ///
            /// - Parameters:
            ///   - index: The index of the tool call in the tool calls array.
            ///   - id: The ID of the tool call object.
            ///   - _type: The type of tool call. This is always going to be `function` for this type of tool call.
            ///   - function: The definition of the function that was called.
            public init(
                index: Swift.Int,
                id: Swift.String? = nil,
                _type: Components.Schemas.RunStepDeltaStepDetailsToolCallsFunctionObject._TypePayload,
                function: Components.Schemas.RunStepDeltaStepDetailsToolCallsFunctionObject.FunctionPayload? = nil
            ) {
                self.index = index
                self.id = id
                self._type = _type
                self.function = function
            }
            public enum CodingKeys: String, CodingKey {
                case index
                case id
                case _type = "type"
                case function
            }
        }
        /// Details of the tool call.
        ///
        /// - Remark: Generated from `#/components/schemas/RunStepDeltaStepDetailsToolCallsObject`.
        public struct RunStepDeltaStepDetailsToolCallsObject: Codable, Hashable, Sendable {
            /// Always `tool_calls`.
            ///
            /// - Remark: Generated from `#/components/schemas/RunStepDeltaStepDetailsToolCallsObject/type`.
            @frozen public enum _TypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                case toolCalls = "tool_calls"
            }
            /// Always `tool_calls`.
            ///
            /// - Remark: Generated from `#/components/schemas/RunStepDeltaStepDetailsToolCallsObject/type`.
            public var _type: Components.Schemas.RunStepDeltaStepDetailsToolCallsObject._TypePayload
            /// - Remark: Generated from `#/components/schemas/RunStepDeltaStepDetailsToolCallsObject/ToolCallsPayload`.
            @frozen public enum ToolCallsPayloadPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/RunStepDeltaStepDetailsToolCallsObject/ToolCallsPayload/case1`.
                case RunStepDeltaStepDetailsToolCallsCodeObject(Components.Schemas.RunStepDeltaStepDetailsToolCallsCodeObject)
                /// - Remark: Generated from `#/components/schemas/RunStepDeltaStepDetailsToolCallsObject/ToolCallsPayload/case2`.
                case RunStepDeltaStepDetailsToolCallsFileSearchObject(Components.Schemas.RunStepDeltaStepDetailsToolCallsFileSearchObject)
                /// - Remark: Generated from `#/components/schemas/RunStepDeltaStepDetailsToolCallsObject/ToolCallsPayload/case3`.
                case RunStepDeltaStepDetailsToolCallsFunctionObject(Components.Schemas.RunStepDeltaStepDetailsToolCallsFunctionObject)
                public init(from decoder: any Decoder) throws {
                    var errors: [any Error] = []
                    do {
                        self = .RunStepDeltaStepDetailsToolCallsCodeObject(try .init(from: decoder))
                        return
                    } catch {
                        errors.append(error)
                    }
                    do {
                        self = .RunStepDeltaStepDetailsToolCallsFileSearchObject(try .init(from: decoder))
                        return
                    } catch {
                        errors.append(error)
                    }
                    do {
                        self = .RunStepDeltaStepDetailsToolCallsFunctionObject(try .init(from: decoder))
                        return
                    } catch {
                        errors.append(error)
                    }
                    throw Swift.DecodingError.failedToDecodeOneOfSchema(
                        type: Self.self,
                        codingPath: decoder.codingPath,
                        errors: errors
                    )
                }
                public func encode(to encoder: any Encoder) throws {
                    switch self {
                    case let .RunStepDeltaStepDetailsToolCallsCodeObject(value):
                        try value.encode(to: encoder)
                    case let .RunStepDeltaStepDetailsToolCallsFileSearchObject(value):
                        try value.encode(to: encoder)
                    case let .RunStepDeltaStepDetailsToolCallsFunctionObject(value):
                        try value.encode(to: encoder)
                    }
                }
            }
            /// An array of tool calls the run step was involved in. These can be associated with one of three types of tools: `code_interpreter`, `file_search`, or `function`.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/RunStepDeltaStepDetailsToolCallsObject/tool_calls`.
            public typealias ToolCallsPayload = [Components.Schemas.RunStepDeltaStepDetailsToolCallsObject.ToolCallsPayloadPayload]
            /// An array of tool calls the run step was involved in. These can be associated with one of three types of tools: `code_interpreter`, `file_search`, or `function`.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/RunStepDeltaStepDetailsToolCallsObject/tool_calls`.
            public var toolCalls: Components.Schemas.RunStepDeltaStepDetailsToolCallsObject.ToolCallsPayload?
            /// Creates a new `RunStepDeltaStepDetailsToolCallsObject`.
            ///
            /// - Parameters:
            ///   - _type: Always `tool_calls`.
            ///   - toolCalls: An array of tool calls the run step was involved in. These can be associated with one of three types of tools: `code_interpreter`, `file_search`, or `function`.
            public init(
                _type: Components.Schemas.RunStepDeltaStepDetailsToolCallsObject._TypePayload,
                toolCalls: Components.Schemas.RunStepDeltaStepDetailsToolCallsObject.ToolCallsPayload? = nil
            ) {
                self._type = _type
                self.toolCalls = toolCalls
            }
            public enum CodingKeys: String, CodingKey {
                case _type = "type"
                case toolCalls = "tool_calls"
            }
        }
        /// Details of the message creation by the run step.
        ///
        /// - Remark: Generated from `#/components/schemas/RunStepDetailsMessageCreationObject`.
        public struct RunStepDetailsMessageCreationObject: Codable, Hashable, Sendable {
            /// Always `message_creation`.
            ///
            /// - Remark: Generated from `#/components/schemas/RunStepDetailsMessageCreationObject/type`.
            @frozen public enum _TypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                case messageCreation = "message_creation"
            }
            /// Always `message_creation`.
            ///
            /// - Remark: Generated from `#/components/schemas/RunStepDetailsMessageCreationObject/type`.
            public var _type: Components.Schemas.RunStepDetailsMessageCreationObject._TypePayload
            /// - Remark: Generated from `#/components/schemas/RunStepDetailsMessageCreationObject/message_creation`.
            public struct MessageCreationPayload: Codable, Hashable, Sendable {
                /// The ID of the message that was created by this run step.
                ///
                /// - Remark: Generated from `#/components/schemas/RunStepDetailsMessageCreationObject/message_creation/message_id`.
                public var messageId: Swift.String
                /// Creates a new `MessageCreationPayload`.
                ///
                /// - Parameters:
                ///   - messageId: The ID of the message that was created by this run step.
                public init(messageId: Swift.String) {
                    self.messageId = messageId
                }
                public enum CodingKeys: String, CodingKey {
                    case messageId = "message_id"
                }
            }
            /// - Remark: Generated from `#/components/schemas/RunStepDetailsMessageCreationObject/message_creation`.
            public var messageCreation: Components.Schemas.RunStepDetailsMessageCreationObject.MessageCreationPayload
            /// Creates a new `RunStepDetailsMessageCreationObject`.
            ///
            /// - Parameters:
            ///   - _type: Always `message_creation`.
            ///   - messageCreation:
            public init(
                _type: Components.Schemas.RunStepDetailsMessageCreationObject._TypePayload,
                messageCreation: Components.Schemas.RunStepDetailsMessageCreationObject.MessageCreationPayload
            ) {
                self._type = _type
                self.messageCreation = messageCreation
            }
            public enum CodingKeys: String, CodingKey {
                case _type = "type"
                case messageCreation = "message_creation"
            }
        }
        /// Details of the Code Interpreter tool call the run step was involved in.
        ///
        /// - Remark: Generated from `#/components/schemas/RunStepDetailsToolCallsCodeObject`.
        public struct RunStepDetailsToolCallsCodeObject: Codable, Hashable, Sendable {
            /// The ID of the tool call.
            ///
            /// - Remark: Generated from `#/components/schemas/RunStepDetailsToolCallsCodeObject/id`.
            public var id: Swift.String
            /// The type of tool call. This is always going to be `code_interpreter` for this type of tool call.
            ///
            /// - Remark: Generated from `#/components/schemas/RunStepDetailsToolCallsCodeObject/type`.
            @frozen public enum _TypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                case codeInterpreter = "code_interpreter"
            }
            /// The type of tool call. This is always going to be `code_interpreter` for this type of tool call.
            ///
            /// - Remark: Generated from `#/components/schemas/RunStepDetailsToolCallsCodeObject/type`.
            public var _type: Components.Schemas.RunStepDetailsToolCallsCodeObject._TypePayload
            /// The Code Interpreter tool call definition.
            ///
            /// - Remark: Generated from `#/components/schemas/RunStepDetailsToolCallsCodeObject/code_interpreter`.
            public struct CodeInterpreterPayload: Codable, Hashable, Sendable {
                /// The input to the Code Interpreter tool call.
                ///
                /// - Remark: Generated from `#/components/schemas/RunStepDetailsToolCallsCodeObject/code_interpreter/input`.
                public var input: Swift.String
                /// - Remark: Generated from `#/components/schemas/RunStepDetailsToolCallsCodeObject/code_interpreter/OutputsPayload`.
                @frozen public enum OutputsPayloadPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/RunStepDetailsToolCallsCodeObject/code_interpreter/OutputsPayload/case1`.
                    case RunStepDetailsToolCallsCodeOutputLogsObject(Components.Schemas.RunStepDetailsToolCallsCodeOutputLogsObject)
                    /// - Remark: Generated from `#/components/schemas/RunStepDetailsToolCallsCodeObject/code_interpreter/OutputsPayload/case2`.
                    case RunStepDetailsToolCallsCodeOutputImageObject(Components.Schemas.RunStepDetailsToolCallsCodeOutputImageObject)
                    public init(from decoder: any Decoder) throws {
                        var errors: [any Error] = []
                        do {
                            self = .RunStepDetailsToolCallsCodeOutputLogsObject(try .init(from: decoder))
                            return
                        } catch {
                            errors.append(error)
                        }
                        do {
                            self = .RunStepDetailsToolCallsCodeOutputImageObject(try .init(from: decoder))
                            return
                        } catch {
                            errors.append(error)
                        }
                        throw Swift.DecodingError.failedToDecodeOneOfSchema(
                            type: Self.self,
                            codingPath: decoder.codingPath,
                            errors: errors
                        )
                    }
                    public func encode(to encoder: any Encoder) throws {
                        switch self {
                        case let .RunStepDetailsToolCallsCodeOutputLogsObject(value):
                            try value.encode(to: encoder)
                        case let .RunStepDetailsToolCallsCodeOutputImageObject(value):
                            try value.encode(to: encoder)
                        }
                    }
                }
                /// The outputs from the Code Interpreter tool call. Code Interpreter can output one or more items, including text (`logs`) or images (`image`). Each of these are represented by a different object type.
                ///
                /// - Remark: Generated from `#/components/schemas/RunStepDetailsToolCallsCodeObject/code_interpreter/outputs`.
                public typealias OutputsPayload = [Components.Schemas.RunStepDetailsToolCallsCodeObject.CodeInterpreterPayload.OutputsPayloadPayload]
                /// The outputs from the Code Interpreter tool call. Code Interpreter can output one or more items, including text (`logs`) or images (`image`). Each of these are represented by a different object type.
                ///
                /// - Remark: Generated from `#/components/schemas/RunStepDetailsToolCallsCodeObject/code_interpreter/outputs`.
                public var outputs: Components.Schemas.RunStepDetailsToolCallsCodeObject.CodeInterpreterPayload.OutputsPayload
                /// Creates a new `CodeInterpreterPayload`.
                ///
                /// - Parameters:
                ///   - input: The input to the Code Interpreter tool call.
                ///   - outputs: The outputs from the Code Interpreter tool call. Code Interpreter can output one or more items, including text (`logs`) or images (`image`). Each of these are represented by a different object type.
                public init(
                    input: Swift.String,
                    outputs: Components.Schemas.RunStepDetailsToolCallsCodeObject.CodeInterpreterPayload.OutputsPayload
                ) {
                    self.input = input
                    self.outputs = outputs
                }
                public enum CodingKeys: String, CodingKey {
                    case input
                    case outputs
                }
            }
            /// The Code Interpreter tool call definition.
            ///
            /// - Remark: Generated from `#/components/schemas/RunStepDetailsToolCallsCodeObject/code_interpreter`.
            public var codeInterpreter: Components.Schemas.RunStepDetailsToolCallsCodeObject.CodeInterpreterPayload
            /// Creates a new `RunStepDetailsToolCallsCodeObject`.
            ///
            /// - Parameters:
            ///   - id: The ID of the tool call.
            ///   - _type: The type of tool call. This is always going to be `code_interpreter` for this type of tool call.
            ///   - codeInterpreter: The Code Interpreter tool call definition.
            public init(
                id: Swift.String,
                _type: Components.Schemas.RunStepDetailsToolCallsCodeObject._TypePayload,
                codeInterpreter: Components.Schemas.RunStepDetailsToolCallsCodeObject.CodeInterpreterPayload
            ) {
                self.id = id
                self._type = _type
                self.codeInterpreter = codeInterpreter
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case _type = "type"
                case codeInterpreter = "code_interpreter"
            }
        }
        /// - Remark: Generated from `#/components/schemas/RunStepDetailsToolCallsCodeOutputImageObject`.
        public struct RunStepDetailsToolCallsCodeOutputImageObject: Codable, Hashable, Sendable {
            /// Always `image`.
            ///
            /// - Remark: Generated from `#/components/schemas/RunStepDetailsToolCallsCodeOutputImageObject/type`.
            @frozen public enum _TypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                case image = "image"
            }
            /// Always `image`.
            ///
            /// - Remark: Generated from `#/components/schemas/RunStepDetailsToolCallsCodeOutputImageObject/type`.
            public var _type: Components.Schemas.RunStepDetailsToolCallsCodeOutputImageObject._TypePayload
            /// - Remark: Generated from `#/components/schemas/RunStepDetailsToolCallsCodeOutputImageObject/image`.
            public struct ImagePayload: Codable, Hashable, Sendable {
                /// The [file](/docs/api-reference/files) ID of the image.
                ///
                /// - Remark: Generated from `#/components/schemas/RunStepDetailsToolCallsCodeOutputImageObject/image/file_id`.
                public var fileId: Swift.String
                /// Creates a new `ImagePayload`.
                ///
                /// - Parameters:
                ///   - fileId: The [file](/docs/api-reference/files) ID of the image.
                public init(fileId: Swift.String) {
                    self.fileId = fileId
                }
                public enum CodingKeys: String, CodingKey {
                    case fileId = "file_id"
                }
            }
            /// - Remark: Generated from `#/components/schemas/RunStepDetailsToolCallsCodeOutputImageObject/image`.
            public var image: Components.Schemas.RunStepDetailsToolCallsCodeOutputImageObject.ImagePayload
            /// Creates a new `RunStepDetailsToolCallsCodeOutputImageObject`.
            ///
            /// - Parameters:
            ///   - _type: Always `image`.
            ///   - image:
            public init(
                _type: Components.Schemas.RunStepDetailsToolCallsCodeOutputImageObject._TypePayload,
                image: Components.Schemas.RunStepDetailsToolCallsCodeOutputImageObject.ImagePayload
            ) {
                self._type = _type
                self.image = image
            }
            public enum CodingKeys: String, CodingKey {
                case _type = "type"
                case image
            }
        }
        /// Text output from the Code Interpreter tool call as part of a run step.
        ///
        /// - Remark: Generated from `#/components/schemas/RunStepDetailsToolCallsCodeOutputLogsObject`.
        public struct RunStepDetailsToolCallsCodeOutputLogsObject: Codable, Hashable, Sendable {
            /// Always `logs`.
            ///
            /// - Remark: Generated from `#/components/schemas/RunStepDetailsToolCallsCodeOutputLogsObject/type`.
            @frozen public enum _TypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                case logs = "logs"
            }
            /// Always `logs`.
            ///
            /// - Remark: Generated from `#/components/schemas/RunStepDetailsToolCallsCodeOutputLogsObject/type`.
            public var _type: Components.Schemas.RunStepDetailsToolCallsCodeOutputLogsObject._TypePayload
            /// The text output from the Code Interpreter tool call.
            ///
            /// - Remark: Generated from `#/components/schemas/RunStepDetailsToolCallsCodeOutputLogsObject/logs`.
            public var logs: Swift.String
            /// Creates a new `RunStepDetailsToolCallsCodeOutputLogsObject`.
            ///
            /// - Parameters:
            ///   - _type: Always `logs`.
            ///   - logs: The text output from the Code Interpreter tool call.
            public init(
                _type: Components.Schemas.RunStepDetailsToolCallsCodeOutputLogsObject._TypePayload,
                logs: Swift.String
            ) {
                self._type = _type
                self.logs = logs
            }
            public enum CodingKeys: String, CodingKey {
                case _type = "type"
                case logs
            }
        }
        /// - Remark: Generated from `#/components/schemas/RunStepDetailsToolCallsFileSearchObject`.
        public struct RunStepDetailsToolCallsFileSearchObject: Codable, Hashable, Sendable {
            /// The ID of the tool call object.
            ///
            /// - Remark: Generated from `#/components/schemas/RunStepDetailsToolCallsFileSearchObject/id`.
            public var id: Swift.String
            /// The type of tool call. This is always going to be `file_search` for this type of tool call.
            ///
            /// - Remark: Generated from `#/components/schemas/RunStepDetailsToolCallsFileSearchObject/type`.
            @frozen public enum _TypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                case fileSearch = "file_search"
            }
            /// The type of tool call. This is always going to be `file_search` for this type of tool call.
            ///
            /// - Remark: Generated from `#/components/schemas/RunStepDetailsToolCallsFileSearchObject/type`.
            public var _type: Components.Schemas.RunStepDetailsToolCallsFileSearchObject._TypePayload
            /// For now, this is always going to be an empty object.
            ///
            /// - Remark: Generated from `#/components/schemas/RunStepDetailsToolCallsFileSearchObject/file_search`.
            public struct FileSearchPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/RunStepDetailsToolCallsFileSearchObject/file_search/ranking_options`.
                public var rankingOptions: Components.Schemas.RunStepDetailsToolCallsFileSearchRankingOptionsObject?
                /// The results of the file search.
                ///
                /// - Remark: Generated from `#/components/schemas/RunStepDetailsToolCallsFileSearchObject/file_search/results`.
                public var results: [Components.Schemas.RunStepDetailsToolCallsFileSearchResultObject]?
                /// Creates a new `FileSearchPayload`.
                ///
                /// - Parameters:
                ///   - rankingOptions:
                ///   - results: The results of the file search.
                public init(
                    rankingOptions: Components.Schemas.RunStepDetailsToolCallsFileSearchRankingOptionsObject? = nil,
                    results: [Components.Schemas.RunStepDetailsToolCallsFileSearchResultObject]? = nil
                ) {
                    self.rankingOptions = rankingOptions
                    self.results = results
                }
                public enum CodingKeys: String, CodingKey {
                    case rankingOptions = "ranking_options"
                    case results
                }
            }
            /// For now, this is always going to be an empty object.
            ///
            /// - Remark: Generated from `#/components/schemas/RunStepDetailsToolCallsFileSearchObject/file_search`.
            public var fileSearch: Components.Schemas.RunStepDetailsToolCallsFileSearchObject.FileSearchPayload
            /// Creates a new `RunStepDetailsToolCallsFileSearchObject`.
            ///
            /// - Parameters:
            ///   - id: The ID of the tool call object.
            ///   - _type: The type of tool call. This is always going to be `file_search` for this type of tool call.
            ///   - fileSearch: For now, this is always going to be an empty object.
            public init(
                id: Swift.String,
                _type: Components.Schemas.RunStepDetailsToolCallsFileSearchObject._TypePayload,
                fileSearch: Components.Schemas.RunStepDetailsToolCallsFileSearchObject.FileSearchPayload
            ) {
                self.id = id
                self._type = _type
                self.fileSearch = fileSearch
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case _type = "type"
                case fileSearch = "file_search"
            }
        }
        /// The ranking options for the file search.
        ///
        /// - Remark: Generated from `#/components/schemas/RunStepDetailsToolCallsFileSearchRankingOptionsObject`.
        public struct RunStepDetailsToolCallsFileSearchRankingOptionsObject: Codable, Hashable, Sendable {
            /// The ranker used for the file search.
            ///
            /// - Remark: Generated from `#/components/schemas/RunStepDetailsToolCallsFileSearchRankingOptionsObject/ranker`.
            @frozen public enum RankerPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case default20240821 = "default_2024_08_21"
            }
            /// The ranker used for the file search.
            ///
            /// - Remark: Generated from `#/components/schemas/RunStepDetailsToolCallsFileSearchRankingOptionsObject/ranker`.
            public var ranker: Components.Schemas.RunStepDetailsToolCallsFileSearchRankingOptionsObject.RankerPayload
            /// The score threshold for the file search. All values must be a floating point number between 0 and 1.
            ///
            /// - Remark: Generated from `#/components/schemas/RunStepDetailsToolCallsFileSearchRankingOptionsObject/score_threshold`.
            public var scoreThreshold: Swift.Double
            /// Creates a new `RunStepDetailsToolCallsFileSearchRankingOptionsObject`.
            ///
            /// - Parameters:
            ///   - ranker: The ranker used for the file search.
            ///   - scoreThreshold: The score threshold for the file search. All values must be a floating point number between 0 and 1.
            public init(
                ranker: Components.Schemas.RunStepDetailsToolCallsFileSearchRankingOptionsObject.RankerPayload,
                scoreThreshold: Swift.Double
            ) {
                self.ranker = ranker
                self.scoreThreshold = scoreThreshold
            }
            public enum CodingKeys: String, CodingKey {
                case ranker
                case scoreThreshold = "score_threshold"
            }
        }
        /// A result instance of the file search.
        ///
        /// - Remark: Generated from `#/components/schemas/RunStepDetailsToolCallsFileSearchResultObject`.
        public struct RunStepDetailsToolCallsFileSearchResultObject: Codable, Hashable, Sendable {
            /// The ID of the file that result was found in.
            ///
            /// - Remark: Generated from `#/components/schemas/RunStepDetailsToolCallsFileSearchResultObject/file_id`.
            public var fileId: Swift.String
            /// The name of the file that result was found in.
            ///
            /// - Remark: Generated from `#/components/schemas/RunStepDetailsToolCallsFileSearchResultObject/file_name`.
            public var fileName: Swift.String
            /// The score of the result. All values must be a floating point number between 0 and 1.
            ///
            /// - Remark: Generated from `#/components/schemas/RunStepDetailsToolCallsFileSearchResultObject/score`.
            public var score: Swift.Double
            /// - Remark: Generated from `#/components/schemas/RunStepDetailsToolCallsFileSearchResultObject/ContentPayload`.
            public struct ContentPayloadPayload: Codable, Hashable, Sendable {
                /// The type of the content.
                ///
                /// - Remark: Generated from `#/components/schemas/RunStepDetailsToolCallsFileSearchResultObject/ContentPayload/type`.
                @frozen public enum _TypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case text = "text"
                }
                /// The type of the content.
                ///
                /// - Remark: Generated from `#/components/schemas/RunStepDetailsToolCallsFileSearchResultObject/ContentPayload/type`.
                public var _type: Components.Schemas.RunStepDetailsToolCallsFileSearchResultObject.ContentPayloadPayload._TypePayload?
                /// The text content of the file.
                ///
                /// - Remark: Generated from `#/components/schemas/RunStepDetailsToolCallsFileSearchResultObject/ContentPayload/text`.
                public var text: Swift.String?
                /// Creates a new `ContentPayloadPayload`.
                ///
                /// - Parameters:
                ///   - _type: The type of the content.
                ///   - text: The text content of the file.
                public init(
                    _type: Components.Schemas.RunStepDetailsToolCallsFileSearchResultObject.ContentPayloadPayload._TypePayload? = nil,
                    text: Swift.String? = nil
                ) {
                    self._type = _type
                    self.text = text
                }
                public enum CodingKeys: String, CodingKey {
                    case _type = "type"
                    case text
                }
            }
            /// The content of the result that was found. The content is only included if requested via the include query parameter.
            ///
            /// - Remark: Generated from `#/components/schemas/RunStepDetailsToolCallsFileSearchResultObject/content`.
            public typealias ContentPayload = [Components.Schemas.RunStepDetailsToolCallsFileSearchResultObject.ContentPayloadPayload]
            /// The content of the result that was found. The content is only included if requested via the include query parameter.
            ///
            /// - Remark: Generated from `#/components/schemas/RunStepDetailsToolCallsFileSearchResultObject/content`.
            public var content: Components.Schemas.RunStepDetailsToolCallsFileSearchResultObject.ContentPayload?
            /// Creates a new `RunStepDetailsToolCallsFileSearchResultObject`.
            ///
            /// - Parameters:
            ///   - fileId: The ID of the file that result was found in.
            ///   - fileName: The name of the file that result was found in.
            ///   - score: The score of the result. All values must be a floating point number between 0 and 1.
            ///   - content: The content of the result that was found. The content is only included if requested via the include query parameter.
            public init(
                fileId: Swift.String,
                fileName: Swift.String,
                score: Swift.Double,
                content: Components.Schemas.RunStepDetailsToolCallsFileSearchResultObject.ContentPayload? = nil
            ) {
                self.fileId = fileId
                self.fileName = fileName
                self.score = score
                self.content = content
            }
            public enum CodingKeys: String, CodingKey {
                case fileId = "file_id"
                case fileName = "file_name"
                case score
                case content
            }
        }
        /// - Remark: Generated from `#/components/schemas/RunStepDetailsToolCallsFunctionObject`.
        public struct RunStepDetailsToolCallsFunctionObject: Codable, Hashable, Sendable {
            /// The ID of the tool call object.
            ///
            /// - Remark: Generated from `#/components/schemas/RunStepDetailsToolCallsFunctionObject/id`.
            public var id: Swift.String
            /// The type of tool call. This is always going to be `function` for this type of tool call.
            ///
            /// - Remark: Generated from `#/components/schemas/RunStepDetailsToolCallsFunctionObject/type`.
            @frozen public enum _TypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                case function = "function"
            }
            /// The type of tool call. This is always going to be `function` for this type of tool call.
            ///
            /// - Remark: Generated from `#/components/schemas/RunStepDetailsToolCallsFunctionObject/type`.
            public var _type: Components.Schemas.RunStepDetailsToolCallsFunctionObject._TypePayload
            /// The definition of the function that was called.
            ///
            /// - Remark: Generated from `#/components/schemas/RunStepDetailsToolCallsFunctionObject/function`.
            public struct FunctionPayload: Codable, Hashable, Sendable {
                /// The name of the function.
                ///
                /// - Remark: Generated from `#/components/schemas/RunStepDetailsToolCallsFunctionObject/function/name`.
                public var name: Swift.String
                /// The arguments passed to the function.
                ///
                /// - Remark: Generated from `#/components/schemas/RunStepDetailsToolCallsFunctionObject/function/arguments`.
                public var arguments: Swift.String
                /// The output of the function. This will be `null` if the outputs have not been [submitted](/docs/api-reference/runs/submitToolOutputs) yet.
                ///
                /// - Remark: Generated from `#/components/schemas/RunStepDetailsToolCallsFunctionObject/function/output`.
                public var output: Swift.String?
                /// Creates a new `FunctionPayload`.
                ///
                /// - Parameters:
                ///   - name: The name of the function.
                ///   - arguments: The arguments passed to the function.
                ///   - output: The output of the function. This will be `null` if the outputs have not been [submitted](/docs/api-reference/runs/submitToolOutputs) yet.
                public init(
                    name: Swift.String,
                    arguments: Swift.String,
                    output: Swift.String? = nil
                ) {
                    self.name = name
                    self.arguments = arguments
                    self.output = output
                }
                public enum CodingKeys: String, CodingKey {
                    case name
                    case arguments
                    case output
                }
            }
            /// The definition of the function that was called.
            ///
            /// - Remark: Generated from `#/components/schemas/RunStepDetailsToolCallsFunctionObject/function`.
            public var function: Components.Schemas.RunStepDetailsToolCallsFunctionObject.FunctionPayload
            /// Creates a new `RunStepDetailsToolCallsFunctionObject`.
            ///
            /// - Parameters:
            ///   - id: The ID of the tool call object.
            ///   - _type: The type of tool call. This is always going to be `function` for this type of tool call.
            ///   - function: The definition of the function that was called.
            public init(
                id: Swift.String,
                _type: Components.Schemas.RunStepDetailsToolCallsFunctionObject._TypePayload,
                function: Components.Schemas.RunStepDetailsToolCallsFunctionObject.FunctionPayload
            ) {
                self.id = id
                self._type = _type
                self.function = function
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case _type = "type"
                case function
            }
        }
        /// Details of the tool call.
        ///
        /// - Remark: Generated from `#/components/schemas/RunStepDetailsToolCallsObject`.
        public struct RunStepDetailsToolCallsObject: Codable, Hashable, Sendable {
            /// Always `tool_calls`.
            ///
            /// - Remark: Generated from `#/components/schemas/RunStepDetailsToolCallsObject/type`.
            @frozen public enum _TypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                case toolCalls = "tool_calls"
            }
            /// Always `tool_calls`.
            ///
            /// - Remark: Generated from `#/components/schemas/RunStepDetailsToolCallsObject/type`.
            public var _type: Components.Schemas.RunStepDetailsToolCallsObject._TypePayload
            /// - Remark: Generated from `#/components/schemas/RunStepDetailsToolCallsObject/ToolCallsPayload`.
            @frozen public enum ToolCallsPayloadPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/RunStepDetailsToolCallsObject/ToolCallsPayload/case1`.
                case RunStepDetailsToolCallsCodeObject(Components.Schemas.RunStepDetailsToolCallsCodeObject)
                /// - Remark: Generated from `#/components/schemas/RunStepDetailsToolCallsObject/ToolCallsPayload/case2`.
                case RunStepDetailsToolCallsFileSearchObject(Components.Schemas.RunStepDetailsToolCallsFileSearchObject)
                /// - Remark: Generated from `#/components/schemas/RunStepDetailsToolCallsObject/ToolCallsPayload/case3`.
                case RunStepDetailsToolCallsFunctionObject(Components.Schemas.RunStepDetailsToolCallsFunctionObject)
                public init(from decoder: any Decoder) throws {
                    var errors: [any Error] = []
                    do {
                        self = .RunStepDetailsToolCallsCodeObject(try .init(from: decoder))
                        return
                    } catch {
                        errors.append(error)
                    }
                    do {
                        self = .RunStepDetailsToolCallsFileSearchObject(try .init(from: decoder))
                        return
                    } catch {
                        errors.append(error)
                    }
                    do {
                        self = .RunStepDetailsToolCallsFunctionObject(try .init(from: decoder))
                        return
                    } catch {
                        errors.append(error)
                    }
                    throw Swift.DecodingError.failedToDecodeOneOfSchema(
                        type: Self.self,
                        codingPath: decoder.codingPath,
                        errors: errors
                    )
                }
                public func encode(to encoder: any Encoder) throws {
                    switch self {
                    case let .RunStepDetailsToolCallsCodeObject(value):
                        try value.encode(to: encoder)
                    case let .RunStepDetailsToolCallsFileSearchObject(value):
                        try value.encode(to: encoder)
                    case let .RunStepDetailsToolCallsFunctionObject(value):
                        try value.encode(to: encoder)
                    }
                }
            }
            /// An array of tool calls the run step was involved in. These can be associated with one of three types of tools: `code_interpreter`, `file_search`, or `function`.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/RunStepDetailsToolCallsObject/tool_calls`.
            public typealias ToolCallsPayload = [Components.Schemas.RunStepDetailsToolCallsObject.ToolCallsPayloadPayload]
            /// An array of tool calls the run step was involved in. These can be associated with one of three types of tools: `code_interpreter`, `file_search`, or `function`.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/RunStepDetailsToolCallsObject/tool_calls`.
            public var toolCalls: Components.Schemas.RunStepDetailsToolCallsObject.ToolCallsPayload
            /// Creates a new `RunStepDetailsToolCallsObject`.
            ///
            /// - Parameters:
            ///   - _type: Always `tool_calls`.
            ///   - toolCalls: An array of tool calls the run step was involved in. These can be associated with one of three types of tools: `code_interpreter`, `file_search`, or `function`.
            public init(
                _type: Components.Schemas.RunStepDetailsToolCallsObject._TypePayload,
                toolCalls: Components.Schemas.RunStepDetailsToolCallsObject.ToolCallsPayload
            ) {
                self._type = _type
                self.toolCalls = toolCalls
            }
            public enum CodingKeys: String, CodingKey {
                case _type = "type"
                case toolCalls = "tool_calls"
            }
        }
        /// Represents a step in execution of a run.
        ///
        ///
        /// - Remark: Generated from `#/components/schemas/RunStepObject`.
        public struct RunStepObject: Codable, Hashable, Sendable {
            /// The identifier of the run step, which can be referenced in API endpoints.
            ///
            /// - Remark: Generated from `#/components/schemas/RunStepObject/id`.
            public var id: Swift.String
            /// The object type, which is always `thread.run.step`.
            ///
            /// - Remark: Generated from `#/components/schemas/RunStepObject/object`.
            @frozen public enum ObjectPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case thread_run_step = "thread.run.step"
            }
            /// The object type, which is always `thread.run.step`.
            ///
            /// - Remark: Generated from `#/components/schemas/RunStepObject/object`.
            public var object: Components.Schemas.RunStepObject.ObjectPayload
            /// The Unix timestamp (in seconds) for when the run step was created.
            ///
            /// - Remark: Generated from `#/components/schemas/RunStepObject/created_at`.
            public var createdAt: Swift.Int
            /// The ID of the [assistant](/docs/api-reference/assistants) associated with the run step.
            ///
            /// - Remark: Generated from `#/components/schemas/RunStepObject/assistant_id`.
            public var assistantId: Swift.String
            /// The ID of the [thread](/docs/api-reference/threads) that was run.
            ///
            /// - Remark: Generated from `#/components/schemas/RunStepObject/thread_id`.
            public var threadId: Swift.String
            /// The ID of the [run](/docs/api-reference/runs) that this run step is a part of.
            ///
            /// - Remark: Generated from `#/components/schemas/RunStepObject/run_id`.
            public var runId: Swift.String
            /// The type of run step, which can be either `message_creation` or `tool_calls`.
            ///
            /// - Remark: Generated from `#/components/schemas/RunStepObject/type`.
            @frozen public enum _TypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                case messageCreation = "message_creation"
                case toolCalls = "tool_calls"
            }
            /// The type of run step, which can be either `message_creation` or `tool_calls`.
            ///
            /// - Remark: Generated from `#/components/schemas/RunStepObject/type`.
            public var _type: Components.Schemas.RunStepObject._TypePayload
            /// The status of the run step, which can be either `in_progress`, `cancelled`, `failed`, `completed`, or `expired`.
            ///
            /// - Remark: Generated from `#/components/schemas/RunStepObject/status`.
            @frozen public enum StatusPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case inProgress = "in_progress"
                case cancelled = "cancelled"
                case failed = "failed"
                case completed = "completed"
                case expired = "expired"
            }
            /// The status of the run step, which can be either `in_progress`, `cancelled`, `failed`, `completed`, or `expired`.
            ///
            /// - Remark: Generated from `#/components/schemas/RunStepObject/status`.
            public var status: Components.Schemas.RunStepObject.StatusPayload
            /// The details of the run step.
            ///
            /// - Remark: Generated from `#/components/schemas/RunStepObject/step_details`.
            @frozen public enum StepDetailsPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/RunStepObject/step_details/case1`.
                case RunStepDetailsMessageCreationObject(Components.Schemas.RunStepDetailsMessageCreationObject)
                /// - Remark: Generated from `#/components/schemas/RunStepObject/step_details/case2`.
                case RunStepDetailsToolCallsObject(Components.Schemas.RunStepDetailsToolCallsObject)
                public init(from decoder: any Decoder) throws {
                    var errors: [any Error] = []
                    do {
                        self = .RunStepDetailsMessageCreationObject(try .init(from: decoder))
                        return
                    } catch {
                        errors.append(error)
                    }
                    do {
                        self = .RunStepDetailsToolCallsObject(try .init(from: decoder))
                        return
                    } catch {
                        errors.append(error)
                    }
                    throw Swift.DecodingError.failedToDecodeOneOfSchema(
                        type: Self.self,
                        codingPath: decoder.codingPath,
                        errors: errors
                    )
                }
                public func encode(to encoder: any Encoder) throws {
                    switch self {
                    case let .RunStepDetailsMessageCreationObject(value):
                        try value.encode(to: encoder)
                    case let .RunStepDetailsToolCallsObject(value):
                        try value.encode(to: encoder)
                    }
                }
            }
            /// The details of the run step.
            ///
            /// - Remark: Generated from `#/components/schemas/RunStepObject/step_details`.
            public var stepDetails: Components.Schemas.RunStepObject.StepDetailsPayload
            /// The last error associated with this run step. Will be `null` if there are no errors.
            ///
            /// - Remark: Generated from `#/components/schemas/RunStepObject/last_error`.
            public struct LastErrorPayload: Codable, Hashable, Sendable {
                /// One of `server_error` or `rate_limit_exceeded`.
                ///
                /// - Remark: Generated from `#/components/schemas/RunStepObject/last_error/code`.
                @frozen public enum CodePayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case serverError = "server_error"
                    case rateLimitExceeded = "rate_limit_exceeded"
                }
                /// One of `server_error` or `rate_limit_exceeded`.
                ///
                /// - Remark: Generated from `#/components/schemas/RunStepObject/last_error/code`.
                public var code: Components.Schemas.RunStepObject.LastErrorPayload.CodePayload
                /// A human-readable description of the error.
                ///
                /// - Remark: Generated from `#/components/schemas/RunStepObject/last_error/message`.
                public var message: Swift.String
                /// Creates a new `LastErrorPayload`.
                ///
                /// - Parameters:
                ///   - code: One of `server_error` or `rate_limit_exceeded`.
                ///   - message: A human-readable description of the error.
                public init(
                    code: Components.Schemas.RunStepObject.LastErrorPayload.CodePayload,
                    message: Swift.String
                ) {
                    self.code = code
                    self.message = message
                }
                public enum CodingKeys: String, CodingKey {
                    case code
                    case message
                }
            }
            /// The last error associated with this run step. Will be `null` if there are no errors.
            ///
            /// - Remark: Generated from `#/components/schemas/RunStepObject/last_error`.
            public var lastError: Components.Schemas.RunStepObject.LastErrorPayload?
            /// The Unix timestamp (in seconds) for when the run step expired. A step is considered expired if the parent run is expired.
            ///
            /// - Remark: Generated from `#/components/schemas/RunStepObject/expired_at`.
            public var expiredAt: Swift.Int?
            /// The Unix timestamp (in seconds) for when the run step was cancelled.
            ///
            /// - Remark: Generated from `#/components/schemas/RunStepObject/cancelled_at`.
            public var cancelledAt: Swift.Int?
            /// The Unix timestamp (in seconds) for when the run step failed.
            ///
            /// - Remark: Generated from `#/components/schemas/RunStepObject/failed_at`.
            public var failedAt: Swift.Int?
            /// The Unix timestamp (in seconds) for when the run step completed.
            ///
            /// - Remark: Generated from `#/components/schemas/RunStepObject/completed_at`.
            public var completedAt: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/RunStepObject/metadata`.
            public var metadata: Components.Schemas.Metadata?
            /// - Remark: Generated from `#/components/schemas/RunStepObject/usage`.
            public var usage: Components.Schemas.RunStepCompletionUsage?
            /// Creates a new `RunStepObject`.
            ///
            /// - Parameters:
            ///   - id: The identifier of the run step, which can be referenced in API endpoints.
            ///   - object: The object type, which is always `thread.run.step`.
            ///   - createdAt: The Unix timestamp (in seconds) for when the run step was created.
            ///   - assistantId: The ID of the [assistant](/docs/api-reference/assistants) associated with the run step.
            ///   - threadId: The ID of the [thread](/docs/api-reference/threads) that was run.
            ///   - runId: The ID of the [run](/docs/api-reference/runs) that this run step is a part of.
            ///   - _type: The type of run step, which can be either `message_creation` or `tool_calls`.
            ///   - status: The status of the run step, which can be either `in_progress`, `cancelled`, `failed`, `completed`, or `expired`.
            ///   - stepDetails: The details of the run step.
            ///   - lastError: The last error associated with this run step. Will be `null` if there are no errors.
            ///   - expiredAt: The Unix timestamp (in seconds) for when the run step expired. A step is considered expired if the parent run is expired.
            ///   - cancelledAt: The Unix timestamp (in seconds) for when the run step was cancelled.
            ///   - failedAt: The Unix timestamp (in seconds) for when the run step failed.
            ///   - completedAt: The Unix timestamp (in seconds) for when the run step completed.
            ///   - metadata:
            ///   - usage:
            public init(
                id: Swift.String,
                object: Components.Schemas.RunStepObject.ObjectPayload,
                createdAt: Swift.Int,
                assistantId: Swift.String,
                threadId: Swift.String,
                runId: Swift.String,
                _type: Components.Schemas.RunStepObject._TypePayload,
                status: Components.Schemas.RunStepObject.StatusPayload,
                stepDetails: Components.Schemas.RunStepObject.StepDetailsPayload,
                lastError: Components.Schemas.RunStepObject.LastErrorPayload? = nil,
                expiredAt: Swift.Int? = nil,
                cancelledAt: Swift.Int? = nil,
                failedAt: Swift.Int? = nil,
                completedAt: Swift.Int? = nil,
                metadata: Components.Schemas.Metadata? = nil,
                usage: Components.Schemas.RunStepCompletionUsage? = nil
            ) {
                self.id = id
                self.object = object
                self.createdAt = createdAt
                self.assistantId = assistantId
                self.threadId = threadId
                self.runId = runId
                self._type = _type
                self.status = status
                self.stepDetails = stepDetails
                self.lastError = lastError
                self.expiredAt = expiredAt
                self.cancelledAt = cancelledAt
                self.failedAt = failedAt
                self.completedAt = completedAt
                self.metadata = metadata
                self.usage = usage
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case object
                case createdAt = "created_at"
                case assistantId = "assistant_id"
                case threadId = "thread_id"
                case runId = "run_id"
                case _type = "type"
                case status
                case stepDetails = "step_details"
                case lastError = "last_error"
                case expiredAt = "expired_at"
                case cancelledAt = "cancelled_at"
                case failedAt = "failed_at"
                case completedAt = "completed_at"
                case metadata
                case usage
            }
        }
        /// - Remark: Generated from `#/components/schemas/RunStepStreamEvent`.
        @frozen public enum RunStepStreamEvent: Codable, Hashable, Sendable {
            /// Occurs when a [run step](/docs/api-reference/run-steps/step-object) is created.
            ///
            /// - Remark: Generated from `#/components/schemas/RunStepStreamEvent/case1`.
            public struct Case1Payload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/RunStepStreamEvent/case1/event`.
                @frozen public enum EventPayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case thread_run_step_created = "thread.run.step.created"
                }
                /// - Remark: Generated from `#/components/schemas/RunStepStreamEvent/case1/event`.
                public var event: Components.Schemas.RunStepStreamEvent.Case1Payload.EventPayload
                /// - Remark: Generated from `#/components/schemas/RunStepStreamEvent/case1/data`.
                public var data: Components.Schemas.RunStepObject
                /// Creates a new `Case1Payload`.
                ///
                /// - Parameters:
                ///   - event:
                ///   - data:
                public init(
                    event: Components.Schemas.RunStepStreamEvent.Case1Payload.EventPayload,
                    data: Components.Schemas.RunStepObject
                ) {
                    self.event = event
                    self.data = data
                }
                public enum CodingKeys: String, CodingKey {
                    case event
                    case data
                }
            }
            /// Occurs when a [run step](/docs/api-reference/run-steps/step-object) is created.
            ///
            /// - Remark: Generated from `#/components/schemas/RunStepStreamEvent/case1`.
            case case1(Components.Schemas.RunStepStreamEvent.Case1Payload)
            /// Occurs when a [run step](/docs/api-reference/run-steps/step-object) moves to an `in_progress` state.
            ///
            /// - Remark: Generated from `#/components/schemas/RunStepStreamEvent/case2`.
            public struct Case2Payload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/RunStepStreamEvent/case2/event`.
                @frozen public enum EventPayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case thread_run_step_inProgress = "thread.run.step.in_progress"
                }
                /// - Remark: Generated from `#/components/schemas/RunStepStreamEvent/case2/event`.
                public var event: Components.Schemas.RunStepStreamEvent.Case2Payload.EventPayload
                /// - Remark: Generated from `#/components/schemas/RunStepStreamEvent/case2/data`.
                public var data: Components.Schemas.RunStepObject
                /// Creates a new `Case2Payload`.
                ///
                /// - Parameters:
                ///   - event:
                ///   - data:
                public init(
                    event: Components.Schemas.RunStepStreamEvent.Case2Payload.EventPayload,
                    data: Components.Schemas.RunStepObject
                ) {
                    self.event = event
                    self.data = data
                }
                public enum CodingKeys: String, CodingKey {
                    case event
                    case data
                }
            }
            /// Occurs when a [run step](/docs/api-reference/run-steps/step-object) moves to an `in_progress` state.
            ///
            /// - Remark: Generated from `#/components/schemas/RunStepStreamEvent/case2`.
            case case2(Components.Schemas.RunStepStreamEvent.Case2Payload)
            /// Occurs when parts of a [run step](/docs/api-reference/run-steps/step-object) are being streamed.
            ///
            /// - Remark: Generated from `#/components/schemas/RunStepStreamEvent/case3`.
            public struct Case3Payload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/RunStepStreamEvent/case3/event`.
                @frozen public enum EventPayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case thread_run_step_delta = "thread.run.step.delta"
                }
                /// - Remark: Generated from `#/components/schemas/RunStepStreamEvent/case3/event`.
                public var event: Components.Schemas.RunStepStreamEvent.Case3Payload.EventPayload
                /// - Remark: Generated from `#/components/schemas/RunStepStreamEvent/case3/data`.
                public var data: Components.Schemas.RunStepDeltaObject
                /// Creates a new `Case3Payload`.
                ///
                /// - Parameters:
                ///   - event:
                ///   - data:
                public init(
                    event: Components.Schemas.RunStepStreamEvent.Case3Payload.EventPayload,
                    data: Components.Schemas.RunStepDeltaObject
                ) {
                    self.event = event
                    self.data = data
                }
                public enum CodingKeys: String, CodingKey {
                    case event
                    case data
                }
            }
            /// Occurs when parts of a [run step](/docs/api-reference/run-steps/step-object) are being streamed.
            ///
            /// - Remark: Generated from `#/components/schemas/RunStepStreamEvent/case3`.
            case case3(Components.Schemas.RunStepStreamEvent.Case3Payload)
            /// Occurs when a [run step](/docs/api-reference/run-steps/step-object) is completed.
            ///
            /// - Remark: Generated from `#/components/schemas/RunStepStreamEvent/case4`.
            public struct Case4Payload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/RunStepStreamEvent/case4/event`.
                @frozen public enum EventPayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case thread_run_step_completed = "thread.run.step.completed"
                }
                /// - Remark: Generated from `#/components/schemas/RunStepStreamEvent/case4/event`.
                public var event: Components.Schemas.RunStepStreamEvent.Case4Payload.EventPayload
                /// - Remark: Generated from `#/components/schemas/RunStepStreamEvent/case4/data`.
                public var data: Components.Schemas.RunStepObject
                /// Creates a new `Case4Payload`.
                ///
                /// - Parameters:
                ///   - event:
                ///   - data:
                public init(
                    event: Components.Schemas.RunStepStreamEvent.Case4Payload.EventPayload,
                    data: Components.Schemas.RunStepObject
                ) {
                    self.event = event
                    self.data = data
                }
                public enum CodingKeys: String, CodingKey {
                    case event
                    case data
                }
            }
            /// Occurs when a [run step](/docs/api-reference/run-steps/step-object) is completed.
            ///
            /// - Remark: Generated from `#/components/schemas/RunStepStreamEvent/case4`.
            case case4(Components.Schemas.RunStepStreamEvent.Case4Payload)
            /// Occurs when a [run step](/docs/api-reference/run-steps/step-object) fails.
            ///
            /// - Remark: Generated from `#/components/schemas/RunStepStreamEvent/case5`.
            public struct Case5Payload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/RunStepStreamEvent/case5/event`.
                @frozen public enum EventPayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case thread_run_step_failed = "thread.run.step.failed"
                }
                /// - Remark: Generated from `#/components/schemas/RunStepStreamEvent/case5/event`.
                public var event: Components.Schemas.RunStepStreamEvent.Case5Payload.EventPayload
                /// - Remark: Generated from `#/components/schemas/RunStepStreamEvent/case5/data`.
                public var data: Components.Schemas.RunStepObject
                /// Creates a new `Case5Payload`.
                ///
                /// - Parameters:
                ///   - event:
                ///   - data:
                public init(
                    event: Components.Schemas.RunStepStreamEvent.Case5Payload.EventPayload,
                    data: Components.Schemas.RunStepObject
                ) {
                    self.event = event
                    self.data = data
                }
                public enum CodingKeys: String, CodingKey {
                    case event
                    case data
                }
            }
            /// Occurs when a [run step](/docs/api-reference/run-steps/step-object) fails.
            ///
            /// - Remark: Generated from `#/components/schemas/RunStepStreamEvent/case5`.
            case case5(Components.Schemas.RunStepStreamEvent.Case5Payload)
            /// Occurs when a [run step](/docs/api-reference/run-steps/step-object) is cancelled.
            ///
            /// - Remark: Generated from `#/components/schemas/RunStepStreamEvent/case6`.
            public struct Case6Payload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/RunStepStreamEvent/case6/event`.
                @frozen public enum EventPayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case thread_run_step_cancelled = "thread.run.step.cancelled"
                }
                /// - Remark: Generated from `#/components/schemas/RunStepStreamEvent/case6/event`.
                public var event: Components.Schemas.RunStepStreamEvent.Case6Payload.EventPayload
                /// - Remark: Generated from `#/components/schemas/RunStepStreamEvent/case6/data`.
                public var data: Components.Schemas.RunStepObject
                /// Creates a new `Case6Payload`.
                ///
                /// - Parameters:
                ///   - event:
                ///   - data:
                public init(
                    event: Components.Schemas.RunStepStreamEvent.Case6Payload.EventPayload,
                    data: Components.Schemas.RunStepObject
                ) {
                    self.event = event
                    self.data = data
                }
                public enum CodingKeys: String, CodingKey {
                    case event
                    case data
                }
            }
            /// Occurs when a [run step](/docs/api-reference/run-steps/step-object) is cancelled.
            ///
            /// - Remark: Generated from `#/components/schemas/RunStepStreamEvent/case6`.
            case case6(Components.Schemas.RunStepStreamEvent.Case6Payload)
            /// Occurs when a [run step](/docs/api-reference/run-steps/step-object) expires.
            ///
            /// - Remark: Generated from `#/components/schemas/RunStepStreamEvent/case7`.
            public struct Case7Payload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/RunStepStreamEvent/case7/event`.
                @frozen public enum EventPayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case thread_run_step_expired = "thread.run.step.expired"
                }
                /// - Remark: Generated from `#/components/schemas/RunStepStreamEvent/case7/event`.
                public var event: Components.Schemas.RunStepStreamEvent.Case7Payload.EventPayload
                /// - Remark: Generated from `#/components/schemas/RunStepStreamEvent/case7/data`.
                public var data: Components.Schemas.RunStepObject
                /// Creates a new `Case7Payload`.
                ///
                /// - Parameters:
                ///   - event:
                ///   - data:
                public init(
                    event: Components.Schemas.RunStepStreamEvent.Case7Payload.EventPayload,
                    data: Components.Schemas.RunStepObject
                ) {
                    self.event = event
                    self.data = data
                }
                public enum CodingKeys: String, CodingKey {
                    case event
                    case data
                }
            }
            /// Occurs when a [run step](/docs/api-reference/run-steps/step-object) expires.
            ///
            /// - Remark: Generated from `#/components/schemas/RunStepStreamEvent/case7`.
            case case7(Components.Schemas.RunStepStreamEvent.Case7Payload)
            public init(from decoder: any Decoder) throws {
                var errors: [any Error] = []
                do {
                    self = .case1(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                do {
                    self = .case2(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                do {
                    self = .case3(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                do {
                    self = .case4(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                do {
                    self = .case5(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                do {
                    self = .case6(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                do {
                    self = .case7(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                throw Swift.DecodingError.failedToDecodeOneOfSchema(
                    type: Self.self,
                    codingPath: decoder.codingPath,
                    errors: errors
                )
            }
            public func encode(to encoder: any Encoder) throws {
                switch self {
                case let .case1(value):
                    try value.encode(to: encoder)
                case let .case2(value):
                    try value.encode(to: encoder)
                case let .case3(value):
                    try value.encode(to: encoder)
                case let .case4(value):
                    try value.encode(to: encoder)
                case let .case5(value):
                    try value.encode(to: encoder)
                case let .case6(value):
                    try value.encode(to: encoder)
                case let .case7(value):
                    try value.encode(to: encoder)
                }
            }
        }
        /// - Remark: Generated from `#/components/schemas/RunStreamEvent`.
        @frozen public enum RunStreamEvent: Codable, Hashable, Sendable {
            /// Occurs when a new [run](/docs/api-reference/runs/object) is created.
            ///
            /// - Remark: Generated from `#/components/schemas/RunStreamEvent/case1`.
            public struct Case1Payload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/RunStreamEvent/case1/event`.
                @frozen public enum EventPayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case thread_run_created = "thread.run.created"
                }
                /// - Remark: Generated from `#/components/schemas/RunStreamEvent/case1/event`.
                public var event: Components.Schemas.RunStreamEvent.Case1Payload.EventPayload
                /// - Remark: Generated from `#/components/schemas/RunStreamEvent/case1/data`.
                public var data: Components.Schemas.RunObject
                /// Creates a new `Case1Payload`.
                ///
                /// - Parameters:
                ///   - event:
                ///   - data:
                public init(
                    event: Components.Schemas.RunStreamEvent.Case1Payload.EventPayload,
                    data: Components.Schemas.RunObject
                ) {
                    self.event = event
                    self.data = data
                }
                public enum CodingKeys: String, CodingKey {
                    case event
                    case data
                }
            }
            /// Occurs when a new [run](/docs/api-reference/runs/object) is created.
            ///
            /// - Remark: Generated from `#/components/schemas/RunStreamEvent/case1`.
            case case1(Components.Schemas.RunStreamEvent.Case1Payload)
            /// Occurs when a [run](/docs/api-reference/runs/object) moves to a `queued` status.
            ///
            /// - Remark: Generated from `#/components/schemas/RunStreamEvent/case2`.
            public struct Case2Payload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/RunStreamEvent/case2/event`.
                @frozen public enum EventPayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case thread_run_queued = "thread.run.queued"
                }
                /// - Remark: Generated from `#/components/schemas/RunStreamEvent/case2/event`.
                public var event: Components.Schemas.RunStreamEvent.Case2Payload.EventPayload
                /// - Remark: Generated from `#/components/schemas/RunStreamEvent/case2/data`.
                public var data: Components.Schemas.RunObject
                /// Creates a new `Case2Payload`.
                ///
                /// - Parameters:
                ///   - event:
                ///   - data:
                public init(
                    event: Components.Schemas.RunStreamEvent.Case2Payload.EventPayload,
                    data: Components.Schemas.RunObject
                ) {
                    self.event = event
                    self.data = data
                }
                public enum CodingKeys: String, CodingKey {
                    case event
                    case data
                }
            }
            /// Occurs when a [run](/docs/api-reference/runs/object) moves to a `queued` status.
            ///
            /// - Remark: Generated from `#/components/schemas/RunStreamEvent/case2`.
            case case2(Components.Schemas.RunStreamEvent.Case2Payload)
            /// Occurs when a [run](/docs/api-reference/runs/object) moves to an `in_progress` status.
            ///
            /// - Remark: Generated from `#/components/schemas/RunStreamEvent/case3`.
            public struct Case3Payload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/RunStreamEvent/case3/event`.
                @frozen public enum EventPayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case thread_run_inProgress = "thread.run.in_progress"
                }
                /// - Remark: Generated from `#/components/schemas/RunStreamEvent/case3/event`.
                public var event: Components.Schemas.RunStreamEvent.Case3Payload.EventPayload
                /// - Remark: Generated from `#/components/schemas/RunStreamEvent/case3/data`.
                public var data: Components.Schemas.RunObject
                /// Creates a new `Case3Payload`.
                ///
                /// - Parameters:
                ///   - event:
                ///   - data:
                public init(
                    event: Components.Schemas.RunStreamEvent.Case3Payload.EventPayload,
                    data: Components.Schemas.RunObject
                ) {
                    self.event = event
                    self.data = data
                }
                public enum CodingKeys: String, CodingKey {
                    case event
                    case data
                }
            }
            /// Occurs when a [run](/docs/api-reference/runs/object) moves to an `in_progress` status.
            ///
            /// - Remark: Generated from `#/components/schemas/RunStreamEvent/case3`.
            case case3(Components.Schemas.RunStreamEvent.Case3Payload)
            /// Occurs when a [run](/docs/api-reference/runs/object) moves to a `requires_action` status.
            ///
            /// - Remark: Generated from `#/components/schemas/RunStreamEvent/case4`.
            public struct Case4Payload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/RunStreamEvent/case4/event`.
                @frozen public enum EventPayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case thread_run_requiresAction = "thread.run.requires_action"
                }
                /// - Remark: Generated from `#/components/schemas/RunStreamEvent/case4/event`.
                public var event: Components.Schemas.RunStreamEvent.Case4Payload.EventPayload
                /// - Remark: Generated from `#/components/schemas/RunStreamEvent/case4/data`.
                public var data: Components.Schemas.RunObject
                /// Creates a new `Case4Payload`.
                ///
                /// - Parameters:
                ///   - event:
                ///   - data:
                public init(
                    event: Components.Schemas.RunStreamEvent.Case4Payload.EventPayload,
                    data: Components.Schemas.RunObject
                ) {
                    self.event = event
                    self.data = data
                }
                public enum CodingKeys: String, CodingKey {
                    case event
                    case data
                }
            }
            /// Occurs when a [run](/docs/api-reference/runs/object) moves to a `requires_action` status.
            ///
            /// - Remark: Generated from `#/components/schemas/RunStreamEvent/case4`.
            case case4(Components.Schemas.RunStreamEvent.Case4Payload)
            /// Occurs when a [run](/docs/api-reference/runs/object) is completed.
            ///
            /// - Remark: Generated from `#/components/schemas/RunStreamEvent/case5`.
            public struct Case5Payload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/RunStreamEvent/case5/event`.
                @frozen public enum EventPayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case thread_run_completed = "thread.run.completed"
                }
                /// - Remark: Generated from `#/components/schemas/RunStreamEvent/case5/event`.
                public var event: Components.Schemas.RunStreamEvent.Case5Payload.EventPayload
                /// - Remark: Generated from `#/components/schemas/RunStreamEvent/case5/data`.
                public var data: Components.Schemas.RunObject
                /// Creates a new `Case5Payload`.
                ///
                /// - Parameters:
                ///   - event:
                ///   - data:
                public init(
                    event: Components.Schemas.RunStreamEvent.Case5Payload.EventPayload,
                    data: Components.Schemas.RunObject
                ) {
                    self.event = event
                    self.data = data
                }
                public enum CodingKeys: String, CodingKey {
                    case event
                    case data
                }
            }
            /// Occurs when a [run](/docs/api-reference/runs/object) is completed.
            ///
            /// - Remark: Generated from `#/components/schemas/RunStreamEvent/case5`.
            case case5(Components.Schemas.RunStreamEvent.Case5Payload)
            /// Occurs when a [run](/docs/api-reference/runs/object) ends with status `incomplete`.
            ///
            /// - Remark: Generated from `#/components/schemas/RunStreamEvent/case6`.
            public struct Case6Payload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/RunStreamEvent/case6/event`.
                @frozen public enum EventPayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case thread_run_incomplete = "thread.run.incomplete"
                }
                /// - Remark: Generated from `#/components/schemas/RunStreamEvent/case6/event`.
                public var event: Components.Schemas.RunStreamEvent.Case6Payload.EventPayload
                /// - Remark: Generated from `#/components/schemas/RunStreamEvent/case6/data`.
                public var data: Components.Schemas.RunObject
                /// Creates a new `Case6Payload`.
                ///
                /// - Parameters:
                ///   - event:
                ///   - data:
                public init(
                    event: Components.Schemas.RunStreamEvent.Case6Payload.EventPayload,
                    data: Components.Schemas.RunObject
                ) {
                    self.event = event
                    self.data = data
                }
                public enum CodingKeys: String, CodingKey {
                    case event
                    case data
                }
            }
            /// Occurs when a [run](/docs/api-reference/runs/object) ends with status `incomplete`.
            ///
            /// - Remark: Generated from `#/components/schemas/RunStreamEvent/case6`.
            case case6(Components.Schemas.RunStreamEvent.Case6Payload)
            /// Occurs when a [run](/docs/api-reference/runs/object) fails.
            ///
            /// - Remark: Generated from `#/components/schemas/RunStreamEvent/case7`.
            public struct Case7Payload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/RunStreamEvent/case7/event`.
                @frozen public enum EventPayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case thread_run_failed = "thread.run.failed"
                }
                /// - Remark: Generated from `#/components/schemas/RunStreamEvent/case7/event`.
                public var event: Components.Schemas.RunStreamEvent.Case7Payload.EventPayload
                /// - Remark: Generated from `#/components/schemas/RunStreamEvent/case7/data`.
                public var data: Components.Schemas.RunObject
                /// Creates a new `Case7Payload`.
                ///
                /// - Parameters:
                ///   - event:
                ///   - data:
                public init(
                    event: Components.Schemas.RunStreamEvent.Case7Payload.EventPayload,
                    data: Components.Schemas.RunObject
                ) {
                    self.event = event
                    self.data = data
                }
                public enum CodingKeys: String, CodingKey {
                    case event
                    case data
                }
            }
            /// Occurs when a [run](/docs/api-reference/runs/object) fails.
            ///
            /// - Remark: Generated from `#/components/schemas/RunStreamEvent/case7`.
            case case7(Components.Schemas.RunStreamEvent.Case7Payload)
            /// Occurs when a [run](/docs/api-reference/runs/object) moves to a `cancelling` status.
            ///
            /// - Remark: Generated from `#/components/schemas/RunStreamEvent/case8`.
            public struct Case8Payload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/RunStreamEvent/case8/event`.
                @frozen public enum EventPayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case thread_run_cancelling = "thread.run.cancelling"
                }
                /// - Remark: Generated from `#/components/schemas/RunStreamEvent/case8/event`.
                public var event: Components.Schemas.RunStreamEvent.Case8Payload.EventPayload
                /// - Remark: Generated from `#/components/schemas/RunStreamEvent/case8/data`.
                public var data: Components.Schemas.RunObject
                /// Creates a new `Case8Payload`.
                ///
                /// - Parameters:
                ///   - event:
                ///   - data:
                public init(
                    event: Components.Schemas.RunStreamEvent.Case8Payload.EventPayload,
                    data: Components.Schemas.RunObject
                ) {
                    self.event = event
                    self.data = data
                }
                public enum CodingKeys: String, CodingKey {
                    case event
                    case data
                }
            }
            /// Occurs when a [run](/docs/api-reference/runs/object) moves to a `cancelling` status.
            ///
            /// - Remark: Generated from `#/components/schemas/RunStreamEvent/case8`.
            case case8(Components.Schemas.RunStreamEvent.Case8Payload)
            /// Occurs when a [run](/docs/api-reference/runs/object) is cancelled.
            ///
            /// - Remark: Generated from `#/components/schemas/RunStreamEvent/case9`.
            public struct Case9Payload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/RunStreamEvent/case9/event`.
                @frozen public enum EventPayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case thread_run_cancelled = "thread.run.cancelled"
                }
                /// - Remark: Generated from `#/components/schemas/RunStreamEvent/case9/event`.
                public var event: Components.Schemas.RunStreamEvent.Case9Payload.EventPayload
                /// - Remark: Generated from `#/components/schemas/RunStreamEvent/case9/data`.
                public var data: Components.Schemas.RunObject
                /// Creates a new `Case9Payload`.
                ///
                /// - Parameters:
                ///   - event:
                ///   - data:
                public init(
                    event: Components.Schemas.RunStreamEvent.Case9Payload.EventPayload,
                    data: Components.Schemas.RunObject
                ) {
                    self.event = event
                    self.data = data
                }
                public enum CodingKeys: String, CodingKey {
                    case event
                    case data
                }
            }
            /// Occurs when a [run](/docs/api-reference/runs/object) is cancelled.
            ///
            /// - Remark: Generated from `#/components/schemas/RunStreamEvent/case9`.
            case case9(Components.Schemas.RunStreamEvent.Case9Payload)
            /// Occurs when a [run](/docs/api-reference/runs/object) expires.
            ///
            /// - Remark: Generated from `#/components/schemas/RunStreamEvent/case10`.
            public struct Case10Payload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/RunStreamEvent/case10/event`.
                @frozen public enum EventPayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case thread_run_expired = "thread.run.expired"
                }
                /// - Remark: Generated from `#/components/schemas/RunStreamEvent/case10/event`.
                public var event: Components.Schemas.RunStreamEvent.Case10Payload.EventPayload
                /// - Remark: Generated from `#/components/schemas/RunStreamEvent/case10/data`.
                public var data: Components.Schemas.RunObject
                /// Creates a new `Case10Payload`.
                ///
                /// - Parameters:
                ///   - event:
                ///   - data:
                public init(
                    event: Components.Schemas.RunStreamEvent.Case10Payload.EventPayload,
                    data: Components.Schemas.RunObject
                ) {
                    self.event = event
                    self.data = data
                }
                public enum CodingKeys: String, CodingKey {
                    case event
                    case data
                }
            }
            /// Occurs when a [run](/docs/api-reference/runs/object) expires.
            ///
            /// - Remark: Generated from `#/components/schemas/RunStreamEvent/case10`.
            case case10(Components.Schemas.RunStreamEvent.Case10Payload)
            public init(from decoder: any Decoder) throws {
                var errors: [any Error] = []
                do {
                    self = .case1(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                do {
                    self = .case2(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                do {
                    self = .case3(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                do {
                    self = .case4(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                do {
                    self = .case5(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                do {
                    self = .case6(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                do {
                    self = .case7(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                do {
                    self = .case8(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                do {
                    self = .case9(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                do {
                    self = .case10(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                throw Swift.DecodingError.failedToDecodeOneOfSchema(
                    type: Self.self,
                    codingPath: decoder.codingPath,
                    errors: errors
                )
            }
            public func encode(to encoder: any Encoder) throws {
                switch self {
                case let .case1(value):
                    try value.encode(to: encoder)
                case let .case2(value):
                    try value.encode(to: encoder)
                case let .case3(value):
                    try value.encode(to: encoder)
                case let .case4(value):
                    try value.encode(to: encoder)
                case let .case5(value):
                    try value.encode(to: encoder)
                case let .case6(value):
                    try value.encode(to: encoder)
                case let .case7(value):
                    try value.encode(to: encoder)
                case let .case8(value):
                    try value.encode(to: encoder)
                case let .case9(value):
                    try value.encode(to: encoder)
                case let .case10(value):
                    try value.encode(to: encoder)
                }
            }
        }
        /// Tool call objects
        ///
        /// - Remark: Generated from `#/components/schemas/RunToolCallObject`.
        public struct RunToolCallObject: Codable, Hashable, Sendable {
            /// The ID of the tool call. This ID must be referenced when you submit the tool outputs in using the [Submit tool outputs to run](/docs/api-reference/runs/submitToolOutputs) endpoint.
            ///
            /// - Remark: Generated from `#/components/schemas/RunToolCallObject/id`.
            public var id: Swift.String
            /// The type of tool call the output is required for. For now, this is always `function`.
            ///
            /// - Remark: Generated from `#/components/schemas/RunToolCallObject/type`.
            @frozen public enum _TypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                case function = "function"
            }
            /// The type of tool call the output is required for. For now, this is always `function`.
            ///
            /// - Remark: Generated from `#/components/schemas/RunToolCallObject/type`.
            public var _type: Components.Schemas.RunToolCallObject._TypePayload
            /// The function definition.
            ///
            /// - Remark: Generated from `#/components/schemas/RunToolCallObject/function`.
            public struct FunctionPayload: Codable, Hashable, Sendable {
                /// The name of the function.
                ///
                /// - Remark: Generated from `#/components/schemas/RunToolCallObject/function/name`.
                public var name: Swift.String
                /// The arguments that the model expects you to pass to the function.
                ///
                /// - Remark: Generated from `#/components/schemas/RunToolCallObject/function/arguments`.
                public var arguments: Swift.String
                /// Creates a new `FunctionPayload`.
                ///
                /// - Parameters:
                ///   - name: The name of the function.
                ///   - arguments: The arguments that the model expects you to pass to the function.
                public init(
                    name: Swift.String,
                    arguments: Swift.String
                ) {
                    self.name = name
                    self.arguments = arguments
                }
                public enum CodingKeys: String, CodingKey {
                    case name
                    case arguments
                }
            }
            /// The function definition.
            ///
            /// - Remark: Generated from `#/components/schemas/RunToolCallObject/function`.
            public var function: Components.Schemas.RunToolCallObject.FunctionPayload
            /// Creates a new `RunToolCallObject`.
            ///
            /// - Parameters:
            ///   - id: The ID of the tool call. This ID must be referenced when you submit the tool outputs in using the [Submit tool outputs to run](/docs/api-reference/runs/submitToolOutputs) endpoint.
            ///   - _type: The type of tool call the output is required for. For now, this is always `function`.
            ///   - function: The function definition.
            public init(
                id: Swift.String,
                _type: Components.Schemas.RunToolCallObject._TypePayload,
                function: Components.Schemas.RunToolCallObject.FunctionPayload
            ) {
                self.id = id
                self._type = _type
                self.function = function
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case _type = "type"
                case function
            }
        }
        /// - Remark: Generated from `#/components/schemas/StaticChunkingStrategy`.
        public struct StaticChunkingStrategy: Codable, Hashable, Sendable {
            /// The maximum number of tokens in each chunk. The default value is `800`. The minimum value is `100` and the maximum value is `4096`.
            ///
            /// - Remark: Generated from `#/components/schemas/StaticChunkingStrategy/max_chunk_size_tokens`.
            public var maxChunkSizeTokens: Swift.Int
            /// The number of tokens that overlap between chunks. The default value is `400`.
            ///
            /// Note that the overlap must not exceed half of `max_chunk_size_tokens`.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/StaticChunkingStrategy/chunk_overlap_tokens`.
            public var chunkOverlapTokens: Swift.Int
            /// Creates a new `StaticChunkingStrategy`.
            ///
            /// - Parameters:
            ///   - maxChunkSizeTokens: The maximum number of tokens in each chunk. The default value is `800`. The minimum value is `100` and the maximum value is `4096`.
            ///   - chunkOverlapTokens: The number of tokens that overlap between chunks. The default value is `400`.
            public init(
                maxChunkSizeTokens: Swift.Int,
                chunkOverlapTokens: Swift.Int
            ) {
                self.maxChunkSizeTokens = maxChunkSizeTokens
                self.chunkOverlapTokens = chunkOverlapTokens
            }
            public enum CodingKeys: String, CodingKey {
                case maxChunkSizeTokens = "max_chunk_size_tokens"
                case chunkOverlapTokens = "chunk_overlap_tokens"
            }
            public init(from decoder: any Decoder) throws {
                let container = try decoder.container(keyedBy: CodingKeys.self)
                self.maxChunkSizeTokens = try container.decode(
                    Swift.Int.self,
                    forKey: .maxChunkSizeTokens
                )
                self.chunkOverlapTokens = try container.decode(
                    Swift.Int.self,
                    forKey: .chunkOverlapTokens
                )
                try decoder.ensureNoAdditionalProperties(knownKeys: [
                    "max_chunk_size_tokens",
                    "chunk_overlap_tokens"
                ])
            }
        }
        /// - Remark: Generated from `#/components/schemas/StaticChunkingStrategyRequestParam`.
        public struct StaticChunkingStrategyRequestParam: Codable, Hashable, Sendable {
            /// Always `static`.
            ///
            /// - Remark: Generated from `#/components/schemas/StaticChunkingStrategyRequestParam/type`.
            @frozen public enum _TypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                case _static = "static"
            }
            /// Always `static`.
            ///
            /// - Remark: Generated from `#/components/schemas/StaticChunkingStrategyRequestParam/type`.
            public var _type: Components.Schemas.StaticChunkingStrategyRequestParam._TypePayload
            /// - Remark: Generated from `#/components/schemas/StaticChunkingStrategyRequestParam/static`.
            public var _static: Components.Schemas.StaticChunkingStrategy
            /// Creates a new `StaticChunkingStrategyRequestParam`.
            ///
            /// - Parameters:
            ///   - _type: Always `static`.
            ///   - _static:
            public init(
                _type: Components.Schemas.StaticChunkingStrategyRequestParam._TypePayload,
                _static: Components.Schemas.StaticChunkingStrategy
            ) {
                self._type = _type
                self._static = _static
            }
            public enum CodingKeys: String, CodingKey {
                case _type = "type"
                case _static = "static"
            }
            public init(from decoder: any Decoder) throws {
                let container = try decoder.container(keyedBy: CodingKeys.self)
                self._type = try container.decode(
                    Components.Schemas.StaticChunkingStrategyRequestParam._TypePayload.self,
                    forKey: ._type
                )
                self._static = try container.decode(
                    Components.Schemas.StaticChunkingStrategy.self,
                    forKey: ._static
                )
                try decoder.ensureNoAdditionalProperties(knownKeys: [
                    "type",
                    "static"
                ])
            }
        }
        /// - Remark: Generated from `#/components/schemas/StaticChunkingStrategyResponseParam`.
        public struct StaticChunkingStrategyResponseParam: Codable, Hashable, Sendable {
            /// Always `static`.
            ///
            /// - Remark: Generated from `#/components/schemas/StaticChunkingStrategyResponseParam/type`.
            @frozen public enum _TypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                case _static = "static"
            }
            /// Always `static`.
            ///
            /// - Remark: Generated from `#/components/schemas/StaticChunkingStrategyResponseParam/type`.
            public var _type: Components.Schemas.StaticChunkingStrategyResponseParam._TypePayload
            /// - Remark: Generated from `#/components/schemas/StaticChunkingStrategyResponseParam/static`.
            public var _static: Components.Schemas.StaticChunkingStrategy
            /// Creates a new `StaticChunkingStrategyResponseParam`.
            ///
            /// - Parameters:
            ///   - _type: Always `static`.
            ///   - _static:
            public init(
                _type: Components.Schemas.StaticChunkingStrategyResponseParam._TypePayload,
                _static: Components.Schemas.StaticChunkingStrategy
            ) {
                self._type = _type
                self._static = _static
            }
            public enum CodingKeys: String, CodingKey {
                case _type = "type"
                case _static = "static"
            }
            public init(from decoder: any Decoder) throws {
                let container = try decoder.container(keyedBy: CodingKeys.self)
                self._type = try container.decode(
                    Components.Schemas.StaticChunkingStrategyResponseParam._TypePayload.self,
                    forKey: ._type
                )
                self._static = try container.decode(
                    Components.Schemas.StaticChunkingStrategy.self,
                    forKey: ._static
                )
                try decoder.ensureNoAdditionalProperties(knownKeys: [
                    "type",
                    "static"
                ])
            }
        }
        /// - Remark: Generated from `#/components/schemas/SubmitToolOutputsRunRequest`.
        public struct SubmitToolOutputsRunRequest: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/SubmitToolOutputsRunRequest/ToolOutputsPayload`.
            public struct ToolOutputsPayloadPayload: Codable, Hashable, Sendable {
                /// The ID of the tool call in the `required_action` object within the run object the output is being submitted for.
                ///
                /// - Remark: Generated from `#/components/schemas/SubmitToolOutputsRunRequest/ToolOutputsPayload/tool_call_id`.
                public var toolCallId: Swift.String?
                /// The output of the tool call to be submitted to continue the run.
                ///
                /// - Remark: Generated from `#/components/schemas/SubmitToolOutputsRunRequest/ToolOutputsPayload/output`.
                public var output: Swift.String?
                /// Creates a new `ToolOutputsPayloadPayload`.
                ///
                /// - Parameters:
                ///   - toolCallId: The ID of the tool call in the `required_action` object within the run object the output is being submitted for.
                ///   - output: The output of the tool call to be submitted to continue the run.
                public init(
                    toolCallId: Swift.String? = nil,
                    output: Swift.String? = nil
                ) {
                    self.toolCallId = toolCallId
                    self.output = output
                }
                public enum CodingKeys: String, CodingKey {
                    case toolCallId = "tool_call_id"
                    case output
                }
            }
            /// A list of tools for which the outputs are being submitted.
            ///
            /// - Remark: Generated from `#/components/schemas/SubmitToolOutputsRunRequest/tool_outputs`.
            public typealias ToolOutputsPayload = [Components.Schemas.SubmitToolOutputsRunRequest.ToolOutputsPayloadPayload]
            /// A list of tools for which the outputs are being submitted.
            ///
            /// - Remark: Generated from `#/components/schemas/SubmitToolOutputsRunRequest/tool_outputs`.
            public var toolOutputs: Components.Schemas.SubmitToolOutputsRunRequest.ToolOutputsPayload
            /// If `true`, returns a stream of events that happen during the Run as server-sent events, terminating when the Run enters a terminal state with a `data: [DONE]` message.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/SubmitToolOutputsRunRequest/stream`.
            public var stream: Swift.Bool?
            /// Creates a new `SubmitToolOutputsRunRequest`.
            ///
            /// - Parameters:
            ///   - toolOutputs: A list of tools for which the outputs are being submitted.
            ///   - stream: If `true`, returns a stream of events that happen during the Run as server-sent events, terminating when the Run enters a terminal state with a `data: [DONE]` message.
            public init(
                toolOutputs: Components.Schemas.SubmitToolOutputsRunRequest.ToolOutputsPayload,
                stream: Swift.Bool? = nil
            ) {
                self.toolOutputs = toolOutputs
                self.stream = stream
            }
            public enum CodingKeys: String, CodingKey {
                case toolOutputs = "tool_outputs"
                case stream
            }
            public init(from decoder: any Decoder) throws {
                let container = try decoder.container(keyedBy: CodingKeys.self)
                self.toolOutputs = try container.decode(
                    Components.Schemas.SubmitToolOutputsRunRequest.ToolOutputsPayload.self,
                    forKey: .toolOutputs
                )
                self.stream = try container.decodeIfPresent(
                    Swift.Bool.self,
                    forKey: .stream
                )
                try decoder.ensureNoAdditionalProperties(knownKeys: [
                    "tool_outputs",
                    "stream"
                ])
            }
        }
        /// Represents a thread that contains [messages](/docs/api-reference/messages).
        ///
        /// - Remark: Generated from `#/components/schemas/ThreadObject`.
        public struct ThreadObject: Codable, Hashable, Sendable {
            /// The identifier, which can be referenced in API endpoints.
            ///
            /// - Remark: Generated from `#/components/schemas/ThreadObject/id`.
            public var id: Swift.String
            /// The object type, which is always `thread`.
            ///
            /// - Remark: Generated from `#/components/schemas/ThreadObject/object`.
            @frozen public enum ObjectPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case thread = "thread"
            }
            /// The object type, which is always `thread`.
            ///
            /// - Remark: Generated from `#/components/schemas/ThreadObject/object`.
            public var object: Components.Schemas.ThreadObject.ObjectPayload
            /// The Unix timestamp (in seconds) for when the thread was created.
            ///
            /// - Remark: Generated from `#/components/schemas/ThreadObject/created_at`.
            public var createdAt: Swift.Int
            /// A set of resources that are made available to the assistant's tools in this thread. The resources are specific to the type of tool. For example, the `code_interpreter` tool requires a list of file IDs, while the `file_search` tool requires a list of vector store IDs.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/ThreadObject/tool_resources`.
            public struct ToolResourcesPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/ThreadObject/tool_resources/code_interpreter`.
                public struct CodeInterpreterPayload: Codable, Hashable, Sendable {
                    /// A list of [file](/docs/api-reference/files) IDs made available to the `code_interpreter` tool. There can be a maximum of 20 files associated with the tool.
                    ///
                    ///
                    /// - Remark: Generated from `#/components/schemas/ThreadObject/tool_resources/code_interpreter/file_ids`.
                    public var fileIds: [Swift.String]?
                    /// Creates a new `CodeInterpreterPayload`.
                    ///
                    /// - Parameters:
                    ///   - fileIds: A list of [file](/docs/api-reference/files) IDs made available to the `code_interpreter` tool. There can be a maximum of 20 files associated with the tool.
                    public init(fileIds: [Swift.String]? = nil) {
                        self.fileIds = fileIds
                    }
                    public enum CodingKeys: String, CodingKey {
                        case fileIds = "file_ids"
                    }
                }
                /// - Remark: Generated from `#/components/schemas/ThreadObject/tool_resources/code_interpreter`.
                public var codeInterpreter: Components.Schemas.ThreadObject.ToolResourcesPayload.CodeInterpreterPayload?
                /// - Remark: Generated from `#/components/schemas/ThreadObject/tool_resources/file_search`.
                public struct FileSearchPayload: Codable, Hashable, Sendable {
                    /// The [vector store](/docs/api-reference/vector-stores/object) attached to this thread. There can be a maximum of 1 vector store attached to the thread.
                    ///
                    ///
                    /// - Remark: Generated from `#/components/schemas/ThreadObject/tool_resources/file_search/vector_store_ids`.
                    public var vectorStoreIds: [Swift.String]?
                    /// Creates a new `FileSearchPayload`.
                    ///
                    /// - Parameters:
                    ///   - vectorStoreIds: The [vector store](/docs/api-reference/vector-stores/object) attached to this thread. There can be a maximum of 1 vector store attached to the thread.
                    public init(vectorStoreIds: [Swift.String]? = nil) {
                        self.vectorStoreIds = vectorStoreIds
                    }
                    public enum CodingKeys: String, CodingKey {
                        case vectorStoreIds = "vector_store_ids"
                    }
                }
                /// - Remark: Generated from `#/components/schemas/ThreadObject/tool_resources/file_search`.
                public var fileSearch: Components.Schemas.ThreadObject.ToolResourcesPayload.FileSearchPayload?
                /// Creates a new `ToolResourcesPayload`.
                ///
                /// - Parameters:
                ///   - codeInterpreter:
                ///   - fileSearch:
                public init(
                    codeInterpreter: Components.Schemas.ThreadObject.ToolResourcesPayload.CodeInterpreterPayload? = nil,
                    fileSearch: Components.Schemas.ThreadObject.ToolResourcesPayload.FileSearchPayload? = nil
                ) {
                    self.codeInterpreter = codeInterpreter
                    self.fileSearch = fileSearch
                }
                public enum CodingKeys: String, CodingKey {
                    case codeInterpreter = "code_interpreter"
                    case fileSearch = "file_search"
                }
            }
            /// A set of resources that are made available to the assistant's tools in this thread. The resources are specific to the type of tool. For example, the `code_interpreter` tool requires a list of file IDs, while the `file_search` tool requires a list of vector store IDs.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/ThreadObject/tool_resources`.
            public var toolResources: Components.Schemas.ThreadObject.ToolResourcesPayload?
            /// - Remark: Generated from `#/components/schemas/ThreadObject/metadata`.
            public var metadata: Components.Schemas.Metadata?
            /// Creates a new `ThreadObject`.
            ///
            /// - Parameters:
            ///   - id: The identifier, which can be referenced in API endpoints.
            ///   - object: The object type, which is always `thread`.
            ///   - createdAt: The Unix timestamp (in seconds) for when the thread was created.
            ///   - toolResources: A set of resources that are made available to the assistant's tools in this thread. The resources are specific to the type of tool. For example, the `code_interpreter` tool requires a list of file IDs, while the `file_search` tool requires a list of vector store IDs.
            ///   - metadata:
            public init(
                id: Swift.String,
                object: Components.Schemas.ThreadObject.ObjectPayload,
                createdAt: Swift.Int,
                toolResources: Components.Schemas.ThreadObject.ToolResourcesPayload? = nil,
                metadata: Components.Schemas.Metadata? = nil
            ) {
                self.id = id
                self.object = object
                self.createdAt = createdAt
                self.toolResources = toolResources
                self.metadata = metadata
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case object
                case createdAt = "created_at"
                case toolResources = "tool_resources"
                case metadata
            }
        }
        /// - Remark: Generated from `#/components/schemas/ThreadStreamEvent`.
        @frozen public enum ThreadStreamEvent: Codable, Hashable, Sendable {
            /// Occurs when a new [thread](/docs/api-reference/threads/object) is created.
            ///
            /// - Remark: Generated from `#/components/schemas/ThreadStreamEvent/case1`.
            public struct Case1Payload: Codable, Hashable, Sendable {
                /// Whether to enable input audio transcription.
                ///
                /// - Remark: Generated from `#/components/schemas/ThreadStreamEvent/case1/enabled`.
                public var enabled: Swift.Bool?
                /// - Remark: Generated from `#/components/schemas/ThreadStreamEvent/case1/event`.
                @frozen public enum EventPayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case thread_created = "thread.created"
                }
                /// - Remark: Generated from `#/components/schemas/ThreadStreamEvent/case1/event`.
                public var event: Components.Schemas.ThreadStreamEvent.Case1Payload.EventPayload
                /// - Remark: Generated from `#/components/schemas/ThreadStreamEvent/case1/data`.
                public var data: Components.Schemas.ThreadObject
                /// Creates a new `Case1Payload`.
                ///
                /// - Parameters:
                ///   - enabled: Whether to enable input audio transcription.
                ///   - event:
                ///   - data:
                public init(
                    enabled: Swift.Bool? = nil,
                    event: Components.Schemas.ThreadStreamEvent.Case1Payload.EventPayload,
                    data: Components.Schemas.ThreadObject
                ) {
                    self.enabled = enabled
                    self.event = event
                    self.data = data
                }
                public enum CodingKeys: String, CodingKey {
                    case enabled
                    case event
                    case data
                }
            }
            /// Occurs when a new [thread](/docs/api-reference/threads/object) is created.
            ///
            /// - Remark: Generated from `#/components/schemas/ThreadStreamEvent/case1`.
            case case1(Components.Schemas.ThreadStreamEvent.Case1Payload)
            public init(from decoder: any Decoder) throws {
                var errors: [any Error] = []
                do {
                    self = .case1(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                throw Swift.DecodingError.failedToDecodeOneOfSchema(
                    type: Self.self,
                    codingPath: decoder.codingPath,
                    errors: errors
                )
            }
            public func encode(to encoder: any Encoder) throws {
                switch self {
                case let .case1(value):
                    try value.encode(to: encoder)
                }
            }
        }
        /// - Remark: Generated from `#/components/schemas/TranscriptionSegment`.
        public struct TranscriptionSegment: Codable, Hashable, Sendable {
            /// Unique identifier of the segment.
            ///
            /// - Remark: Generated from `#/components/schemas/TranscriptionSegment/id`.
            public var id: Swift.Int
            /// Seek offset of the segment.
            ///
            /// - Remark: Generated from `#/components/schemas/TranscriptionSegment/seek`.
            public var seek: Swift.Int
            /// Start time of the segment in seconds.
            ///
            /// - Remark: Generated from `#/components/schemas/TranscriptionSegment/start`.
            public var start: Swift.Float
            /// End time of the segment in seconds.
            ///
            /// - Remark: Generated from `#/components/schemas/TranscriptionSegment/end`.
            public var end: Swift.Float
            /// Text content of the segment.
            ///
            /// - Remark: Generated from `#/components/schemas/TranscriptionSegment/text`.
            public var text: Swift.String
            /// Array of token IDs for the text content.
            ///
            /// - Remark: Generated from `#/components/schemas/TranscriptionSegment/tokens`.
            public var tokens: [Swift.Int]
            /// Temperature parameter used for generating the segment.
            ///
            /// - Remark: Generated from `#/components/schemas/TranscriptionSegment/temperature`.
            public var temperature: Swift.Float
            /// Average logprob of the segment. If the value is lower than -1, consider the logprobs failed.
            ///
            /// - Remark: Generated from `#/components/schemas/TranscriptionSegment/avg_logprob`.
            public var avgLogprob: Swift.Float
            /// Compression ratio of the segment. If the value is greater than 2.4, consider the compression failed.
            ///
            /// - Remark: Generated from `#/components/schemas/TranscriptionSegment/compression_ratio`.
            public var compressionRatio: Swift.Float
            /// Probability of no speech in the segment. If the value is higher than 1.0 and the `avg_logprob` is below -1, consider this segment silent.
            ///
            /// - Remark: Generated from `#/components/schemas/TranscriptionSegment/no_speech_prob`.
            public var noSpeechProb: Swift.Float
            /// Creates a new `TranscriptionSegment`.
            ///
            /// - Parameters:
            ///   - id: Unique identifier of the segment.
            ///   - seek: Seek offset of the segment.
            ///   - start: Start time of the segment in seconds.
            ///   - end: End time of the segment in seconds.
            ///   - text: Text content of the segment.
            ///   - tokens: Array of token IDs for the text content.
            ///   - temperature: Temperature parameter used for generating the segment.
            ///   - avgLogprob: Average logprob of the segment. If the value is lower than -1, consider the logprobs failed.
            ///   - compressionRatio: Compression ratio of the segment. If the value is greater than 2.4, consider the compression failed.
            ///   - noSpeechProb: Probability of no speech in the segment. If the value is higher than 1.0 and the `avg_logprob` is below -1, consider this segment silent.
            public init(
                id: Swift.Int,
                seek: Swift.Int,
                start: Swift.Float,
                end: Swift.Float,
                text: Swift.String,
                tokens: [Swift.Int],
                temperature: Swift.Float,
                avgLogprob: Swift.Float,
                compressionRatio: Swift.Float,
                noSpeechProb: Swift.Float
            ) {
                self.id = id
                self.seek = seek
                self.start = start
                self.end = end
                self.text = text
                self.tokens = tokens
                self.temperature = temperature
                self.avgLogprob = avgLogprob
                self.compressionRatio = compressionRatio
                self.noSpeechProb = noSpeechProb
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case seek
                case start
                case end
                case text
                case tokens
                case temperature
                case avgLogprob = "avg_logprob"
                case compressionRatio = "compression_ratio"
                case noSpeechProb = "no_speech_prob"
            }
        }
        /// - Remark: Generated from `#/components/schemas/TranscriptionWord`.
        public struct TranscriptionWord: Codable, Hashable, Sendable {
            /// The text content of the word.
            ///
            /// - Remark: Generated from `#/components/schemas/TranscriptionWord/word`.
            public var word: Swift.String
            /// Start time of the word in seconds.
            ///
            /// - Remark: Generated from `#/components/schemas/TranscriptionWord/start`.
            public var start: Swift.Float
            /// End time of the word in seconds.
            ///
            /// - Remark: Generated from `#/components/schemas/TranscriptionWord/end`.
            public var end: Swift.Float
            /// Creates a new `TranscriptionWord`.
            ///
            /// - Parameters:
            ///   - word: The text content of the word.
            ///   - start: Start time of the word in seconds.
            ///   - end: End time of the word in seconds.
            public init(
                word: Swift.String,
                start: Swift.Float,
                end: Swift.Float
            ) {
                self.word = word
                self.start = start
                self.end = end
            }
            public enum CodingKeys: String, CodingKey {
                case word
                case start
                case end
            }
        }
        /// Controls for how a thread will be truncated prior to the run. Use this to control the intial context window of the run.
        ///
        /// - Remark: Generated from `#/components/schemas/TruncationObject`.
        public struct TruncationObject: Codable, Hashable, Sendable {
            /// The truncation strategy to use for the thread. The default is `auto`. If set to `last_messages`, the thread will be truncated to the n most recent messages in the thread. When set to `auto`, messages in the middle of the thread will be dropped to fit the context length of the model, `max_prompt_tokens`.
            ///
            /// - Remark: Generated from `#/components/schemas/TruncationObject/type`.
            @frozen public enum _TypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                case auto = "auto"
                case lastMessages = "last_messages"
            }
            /// The truncation strategy to use for the thread. The default is `auto`. If set to `last_messages`, the thread will be truncated to the n most recent messages in the thread. When set to `auto`, messages in the middle of the thread will be dropped to fit the context length of the model, `max_prompt_tokens`.
            ///
            /// - Remark: Generated from `#/components/schemas/TruncationObject/type`.
            public var _type: Components.Schemas.TruncationObject._TypePayload
            /// The number of most recent messages from the thread when constructing the context for the run.
            ///
            /// - Remark: Generated from `#/components/schemas/TruncationObject/last_messages`.
            public var lastMessages: Swift.Int?
            /// Creates a new `TruncationObject`.
            ///
            /// - Parameters:
            ///   - _type: The truncation strategy to use for the thread. The default is `auto`. If set to `last_messages`, the thread will be truncated to the n most recent messages in the thread. When set to `auto`, messages in the middle of the thread will be dropped to fit the context length of the model, `max_prompt_tokens`.
            ///   - lastMessages: The number of most recent messages from the thread when constructing the context for the run.
            public init(
                _type: Components.Schemas.TruncationObject._TypePayload,
                lastMessages: Swift.Int? = nil
            ) {
                self._type = _type
                self.lastMessages = lastMessages
            }
            public enum CodingKeys: String, CodingKey {
                case _type = "type"
                case lastMessages = "last_messages"
            }
        }
        /// - Remark: Generated from `#/components/schemas/UpdateVectorStoreRequest`.
        public struct UpdateVectorStoreRequest: Codable, Hashable, Sendable {
            /// The name of the vector store.
            ///
            /// - Remark: Generated from `#/components/schemas/UpdateVectorStoreRequest/name`.
            public var name: Swift.String?
            /// - Remark: Generated from `#/components/schemas/UpdateVectorStoreRequest/expires_after`.
            public struct ExpiresAfterPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/UpdateVectorStoreRequest/expires_after/value1`.
                public var value1: Components.Schemas.VectorStoreExpirationAfter
                /// - Remark: Generated from `#/components/schemas/UpdateVectorStoreRequest/expires_after/value2`.
                public var value2: OpenAPIRuntime.OpenAPIValueContainer
                /// Creates a new `ExpiresAfterPayload`.
                ///
                /// - Parameters:
                ///   - value1:
                ///   - value2:
                public init(
                    value1: Components.Schemas.VectorStoreExpirationAfter,
                    value2: OpenAPIRuntime.OpenAPIValueContainer
                ) {
                    self.value1 = value1
                    self.value2 = value2
                }
                public init(from decoder: any Decoder) throws {
                    self.value1 = try .init(from: decoder)
                    self.value2 = try .init(from: decoder)
                }
                public func encode(to encoder: any Encoder) throws {
                    try self.value1.encode(to: encoder)
                    try self.value2.encode(to: encoder)
                }
            }
            /// - Remark: Generated from `#/components/schemas/UpdateVectorStoreRequest/expires_after`.
            public var expiresAfter: Components.Schemas.UpdateVectorStoreRequest.ExpiresAfterPayload?
            /// - Remark: Generated from `#/components/schemas/UpdateVectorStoreRequest/metadata`.
            public var metadata: Components.Schemas.Metadata?
            /// Creates a new `UpdateVectorStoreRequest`.
            ///
            /// - Parameters:
            ///   - name: The name of the vector store.
            ///   - expiresAfter:
            ///   - metadata:
            public init(
                name: Swift.String? = nil,
                expiresAfter: Components.Schemas.UpdateVectorStoreRequest.ExpiresAfterPayload? = nil,
                metadata: Components.Schemas.Metadata? = nil
            ) {
                self.name = name
                self.expiresAfter = expiresAfter
                self.metadata = metadata
            }
            public enum CodingKeys: String, CodingKey {
                case name
                case expiresAfter = "expires_after"
                case metadata
            }
            public init(from decoder: any Decoder) throws {
                let container = try decoder.container(keyedBy: CodingKeys.self)
                self.name = try container.decodeIfPresent(
                    Swift.String.self,
                    forKey: .name
                )
                self.expiresAfter = try container.decodeIfPresent(
                    Components.Schemas.UpdateVectorStoreRequest.ExpiresAfterPayload.self,
                    forKey: .expiresAfter
                )
                self.metadata = try container.decodeIfPresent(
                    Components.Schemas.Metadata.self,
                    forKey: .metadata
                )
                try decoder.ensureNoAdditionalProperties(knownKeys: [
                    "name",
                    "expires_after",
                    "metadata"
                ])
            }
        }
        /// The Upload object can accept byte chunks in the form of Parts.
        ///
        ///
        /// - Remark: Generated from `#/components/schemas/Upload`.
        public struct Upload: Codable, Hashable, Sendable {
            /// The Upload unique identifier, which can be referenced in API endpoints.
            ///
            /// - Remark: Generated from `#/components/schemas/Upload/id`.
            public var id: Swift.String
            /// The Unix timestamp (in seconds) for when the Upload was created.
            ///
            /// - Remark: Generated from `#/components/schemas/Upload/created_at`.
            public var createdAt: Swift.Int
            /// The name of the file to be uploaded.
            ///
            /// - Remark: Generated from `#/components/schemas/Upload/filename`.
            public var filename: Swift.String
            /// The intended number of bytes to be uploaded.
            ///
            /// - Remark: Generated from `#/components/schemas/Upload/bytes`.
            public var bytes: Swift.Int
            /// The intended purpose of the file. [Please refer here](/docs/api-reference/files/object#files/object-purpose) for acceptable values.
            ///
            /// - Remark: Generated from `#/components/schemas/Upload/purpose`.
            public var purpose: Swift.String
            /// The status of the Upload.
            ///
            /// - Remark: Generated from `#/components/schemas/Upload/status`.
            @frozen public enum StatusPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case pending = "pending"
                case completed = "completed"
                case cancelled = "cancelled"
                case expired = "expired"
            }
            /// The status of the Upload.
            ///
            /// - Remark: Generated from `#/components/schemas/Upload/status`.
            public var status: Components.Schemas.Upload.StatusPayload
            /// The Unix timestamp (in seconds) for when the Upload was created.
            ///
            /// - Remark: Generated from `#/components/schemas/Upload/expires_at`.
            public var expiresAt: Swift.Int
            /// The object type, which is always "upload".
            ///
            /// - Remark: Generated from `#/components/schemas/Upload/object`.
            @frozen public enum ObjectPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case upload = "upload"
            }
            /// The object type, which is always "upload".
            ///
            /// - Remark: Generated from `#/components/schemas/Upload/object`.
            public var object: Components.Schemas.Upload.ObjectPayload?
            /// - Remark: Generated from `#/components/schemas/Upload/file`.
            public struct FilePayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/Upload/file/value1`.
                public var value1: Components.Schemas.OpenAIFile
                /// The ready File object after the Upload is completed.
                ///
                /// - Remark: Generated from `#/components/schemas/Upload/file/value2`.
                public var value2: OpenAPIRuntime.OpenAPIValueContainer
                /// Creates a new `FilePayload`.
                ///
                /// - Parameters:
                ///   - value1:
                ///   - value2: The ready File object after the Upload is completed.
                public init(
                    value1: Components.Schemas.OpenAIFile,
                    value2: OpenAPIRuntime.OpenAPIValueContainer
                ) {
                    self.value1 = value1
                    self.value2 = value2
                }
                public init(from decoder: any Decoder) throws {
                    self.value1 = try .init(from: decoder)
                    self.value2 = try .init(from: decoder)
                }
                public func encode(to encoder: any Encoder) throws {
                    try self.value1.encode(to: encoder)
                    try self.value2.encode(to: encoder)
                }
            }
            /// - Remark: Generated from `#/components/schemas/Upload/file`.
            public var file: Components.Schemas.Upload.FilePayload?
            /// Creates a new `Upload`.
            ///
            /// - Parameters:
            ///   - id: The Upload unique identifier, which can be referenced in API endpoints.
            ///   - createdAt: The Unix timestamp (in seconds) for when the Upload was created.
            ///   - filename: The name of the file to be uploaded.
            ///   - bytes: The intended number of bytes to be uploaded.
            ///   - purpose: The intended purpose of the file. [Please refer here](/docs/api-reference/files/object#files/object-purpose) for acceptable values.
            ///   - status: The status of the Upload.
            ///   - expiresAt: The Unix timestamp (in seconds) for when the Upload was created.
            ///   - object: The object type, which is always "upload".
            ///   - file:
            public init(
                id: Swift.String,
                createdAt: Swift.Int,
                filename: Swift.String,
                bytes: Swift.Int,
                purpose: Swift.String,
                status: Components.Schemas.Upload.StatusPayload,
                expiresAt: Swift.Int,
                object: Components.Schemas.Upload.ObjectPayload? = nil,
                file: Components.Schemas.Upload.FilePayload? = nil
            ) {
                self.id = id
                self.createdAt = createdAt
                self.filename = filename
                self.bytes = bytes
                self.purpose = purpose
                self.status = status
                self.expiresAt = expiresAt
                self.object = object
                self.file = file
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case createdAt = "created_at"
                case filename
                case bytes
                case purpose
                case status
                case expiresAt = "expires_at"
                case object
                case file
            }
        }
        /// The upload Part represents a chunk of bytes we can add to an Upload object.
        ///
        ///
        /// - Remark: Generated from `#/components/schemas/UploadPart`.
        public struct UploadPart: Codable, Hashable, Sendable {
            /// The upload Part unique identifier, which can be referenced in API endpoints.
            ///
            /// - Remark: Generated from `#/components/schemas/UploadPart/id`.
            public var id: Swift.String
            /// The Unix timestamp (in seconds) for when the Part was created.
            ///
            /// - Remark: Generated from `#/components/schemas/UploadPart/created_at`.
            public var createdAt: Swift.Int
            /// The ID of the Upload object that this Part was added to.
            ///
            /// - Remark: Generated from `#/components/schemas/UploadPart/upload_id`.
            public var uploadId: Swift.String
            /// The object type, which is always `upload.part`.
            ///
            /// - Remark: Generated from `#/components/schemas/UploadPart/object`.
            @frozen public enum ObjectPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case upload_part = "upload.part"
            }
            /// The object type, which is always `upload.part`.
            ///
            /// - Remark: Generated from `#/components/schemas/UploadPart/object`.
            public var object: Components.Schemas.UploadPart.ObjectPayload
            /// Creates a new `UploadPart`.
            ///
            /// - Parameters:
            ///   - id: The upload Part unique identifier, which can be referenced in API endpoints.
            ///   - createdAt: The Unix timestamp (in seconds) for when the Part was created.
            ///   - uploadId: The ID of the Upload object that this Part was added to.
            ///   - object: The object type, which is always `upload.part`.
            public init(
                id: Swift.String,
                createdAt: Swift.Int,
                uploadId: Swift.String,
                object: Components.Schemas.UploadPart.ObjectPayload
            ) {
                self.id = id
                self.createdAt = createdAt
                self.uploadId = uploadId
                self.object = object
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case createdAt = "created_at"
                case uploadId = "upload_id"
                case object
            }
        }
        /// The aggregated audio speeches usage details of the specific time bucket.
        ///
        /// - Remark: Generated from `#/components/schemas/UsageAudioSpeechesResult`.
        public struct UsageAudioSpeechesResult: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/UsageAudioSpeechesResult/object`.
            @frozen public enum ObjectPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case organization_usage_audioSpeeches_result = "organization.usage.audio_speeches.result"
            }
            /// - Remark: Generated from `#/components/schemas/UsageAudioSpeechesResult/object`.
            public var object: Components.Schemas.UsageAudioSpeechesResult.ObjectPayload
            /// The number of characters processed.
            ///
            /// - Remark: Generated from `#/components/schemas/UsageAudioSpeechesResult/characters`.
            public var characters: Swift.Int
            /// The count of requests made to the model.
            ///
            /// - Remark: Generated from `#/components/schemas/UsageAudioSpeechesResult/num_model_requests`.
            public var numModelRequests: Swift.Int
            /// When `group_by=project_id`, this field provides the project ID of the grouped usage result.
            ///
            /// - Remark: Generated from `#/components/schemas/UsageAudioSpeechesResult/project_id`.
            public var projectId: Swift.String?
            /// When `group_by=user_id`, this field provides the user ID of the grouped usage result.
            ///
            /// - Remark: Generated from `#/components/schemas/UsageAudioSpeechesResult/user_id`.
            public var userId: Swift.String?
            /// When `group_by=api_key_id`, this field provides the API key ID of the grouped usage result.
            ///
            /// - Remark: Generated from `#/components/schemas/UsageAudioSpeechesResult/api_key_id`.
            public var apiKeyId: Swift.String?
            /// When `group_by=model`, this field provides the model name of the grouped usage result.
            ///
            /// - Remark: Generated from `#/components/schemas/UsageAudioSpeechesResult/model`.
            public var model: Swift.String?
            /// Creates a new `UsageAudioSpeechesResult`.
            ///
            /// - Parameters:
            ///   - object:
            ///   - characters: The number of characters processed.
            ///   - numModelRequests: The count of requests made to the model.
            ///   - projectId: When `group_by=project_id`, this field provides the project ID of the grouped usage result.
            ///   - userId: When `group_by=user_id`, this field provides the user ID of the grouped usage result.
            ///   - apiKeyId: When `group_by=api_key_id`, this field provides the API key ID of the grouped usage result.
            ///   - model: When `group_by=model`, this field provides the model name of the grouped usage result.
            public init(
                object: Components.Schemas.UsageAudioSpeechesResult.ObjectPayload,
                characters: Swift.Int,
                numModelRequests: Swift.Int,
                projectId: Swift.String? = nil,
                userId: Swift.String? = nil,
                apiKeyId: Swift.String? = nil,
                model: Swift.String? = nil
            ) {
                self.object = object
                self.characters = characters
                self.numModelRequests = numModelRequests
                self.projectId = projectId
                self.userId = userId
                self.apiKeyId = apiKeyId
                self.model = model
            }
            public enum CodingKeys: String, CodingKey {
                case object
                case characters
                case numModelRequests = "num_model_requests"
                case projectId = "project_id"
                case userId = "user_id"
                case apiKeyId = "api_key_id"
                case model
            }
        }
        /// The aggregated audio transcriptions usage details of the specific time bucket.
        ///
        /// - Remark: Generated from `#/components/schemas/UsageAudioTranscriptionsResult`.
        public struct UsageAudioTranscriptionsResult: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/UsageAudioTranscriptionsResult/object`.
            @frozen public enum ObjectPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case organization_usage_audioTranscriptions_result = "organization.usage.audio_transcriptions.result"
            }
            /// - Remark: Generated from `#/components/schemas/UsageAudioTranscriptionsResult/object`.
            public var object: Components.Schemas.UsageAudioTranscriptionsResult.ObjectPayload
            /// The number of seconds processed.
            ///
            /// - Remark: Generated from `#/components/schemas/UsageAudioTranscriptionsResult/seconds`.
            public var seconds: Swift.Int
            /// The count of requests made to the model.
            ///
            /// - Remark: Generated from `#/components/schemas/UsageAudioTranscriptionsResult/num_model_requests`.
            public var numModelRequests: Swift.Int
            /// When `group_by=project_id`, this field provides the project ID of the grouped usage result.
            ///
            /// - Remark: Generated from `#/components/schemas/UsageAudioTranscriptionsResult/project_id`.
            public var projectId: Swift.String?
            /// When `group_by=user_id`, this field provides the user ID of the grouped usage result.
            ///
            /// - Remark: Generated from `#/components/schemas/UsageAudioTranscriptionsResult/user_id`.
            public var userId: Swift.String?
            /// When `group_by=api_key_id`, this field provides the API key ID of the grouped usage result.
            ///
            /// - Remark: Generated from `#/components/schemas/UsageAudioTranscriptionsResult/api_key_id`.
            public var apiKeyId: Swift.String?
            /// When `group_by=model`, this field provides the model name of the grouped usage result.
            ///
            /// - Remark: Generated from `#/components/schemas/UsageAudioTranscriptionsResult/model`.
            public var model: Swift.String?
            /// Creates a new `UsageAudioTranscriptionsResult`.
            ///
            /// - Parameters:
            ///   - object:
            ///   - seconds: The number of seconds processed.
            ///   - numModelRequests: The count of requests made to the model.
            ///   - projectId: When `group_by=project_id`, this field provides the project ID of the grouped usage result.
            ///   - userId: When `group_by=user_id`, this field provides the user ID of the grouped usage result.
            ///   - apiKeyId: When `group_by=api_key_id`, this field provides the API key ID of the grouped usage result.
            ///   - model: When `group_by=model`, this field provides the model name of the grouped usage result.
            public init(
                object: Components.Schemas.UsageAudioTranscriptionsResult.ObjectPayload,
                seconds: Swift.Int,
                numModelRequests: Swift.Int,
                projectId: Swift.String? = nil,
                userId: Swift.String? = nil,
                apiKeyId: Swift.String? = nil,
                model: Swift.String? = nil
            ) {
                self.object = object
                self.seconds = seconds
                self.numModelRequests = numModelRequests
                self.projectId = projectId
                self.userId = userId
                self.apiKeyId = apiKeyId
                self.model = model
            }
            public enum CodingKeys: String, CodingKey {
                case object
                case seconds
                case numModelRequests = "num_model_requests"
                case projectId = "project_id"
                case userId = "user_id"
                case apiKeyId = "api_key_id"
                case model
            }
        }
        /// The aggregated code interpreter sessions usage details of the specific time bucket.
        ///
        /// - Remark: Generated from `#/components/schemas/UsageCodeInterpreterSessionsResult`.
        public struct UsageCodeInterpreterSessionsResult: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/UsageCodeInterpreterSessionsResult/object`.
            @frozen public enum ObjectPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case organization_usage_codeInterpreterSessions_result = "organization.usage.code_interpreter_sessions.result"
            }
            /// - Remark: Generated from `#/components/schemas/UsageCodeInterpreterSessionsResult/object`.
            public var object: Components.Schemas.UsageCodeInterpreterSessionsResult.ObjectPayload
            /// The number of code interpreter sessions.
            ///
            /// - Remark: Generated from `#/components/schemas/UsageCodeInterpreterSessionsResult/sessions`.
            public var sessions: Swift.Int
            /// When `group_by=project_id`, this field provides the project ID of the grouped usage result.
            ///
            /// - Remark: Generated from `#/components/schemas/UsageCodeInterpreterSessionsResult/project_id`.
            public var projectId: Swift.String?
            /// Creates a new `UsageCodeInterpreterSessionsResult`.
            ///
            /// - Parameters:
            ///   - object:
            ///   - sessions: The number of code interpreter sessions.
            ///   - projectId: When `group_by=project_id`, this field provides the project ID of the grouped usage result.
            public init(
                object: Components.Schemas.UsageCodeInterpreterSessionsResult.ObjectPayload,
                sessions: Swift.Int,
                projectId: Swift.String? = nil
            ) {
                self.object = object
                self.sessions = sessions
                self.projectId = projectId
            }
            public enum CodingKeys: String, CodingKey {
                case object
                case sessions
                case projectId = "project_id"
            }
        }
        /// The aggregated completions usage details of the specific time bucket.
        ///
        /// - Remark: Generated from `#/components/schemas/UsageCompletionsResult`.
        public struct UsageCompletionsResult: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/UsageCompletionsResult/object`.
            @frozen public enum ObjectPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case organization_usage_completions_result = "organization.usage.completions.result"
            }
            /// - Remark: Generated from `#/components/schemas/UsageCompletionsResult/object`.
            public var object: Components.Schemas.UsageCompletionsResult.ObjectPayload
            /// The aggregated number of text input tokens used, including cached tokens. For customers subscribe to scale tier, this includes scale tier tokens.
            ///
            /// - Remark: Generated from `#/components/schemas/UsageCompletionsResult/input_tokens`.
            public var inputTokens: Swift.Int
            /// The aggregated number of text input tokens that has been cached from previous requests. For customers subscribe to scale tier, this includes scale tier tokens.
            ///
            /// - Remark: Generated from `#/components/schemas/UsageCompletionsResult/input_cached_tokens`.
            public var inputCachedTokens: Swift.Int?
            /// The aggregated number of text output tokens used. For customers subscribe to scale tier, this includes scale tier tokens.
            ///
            /// - Remark: Generated from `#/components/schemas/UsageCompletionsResult/output_tokens`.
            public var outputTokens: Swift.Int
            /// The aggregated number of audio input tokens used, including cached tokens.
            ///
            /// - Remark: Generated from `#/components/schemas/UsageCompletionsResult/input_audio_tokens`.
            public var inputAudioTokens: Swift.Int?
            /// The aggregated number of audio output tokens used.
            ///
            /// - Remark: Generated from `#/components/schemas/UsageCompletionsResult/output_audio_tokens`.
            public var outputAudioTokens: Swift.Int?
            /// The count of requests made to the model.
            ///
            /// - Remark: Generated from `#/components/schemas/UsageCompletionsResult/num_model_requests`.
            public var numModelRequests: Swift.Int
            /// When `group_by=project_id`, this field provides the project ID of the grouped usage result.
            ///
            /// - Remark: Generated from `#/components/schemas/UsageCompletionsResult/project_id`.
            public var projectId: Swift.String?
            /// When `group_by=user_id`, this field provides the user ID of the grouped usage result.
            ///
            /// - Remark: Generated from `#/components/schemas/UsageCompletionsResult/user_id`.
            public var userId: Swift.String?
            /// When `group_by=api_key_id`, this field provides the API key ID of the grouped usage result.
            ///
            /// - Remark: Generated from `#/components/schemas/UsageCompletionsResult/api_key_id`.
            public var apiKeyId: Swift.String?
            /// When `group_by=model`, this field provides the model name of the grouped usage result.
            ///
            /// - Remark: Generated from `#/components/schemas/UsageCompletionsResult/model`.
            public var model: Swift.String?
            /// When `group_by=batch`, this field tells whether the grouped usage result is batch or not.
            ///
            /// - Remark: Generated from `#/components/schemas/UsageCompletionsResult/batch`.
            public var batch: Swift.Bool?
            /// Creates a new `UsageCompletionsResult`.
            ///
            /// - Parameters:
            ///   - object:
            ///   - inputTokens: The aggregated number of text input tokens used, including cached tokens. For customers subscribe to scale tier, this includes scale tier tokens.
            ///   - inputCachedTokens: The aggregated number of text input tokens that has been cached from previous requests. For customers subscribe to scale tier, this includes scale tier tokens.
            ///   - outputTokens: The aggregated number of text output tokens used. For customers subscribe to scale tier, this includes scale tier tokens.
            ///   - inputAudioTokens: The aggregated number of audio input tokens used, including cached tokens.
            ///   - outputAudioTokens: The aggregated number of audio output tokens used.
            ///   - numModelRequests: The count of requests made to the model.
            ///   - projectId: When `group_by=project_id`, this field provides the project ID of the grouped usage result.
            ///   - userId: When `group_by=user_id`, this field provides the user ID of the grouped usage result.
            ///   - apiKeyId: When `group_by=api_key_id`, this field provides the API key ID of the grouped usage result.
            ///   - model: When `group_by=model`, this field provides the model name of the grouped usage result.
            ///   - batch: When `group_by=batch`, this field tells whether the grouped usage result is batch or not.
            public init(
                object: Components.Schemas.UsageCompletionsResult.ObjectPayload,
                inputTokens: Swift.Int,
                inputCachedTokens: Swift.Int? = nil,
                outputTokens: Swift.Int,
                inputAudioTokens: Swift.Int? = nil,
                outputAudioTokens: Swift.Int? = nil,
                numModelRequests: Swift.Int,
                projectId: Swift.String? = nil,
                userId: Swift.String? = nil,
                apiKeyId: Swift.String? = nil,
                model: Swift.String? = nil,
                batch: Swift.Bool? = nil
            ) {
                self.object = object
                self.inputTokens = inputTokens
                self.inputCachedTokens = inputCachedTokens
                self.outputTokens = outputTokens
                self.inputAudioTokens = inputAudioTokens
                self.outputAudioTokens = outputAudioTokens
                self.numModelRequests = numModelRequests
                self.projectId = projectId
                self.userId = userId
                self.apiKeyId = apiKeyId
                self.model = model
                self.batch = batch
            }
            public enum CodingKeys: String, CodingKey {
                case object
                case inputTokens = "input_tokens"
                case inputCachedTokens = "input_cached_tokens"
                case outputTokens = "output_tokens"
                case inputAudioTokens = "input_audio_tokens"
                case outputAudioTokens = "output_audio_tokens"
                case numModelRequests = "num_model_requests"
                case projectId = "project_id"
                case userId = "user_id"
                case apiKeyId = "api_key_id"
                case model
                case batch
            }
        }
        /// The aggregated embeddings usage details of the specific time bucket.
        ///
        /// - Remark: Generated from `#/components/schemas/UsageEmbeddingsResult`.
        public struct UsageEmbeddingsResult: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/UsageEmbeddingsResult/object`.
            @frozen public enum ObjectPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case organization_usage_embeddings_result = "organization.usage.embeddings.result"
            }
            /// - Remark: Generated from `#/components/schemas/UsageEmbeddingsResult/object`.
            public var object: Components.Schemas.UsageEmbeddingsResult.ObjectPayload
            /// The aggregated number of input tokens used.
            ///
            /// - Remark: Generated from `#/components/schemas/UsageEmbeddingsResult/input_tokens`.
            public var inputTokens: Swift.Int
            /// The count of requests made to the model.
            ///
            /// - Remark: Generated from `#/components/schemas/UsageEmbeddingsResult/num_model_requests`.
            public var numModelRequests: Swift.Int
            /// When `group_by=project_id`, this field provides the project ID of the grouped usage result.
            ///
            /// - Remark: Generated from `#/components/schemas/UsageEmbeddingsResult/project_id`.
            public var projectId: Swift.String?
            /// When `group_by=user_id`, this field provides the user ID of the grouped usage result.
            ///
            /// - Remark: Generated from `#/components/schemas/UsageEmbeddingsResult/user_id`.
            public var userId: Swift.String?
            /// When `group_by=api_key_id`, this field provides the API key ID of the grouped usage result.
            ///
            /// - Remark: Generated from `#/components/schemas/UsageEmbeddingsResult/api_key_id`.
            public var apiKeyId: Swift.String?
            /// When `group_by=model`, this field provides the model name of the grouped usage result.
            ///
            /// - Remark: Generated from `#/components/schemas/UsageEmbeddingsResult/model`.
            public var model: Swift.String?
            /// Creates a new `UsageEmbeddingsResult`.
            ///
            /// - Parameters:
            ///   - object:
            ///   - inputTokens: The aggregated number of input tokens used.
            ///   - numModelRequests: The count of requests made to the model.
            ///   - projectId: When `group_by=project_id`, this field provides the project ID of the grouped usage result.
            ///   - userId: When `group_by=user_id`, this field provides the user ID of the grouped usage result.
            ///   - apiKeyId: When `group_by=api_key_id`, this field provides the API key ID of the grouped usage result.
            ///   - model: When `group_by=model`, this field provides the model name of the grouped usage result.
            public init(
                object: Components.Schemas.UsageEmbeddingsResult.ObjectPayload,
                inputTokens: Swift.Int,
                numModelRequests: Swift.Int,
                projectId: Swift.String? = nil,
                userId: Swift.String? = nil,
                apiKeyId: Swift.String? = nil,
                model: Swift.String? = nil
            ) {
                self.object = object
                self.inputTokens = inputTokens
                self.numModelRequests = numModelRequests
                self.projectId = projectId
                self.userId = userId
                self.apiKeyId = apiKeyId
                self.model = model
            }
            public enum CodingKeys: String, CodingKey {
                case object
                case inputTokens = "input_tokens"
                case numModelRequests = "num_model_requests"
                case projectId = "project_id"
                case userId = "user_id"
                case apiKeyId = "api_key_id"
                case model
            }
        }
        /// The aggregated images usage details of the specific time bucket.
        ///
        /// - Remark: Generated from `#/components/schemas/UsageImagesResult`.
        public struct UsageImagesResult: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/UsageImagesResult/object`.
            @frozen public enum ObjectPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case organization_usage_images_result = "organization.usage.images.result"
            }
            /// - Remark: Generated from `#/components/schemas/UsageImagesResult/object`.
            public var object: Components.Schemas.UsageImagesResult.ObjectPayload
            /// The number of images processed.
            ///
            /// - Remark: Generated from `#/components/schemas/UsageImagesResult/images`.
            public var images: Swift.Int
            /// The count of requests made to the model.
            ///
            /// - Remark: Generated from `#/components/schemas/UsageImagesResult/num_model_requests`.
            public var numModelRequests: Swift.Int
            /// When `group_by=source`, this field provides the source of the grouped usage result, possible values are `image.generation`, `image.edit`, `image.variation`.
            ///
            /// - Remark: Generated from `#/components/schemas/UsageImagesResult/source`.
            public var source: Swift.String?
            /// When `group_by=size`, this field provides the image size of the grouped usage result.
            ///
            /// - Remark: Generated from `#/components/schemas/UsageImagesResult/size`.
            public var size: Swift.String?
            /// When `group_by=project_id`, this field provides the project ID of the grouped usage result.
            ///
            /// - Remark: Generated from `#/components/schemas/UsageImagesResult/project_id`.
            public var projectId: Swift.String?
            /// When `group_by=user_id`, this field provides the user ID of the grouped usage result.
            ///
            /// - Remark: Generated from `#/components/schemas/UsageImagesResult/user_id`.
            public var userId: Swift.String?
            /// When `group_by=api_key_id`, this field provides the API key ID of the grouped usage result.
            ///
            /// - Remark: Generated from `#/components/schemas/UsageImagesResult/api_key_id`.
            public var apiKeyId: Swift.String?
            /// When `group_by=model`, this field provides the model name of the grouped usage result.
            ///
            /// - Remark: Generated from `#/components/schemas/UsageImagesResult/model`.
            public var model: Swift.String?
            /// Creates a new `UsageImagesResult`.
            ///
            /// - Parameters:
            ///   - object:
            ///   - images: The number of images processed.
            ///   - numModelRequests: The count of requests made to the model.
            ///   - source: When `group_by=source`, this field provides the source of the grouped usage result, possible values are `image.generation`, `image.edit`, `image.variation`.
            ///   - size: When `group_by=size`, this field provides the image size of the grouped usage result.
            ///   - projectId: When `group_by=project_id`, this field provides the project ID of the grouped usage result.
            ///   - userId: When `group_by=user_id`, this field provides the user ID of the grouped usage result.
            ///   - apiKeyId: When `group_by=api_key_id`, this field provides the API key ID of the grouped usage result.
            ///   - model: When `group_by=model`, this field provides the model name of the grouped usage result.
            public init(
                object: Components.Schemas.UsageImagesResult.ObjectPayload,
                images: Swift.Int,
                numModelRequests: Swift.Int,
                source: Swift.String? = nil,
                size: Swift.String? = nil,
                projectId: Swift.String? = nil,
                userId: Swift.String? = nil,
                apiKeyId: Swift.String? = nil,
                model: Swift.String? = nil
            ) {
                self.object = object
                self.images = images
                self.numModelRequests = numModelRequests
                self.source = source
                self.size = size
                self.projectId = projectId
                self.userId = userId
                self.apiKeyId = apiKeyId
                self.model = model
            }
            public enum CodingKeys: String, CodingKey {
                case object
                case images
                case numModelRequests = "num_model_requests"
                case source
                case size
                case projectId = "project_id"
                case userId = "user_id"
                case apiKeyId = "api_key_id"
                case model
            }
        }
        /// The aggregated moderations usage details of the specific time bucket.
        ///
        /// - Remark: Generated from `#/components/schemas/UsageModerationsResult`.
        public struct UsageModerationsResult: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/UsageModerationsResult/object`.
            @frozen public enum ObjectPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case organization_usage_moderations_result = "organization.usage.moderations.result"
            }
            /// - Remark: Generated from `#/components/schemas/UsageModerationsResult/object`.
            public var object: Components.Schemas.UsageModerationsResult.ObjectPayload
            /// The aggregated number of input tokens used.
            ///
            /// - Remark: Generated from `#/components/schemas/UsageModerationsResult/input_tokens`.
            public var inputTokens: Swift.Int
            /// The count of requests made to the model.
            ///
            /// - Remark: Generated from `#/components/schemas/UsageModerationsResult/num_model_requests`.
            public var numModelRequests: Swift.Int
            /// When `group_by=project_id`, this field provides the project ID of the grouped usage result.
            ///
            /// - Remark: Generated from `#/components/schemas/UsageModerationsResult/project_id`.
            public var projectId: Swift.String?
            /// When `group_by=user_id`, this field provides the user ID of the grouped usage result.
            ///
            /// - Remark: Generated from `#/components/schemas/UsageModerationsResult/user_id`.
            public var userId: Swift.String?
            /// When `group_by=api_key_id`, this field provides the API key ID of the grouped usage result.
            ///
            /// - Remark: Generated from `#/components/schemas/UsageModerationsResult/api_key_id`.
            public var apiKeyId: Swift.String?
            /// When `group_by=model`, this field provides the model name of the grouped usage result.
            ///
            /// - Remark: Generated from `#/components/schemas/UsageModerationsResult/model`.
            public var model: Swift.String?
            /// Creates a new `UsageModerationsResult`.
            ///
            /// - Parameters:
            ///   - object:
            ///   - inputTokens: The aggregated number of input tokens used.
            ///   - numModelRequests: The count of requests made to the model.
            ///   - projectId: When `group_by=project_id`, this field provides the project ID of the grouped usage result.
            ///   - userId: When `group_by=user_id`, this field provides the user ID of the grouped usage result.
            ///   - apiKeyId: When `group_by=api_key_id`, this field provides the API key ID of the grouped usage result.
            ///   - model: When `group_by=model`, this field provides the model name of the grouped usage result.
            public init(
                object: Components.Schemas.UsageModerationsResult.ObjectPayload,
                inputTokens: Swift.Int,
                numModelRequests: Swift.Int,
                projectId: Swift.String? = nil,
                userId: Swift.String? = nil,
                apiKeyId: Swift.String? = nil,
                model: Swift.String? = nil
            ) {
                self.object = object
                self.inputTokens = inputTokens
                self.numModelRequests = numModelRequests
                self.projectId = projectId
                self.userId = userId
                self.apiKeyId = apiKeyId
                self.model = model
            }
            public enum CodingKeys: String, CodingKey {
                case object
                case inputTokens = "input_tokens"
                case numModelRequests = "num_model_requests"
                case projectId = "project_id"
                case userId = "user_id"
                case apiKeyId = "api_key_id"
                case model
            }
        }
        /// - Remark: Generated from `#/components/schemas/UsageResponse`.
        public struct UsageResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/UsageResponse/object`.
            @frozen public enum ObjectPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case page = "page"
            }
            /// - Remark: Generated from `#/components/schemas/UsageResponse/object`.
            public var object: Components.Schemas.UsageResponse.ObjectPayload
            /// - Remark: Generated from `#/components/schemas/UsageResponse/data`.
            public var data: [Components.Schemas.UsageTimeBucket]
            /// - Remark: Generated from `#/components/schemas/UsageResponse/has_more`.
            public var hasMore: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/UsageResponse/next_page`.
            public var nextPage: Swift.String
            /// Creates a new `UsageResponse`.
            ///
            /// - Parameters:
            ///   - object:
            ///   - data:
            ///   - hasMore:
            ///   - nextPage:
            public init(
                object: Components.Schemas.UsageResponse.ObjectPayload,
                data: [Components.Schemas.UsageTimeBucket],
                hasMore: Swift.Bool,
                nextPage: Swift.String
            ) {
                self.object = object
                self.data = data
                self.hasMore = hasMore
                self.nextPage = nextPage
            }
            public enum CodingKeys: String, CodingKey {
                case object
                case data
                case hasMore = "has_more"
                case nextPage = "next_page"
            }
        }
        /// - Remark: Generated from `#/components/schemas/UsageTimeBucket`.
        public struct UsageTimeBucket: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/UsageTimeBucket/object`.
            @frozen public enum ObjectPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case bucket = "bucket"
            }
            /// - Remark: Generated from `#/components/schemas/UsageTimeBucket/object`.
            public var object: Components.Schemas.UsageTimeBucket.ObjectPayload
            /// - Remark: Generated from `#/components/schemas/UsageTimeBucket/start_time`.
            public var startTime: Swift.Int
            /// - Remark: Generated from `#/components/schemas/UsageTimeBucket/end_time`.
            public var endTime: Swift.Int
            /// - Remark: Generated from `#/components/schemas/UsageTimeBucket/ResultPayload`.
            @frozen public enum ResultPayloadPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/UsageTimeBucket/ResultPayload/case1`.
                case UsageCompletionsResult(Components.Schemas.UsageCompletionsResult)
                /// - Remark: Generated from `#/components/schemas/UsageTimeBucket/ResultPayload/case2`.
                case UsageEmbeddingsResult(Components.Schemas.UsageEmbeddingsResult)
                /// - Remark: Generated from `#/components/schemas/UsageTimeBucket/ResultPayload/case3`.
                case UsageModerationsResult(Components.Schemas.UsageModerationsResult)
                /// - Remark: Generated from `#/components/schemas/UsageTimeBucket/ResultPayload/case4`.
                case UsageImagesResult(Components.Schemas.UsageImagesResult)
                /// - Remark: Generated from `#/components/schemas/UsageTimeBucket/ResultPayload/case5`.
                case UsageAudioSpeechesResult(Components.Schemas.UsageAudioSpeechesResult)
                /// - Remark: Generated from `#/components/schemas/UsageTimeBucket/ResultPayload/case6`.
                case UsageAudioTranscriptionsResult(Components.Schemas.UsageAudioTranscriptionsResult)
                /// - Remark: Generated from `#/components/schemas/UsageTimeBucket/ResultPayload/case7`.
                case UsageVectorStoresResult(Components.Schemas.UsageVectorStoresResult)
                /// - Remark: Generated from `#/components/schemas/UsageTimeBucket/ResultPayload/case8`.
                case UsageCodeInterpreterSessionsResult(Components.Schemas.UsageCodeInterpreterSessionsResult)
                /// - Remark: Generated from `#/components/schemas/UsageTimeBucket/ResultPayload/case9`.
                case CostsResult(Components.Schemas.CostsResult)
                public init(from decoder: any Decoder) throws {
                    var errors: [any Error] = []
                    do {
                        self = .UsageCompletionsResult(try .init(from: decoder))
                        return
                    } catch {
                        errors.append(error)
                    }
                    do {
                        self = .UsageEmbeddingsResult(try .init(from: decoder))
                        return
                    } catch {
                        errors.append(error)
                    }
                    do {
                        self = .UsageModerationsResult(try .init(from: decoder))
                        return
                    } catch {
                        errors.append(error)
                    }
                    do {
                        self = .UsageImagesResult(try .init(from: decoder))
                        return
                    } catch {
                        errors.append(error)
                    }
                    do {
                        self = .UsageAudioSpeechesResult(try .init(from: decoder))
                        return
                    } catch {
                        errors.append(error)
                    }
                    do {
                        self = .UsageAudioTranscriptionsResult(try .init(from: decoder))
                        return
                    } catch {
                        errors.append(error)
                    }
                    do {
                        self = .UsageVectorStoresResult(try .init(from: decoder))
                        return
                    } catch {
                        errors.append(error)
                    }
                    do {
                        self = .UsageCodeInterpreterSessionsResult(try .init(from: decoder))
                        return
                    } catch {
                        errors.append(error)
                    }
                    do {
                        self = .CostsResult(try .init(from: decoder))
                        return
                    } catch {
                        errors.append(error)
                    }
                    throw Swift.DecodingError.failedToDecodeOneOfSchema(
                        type: Self.self,
                        codingPath: decoder.codingPath,
                        errors: errors
                    )
                }
                public func encode(to encoder: any Encoder) throws {
                    switch self {
                    case let .UsageCompletionsResult(value):
                        try value.encode(to: encoder)
                    case let .UsageEmbeddingsResult(value):
                        try value.encode(to: encoder)
                    case let .UsageModerationsResult(value):
                        try value.encode(to: encoder)
                    case let .UsageImagesResult(value):
                        try value.encode(to: encoder)
                    case let .UsageAudioSpeechesResult(value):
                        try value.encode(to: encoder)
                    case let .UsageAudioTranscriptionsResult(value):
                        try value.encode(to: encoder)
                    case let .UsageVectorStoresResult(value):
                        try value.encode(to: encoder)
                    case let .UsageCodeInterpreterSessionsResult(value):
                        try value.encode(to: encoder)
                    case let .CostsResult(value):
                        try value.encode(to: encoder)
                    }
                }
            }
            /// - Remark: Generated from `#/components/schemas/UsageTimeBucket/result`.
            public typealias ResultPayload = [Components.Schemas.UsageTimeBucket.ResultPayloadPayload]
            /// - Remark: Generated from `#/components/schemas/UsageTimeBucket/result`.
            public var result: Components.Schemas.UsageTimeBucket.ResultPayload
            /// Creates a new `UsageTimeBucket`.
            ///
            /// - Parameters:
            ///   - object:
            ///   - startTime:
            ///   - endTime:
            ///   - result:
            public init(
                object: Components.Schemas.UsageTimeBucket.ObjectPayload,
                startTime: Swift.Int,
                endTime: Swift.Int,
                result: Components.Schemas.UsageTimeBucket.ResultPayload
            ) {
                self.object = object
                self.startTime = startTime
                self.endTime = endTime
                self.result = result
            }
            public enum CodingKeys: String, CodingKey {
                case object
                case startTime = "start_time"
                case endTime = "end_time"
                case result
            }
        }
        /// The aggregated vector stores usage details of the specific time bucket.
        ///
        /// - Remark: Generated from `#/components/schemas/UsageVectorStoresResult`.
        public struct UsageVectorStoresResult: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/UsageVectorStoresResult/object`.
            @frozen public enum ObjectPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case organization_usage_vectorStores_result = "organization.usage.vector_stores.result"
            }
            /// - Remark: Generated from `#/components/schemas/UsageVectorStoresResult/object`.
            public var object: Components.Schemas.UsageVectorStoresResult.ObjectPayload
            /// The vector stores usage in bytes.
            ///
            /// - Remark: Generated from `#/components/schemas/UsageVectorStoresResult/usage_bytes`.
            public var usageBytes: Swift.Int
            /// When `group_by=project_id`, this field provides the project ID of the grouped usage result.
            ///
            /// - Remark: Generated from `#/components/schemas/UsageVectorStoresResult/project_id`.
            public var projectId: Swift.String?
            /// Creates a new `UsageVectorStoresResult`.
            ///
            /// - Parameters:
            ///   - object:
            ///   - usageBytes: The vector stores usage in bytes.
            ///   - projectId: When `group_by=project_id`, this field provides the project ID of the grouped usage result.
            public init(
                object: Components.Schemas.UsageVectorStoresResult.ObjectPayload,
                usageBytes: Swift.Int,
                projectId: Swift.String? = nil
            ) {
                self.object = object
                self.usageBytes = usageBytes
                self.projectId = projectId
            }
            public enum CodingKeys: String, CodingKey {
                case object
                case usageBytes = "usage_bytes"
                case projectId = "project_id"
            }
        }
        /// Represents an individual `user` within an organization.
        ///
        /// - Remark: Generated from `#/components/schemas/User`.
        public struct User: Codable, Hashable, Sendable {
            /// The object type, which is always `organization.user`
            ///
            /// - Remark: Generated from `#/components/schemas/User/object`.
            @frozen public enum ObjectPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case organization_user = "organization.user"
            }
            /// The object type, which is always `organization.user`
            ///
            /// - Remark: Generated from `#/components/schemas/User/object`.
            public var object: Components.Schemas.User.ObjectPayload
            /// The identifier, which can be referenced in API endpoints
            ///
            /// - Remark: Generated from `#/components/schemas/User/id`.
            public var id: Swift.String
            /// The name of the user
            ///
            /// - Remark: Generated from `#/components/schemas/User/name`.
            public var name: Swift.String
            /// The email address of the user
            ///
            /// - Remark: Generated from `#/components/schemas/User/email`.
            public var email: Swift.String
            /// `owner` or `reader`
            ///
            /// - Remark: Generated from `#/components/schemas/User/role`.
            @frozen public enum RolePayload: String, Codable, Hashable, Sendable, CaseIterable {
                case owner = "owner"
                case reader = "reader"
            }
            /// `owner` or `reader`
            ///
            /// - Remark: Generated from `#/components/schemas/User/role`.
            public var role: Components.Schemas.User.RolePayload
            /// The Unix timestamp (in seconds) of when the user was added.
            ///
            /// - Remark: Generated from `#/components/schemas/User/added_at`.
            public var addedAt: Swift.Int
            /// Creates a new `User`.
            ///
            /// - Parameters:
            ///   - object: The object type, which is always `organization.user`
            ///   - id: The identifier, which can be referenced in API endpoints
            ///   - name: The name of the user
            ///   - email: The email address of the user
            ///   - role: `owner` or `reader`
            ///   - addedAt: The Unix timestamp (in seconds) of when the user was added.
            public init(
                object: Components.Schemas.User.ObjectPayload,
                id: Swift.String,
                name: Swift.String,
                email: Swift.String,
                role: Components.Schemas.User.RolePayload,
                addedAt: Swift.Int
            ) {
                self.object = object
                self.id = id
                self.name = name
                self.email = email
                self.role = role
                self.addedAt = addedAt
            }
            public enum CodingKeys: String, CodingKey {
                case object
                case id
                case name
                case email
                case role
                case addedAt = "added_at"
            }
        }
        /// - Remark: Generated from `#/components/schemas/UserDeleteResponse`.
        public struct UserDeleteResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/UserDeleteResponse/object`.
            @frozen public enum ObjectPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case organization_user_deleted = "organization.user.deleted"
            }
            /// - Remark: Generated from `#/components/schemas/UserDeleteResponse/object`.
            public var object: Components.Schemas.UserDeleteResponse.ObjectPayload
            /// - Remark: Generated from `#/components/schemas/UserDeleteResponse/id`.
            public var id: Swift.String
            /// - Remark: Generated from `#/components/schemas/UserDeleteResponse/deleted`.
            public var deleted: Swift.Bool
            /// Creates a new `UserDeleteResponse`.
            ///
            /// - Parameters:
            ///   - object:
            ///   - id:
            ///   - deleted:
            public init(
                object: Components.Schemas.UserDeleteResponse.ObjectPayload,
                id: Swift.String,
                deleted: Swift.Bool
            ) {
                self.object = object
                self.id = id
                self.deleted = deleted
            }
            public enum CodingKeys: String, CodingKey {
                case object
                case id
                case deleted
            }
        }
        /// - Remark: Generated from `#/components/schemas/UserListResponse`.
        public struct UserListResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/UserListResponse/object`.
            @frozen public enum ObjectPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case list = "list"
            }
            /// - Remark: Generated from `#/components/schemas/UserListResponse/object`.
            public var object: Components.Schemas.UserListResponse.ObjectPayload
            /// - Remark: Generated from `#/components/schemas/UserListResponse/data`.
            public var data: [Components.Schemas.User]
            /// - Remark: Generated from `#/components/schemas/UserListResponse/first_id`.
            public var firstId: Swift.String
            /// - Remark: Generated from `#/components/schemas/UserListResponse/last_id`.
            public var lastId: Swift.String
            /// - Remark: Generated from `#/components/schemas/UserListResponse/has_more`.
            public var hasMore: Swift.Bool
            /// Creates a new `UserListResponse`.
            ///
            /// - Parameters:
            ///   - object:
            ///   - data:
            ///   - firstId:
            ///   - lastId:
            ///   - hasMore:
            public init(
                object: Components.Schemas.UserListResponse.ObjectPayload,
                data: [Components.Schemas.User],
                firstId: Swift.String,
                lastId: Swift.String,
                hasMore: Swift.Bool
            ) {
                self.object = object
                self.data = data
                self.firstId = firstId
                self.lastId = lastId
                self.hasMore = hasMore
            }
            public enum CodingKeys: String, CodingKey {
                case object
                case data
                case firstId = "first_id"
                case lastId = "last_id"
                case hasMore = "has_more"
            }
        }
        /// - Remark: Generated from `#/components/schemas/UserRoleUpdateRequest`.
        public struct UserRoleUpdateRequest: Codable, Hashable, Sendable {
            /// `owner` or `reader`
            ///
            /// - Remark: Generated from `#/components/schemas/UserRoleUpdateRequest/role`.
            @frozen public enum RolePayload: String, Codable, Hashable, Sendable, CaseIterable {
                case owner = "owner"
                case reader = "reader"
            }
            /// `owner` or `reader`
            ///
            /// - Remark: Generated from `#/components/schemas/UserRoleUpdateRequest/role`.
            public var role: Components.Schemas.UserRoleUpdateRequest.RolePayload
            /// Creates a new `UserRoleUpdateRequest`.
            ///
            /// - Parameters:
            ///   - role: `owner` or `reader`
            public init(role: Components.Schemas.UserRoleUpdateRequest.RolePayload) {
                self.role = role
            }
            public enum CodingKeys: String, CodingKey {
                case role
            }
        }
        /// The expiration policy for a vector store.
        ///
        /// - Remark: Generated from `#/components/schemas/VectorStoreExpirationAfter`.
        public struct VectorStoreExpirationAfter: Codable, Hashable, Sendable {
            /// Anchor timestamp after which the expiration policy applies. Supported anchors: `last_active_at`.
            ///
            /// - Remark: Generated from `#/components/schemas/VectorStoreExpirationAfter/anchor`.
            @frozen public enum AnchorPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case lastActiveAt = "last_active_at"
            }
            /// Anchor timestamp after which the expiration policy applies. Supported anchors: `last_active_at`.
            ///
            /// - Remark: Generated from `#/components/schemas/VectorStoreExpirationAfter/anchor`.
            public var anchor: Components.Schemas.VectorStoreExpirationAfter.AnchorPayload
            /// The number of days after the anchor time that the vector store will expire.
            ///
            /// - Remark: Generated from `#/components/schemas/VectorStoreExpirationAfter/days`.
            public var days: Swift.Int
            /// Creates a new `VectorStoreExpirationAfter`.
            ///
            /// - Parameters:
            ///   - anchor: Anchor timestamp after which the expiration policy applies. Supported anchors: `last_active_at`.
            ///   - days: The number of days after the anchor time that the vector store will expire.
            public init(
                anchor: Components.Schemas.VectorStoreExpirationAfter.AnchorPayload,
                days: Swift.Int
            ) {
                self.anchor = anchor
                self.days = days
            }
            public enum CodingKeys: String, CodingKey {
                case anchor
                case days
            }
        }
        /// A batch of files attached to a vector store.
        ///
        /// - Remark: Generated from `#/components/schemas/VectorStoreFileBatchObject`.
        public struct VectorStoreFileBatchObject: Codable, Hashable, Sendable {
            /// The identifier, which can be referenced in API endpoints.
            ///
            /// - Remark: Generated from `#/components/schemas/VectorStoreFileBatchObject/id`.
            public var id: Swift.String
            /// The object type, which is always `vector_store.file_batch`.
            ///
            /// - Remark: Generated from `#/components/schemas/VectorStoreFileBatchObject/object`.
            @frozen public enum ObjectPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case vectorStore_filesBatch = "vector_store.files_batch"
            }
            /// The object type, which is always `vector_store.file_batch`.
            ///
            /// - Remark: Generated from `#/components/schemas/VectorStoreFileBatchObject/object`.
            public var object: Components.Schemas.VectorStoreFileBatchObject.ObjectPayload
            /// The Unix timestamp (in seconds) for when the vector store files batch was created.
            ///
            /// - Remark: Generated from `#/components/schemas/VectorStoreFileBatchObject/created_at`.
            public var createdAt: Swift.Int
            /// The ID of the [vector store](/docs/api-reference/vector-stores/object) that the [File](/docs/api-reference/files) is attached to.
            ///
            /// - Remark: Generated from `#/components/schemas/VectorStoreFileBatchObject/vector_store_id`.
            public var vectorStoreId: Swift.String
            /// The status of the vector store files batch, which can be either `in_progress`, `completed`, `cancelled` or `failed`.
            ///
            /// - Remark: Generated from `#/components/schemas/VectorStoreFileBatchObject/status`.
            @frozen public enum StatusPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case inProgress = "in_progress"
                case completed = "completed"
                case cancelled = "cancelled"
                case failed = "failed"
            }
            /// The status of the vector store files batch, which can be either `in_progress`, `completed`, `cancelled` or `failed`.
            ///
            /// - Remark: Generated from `#/components/schemas/VectorStoreFileBatchObject/status`.
            public var status: Components.Schemas.VectorStoreFileBatchObject.StatusPayload
            /// - Remark: Generated from `#/components/schemas/VectorStoreFileBatchObject/file_counts`.
            public struct FileCountsPayload: Codable, Hashable, Sendable {
                /// The number of files that are currently being processed.
                ///
                /// - Remark: Generated from `#/components/schemas/VectorStoreFileBatchObject/file_counts/in_progress`.
                public var inProgress: Swift.Int
                /// The number of files that have been processed.
                ///
                /// - Remark: Generated from `#/components/schemas/VectorStoreFileBatchObject/file_counts/completed`.
                public var completed: Swift.Int
                /// The number of files that have failed to process.
                ///
                /// - Remark: Generated from `#/components/schemas/VectorStoreFileBatchObject/file_counts/failed`.
                public var failed: Swift.Int
                /// The number of files that where cancelled.
                ///
                /// - Remark: Generated from `#/components/schemas/VectorStoreFileBatchObject/file_counts/cancelled`.
                public var cancelled: Swift.Int
                /// The total number of files.
                ///
                /// - Remark: Generated from `#/components/schemas/VectorStoreFileBatchObject/file_counts/total`.
                public var total: Swift.Int
                /// Creates a new `FileCountsPayload`.
                ///
                /// - Parameters:
                ///   - inProgress: The number of files that are currently being processed.
                ///   - completed: The number of files that have been processed.
                ///   - failed: The number of files that have failed to process.
                ///   - cancelled: The number of files that where cancelled.
                ///   - total: The total number of files.
                public init(
                    inProgress: Swift.Int,
                    completed: Swift.Int,
                    failed: Swift.Int,
                    cancelled: Swift.Int,
                    total: Swift.Int
                ) {
                    self.inProgress = inProgress
                    self.completed = completed
                    self.failed = failed
                    self.cancelled = cancelled
                    self.total = total
                }
                public enum CodingKeys: String, CodingKey {
                    case inProgress = "in_progress"
                    case completed
                    case failed
                    case cancelled
                    case total
                }
            }
            /// - Remark: Generated from `#/components/schemas/VectorStoreFileBatchObject/file_counts`.
            public var fileCounts: Components.Schemas.VectorStoreFileBatchObject.FileCountsPayload
            /// Creates a new `VectorStoreFileBatchObject`.
            ///
            /// - Parameters:
            ///   - id: The identifier, which can be referenced in API endpoints.
            ///   - object: The object type, which is always `vector_store.file_batch`.
            ///   - createdAt: The Unix timestamp (in seconds) for when the vector store files batch was created.
            ///   - vectorStoreId: The ID of the [vector store](/docs/api-reference/vector-stores/object) that the [File](/docs/api-reference/files) is attached to.
            ///   - status: The status of the vector store files batch, which can be either `in_progress`, `completed`, `cancelled` or `failed`.
            ///   - fileCounts:
            public init(
                id: Swift.String,
                object: Components.Schemas.VectorStoreFileBatchObject.ObjectPayload,
                createdAt: Swift.Int,
                vectorStoreId: Swift.String,
                status: Components.Schemas.VectorStoreFileBatchObject.StatusPayload,
                fileCounts: Components.Schemas.VectorStoreFileBatchObject.FileCountsPayload
            ) {
                self.id = id
                self.object = object
                self.createdAt = createdAt
                self.vectorStoreId = vectorStoreId
                self.status = status
                self.fileCounts = fileCounts
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case object
                case createdAt = "created_at"
                case vectorStoreId = "vector_store_id"
                case status
                case fileCounts = "file_counts"
            }
        }
        /// A list of files attached to a vector store.
        ///
        /// - Remark: Generated from `#/components/schemas/VectorStoreFileObject`.
        public struct VectorStoreFileObject: Codable, Hashable, Sendable {
            /// The identifier, which can be referenced in API endpoints.
            ///
            /// - Remark: Generated from `#/components/schemas/VectorStoreFileObject/id`.
            public var id: Swift.String
            /// The object type, which is always `vector_store.file`.
            ///
            /// - Remark: Generated from `#/components/schemas/VectorStoreFileObject/object`.
            @frozen public enum ObjectPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case vectorStore_file = "vector_store.file"
            }
            /// The object type, which is always `vector_store.file`.
            ///
            /// - Remark: Generated from `#/components/schemas/VectorStoreFileObject/object`.
            public var object: Components.Schemas.VectorStoreFileObject.ObjectPayload
            /// The total vector store usage in bytes. Note that this may be different from the original file size.
            ///
            /// - Remark: Generated from `#/components/schemas/VectorStoreFileObject/usage_bytes`.
            public var usageBytes: Swift.Int
            /// The Unix timestamp (in seconds) for when the vector store file was created.
            ///
            /// - Remark: Generated from `#/components/schemas/VectorStoreFileObject/created_at`.
            public var createdAt: Swift.Int
            /// The ID of the [vector store](/docs/api-reference/vector-stores/object) that the [File](/docs/api-reference/files) is attached to.
            ///
            /// - Remark: Generated from `#/components/schemas/VectorStoreFileObject/vector_store_id`.
            public var vectorStoreId: Swift.String
            /// The status of the vector store file, which can be either `in_progress`, `completed`, `cancelled`, or `failed`. The status `completed` indicates that the vector store file is ready for use.
            ///
            /// - Remark: Generated from `#/components/schemas/VectorStoreFileObject/status`.
            @frozen public enum StatusPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case inProgress = "in_progress"
                case completed = "completed"
                case cancelled = "cancelled"
                case failed = "failed"
            }
            /// The status of the vector store file, which can be either `in_progress`, `completed`, `cancelled`, or `failed`. The status `completed` indicates that the vector store file is ready for use.
            ///
            /// - Remark: Generated from `#/components/schemas/VectorStoreFileObject/status`.
            public var status: Components.Schemas.VectorStoreFileObject.StatusPayload
            /// The last error associated with this vector store file. Will be `null` if there are no errors.
            ///
            /// - Remark: Generated from `#/components/schemas/VectorStoreFileObject/last_error`.
            public struct LastErrorPayload: Codable, Hashable, Sendable {
                /// One of `server_error` or `rate_limit_exceeded`.
                ///
                /// - Remark: Generated from `#/components/schemas/VectorStoreFileObject/last_error/code`.
                @frozen public enum CodePayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case serverError = "server_error"
                    case unsupportedFile = "unsupported_file"
                    case invalidFile = "invalid_file"
                }
                /// One of `server_error` or `rate_limit_exceeded`.
                ///
                /// - Remark: Generated from `#/components/schemas/VectorStoreFileObject/last_error/code`.
                public var code: Components.Schemas.VectorStoreFileObject.LastErrorPayload.CodePayload
                /// A human-readable description of the error.
                ///
                /// - Remark: Generated from `#/components/schemas/VectorStoreFileObject/last_error/message`.
                public var message: Swift.String
                /// Creates a new `LastErrorPayload`.
                ///
                /// - Parameters:
                ///   - code: One of `server_error` or `rate_limit_exceeded`.
                ///   - message: A human-readable description of the error.
                public init(
                    code: Components.Schemas.VectorStoreFileObject.LastErrorPayload.CodePayload,
                    message: Swift.String
                ) {
                    self.code = code
                    self.message = message
                }
                public enum CodingKeys: String, CodingKey {
                    case code
                    case message
                }
            }
            /// The last error associated with this vector store file. Will be `null` if there are no errors.
            ///
            /// - Remark: Generated from `#/components/schemas/VectorStoreFileObject/last_error`.
            public var lastError: Components.Schemas.VectorStoreFileObject.LastErrorPayload?
            /// The strategy used to chunk the file.
            ///
            /// - Remark: Generated from `#/components/schemas/VectorStoreFileObject/chunking_strategy`.
            @frozen public enum ChunkingStrategyPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/VectorStoreFileObject/chunking_strategy/case1`.
                case StaticChunkingStrategyResponseParam(Components.Schemas.StaticChunkingStrategyResponseParam)
                /// - Remark: Generated from `#/components/schemas/VectorStoreFileObject/chunking_strategy/case2`.
                case OtherChunkingStrategyResponseParam(Components.Schemas.OtherChunkingStrategyResponseParam)
                public init(from decoder: any Decoder) throws {
                    var errors: [any Error] = []
                    do {
                        self = .StaticChunkingStrategyResponseParam(try .init(from: decoder))
                        return
                    } catch {
                        errors.append(error)
                    }
                    do {
                        self = .OtherChunkingStrategyResponseParam(try .init(from: decoder))
                        return
                    } catch {
                        errors.append(error)
                    }
                    throw Swift.DecodingError.failedToDecodeOneOfSchema(
                        type: Self.self,
                        codingPath: decoder.codingPath,
                        errors: errors
                    )
                }
                public func encode(to encoder: any Encoder) throws {
                    switch self {
                    case let .StaticChunkingStrategyResponseParam(value):
                        try value.encode(to: encoder)
                    case let .OtherChunkingStrategyResponseParam(value):
                        try value.encode(to: encoder)
                    }
                }
            }
            /// The strategy used to chunk the file.
            ///
            /// - Remark: Generated from `#/components/schemas/VectorStoreFileObject/chunking_strategy`.
            public var chunkingStrategy: Components.Schemas.VectorStoreFileObject.ChunkingStrategyPayload?
            /// Creates a new `VectorStoreFileObject`.
            ///
            /// - Parameters:
            ///   - id: The identifier, which can be referenced in API endpoints.
            ///   - object: The object type, which is always `vector_store.file`.
            ///   - usageBytes: The total vector store usage in bytes. Note that this may be different from the original file size.
            ///   - createdAt: The Unix timestamp (in seconds) for when the vector store file was created.
            ///   - vectorStoreId: The ID of the [vector store](/docs/api-reference/vector-stores/object) that the [File](/docs/api-reference/files) is attached to.
            ///   - status: The status of the vector store file, which can be either `in_progress`, `completed`, `cancelled`, or `failed`. The status `completed` indicates that the vector store file is ready for use.
            ///   - lastError: The last error associated with this vector store file. Will be `null` if there are no errors.
            ///   - chunkingStrategy: The strategy used to chunk the file.
            public init(
                id: Swift.String,
                object: Components.Schemas.VectorStoreFileObject.ObjectPayload,
                usageBytes: Swift.Int,
                createdAt: Swift.Int,
                vectorStoreId: Swift.String,
                status: Components.Schemas.VectorStoreFileObject.StatusPayload,
                lastError: Components.Schemas.VectorStoreFileObject.LastErrorPayload? = nil,
                chunkingStrategy: Components.Schemas.VectorStoreFileObject.ChunkingStrategyPayload? = nil
            ) {
                self.id = id
                self.object = object
                self.usageBytes = usageBytes
                self.createdAt = createdAt
                self.vectorStoreId = vectorStoreId
                self.status = status
                self.lastError = lastError
                self.chunkingStrategy = chunkingStrategy
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case object
                case usageBytes = "usage_bytes"
                case createdAt = "created_at"
                case vectorStoreId = "vector_store_id"
                case status
                case lastError = "last_error"
                case chunkingStrategy = "chunking_strategy"
            }
        }
        /// A vector store is a collection of processed files can be used by the `file_search` tool.
        ///
        /// - Remark: Generated from `#/components/schemas/VectorStoreObject`.
        public struct VectorStoreObject: Codable, Hashable, Sendable {
            /// The identifier, which can be referenced in API endpoints.
            ///
            /// - Remark: Generated from `#/components/schemas/VectorStoreObject/id`.
            public var id: Swift.String
            /// The object type, which is always `vector_store`.
            ///
            /// - Remark: Generated from `#/components/schemas/VectorStoreObject/object`.
            @frozen public enum ObjectPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case vectorStore = "vector_store"
            }
            /// The object type, which is always `vector_store`.
            ///
            /// - Remark: Generated from `#/components/schemas/VectorStoreObject/object`.
            public var object: Components.Schemas.VectorStoreObject.ObjectPayload
            /// The Unix timestamp (in seconds) for when the vector store was created.
            ///
            /// - Remark: Generated from `#/components/schemas/VectorStoreObject/created_at`.
            public var createdAt: Swift.Int
            /// The name of the vector store.
            ///
            /// - Remark: Generated from `#/components/schemas/VectorStoreObject/name`.
            public var name: Swift.String
            /// The total number of bytes used by the files in the vector store.
            ///
            /// - Remark: Generated from `#/components/schemas/VectorStoreObject/usage_bytes`.
            public var usageBytes: Swift.Int
            /// - Remark: Generated from `#/components/schemas/VectorStoreObject/file_counts`.
            public struct FileCountsPayload: Codable, Hashable, Sendable {
                /// The number of files that are currently being processed.
                ///
                /// - Remark: Generated from `#/components/schemas/VectorStoreObject/file_counts/in_progress`.
                public var inProgress: Swift.Int
                /// The number of files that have been successfully processed.
                ///
                /// - Remark: Generated from `#/components/schemas/VectorStoreObject/file_counts/completed`.
                public var completed: Swift.Int
                /// The number of files that have failed to process.
                ///
                /// - Remark: Generated from `#/components/schemas/VectorStoreObject/file_counts/failed`.
                public var failed: Swift.Int
                /// The number of files that were cancelled.
                ///
                /// - Remark: Generated from `#/components/schemas/VectorStoreObject/file_counts/cancelled`.
                public var cancelled: Swift.Int
                /// The total number of files.
                ///
                /// - Remark: Generated from `#/components/schemas/VectorStoreObject/file_counts/total`.
                public var total: Swift.Int
                /// Creates a new `FileCountsPayload`.
                ///
                /// - Parameters:
                ///   - inProgress: The number of files that are currently being processed.
                ///   - completed: The number of files that have been successfully processed.
                ///   - failed: The number of files that have failed to process.
                ///   - cancelled: The number of files that were cancelled.
                ///   - total: The total number of files.
                public init(
                    inProgress: Swift.Int,
                    completed: Swift.Int,
                    failed: Swift.Int,
                    cancelled: Swift.Int,
                    total: Swift.Int
                ) {
                    self.inProgress = inProgress
                    self.completed = completed
                    self.failed = failed
                    self.cancelled = cancelled
                    self.total = total
                }
                public enum CodingKeys: String, CodingKey {
                    case inProgress = "in_progress"
                    case completed
                    case failed
                    case cancelled
                    case total
                }
            }
            /// - Remark: Generated from `#/components/schemas/VectorStoreObject/file_counts`.
            public var fileCounts: Components.Schemas.VectorStoreObject.FileCountsPayload
            /// The status of the vector store, which can be either `expired`, `in_progress`, or `completed`. A status of `completed` indicates that the vector store is ready for use.
            ///
            /// - Remark: Generated from `#/components/schemas/VectorStoreObject/status`.
            @frozen public enum StatusPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case expired = "expired"
                case inProgress = "in_progress"
                case completed = "completed"
            }
            /// The status of the vector store, which can be either `expired`, `in_progress`, or `completed`. A status of `completed` indicates that the vector store is ready for use.
            ///
            /// - Remark: Generated from `#/components/schemas/VectorStoreObject/status`.
            public var status: Components.Schemas.VectorStoreObject.StatusPayload
            /// - Remark: Generated from `#/components/schemas/VectorStoreObject/expires_after`.
            public var expiresAfter: Components.Schemas.VectorStoreExpirationAfter?
            /// The Unix timestamp (in seconds) for when the vector store will expire.
            ///
            /// - Remark: Generated from `#/components/schemas/VectorStoreObject/expires_at`.
            public var expiresAt: Swift.Int?
            /// The Unix timestamp (in seconds) for when the vector store was last active.
            ///
            /// - Remark: Generated from `#/components/schemas/VectorStoreObject/last_active_at`.
            public var lastActiveAt: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/VectorStoreObject/metadata`.
            public var metadata: Components.Schemas.Metadata?
            /// Creates a new `VectorStoreObject`.
            ///
            /// - Parameters:
            ///   - id: The identifier, which can be referenced in API endpoints.
            ///   - object: The object type, which is always `vector_store`.
            ///   - createdAt: The Unix timestamp (in seconds) for when the vector store was created.
            ///   - name: The name of the vector store.
            ///   - usageBytes: The total number of bytes used by the files in the vector store.
            ///   - fileCounts:
            ///   - status: The status of the vector store, which can be either `expired`, `in_progress`, or `completed`. A status of `completed` indicates that the vector store is ready for use.
            ///   - expiresAfter:
            ///   - expiresAt: The Unix timestamp (in seconds) for when the vector store will expire.
            ///   - lastActiveAt: The Unix timestamp (in seconds) for when the vector store was last active.
            ///   - metadata:
            public init(
                id: Swift.String,
                object: Components.Schemas.VectorStoreObject.ObjectPayload,
                createdAt: Swift.Int,
                name: Swift.String,
                usageBytes: Swift.Int,
                fileCounts: Components.Schemas.VectorStoreObject.FileCountsPayload,
                status: Components.Schemas.VectorStoreObject.StatusPayload,
                expiresAfter: Components.Schemas.VectorStoreExpirationAfter? = nil,
                expiresAt: Swift.Int? = nil,
                lastActiveAt: Swift.Int? = nil,
                metadata: Components.Schemas.Metadata? = nil
            ) {
                self.id = id
                self.object = object
                self.createdAt = createdAt
                self.name = name
                self.usageBytes = usageBytes
                self.fileCounts = fileCounts
                self.status = status
                self.expiresAfter = expiresAfter
                self.expiresAt = expiresAt
                self.lastActiveAt = lastActiveAt
                self.metadata = metadata
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case object
                case createdAt = "created_at"
                case name
                case usageBytes = "usage_bytes"
                case fileCounts = "file_counts"
                case status
                case expiresAfter = "expires_after"
                case expiresAt = "expires_at"
                case lastActiveAt = "last_active_at"
                case metadata
            }
        }
    }
    /// Types generated from the `#/components/parameters` section of the OpenAPI document.
    public enum Parameters {}
    /// Types generated from the `#/components/requestBodies` section of the OpenAPI document.
    public enum RequestBodies {}
    /// Types generated from the `#/components/responses` section of the OpenAPI document.
    public enum Responses {}
    /// Types generated from the `#/components/headers` section of the OpenAPI document.
    public enum Headers {}
}

/// API operations, with input and output types, generated from `#/paths` in the OpenAPI document.
public enum Operations {
    /// Returns a list of assistants.
    ///
    /// - Remark: HTTP `GET /assistants`.
    /// - Remark: Generated from `#/paths//assistants/get(listAssistants)`.
    public enum ListAssistants {
        public static let id: Swift.String = "listAssistants"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/assistants/GET/query`.
            public struct Query: Sendable, Hashable {
                /// A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.
                ///
                ///
                /// - Remark: Generated from `#/paths/assistants/GET/query/limit`.
                public var limit: Swift.Int?
                /// - Remark: Generated from `#/paths/assistants/GET/query/order`.
                @frozen public enum OrderPayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case asc = "asc"
                    case desc = "desc"
                }
                /// Sort order by the `created_at` timestamp of the objects. `asc` for ascending order and `desc` for descending order.
                ///
                ///
                /// - Remark: Generated from `#/paths/assistants/GET/query/order`.
                public var order: Operations.ListAssistants.Input.Query.OrderPayload?
                /// A cursor for use in pagination. `after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after=obj_foo in order to fetch the next page of the list.
                ///
                ///
                /// - Remark: Generated from `#/paths/assistants/GET/query/after`.
                public var after: Swift.String?
                /// A cursor for use in pagination. `before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with obj_foo, your subsequent call can include before=obj_foo in order to fetch the previous page of the list.
                ///
                ///
                /// - Remark: Generated from `#/paths/assistants/GET/query/before`.
                public var before: Swift.String?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - limit: A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.
                ///   - order: Sort order by the `created_at` timestamp of the objects. `asc` for ascending order and `desc` for descending order.
                ///   - after: A cursor for use in pagination. `after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after=obj_foo in order to fetch the next page of the list.
                ///   - before: A cursor for use in pagination. `before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with obj_foo, your subsequent call can include before=obj_foo in order to fetch the previous page of the list.
                public init(
                    limit: Swift.Int? = nil,
                    order: Operations.ListAssistants.Input.Query.OrderPayload? = nil,
                    after: Swift.String? = nil,
                    before: Swift.String? = nil
                ) {
                    self.limit = limit
                    self.order = order
                    self.after = after
                    self.before = before
                }
            }
            public var query: Operations.ListAssistants.Input.Query
            /// - Remark: Generated from `#/paths/assistants/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ListAssistants.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ListAssistants.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.ListAssistants.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            public init(
                query: Operations.ListAssistants.Input.Query = .init(),
                headers: Operations.ListAssistants.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/assistants/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/assistants/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.ListAssistantsResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ListAssistantsResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.ListAssistants.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.ListAssistants.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// OK
            ///
            /// - Remark: Generated from `#/paths//assistants/get(listAssistants)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.ListAssistants.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.ListAssistants.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Create an assistant with a model and instructions.
    ///
    /// - Remark: HTTP `POST /assistants`.
    /// - Remark: Generated from `#/paths//assistants/post(createAssistant)`.
    public enum CreateAssistant {
        public static let id: Swift.String = "createAssistant"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/assistants/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.CreateAssistant.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.CreateAssistant.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.CreateAssistant.Input.Headers
            /// - Remark: Generated from `#/paths/assistants/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/assistants/POST/requestBody/content/application\/json`.
                case json(Components.Schemas.CreateAssistantRequest)
            }
            public var body: Operations.CreateAssistant.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.CreateAssistant.Input.Headers = .init(),
                body: Operations.CreateAssistant.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/assistants/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/assistants/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.AssistantObject)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.AssistantObject {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.CreateAssistant.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.CreateAssistant.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// OK
            ///
            /// - Remark: Generated from `#/paths//assistants/post(createAssistant)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.CreateAssistant.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.CreateAssistant.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Retrieves an assistant.
    ///
    /// - Remark: HTTP `GET /assistants/{assistant_id}`.
    /// - Remark: Generated from `#/paths//assistants/{assistant_id}/get(getAssistant)`.
    public enum GetAssistant {
        public static let id: Swift.String = "getAssistant"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/assistants/{assistant_id}/GET/path`.
            public struct Path: Sendable, Hashable {
                /// The ID of the assistant to retrieve.
                ///
                /// - Remark: Generated from `#/paths/assistants/{assistant_id}/GET/path/assistant_id`.
                public var assistantId: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - assistantId: The ID of the assistant to retrieve.
                public init(assistantId: Swift.String) {
                    self.assistantId = assistantId
                }
            }
            public var path: Operations.GetAssistant.Input.Path
            /// - Remark: Generated from `#/paths/assistants/{assistant_id}/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.GetAssistant.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.GetAssistant.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.GetAssistant.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            public init(
                path: Operations.GetAssistant.Input.Path,
                headers: Operations.GetAssistant.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/assistants/{assistant_id}/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/assistants/{assistant_id}/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.AssistantObject)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.AssistantObject {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.GetAssistant.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.GetAssistant.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// OK
            ///
            /// - Remark: Generated from `#/paths//assistants/{assistant_id}/get(getAssistant)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.GetAssistant.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.GetAssistant.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Modifies an assistant.
    ///
    /// - Remark: HTTP `POST /assistants/{assistant_id}`.
    /// - Remark: Generated from `#/paths//assistants/{assistant_id}/post(modifyAssistant)`.
    public enum ModifyAssistant {
        public static let id: Swift.String = "modifyAssistant"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/assistants/{assistant_id}/POST/path`.
            public struct Path: Sendable, Hashable {
                /// The ID of the assistant to modify.
                ///
                /// - Remark: Generated from `#/paths/assistants/{assistant_id}/POST/path/assistant_id`.
                public var assistantId: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - assistantId: The ID of the assistant to modify.
                public init(assistantId: Swift.String) {
                    self.assistantId = assistantId
                }
            }
            public var path: Operations.ModifyAssistant.Input.Path
            /// - Remark: Generated from `#/paths/assistants/{assistant_id}/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ModifyAssistant.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ModifyAssistant.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.ModifyAssistant.Input.Headers
            /// - Remark: Generated from `#/paths/assistants/{assistant_id}/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/assistants/{assistant_id}/POST/requestBody/content/application\/json`.
                case json(Components.Schemas.ModifyAssistantRequest)
            }
            public var body: Operations.ModifyAssistant.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            ///   - body:
            public init(
                path: Operations.ModifyAssistant.Input.Path,
                headers: Operations.ModifyAssistant.Input.Headers = .init(),
                body: Operations.ModifyAssistant.Input.Body
            ) {
                self.path = path
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/assistants/{assistant_id}/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/assistants/{assistant_id}/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.AssistantObject)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.AssistantObject {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.ModifyAssistant.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.ModifyAssistant.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// OK
            ///
            /// - Remark: Generated from `#/paths//assistants/{assistant_id}/post(modifyAssistant)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.ModifyAssistant.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.ModifyAssistant.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Delete an assistant.
    ///
    /// - Remark: HTTP `DELETE /assistants/{assistant_id}`.
    /// - Remark: Generated from `#/paths//assistants/{assistant_id}/delete(deleteAssistant)`.
    public enum DeleteAssistant {
        public static let id: Swift.String = "deleteAssistant"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/assistants/{assistant_id}/DELETE/path`.
            public struct Path: Sendable, Hashable {
                /// The ID of the assistant to delete.
                ///
                /// - Remark: Generated from `#/paths/assistants/{assistant_id}/DELETE/path/assistant_id`.
                public var assistantId: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - assistantId: The ID of the assistant to delete.
                public init(assistantId: Swift.String) {
                    self.assistantId = assistantId
                }
            }
            public var path: Operations.DeleteAssistant.Input.Path
            /// - Remark: Generated from `#/paths/assistants/{assistant_id}/DELETE/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.DeleteAssistant.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.DeleteAssistant.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.DeleteAssistant.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            public init(
                path: Operations.DeleteAssistant.Input.Path,
                headers: Operations.DeleteAssistant.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/assistants/{assistant_id}/DELETE/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/assistants/{assistant_id}/DELETE/responses/200/content/application\/json`.
                    case json(Components.Schemas.DeleteAssistantResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.DeleteAssistantResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.DeleteAssistant.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.DeleteAssistant.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// OK
            ///
            /// - Remark: Generated from `#/paths//assistants/{assistant_id}/delete(deleteAssistant)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.DeleteAssistant.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.DeleteAssistant.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Generates audio from the input text.
    ///
    /// - Remark: HTTP `POST /audio/speech`.
    /// - Remark: Generated from `#/paths//audio/speech/post(createSpeech)`.
    public enum CreateSpeech {
        public static let id: Swift.String = "createSpeech"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/audio/speech/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.CreateSpeech.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.CreateSpeech.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.CreateSpeech.Input.Headers
            /// - Remark: Generated from `#/paths/audio/speech/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/audio/speech/POST/requestBody/content/application\/json`.
                case json(Components.Schemas.CreateSpeechRequest)
            }
            public var body: Operations.CreateSpeech.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.CreateSpeech.Input.Headers = .init(),
                body: Operations.CreateSpeech.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/audio/speech/POST/responses/200/headers`.
                public struct Headers: Sendable, Hashable {
                    /// chunked
                    ///
                    /// - Remark: Generated from `#/paths/audio/speech/POST/responses/200/headers/Transfer-Encoding`.
                    public var transferEncoding: Swift.String?
                    /// Creates a new `Headers`.
                    ///
                    /// - Parameters:
                    ///   - transferEncoding: chunked
                    public init(transferEncoding: Swift.String? = nil) {
                        self.transferEncoding = transferEncoding
                    }
                }
                /// Received HTTP response headers
                public var headers: Operations.CreateSpeech.Output.Ok.Headers
                /// - Remark: Generated from `#/paths/audio/speech/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/audio/speech/POST/responses/200/content/application\/octet-stream`.
                    case binary(OpenAPIRuntime.HTTPBody)
                    /// The associated value of the enum case if `self` is `.binary`.
                    ///
                    /// - Throws: An error if `self` is not `.binary`.
                    /// - SeeAlso: `.binary`.
                    public var binary: OpenAPIRuntime.HTTPBody {
                        get throws {
                            switch self {
                            case let .binary(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.CreateSpeech.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                public init(
                    headers: Operations.CreateSpeech.Output.Ok.Headers = .init(),
                    body: Operations.CreateSpeech.Output.Ok.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// OK
            ///
            /// - Remark: Generated from `#/paths//audio/speech/post(createSpeech)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.CreateSpeech.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.CreateSpeech.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case binary
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/octet-stream":
                    self = .binary
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .binary:
                    return "application/octet-stream"
                }
            }
            public static var allCases: [Self] {
                [
                    .binary
                ]
            }
        }
    }
    /// Transcribes audio into the input language.
    ///
    /// - Remark: HTTP `POST /audio/transcriptions`.
    /// - Remark: Generated from `#/paths//audio/transcriptions/post(createTranscription)`.
    public enum CreateTranscription {
        public static let id: Swift.String = "createTranscription"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/audio/transcriptions/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.CreateTranscription.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.CreateTranscription.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.CreateTranscription.Input.Headers
            /// - Remark: Generated from `#/paths/audio/transcriptions/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/audio/transcriptions/POST/requestBody/content/multipart\/form-data`.
                case multipartForm(OpenAPIRuntime.MultipartBody<Components.Schemas.CreateTranscriptionRequest>)
            }
            public var body: Operations.CreateTranscription.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.CreateTranscription.Input.Headers = .init(),
                body: Operations.CreateTranscription.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/audio/transcriptions/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/audio/transcriptions/POST/responses/200/content/json`.
                    @frozen public enum JsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/audio/transcriptions/POST/responses/200/content/json/case1`.
                        case CreateTranscriptionResponseJson(Components.Schemas.CreateTranscriptionResponseJson)
                        /// - Remark: Generated from `#/paths/audio/transcriptions/POST/responses/200/content/json/case2`.
                        case CreateTranscriptionResponseVerboseJson(Components.Schemas.CreateTranscriptionResponseVerboseJson)
                        public init(from decoder: any Decoder) throws {
                            var errors: [any Error] = []
                            do {
                                self = .CreateTranscriptionResponseJson(try .init(from: decoder))
                                return
                            } catch {
                                errors.append(error)
                            }
                            do {
                                self = .CreateTranscriptionResponseVerboseJson(try .init(from: decoder))
                                return
                            } catch {
                                errors.append(error)
                            }
                            throw Swift.DecodingError.failedToDecodeOneOfSchema(
                                type: Self.self,
                                codingPath: decoder.codingPath,
                                errors: errors
                            )
                        }
                        public func encode(to encoder: any Encoder) throws {
                            switch self {
                            case let .CreateTranscriptionResponseJson(value):
                                try value.encode(to: encoder)
                            case let .CreateTranscriptionResponseVerboseJson(value):
                                try value.encode(to: encoder)
                            }
                        }
                    }
                    /// - Remark: Generated from `#/paths/audio/transcriptions/POST/responses/200/content/application\/json`.
                    case json(Operations.CreateTranscription.Output.Ok.Body.JsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Operations.CreateTranscription.Output.Ok.Body.JsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.CreateTranscription.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.CreateTranscription.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// OK
            ///
            /// - Remark: Generated from `#/paths//audio/transcriptions/post(createTranscription)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.CreateTranscription.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.CreateTranscription.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Translates audio into English.
    ///
    /// - Remark: HTTP `POST /audio/translations`.
    /// - Remark: Generated from `#/paths//audio/translations/post(createTranslation)`.
    public enum CreateTranslation {
        public static let id: Swift.String = "createTranslation"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/audio/translations/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.CreateTranslation.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.CreateTranslation.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.CreateTranslation.Input.Headers
            /// - Remark: Generated from `#/paths/audio/translations/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/audio/translations/POST/requestBody/content/multipart\/form-data`.
                case multipartForm(OpenAPIRuntime.MultipartBody<Components.Schemas.CreateTranslationRequest>)
            }
            public var body: Operations.CreateTranslation.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.CreateTranslation.Input.Headers = .init(),
                body: Operations.CreateTranslation.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/audio/translations/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/audio/translations/POST/responses/200/content/json`.
                    @frozen public enum JsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/audio/translations/POST/responses/200/content/json/case1`.
                        case CreateTranslationResponseJson(Components.Schemas.CreateTranslationResponseJson)
                        /// - Remark: Generated from `#/paths/audio/translations/POST/responses/200/content/json/case2`.
                        case CreateTranslationResponseVerboseJson(Components.Schemas.CreateTranslationResponseVerboseJson)
                        public init(from decoder: any Decoder) throws {
                            var errors: [any Error] = []
                            do {
                                self = .CreateTranslationResponseJson(try .init(from: decoder))
                                return
                            } catch {
                                errors.append(error)
                            }
                            do {
                                self = .CreateTranslationResponseVerboseJson(try .init(from: decoder))
                                return
                            } catch {
                                errors.append(error)
                            }
                            throw Swift.DecodingError.failedToDecodeOneOfSchema(
                                type: Self.self,
                                codingPath: decoder.codingPath,
                                errors: errors
                            )
                        }
                        public func encode(to encoder: any Encoder) throws {
                            switch self {
                            case let .CreateTranslationResponseJson(value):
                                try value.encode(to: encoder)
                            case let .CreateTranslationResponseVerboseJson(value):
                                try value.encode(to: encoder)
                            }
                        }
                    }
                    /// - Remark: Generated from `#/paths/audio/translations/POST/responses/200/content/application\/json`.
                    case json(Operations.CreateTranslation.Output.Ok.Body.JsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Operations.CreateTranslation.Output.Ok.Body.JsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.CreateTranslation.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.CreateTranslation.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// OK
            ///
            /// - Remark: Generated from `#/paths//audio/translations/post(createTranslation)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.CreateTranslation.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.CreateTranslation.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// List your organization's batches.
    ///
    /// - Remark: HTTP `GET /batches`.
    /// - Remark: Generated from `#/paths//batches/get(listBatches)`.
    public enum ListBatches {
        public static let id: Swift.String = "listBatches"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/batches/GET/query`.
            public struct Query: Sendable, Hashable {
                /// A cursor for use in pagination. `after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after=obj_foo in order to fetch the next page of the list.
                ///
                ///
                /// - Remark: Generated from `#/paths/batches/GET/query/after`.
                public var after: Swift.String?
                /// A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.
                ///
                ///
                /// - Remark: Generated from `#/paths/batches/GET/query/limit`.
                public var limit: Swift.Int?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - after: A cursor for use in pagination. `after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after=obj_foo in order to fetch the next page of the list.
                ///   - limit: A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.
                public init(
                    after: Swift.String? = nil,
                    limit: Swift.Int? = nil
                ) {
                    self.after = after
                    self.limit = limit
                }
            }
            public var query: Operations.ListBatches.Input.Query
            /// - Remark: Generated from `#/paths/batches/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ListBatches.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ListBatches.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.ListBatches.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            public init(
                query: Operations.ListBatches.Input.Query = .init(),
                headers: Operations.ListBatches.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/batches/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/batches/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.ListBatchesResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ListBatchesResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.ListBatches.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.ListBatches.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Batch listed successfully.
            ///
            /// - Remark: Generated from `#/paths//batches/get(listBatches)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.ListBatches.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.ListBatches.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Creates and executes a batch from an uploaded file of requests
    ///
    /// - Remark: HTTP `POST /batches`.
    /// - Remark: Generated from `#/paths//batches/post(createBatch)`.
    public enum CreateBatch {
        public static let id: Swift.String = "createBatch"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/batches/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.CreateBatch.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.CreateBatch.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.CreateBatch.Input.Headers
            /// - Remark: Generated from `#/paths/batches/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/batches/POST/requestBody/json`.
                public struct JsonPayload: Codable, Hashable, Sendable {
                    /// The ID of an uploaded file that contains requests for the new batch.
                    ///
                    /// See [upload file](/docs/api-reference/files/create) for how to upload a file.
                    ///
                    /// Your input file must be formatted as a [JSONL file](/docs/api-reference/batch/request-input), and must be uploaded with the purpose `batch`. The file can contain up to 50,000 requests, and can be up to 200 MB in size.
                    ///
                    ///
                    /// - Remark: Generated from `#/paths/batches/POST/requestBody/json/input_file_id`.
                    public var inputFileId: Swift.String
                    /// The endpoint to be used for all requests in the batch. Currently `/v1/chat/completions`, `/v1/embeddings`, and `/v1/completions` are supported. Note that `/v1/embeddings` batches are also restricted to a maximum of 50,000 embedding inputs across all requests in the batch.
                    ///
                    /// - Remark: Generated from `#/paths/batches/POST/requestBody/json/endpoint`.
                    @frozen public enum EndpointPayload: String, Codable, Hashable, Sendable, CaseIterable {
                        case _sol_v1ChatCompletions = "/v1/chat/completions"
                        case _sol_v1Embeddings = "/v1/embeddings"
                        case _sol_v1Completions = "/v1/completions"
                    }
                    /// The endpoint to be used for all requests in the batch. Currently `/v1/chat/completions`, `/v1/embeddings`, and `/v1/completions` are supported. Note that `/v1/embeddings` batches are also restricted to a maximum of 50,000 embedding inputs across all requests in the batch.
                    ///
                    /// - Remark: Generated from `#/paths/batches/POST/requestBody/json/endpoint`.
                    public var endpoint: Operations.CreateBatch.Input.Body.JsonPayload.EndpointPayload
                    /// The time frame within which the batch should be processed. Currently only `24h` is supported.
                    ///
                    /// - Remark: Generated from `#/paths/batches/POST/requestBody/json/completion_window`.
                    @frozen public enum CompletionWindowPayload: String, Codable, Hashable, Sendable, CaseIterable {
                        case _24h = "24h"
                    }
                    /// The time frame within which the batch should be processed. Currently only `24h` is supported.
                    ///
                    /// - Remark: Generated from `#/paths/batches/POST/requestBody/json/completion_window`.
                    public var completionWindow: Operations.CreateBatch.Input.Body.JsonPayload.CompletionWindowPayload
                    /// - Remark: Generated from `#/paths/batches/POST/requestBody/json/metadata`.
                    public var metadata: Components.Schemas.Metadata?
                    /// Creates a new `JsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - inputFileId: The ID of an uploaded file that contains requests for the new batch.
                    ///   - endpoint: The endpoint to be used for all requests in the batch. Currently `/v1/chat/completions`, `/v1/embeddings`, and `/v1/completions` are supported. Note that `/v1/embeddings` batches are also restricted to a maximum of 50,000 embedding inputs across all requests in the batch.
                    ///   - completionWindow: The time frame within which the batch should be processed. Currently only `24h` is supported.
                    ///   - metadata:
                    public init(
                        inputFileId: Swift.String,
                        endpoint: Operations.CreateBatch.Input.Body.JsonPayload.EndpointPayload,
                        completionWindow: Operations.CreateBatch.Input.Body.JsonPayload.CompletionWindowPayload,
                        metadata: Components.Schemas.Metadata? = nil
                    ) {
                        self.inputFileId = inputFileId
                        self.endpoint = endpoint
                        self.completionWindow = completionWindow
                        self.metadata = metadata
                    }
                    public enum CodingKeys: String, CodingKey {
                        case inputFileId = "input_file_id"
                        case endpoint
                        case completionWindow = "completion_window"
                        case metadata
                    }
                }
                /// - Remark: Generated from `#/paths/batches/POST/requestBody/content/application\/json`.
                case json(Operations.CreateBatch.Input.Body.JsonPayload)
            }
            public var body: Operations.CreateBatch.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.CreateBatch.Input.Headers = .init(),
                body: Operations.CreateBatch.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/batches/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/batches/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.Batch)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.Batch {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.CreateBatch.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.CreateBatch.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Batch created successfully.
            ///
            /// - Remark: Generated from `#/paths//batches/post(createBatch)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.CreateBatch.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.CreateBatch.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Retrieves a batch.
    ///
    /// - Remark: HTTP `GET /batches/{batch_id}`.
    /// - Remark: Generated from `#/paths//batches/{batch_id}/get(retrieveBatch)`.
    public enum RetrieveBatch {
        public static let id: Swift.String = "retrieveBatch"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/batches/{batch_id}/GET/path`.
            public struct Path: Sendable, Hashable {
                /// The ID of the batch to retrieve.
                ///
                /// - Remark: Generated from `#/paths/batches/{batch_id}/GET/path/batch_id`.
                public var batchId: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - batchId: The ID of the batch to retrieve.
                public init(batchId: Swift.String) {
                    self.batchId = batchId
                }
            }
            public var path: Operations.RetrieveBatch.Input.Path
            /// - Remark: Generated from `#/paths/batches/{batch_id}/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.RetrieveBatch.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.RetrieveBatch.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.RetrieveBatch.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            public init(
                path: Operations.RetrieveBatch.Input.Path,
                headers: Operations.RetrieveBatch.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/batches/{batch_id}/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/batches/{batch_id}/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.Batch)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.Batch {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.RetrieveBatch.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.RetrieveBatch.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Batch retrieved successfully.
            ///
            /// - Remark: Generated from `#/paths//batches/{batch_id}/get(retrieveBatch)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.RetrieveBatch.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.RetrieveBatch.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Cancels an in-progress batch. The batch will be in status `cancelling` for up to 10 minutes, before changing to `cancelled`, where it will have partial results (if any) available in the output file.
    ///
    /// - Remark: HTTP `POST /batches/{batch_id}/cancel`.
    /// - Remark: Generated from `#/paths//batches/{batch_id}/cancel/post(cancelBatch)`.
    public enum CancelBatch {
        public static let id: Swift.String = "cancelBatch"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/batches/{batch_id}/cancel/POST/path`.
            public struct Path: Sendable, Hashable {
                /// The ID of the batch to cancel.
                ///
                /// - Remark: Generated from `#/paths/batches/{batch_id}/cancel/POST/path/batch_id`.
                public var batchId: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - batchId: The ID of the batch to cancel.
                public init(batchId: Swift.String) {
                    self.batchId = batchId
                }
            }
            public var path: Operations.CancelBatch.Input.Path
            /// - Remark: Generated from `#/paths/batches/{batch_id}/cancel/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.CancelBatch.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.CancelBatch.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.CancelBatch.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            public init(
                path: Operations.CancelBatch.Input.Path,
                headers: Operations.CancelBatch.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/batches/{batch_id}/cancel/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/batches/{batch_id}/cancel/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.Batch)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.Batch {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.CancelBatch.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.CancelBatch.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Batch is cancelling. Returns the cancelling batch's details.
            ///
            /// - Remark: Generated from `#/paths//batches/{batch_id}/cancel/post(cancelBatch)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.CancelBatch.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.CancelBatch.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Creates a model response for the given chat conversation. Learn more in the
    /// [text generation](/docs/guides/text-generation), [vision](/docs/guides/vision),
    /// and [audio](/docs/guides/audio) guides.
    ///
    /// Parameter support can differ depending on the model used to generate the
    /// response, particularly for newer reasoning models. Parameters that are only
    /// supported for reasoning models are noted below. For the current state of 
    /// unsupported parameters in reasoning models, 
    /// [refer to the reasoning guide](/docs/guides/reasoning).
    ///
    ///
    /// - Remark: HTTP `POST /chat/completions`.
    /// - Remark: Generated from `#/paths//chat/completions/post(createChatCompletion)`.
    public enum CreateChatCompletion {
        public static let id: Swift.String = "createChatCompletion"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/chat/completions/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.CreateChatCompletion.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.CreateChatCompletion.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.CreateChatCompletion.Input.Headers
            /// - Remark: Generated from `#/paths/chat/completions/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/chat/completions/POST/requestBody/content/application\/json`.
                case json(Components.Schemas.CreateChatCompletionRequest)
            }
            public var body: Operations.CreateChatCompletion.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.CreateChatCompletion.Input.Headers = .init(),
                body: Operations.CreateChatCompletion.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/chat/completions/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/chat/completions/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.CreateChatCompletionResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.CreateChatCompletionResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            default:
                                try throwUnexpectedResponseBody(
                                    expectedContent: "application/json",
                                    body: self
                                )
                            }
                        }
                    }
                    /// - Remark: Generated from `#/paths/chat/completions/POST/responses/200/content/text\/event-stream`.
                    case textEventStream(OpenAPIRuntime.HTTPBody)
                    /// The associated value of the enum case if `self` is `.textEventStream`.
                    ///
                    /// - Throws: An error if `self` is not `.textEventStream`.
                    /// - SeeAlso: `.textEventStream`.
                    public var textEventStream: OpenAPIRuntime.HTTPBody {
                        get throws {
                            switch self {
                            case let .textEventStream(body):
                                return body
                            default:
                                try throwUnexpectedResponseBody(
                                    expectedContent: "text/event-stream",
                                    body: self
                                )
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.CreateChatCompletion.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.CreateChatCompletion.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// OK
            ///
            /// - Remark: Generated from `#/paths//chat/completions/post(createChatCompletion)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.CreateChatCompletion.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.CreateChatCompletion.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case textEventStream
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                case "text/event-stream":
                    self = .textEventStream
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                case .textEventStream:
                    return "text/event-stream"
                }
            }
            public static var allCases: [Self] {
                [
                    .json,
                    .textEventStream
                ]
            }
        }
    }
    /// Creates a completion for the provided prompt and parameters.
    ///
    /// - Remark: HTTP `POST /completions`.
    /// - Remark: Generated from `#/paths//completions/post(createCompletion)`.
    public enum CreateCompletion {
        public static let id: Swift.String = "createCompletion"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/completions/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.CreateCompletion.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.CreateCompletion.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.CreateCompletion.Input.Headers
            /// - Remark: Generated from `#/paths/completions/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/completions/POST/requestBody/content/application\/json`.
                case json(Components.Schemas.CreateCompletionRequest)
            }
            public var body: Operations.CreateCompletion.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.CreateCompletion.Input.Headers = .init(),
                body: Operations.CreateCompletion.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/completions/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/completions/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.CreateCompletionResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.CreateCompletionResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.CreateCompletion.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.CreateCompletion.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// OK
            ///
            /// - Remark: Generated from `#/paths//completions/post(createCompletion)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.CreateCompletion.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.CreateCompletion.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Creates an embedding vector representing the input text.
    ///
    /// - Remark: HTTP `POST /embeddings`.
    /// - Remark: Generated from `#/paths//embeddings/post(createEmbedding)`.
    public enum CreateEmbedding {
        public static let id: Swift.String = "createEmbedding"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/embeddings/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.CreateEmbedding.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.CreateEmbedding.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.CreateEmbedding.Input.Headers
            /// - Remark: Generated from `#/paths/embeddings/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/embeddings/POST/requestBody/content/application\/json`.
                case json(Components.Schemas.CreateEmbeddingRequest)
            }
            public var body: Operations.CreateEmbedding.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.CreateEmbedding.Input.Headers = .init(),
                body: Operations.CreateEmbedding.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/embeddings/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/embeddings/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.CreateEmbeddingResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.CreateEmbeddingResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.CreateEmbedding.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.CreateEmbedding.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// OK
            ///
            /// - Remark: Generated from `#/paths//embeddings/post(createEmbedding)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.CreateEmbedding.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.CreateEmbedding.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Returns a list of files.
    ///
    /// - Remark: HTTP `GET /files`.
    /// - Remark: Generated from `#/paths//files/get(listFiles)`.
    public enum ListFiles {
        public static let id: Swift.String = "listFiles"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/files/GET/query`.
            public struct Query: Sendable, Hashable {
                /// Only return files with the given purpose.
                ///
                /// - Remark: Generated from `#/paths/files/GET/query/purpose`.
                public var purpose: Swift.String?
                /// A limit on the number of objects to be returned. Limit can range between 1 and 10,000, and the default is 10,000.
                ///
                ///
                /// - Remark: Generated from `#/paths/files/GET/query/limit`.
                public var limit: Swift.Int?
                /// - Remark: Generated from `#/paths/files/GET/query/order`.
                @frozen public enum OrderPayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case asc = "asc"
                    case desc = "desc"
                }
                /// Sort order by the `created_at` timestamp of the objects. `asc` for ascending order and `desc` for descending order.
                ///
                ///
                /// - Remark: Generated from `#/paths/files/GET/query/order`.
                public var order: Operations.ListFiles.Input.Query.OrderPayload?
                /// A cursor for use in pagination. `after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after=obj_foo in order to fetch the next page of the list.
                ///
                ///
                /// - Remark: Generated from `#/paths/files/GET/query/after`.
                public var after: Swift.String?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - purpose: Only return files with the given purpose.
                ///   - limit: A limit on the number of objects to be returned. Limit can range between 1 and 10,000, and the default is 10,000.
                ///   - order: Sort order by the `created_at` timestamp of the objects. `asc` for ascending order and `desc` for descending order.
                ///   - after: A cursor for use in pagination. `after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after=obj_foo in order to fetch the next page of the list.
                public init(
                    purpose: Swift.String? = nil,
                    limit: Swift.Int? = nil,
                    order: Operations.ListFiles.Input.Query.OrderPayload? = nil,
                    after: Swift.String? = nil
                ) {
                    self.purpose = purpose
                    self.limit = limit
                    self.order = order
                    self.after = after
                }
            }
            public var query: Operations.ListFiles.Input.Query
            /// - Remark: Generated from `#/paths/files/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ListFiles.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ListFiles.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.ListFiles.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            public init(
                query: Operations.ListFiles.Input.Query = .init(),
                headers: Operations.ListFiles.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/files/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/files/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.ListFilesResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ListFilesResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.ListFiles.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.ListFiles.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// OK
            ///
            /// - Remark: Generated from `#/paths//files/get(listFiles)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.ListFiles.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.ListFiles.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Upload a file that can be used across various endpoints. Individual files can be up to 512 MB, and the size of all files uploaded by one organization can be up to 100 GB.
    ///
    /// The Assistants API supports files up to 2 million tokens and of specific file types. See the [Assistants Tools guide](/docs/assistants/tools) for details.
    ///
    /// The Fine-tuning API only supports `.jsonl` files. The input also has certain required formats for fine-tuning [chat](/docs/api-reference/fine-tuning/chat-input) or [completions](/docs/api-reference/fine-tuning/completions-input) models.
    ///
    /// The Batch API only supports `.jsonl` files up to 200 MB in size. The input also has a specific required [format](/docs/api-reference/batch/request-input).
    ///
    /// Please [contact us](https://help.openai.com/) if you need to increase these storage limits.
    ///
    ///
    /// - Remark: HTTP `POST /files`.
    /// - Remark: Generated from `#/paths//files/post(createFile)`.
    public enum CreateFile {
        public static let id: Swift.String = "createFile"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/files/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.CreateFile.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.CreateFile.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.CreateFile.Input.Headers
            /// - Remark: Generated from `#/paths/files/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/files/POST/requestBody/content/multipart\/form-data`.
                case multipartForm(OpenAPIRuntime.MultipartBody<Components.Schemas.CreateFileRequest>)
            }
            public var body: Operations.CreateFile.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.CreateFile.Input.Headers = .init(),
                body: Operations.CreateFile.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/files/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/files/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.OpenAIFile)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.OpenAIFile {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.CreateFile.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.CreateFile.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// OK
            ///
            /// - Remark: Generated from `#/paths//files/post(createFile)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.CreateFile.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.CreateFile.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Returns information about a specific file.
    ///
    /// - Remark: HTTP `GET /files/{file_id}`.
    /// - Remark: Generated from `#/paths//files/{file_id}/get(retrieveFile)`.
    public enum RetrieveFile {
        public static let id: Swift.String = "retrieveFile"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/files/{file_id}/GET/path`.
            public struct Path: Sendable, Hashable {
                /// The ID of the file to use for this request.
                ///
                /// - Remark: Generated from `#/paths/files/{file_id}/GET/path/file_id`.
                public var fileId: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - fileId: The ID of the file to use for this request.
                public init(fileId: Swift.String) {
                    self.fileId = fileId
                }
            }
            public var path: Operations.RetrieveFile.Input.Path
            /// - Remark: Generated from `#/paths/files/{file_id}/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.RetrieveFile.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.RetrieveFile.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.RetrieveFile.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            public init(
                path: Operations.RetrieveFile.Input.Path,
                headers: Operations.RetrieveFile.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/files/{file_id}/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/files/{file_id}/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.OpenAIFile)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.OpenAIFile {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.RetrieveFile.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.RetrieveFile.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// OK
            ///
            /// - Remark: Generated from `#/paths//files/{file_id}/get(retrieveFile)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.RetrieveFile.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.RetrieveFile.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Delete a file.
    ///
    /// - Remark: HTTP `DELETE /files/{file_id}`.
    /// - Remark: Generated from `#/paths//files/{file_id}/delete(deleteFile)`.
    public enum DeleteFile {
        public static let id: Swift.String = "deleteFile"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/files/{file_id}/DELETE/path`.
            public struct Path: Sendable, Hashable {
                /// The ID of the file to use for this request.
                ///
                /// - Remark: Generated from `#/paths/files/{file_id}/DELETE/path/file_id`.
                public var fileId: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - fileId: The ID of the file to use for this request.
                public init(fileId: Swift.String) {
                    self.fileId = fileId
                }
            }
            public var path: Operations.DeleteFile.Input.Path
            /// - Remark: Generated from `#/paths/files/{file_id}/DELETE/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.DeleteFile.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.DeleteFile.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.DeleteFile.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            public init(
                path: Operations.DeleteFile.Input.Path,
                headers: Operations.DeleteFile.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/files/{file_id}/DELETE/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/files/{file_id}/DELETE/responses/200/content/application\/json`.
                    case json(Components.Schemas.DeleteFileResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.DeleteFileResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.DeleteFile.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.DeleteFile.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// OK
            ///
            /// - Remark: Generated from `#/paths//files/{file_id}/delete(deleteFile)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.DeleteFile.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.DeleteFile.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Returns the contents of the specified file.
    ///
    /// - Remark: HTTP `GET /files/{file_id}/content`.
    /// - Remark: Generated from `#/paths//files/{file_id}/content/get(downloadFile)`.
    public enum DownloadFile {
        public static let id: Swift.String = "downloadFile"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/files/{file_id}/content/GET/path`.
            public struct Path: Sendable, Hashable {
                /// The ID of the file to use for this request.
                ///
                /// - Remark: Generated from `#/paths/files/{file_id}/content/GET/path/file_id`.
                public var fileId: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - fileId: The ID of the file to use for this request.
                public init(fileId: Swift.String) {
                    self.fileId = fileId
                }
            }
            public var path: Operations.DownloadFile.Input.Path
            /// - Remark: Generated from `#/paths/files/{file_id}/content/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.DownloadFile.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.DownloadFile.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.DownloadFile.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            public init(
                path: Operations.DownloadFile.Input.Path,
                headers: Operations.DownloadFile.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/files/{file_id}/content/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/files/{file_id}/content/GET/responses/200/content/application\/json`.
                    case json(Swift.String)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Swift.String {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.DownloadFile.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.DownloadFile.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// OK
            ///
            /// - Remark: Generated from `#/paths//files/{file_id}/content/get(downloadFile)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.DownloadFile.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.DownloadFile.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// List your organization's fine-tuning jobs
    ///
    ///
    /// - Remark: HTTP `GET /fine_tuning/jobs`.
    /// - Remark: Generated from `#/paths//fine_tuning/jobs/get(listPaginatedFineTuningJobs)`.
    public enum ListPaginatedFineTuningJobs {
        public static let id: Swift.String = "listPaginatedFineTuningJobs"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/fine_tuning/jobs/GET/query`.
            public struct Query: Sendable, Hashable {
                /// Identifier for the last job from the previous pagination request.
                ///
                /// - Remark: Generated from `#/paths/fine_tuning/jobs/GET/query/after`.
                public var after: Swift.String?
                /// Number of fine-tuning jobs to retrieve.
                ///
                /// - Remark: Generated from `#/paths/fine_tuning/jobs/GET/query/limit`.
                public var limit: Swift.Int?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - after: Identifier for the last job from the previous pagination request.
                ///   - limit: Number of fine-tuning jobs to retrieve.
                public init(
                    after: Swift.String? = nil,
                    limit: Swift.Int? = nil
                ) {
                    self.after = after
                    self.limit = limit
                }
            }
            public var query: Operations.ListPaginatedFineTuningJobs.Input.Query
            /// - Remark: Generated from `#/paths/fine_tuning/jobs/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ListPaginatedFineTuningJobs.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ListPaginatedFineTuningJobs.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.ListPaginatedFineTuningJobs.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            public init(
                query: Operations.ListPaginatedFineTuningJobs.Input.Query = .init(),
                headers: Operations.ListPaginatedFineTuningJobs.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/fine_tuning/jobs/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/fine_tuning/jobs/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.ListPaginatedFineTuningJobsResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ListPaginatedFineTuningJobsResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.ListPaginatedFineTuningJobs.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.ListPaginatedFineTuningJobs.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// OK
            ///
            /// - Remark: Generated from `#/paths//fine_tuning/jobs/get(listPaginatedFineTuningJobs)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.ListPaginatedFineTuningJobs.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.ListPaginatedFineTuningJobs.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Creates a fine-tuning job which begins the process of creating a new model from a given dataset.
    ///
    /// Response includes details of the enqueued job including job status and the name of the fine-tuned models once complete.
    ///
    /// [Learn more about fine-tuning](/docs/guides/fine-tuning)
    ///
    ///
    /// - Remark: HTTP `POST /fine_tuning/jobs`.
    /// - Remark: Generated from `#/paths//fine_tuning/jobs/post(createFineTuningJob)`.
    public enum CreateFineTuningJob {
        public static let id: Swift.String = "createFineTuningJob"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/fine_tuning/jobs/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.CreateFineTuningJob.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.CreateFineTuningJob.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.CreateFineTuningJob.Input.Headers
            /// - Remark: Generated from `#/paths/fine_tuning/jobs/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/fine_tuning/jobs/POST/requestBody/content/application\/json`.
                case json(Components.Schemas.CreateFineTuningJobRequest)
            }
            public var body: Operations.CreateFineTuningJob.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.CreateFineTuningJob.Input.Headers = .init(),
                body: Operations.CreateFineTuningJob.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/fine_tuning/jobs/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/fine_tuning/jobs/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.FineTuningJob)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.FineTuningJob {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.CreateFineTuningJob.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.CreateFineTuningJob.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// OK
            ///
            /// - Remark: Generated from `#/paths//fine_tuning/jobs/post(createFineTuningJob)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.CreateFineTuningJob.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.CreateFineTuningJob.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Get info about a fine-tuning job.
    ///
    /// [Learn more about fine-tuning](/docs/guides/fine-tuning)
    ///
    ///
    /// - Remark: HTTP `GET /fine_tuning/jobs/{fine_tuning_job_id}`.
    /// - Remark: Generated from `#/paths//fine_tuning/jobs/{fine_tuning_job_id}/get(retrieveFineTuningJob)`.
    public enum RetrieveFineTuningJob {
        public static let id: Swift.String = "retrieveFineTuningJob"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/fine_tuning/jobs/{fine_tuning_job_id}/GET/path`.
            public struct Path: Sendable, Hashable {
                /// The ID of the fine-tuning job.
                ///
                ///
                /// - Remark: Generated from `#/paths/fine_tuning/jobs/{fine_tuning_job_id}/GET/path/fine_tuning_job_id`.
                public var fineTuningJobId: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - fineTuningJobId: The ID of the fine-tuning job.
                public init(fineTuningJobId: Swift.String) {
                    self.fineTuningJobId = fineTuningJobId
                }
            }
            public var path: Operations.RetrieveFineTuningJob.Input.Path
            /// - Remark: Generated from `#/paths/fine_tuning/jobs/{fine_tuning_job_id}/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.RetrieveFineTuningJob.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.RetrieveFineTuningJob.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.RetrieveFineTuningJob.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            public init(
                path: Operations.RetrieveFineTuningJob.Input.Path,
                headers: Operations.RetrieveFineTuningJob.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/fine_tuning/jobs/{fine_tuning_job_id}/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/fine_tuning/jobs/{fine_tuning_job_id}/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.FineTuningJob)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.FineTuningJob {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.RetrieveFineTuningJob.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.RetrieveFineTuningJob.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// OK
            ///
            /// - Remark: Generated from `#/paths//fine_tuning/jobs/{fine_tuning_job_id}/get(retrieveFineTuningJob)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.RetrieveFineTuningJob.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.RetrieveFineTuningJob.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Immediately cancel a fine-tune job.
    ///
    ///
    /// - Remark: HTTP `POST /fine_tuning/jobs/{fine_tuning_job_id}/cancel`.
    /// - Remark: Generated from `#/paths//fine_tuning/jobs/{fine_tuning_job_id}/cancel/post(cancelFineTuningJob)`.
    public enum CancelFineTuningJob {
        public static let id: Swift.String = "cancelFineTuningJob"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/fine_tuning/jobs/{fine_tuning_job_id}/cancel/POST/path`.
            public struct Path: Sendable, Hashable {
                /// The ID of the fine-tuning job to cancel.
                ///
                ///
                /// - Remark: Generated from `#/paths/fine_tuning/jobs/{fine_tuning_job_id}/cancel/POST/path/fine_tuning_job_id`.
                public var fineTuningJobId: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - fineTuningJobId: The ID of the fine-tuning job to cancel.
                public init(fineTuningJobId: Swift.String) {
                    self.fineTuningJobId = fineTuningJobId
                }
            }
            public var path: Operations.CancelFineTuningJob.Input.Path
            /// - Remark: Generated from `#/paths/fine_tuning/jobs/{fine_tuning_job_id}/cancel/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.CancelFineTuningJob.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.CancelFineTuningJob.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.CancelFineTuningJob.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            public init(
                path: Operations.CancelFineTuningJob.Input.Path,
                headers: Operations.CancelFineTuningJob.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/fine_tuning/jobs/{fine_tuning_job_id}/cancel/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/fine_tuning/jobs/{fine_tuning_job_id}/cancel/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.FineTuningJob)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.FineTuningJob {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.CancelFineTuningJob.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.CancelFineTuningJob.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// OK
            ///
            /// - Remark: Generated from `#/paths//fine_tuning/jobs/{fine_tuning_job_id}/cancel/post(cancelFineTuningJob)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.CancelFineTuningJob.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.CancelFineTuningJob.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// List checkpoints for a fine-tuning job.
    ///
    ///
    /// - Remark: HTTP `GET /fine_tuning/jobs/{fine_tuning_job_id}/checkpoints`.
    /// - Remark: Generated from `#/paths//fine_tuning/jobs/{fine_tuning_job_id}/checkpoints/get(listFineTuningJobCheckpoints)`.
    public enum ListFineTuningJobCheckpoints {
        public static let id: Swift.String = "listFineTuningJobCheckpoints"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/fine_tuning/jobs/{fine_tuning_job_id}/checkpoints/GET/path`.
            public struct Path: Sendable, Hashable {
                /// The ID of the fine-tuning job to get checkpoints for.
                ///
                ///
                /// - Remark: Generated from `#/paths/fine_tuning/jobs/{fine_tuning_job_id}/checkpoints/GET/path/fine_tuning_job_id`.
                public var fineTuningJobId: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - fineTuningJobId: The ID of the fine-tuning job to get checkpoints for.
                public init(fineTuningJobId: Swift.String) {
                    self.fineTuningJobId = fineTuningJobId
                }
            }
            public var path: Operations.ListFineTuningJobCheckpoints.Input.Path
            /// - Remark: Generated from `#/paths/fine_tuning/jobs/{fine_tuning_job_id}/checkpoints/GET/query`.
            public struct Query: Sendable, Hashable {
                /// Identifier for the last checkpoint ID from the previous pagination request.
                ///
                /// - Remark: Generated from `#/paths/fine_tuning/jobs/{fine_tuning_job_id}/checkpoints/GET/query/after`.
                public var after: Swift.String?
                /// Number of checkpoints to retrieve.
                ///
                /// - Remark: Generated from `#/paths/fine_tuning/jobs/{fine_tuning_job_id}/checkpoints/GET/query/limit`.
                public var limit: Swift.Int?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - after: Identifier for the last checkpoint ID from the previous pagination request.
                ///   - limit: Number of checkpoints to retrieve.
                public init(
                    after: Swift.String? = nil,
                    limit: Swift.Int? = nil
                ) {
                    self.after = after
                    self.limit = limit
                }
            }
            public var query: Operations.ListFineTuningJobCheckpoints.Input.Query
            /// - Remark: Generated from `#/paths/fine_tuning/jobs/{fine_tuning_job_id}/checkpoints/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ListFineTuningJobCheckpoints.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ListFineTuningJobCheckpoints.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.ListFineTuningJobCheckpoints.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            public init(
                path: Operations.ListFineTuningJobCheckpoints.Input.Path,
                query: Operations.ListFineTuningJobCheckpoints.Input.Query = .init(),
                headers: Operations.ListFineTuningJobCheckpoints.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/fine_tuning/jobs/{fine_tuning_job_id}/checkpoints/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/fine_tuning/jobs/{fine_tuning_job_id}/checkpoints/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.ListFineTuningJobCheckpointsResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ListFineTuningJobCheckpointsResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.ListFineTuningJobCheckpoints.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.ListFineTuningJobCheckpoints.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// OK
            ///
            /// - Remark: Generated from `#/paths//fine_tuning/jobs/{fine_tuning_job_id}/checkpoints/get(listFineTuningJobCheckpoints)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.ListFineTuningJobCheckpoints.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.ListFineTuningJobCheckpoints.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Get status updates for a fine-tuning job.
    ///
    ///
    /// - Remark: HTTP `GET /fine_tuning/jobs/{fine_tuning_job_id}/events`.
    /// - Remark: Generated from `#/paths//fine_tuning/jobs/{fine_tuning_job_id}/events/get(listFineTuningEvents)`.
    public enum ListFineTuningEvents {
        public static let id: Swift.String = "listFineTuningEvents"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/fine_tuning/jobs/{fine_tuning_job_id}/events/GET/path`.
            public struct Path: Sendable, Hashable {
                /// The ID of the fine-tuning job to get events for.
                ///
                ///
                /// - Remark: Generated from `#/paths/fine_tuning/jobs/{fine_tuning_job_id}/events/GET/path/fine_tuning_job_id`.
                public var fineTuningJobId: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - fineTuningJobId: The ID of the fine-tuning job to get events for.
                public init(fineTuningJobId: Swift.String) {
                    self.fineTuningJobId = fineTuningJobId
                }
            }
            public var path: Operations.ListFineTuningEvents.Input.Path
            /// - Remark: Generated from `#/paths/fine_tuning/jobs/{fine_tuning_job_id}/events/GET/query`.
            public struct Query: Sendable, Hashable {
                /// Identifier for the last event from the previous pagination request.
                ///
                /// - Remark: Generated from `#/paths/fine_tuning/jobs/{fine_tuning_job_id}/events/GET/query/after`.
                public var after: Swift.String?
                /// Number of events to retrieve.
                ///
                /// - Remark: Generated from `#/paths/fine_tuning/jobs/{fine_tuning_job_id}/events/GET/query/limit`.
                public var limit: Swift.Int?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - after: Identifier for the last event from the previous pagination request.
                ///   - limit: Number of events to retrieve.
                public init(
                    after: Swift.String? = nil,
                    limit: Swift.Int? = nil
                ) {
                    self.after = after
                    self.limit = limit
                }
            }
            public var query: Operations.ListFineTuningEvents.Input.Query
            /// - Remark: Generated from `#/paths/fine_tuning/jobs/{fine_tuning_job_id}/events/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ListFineTuningEvents.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ListFineTuningEvents.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.ListFineTuningEvents.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            public init(
                path: Operations.ListFineTuningEvents.Input.Path,
                query: Operations.ListFineTuningEvents.Input.Query = .init(),
                headers: Operations.ListFineTuningEvents.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/fine_tuning/jobs/{fine_tuning_job_id}/events/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/fine_tuning/jobs/{fine_tuning_job_id}/events/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.ListFineTuningJobEventsResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ListFineTuningJobEventsResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.ListFineTuningEvents.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.ListFineTuningEvents.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// OK
            ///
            /// - Remark: Generated from `#/paths//fine_tuning/jobs/{fine_tuning_job_id}/events/get(listFineTuningEvents)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.ListFineTuningEvents.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.ListFineTuningEvents.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Creates an edited or extended image given an original image and a prompt.
    ///
    /// - Remark: HTTP `POST /images/edits`.
    /// - Remark: Generated from `#/paths//images/edits/post(createImageEdit)`.
    public enum CreateImageEdit {
        public static let id: Swift.String = "createImageEdit"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/images/edits/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.CreateImageEdit.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.CreateImageEdit.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.CreateImageEdit.Input.Headers
            /// - Remark: Generated from `#/paths/images/edits/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/images/edits/POST/requestBody/content/multipart\/form-data`.
                case multipartForm(OpenAPIRuntime.MultipartBody<Components.Schemas.CreateImageEditRequest>)
            }
            public var body: Operations.CreateImageEdit.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.CreateImageEdit.Input.Headers = .init(),
                body: Operations.CreateImageEdit.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/images/edits/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/images/edits/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.ImagesResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ImagesResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.CreateImageEdit.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.CreateImageEdit.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// OK
            ///
            /// - Remark: Generated from `#/paths//images/edits/post(createImageEdit)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.CreateImageEdit.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.CreateImageEdit.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Creates an image given a prompt.
    ///
    /// - Remark: HTTP `POST /images/generations`.
    /// - Remark: Generated from `#/paths//images/generations/post(createImage)`.
    public enum CreateImage {
        public static let id: Swift.String = "createImage"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/images/generations/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.CreateImage.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.CreateImage.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.CreateImage.Input.Headers
            /// - Remark: Generated from `#/paths/images/generations/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/images/generations/POST/requestBody/content/application\/json`.
                case json(Components.Schemas.CreateImageRequest)
            }
            public var body: Operations.CreateImage.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.CreateImage.Input.Headers = .init(),
                body: Operations.CreateImage.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/images/generations/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/images/generations/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.ImagesResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ImagesResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.CreateImage.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.CreateImage.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// OK
            ///
            /// - Remark: Generated from `#/paths//images/generations/post(createImage)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.CreateImage.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.CreateImage.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Creates a variation of a given image.
    ///
    /// - Remark: HTTP `POST /images/variations`.
    /// - Remark: Generated from `#/paths//images/variations/post(createImageVariation)`.
    public enum CreateImageVariation {
        public static let id: Swift.String = "createImageVariation"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/images/variations/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.CreateImageVariation.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.CreateImageVariation.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.CreateImageVariation.Input.Headers
            /// - Remark: Generated from `#/paths/images/variations/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/images/variations/POST/requestBody/content/multipart\/form-data`.
                case multipartForm(OpenAPIRuntime.MultipartBody<Components.Schemas.CreateImageVariationRequest>)
            }
            public var body: Operations.CreateImageVariation.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.CreateImageVariation.Input.Headers = .init(),
                body: Operations.CreateImageVariation.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/images/variations/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/images/variations/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.ImagesResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ImagesResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.CreateImageVariation.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.CreateImageVariation.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// OK
            ///
            /// - Remark: Generated from `#/paths//images/variations/post(createImageVariation)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.CreateImageVariation.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.CreateImageVariation.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Lists the currently available models, and provides basic information about each one such as the owner and availability.
    ///
    /// - Remark: HTTP `GET /models`.
    /// - Remark: Generated from `#/paths//models/get(listModels)`.
    public enum ListModels {
        public static let id: Swift.String = "listModels"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/models/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ListModels.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ListModels.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.ListModels.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            public init(headers: Operations.ListModels.Input.Headers = .init()) {
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/models/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/models/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.ListModelsResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ListModelsResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.ListModels.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.ListModels.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// OK
            ///
            /// - Remark: Generated from `#/paths//models/get(listModels)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.ListModels.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.ListModels.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Retrieves a model instance, providing basic information about the model such as the owner and permissioning.
    ///
    /// - Remark: HTTP `GET /models/{model}`.
    /// - Remark: Generated from `#/paths//models/{model}/get(retrieveModel)`.
    public enum RetrieveModel {
        public static let id: Swift.String = "retrieveModel"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/models/{model}/GET/path`.
            public struct Path: Sendable, Hashable {
                /// The ID of the model to use for this request
                ///
                /// - Remark: Generated from `#/paths/models/{model}/GET/path/model`.
                public var model: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - model: The ID of the model to use for this request
                public init(model: Swift.String) {
                    self.model = model
                }
            }
            public var path: Operations.RetrieveModel.Input.Path
            /// - Remark: Generated from `#/paths/models/{model}/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.RetrieveModel.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.RetrieveModel.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.RetrieveModel.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            public init(
                path: Operations.RetrieveModel.Input.Path,
                headers: Operations.RetrieveModel.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/models/{model}/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/models/{model}/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.Model)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.Model {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.RetrieveModel.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.RetrieveModel.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// OK
            ///
            /// - Remark: Generated from `#/paths//models/{model}/get(retrieveModel)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.RetrieveModel.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.RetrieveModel.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Delete a fine-tuned model. You must have the Owner role in your organization to delete a model.
    ///
    /// - Remark: HTTP `DELETE /models/{model}`.
    /// - Remark: Generated from `#/paths//models/{model}/delete(deleteModel)`.
    public enum DeleteModel {
        public static let id: Swift.String = "deleteModel"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/models/{model}/DELETE/path`.
            public struct Path: Sendable, Hashable {
                /// The model to delete
                ///
                /// - Remark: Generated from `#/paths/models/{model}/DELETE/path/model`.
                public var model: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - model: The model to delete
                public init(model: Swift.String) {
                    self.model = model
                }
            }
            public var path: Operations.DeleteModel.Input.Path
            /// - Remark: Generated from `#/paths/models/{model}/DELETE/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.DeleteModel.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.DeleteModel.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.DeleteModel.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            public init(
                path: Operations.DeleteModel.Input.Path,
                headers: Operations.DeleteModel.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/models/{model}/DELETE/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/models/{model}/DELETE/responses/200/content/application\/json`.
                    case json(Components.Schemas.DeleteModelResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.DeleteModelResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.DeleteModel.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.DeleteModel.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// OK
            ///
            /// - Remark: Generated from `#/paths//models/{model}/delete(deleteModel)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.DeleteModel.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.DeleteModel.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Classifies if text and/or image inputs are potentially harmful. Learn
    /// more in the [moderation guide](/docs/guides/moderation).
    ///
    ///
    /// - Remark: HTTP `POST /moderations`.
    /// - Remark: Generated from `#/paths//moderations/post(createModeration)`.
    public enum CreateModeration {
        public static let id: Swift.String = "createModeration"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/moderations/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.CreateModeration.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.CreateModeration.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.CreateModeration.Input.Headers
            /// - Remark: Generated from `#/paths/moderations/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/moderations/POST/requestBody/content/application\/json`.
                case json(Components.Schemas.CreateModerationRequest)
            }
            public var body: Operations.CreateModeration.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.CreateModeration.Input.Headers = .init(),
                body: Operations.CreateModeration.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/moderations/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/moderations/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.CreateModerationResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.CreateModerationResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.CreateModeration.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.CreateModeration.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// OK
            ///
            /// - Remark: Generated from `#/paths//moderations/post(createModeration)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.CreateModeration.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.CreateModeration.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// List organization API keys
    ///
    /// Retrieve a paginated list of organization admin API keys.
    ///
    /// - Remark: HTTP `GET /organization/admin_api_keys`.
    /// - Remark: Generated from `#/paths//organization/admin_api_keys/get(admin-api-keys-list)`.
    public enum AdminApiKeysList {
        public static let id: Swift.String = "admin-api-keys-list"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/organization/admin_api_keys/GET/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/organization/admin_api_keys/GET/query/after`.
                public var after: Swift.String?
                /// Order results by creation time, ascending or descending.
                ///
                /// - Remark: Generated from `#/paths/organization/admin_api_keys/GET/query/order`.
                @frozen public enum OrderPayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case asc = "asc"
                    case desc = "desc"
                }
                /// - Remark: Generated from `#/paths/organization/admin_api_keys/GET/query/order`.
                public var order: Operations.AdminApiKeysList.Input.Query.OrderPayload?
                /// - Remark: Generated from `#/paths/organization/admin_api_keys/GET/query/limit`.
                public var limit: Swift.Int?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - after:
                ///   - order:
                ///   - limit:
                public init(
                    after: Swift.String? = nil,
                    order: Operations.AdminApiKeysList.Input.Query.OrderPayload? = nil,
                    limit: Swift.Int? = nil
                ) {
                    self.after = after
                    self.order = order
                    self.limit = limit
                }
            }
            public var query: Operations.AdminApiKeysList.Input.Query
            /// - Remark: Generated from `#/paths/organization/admin_api_keys/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.AdminApiKeysList.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.AdminApiKeysList.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.AdminApiKeysList.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            public init(
                query: Operations.AdminApiKeysList.Input.Query = .init(),
                headers: Operations.AdminApiKeysList.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/organization/admin_api_keys/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/organization/admin_api_keys/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.ApiKeyList)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ApiKeyList {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.AdminApiKeysList.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.AdminApiKeysList.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// A list of organization API keys.
            ///
            /// - Remark: Generated from `#/paths//organization/admin_api_keys/get(admin-api-keys-list)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.AdminApiKeysList.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.AdminApiKeysList.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Create an organization admin API key
    ///
    /// Create a new admin-level API key for the organization.
    ///
    /// - Remark: HTTP `POST /organization/admin_api_keys`.
    /// - Remark: Generated from `#/paths//organization/admin_api_keys/post(admin-api-keys-create)`.
    public enum AdminApiKeysCreate {
        public static let id: Swift.String = "admin-api-keys-create"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/organization/admin_api_keys/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.AdminApiKeysCreate.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.AdminApiKeysCreate.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.AdminApiKeysCreate.Input.Headers
            /// - Remark: Generated from `#/paths/organization/admin_api_keys/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/organization/admin_api_keys/POST/requestBody/json`.
                public struct JsonPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/paths/organization/admin_api_keys/POST/requestBody/json/name`.
                    public var name: Swift.String
                    /// Creates a new `JsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - name:
                    public init(name: Swift.String) {
                        self.name = name
                    }
                    public enum CodingKeys: String, CodingKey {
                        case name
                    }
                }
                /// - Remark: Generated from `#/paths/organization/admin_api_keys/POST/requestBody/content/application\/json`.
                case json(Operations.AdminApiKeysCreate.Input.Body.JsonPayload)
            }
            public var body: Operations.AdminApiKeysCreate.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.AdminApiKeysCreate.Input.Headers = .init(),
                body: Operations.AdminApiKeysCreate.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/organization/admin_api_keys/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/organization/admin_api_keys/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.AdminApiKey)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.AdminApiKey {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.AdminApiKeysCreate.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.AdminApiKeysCreate.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// The newly created admin API key.
            ///
            /// - Remark: Generated from `#/paths//organization/admin_api_keys/post(admin-api-keys-create)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.AdminApiKeysCreate.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.AdminApiKeysCreate.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Retrieve a single organization API key
    ///
    /// Get details for a specific organization API key by its ID.
    ///
    /// - Remark: HTTP `GET /organization/admin_api_keys/{key_id}`.
    /// - Remark: Generated from `#/paths//organization/admin_api_keys/{key_id}/get(admin-api-keys-get)`.
    public enum AdminApiKeysGet {
        public static let id: Swift.String = "admin-api-keys-get"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/organization/admin_api_keys/{key_id}/GET/path`.
            public struct Path: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/organization/admin_api_keys/{key_id}/GET/path/key_id`.
                public var keyId: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - keyId:
                public init(keyId: Swift.String) {
                    self.keyId = keyId
                }
            }
            public var path: Operations.AdminApiKeysGet.Input.Path
            /// - Remark: Generated from `#/paths/organization/admin_api_keys/{key_id}/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.AdminApiKeysGet.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.AdminApiKeysGet.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.AdminApiKeysGet.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            public init(
                path: Operations.AdminApiKeysGet.Input.Path,
                headers: Operations.AdminApiKeysGet.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/organization/admin_api_keys/{key_id}/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/organization/admin_api_keys/{key_id}/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.AdminApiKey)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.AdminApiKey {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.AdminApiKeysGet.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.AdminApiKeysGet.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Details of the requested API key.
            ///
            /// - Remark: Generated from `#/paths//organization/admin_api_keys/{key_id}/get(admin-api-keys-get)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.AdminApiKeysGet.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.AdminApiKeysGet.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Delete an organization admin API key
    ///
    /// Delete the specified admin API key.
    ///
    /// - Remark: HTTP `DELETE /organization/admin_api_keys/{key_id}`.
    /// - Remark: Generated from `#/paths//organization/admin_api_keys/{key_id}/delete(admin-api-keys-delete)`.
    public enum AdminApiKeysDelete {
        public static let id: Swift.String = "admin-api-keys-delete"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/organization/admin_api_keys/{key_id}/DELETE/path`.
            public struct Path: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/organization/admin_api_keys/{key_id}/DELETE/path/key_id`.
                public var keyId: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - keyId:
                public init(keyId: Swift.String) {
                    self.keyId = keyId
                }
            }
            public var path: Operations.AdminApiKeysDelete.Input.Path
            /// - Remark: Generated from `#/paths/organization/admin_api_keys/{key_id}/DELETE/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.AdminApiKeysDelete.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.AdminApiKeysDelete.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.AdminApiKeysDelete.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            public init(
                path: Operations.AdminApiKeysDelete.Input.Path,
                headers: Operations.AdminApiKeysDelete.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/organization/admin_api_keys/{key_id}/DELETE/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/organization/admin_api_keys/{key_id}/DELETE/responses/200/content/json`.
                    public struct JsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/organization/admin_api_keys/{key_id}/DELETE/responses/200/content/json/id`.
                        public var id: Swift.String?
                        /// - Remark: Generated from `#/paths/organization/admin_api_keys/{key_id}/DELETE/responses/200/content/json/object`.
                        public var object: Swift.String?
                        /// - Remark: Generated from `#/paths/organization/admin_api_keys/{key_id}/DELETE/responses/200/content/json/deleted`.
                        public var deleted: Swift.Bool?
                        /// Creates a new `JsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - id:
                        ///   - object:
                        ///   - deleted:
                        public init(
                            id: Swift.String? = nil,
                            object: Swift.String? = nil,
                            deleted: Swift.Bool? = nil
                        ) {
                            self.id = id
                            self.object = object
                            self.deleted = deleted
                        }
                        public enum CodingKeys: String, CodingKey {
                            case id
                            case object
                            case deleted
                        }
                    }
                    /// - Remark: Generated from `#/paths/organization/admin_api_keys/{key_id}/DELETE/responses/200/content/application\/json`.
                    case json(Operations.AdminApiKeysDelete.Output.Ok.Body.JsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Operations.AdminApiKeysDelete.Output.Ok.Body.JsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.AdminApiKeysDelete.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.AdminApiKeysDelete.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Confirmation that the API key was deleted.
            ///
            /// - Remark: Generated from `#/paths//organization/admin_api_keys/{key_id}/delete(admin-api-keys-delete)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.AdminApiKeysDelete.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.AdminApiKeysDelete.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// List user actions and configuration changes within this organization.
    ///
    /// - Remark: HTTP `GET /organization/audit_logs`.
    /// - Remark: Generated from `#/paths//organization/audit_logs/get(list-audit-logs)`.
    public enum ListAuditLogs {
        public static let id: Swift.String = "list-audit-logs"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/organization/audit_logs/GET/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/organization/audit_logs/GET/query/effective_at`.
                public struct EffectiveAtPayload: Codable, Hashable, Sendable {
                    /// Return only events whose `effective_at` (Unix seconds) is greater than this value.
                    ///
                    /// - Remark: Generated from `#/paths/organization/audit_logs/GET/query/effective_at/gt`.
                    public var gt: Swift.Int?
                    /// Return only events whose `effective_at` (Unix seconds) is greater than or equal to this value.
                    ///
                    /// - Remark: Generated from `#/paths/organization/audit_logs/GET/query/effective_at/gte`.
                    public var gte: Swift.Int?
                    /// Return only events whose `effective_at` (Unix seconds) is less than this value.
                    ///
                    /// - Remark: Generated from `#/paths/organization/audit_logs/GET/query/effective_at/lt`.
                    public var lt: Swift.Int?
                    /// Return only events whose `effective_at` (Unix seconds) is less than or equal to this value.
                    ///
                    /// - Remark: Generated from `#/paths/organization/audit_logs/GET/query/effective_at/lte`.
                    public var lte: Swift.Int?
                    /// Creates a new `EffectiveAtPayload`.
                    ///
                    /// - Parameters:
                    ///   - gt: Return only events whose `effective_at` (Unix seconds) is greater than this value.
                    ///   - gte: Return only events whose `effective_at` (Unix seconds) is greater than or equal to this value.
                    ///   - lt: Return only events whose `effective_at` (Unix seconds) is less than this value.
                    ///   - lte: Return only events whose `effective_at` (Unix seconds) is less than or equal to this value.
                    public init(
                        gt: Swift.Int? = nil,
                        gte: Swift.Int? = nil,
                        lt: Swift.Int? = nil,
                        lte: Swift.Int? = nil
                    ) {
                        self.gt = gt
                        self.gte = gte
                        self.lt = lt
                        self.lte = lte
                    }
                    public enum CodingKeys: String, CodingKey {
                        case gt
                        case gte
                        case lt
                        case lte
                    }
                }
                /// Return only events whose `effective_at` (Unix seconds) is in this range.
                ///
                /// - Remark: Generated from `#/paths/organization/audit_logs/GET/query/effective_at`.
                public var effectiveAt: Operations.ListAuditLogs.Input.Query.EffectiveAtPayload?
                /// Return only events for these projects.
                ///
                /// - Remark: Generated from `#/paths/organization/audit_logs/GET/query/project_ids[]`.
                public var projectIds_lbrack__rbrack_: [Swift.String]?
                /// Return only events with a `type` in one of these values. For example, `project.created`. For all options, see the documentation for the [audit log object](/docs/api-reference/audit-logs/object).
                ///
                /// - Remark: Generated from `#/paths/organization/audit_logs/GET/query/event_types[]`.
                public var eventTypes_lbrack__rbrack_: [Components.Schemas.AuditLogEventType]?
                /// Return only events performed by these actors. Can be a user ID, a service account ID, or an api key tracking ID.
                ///
                /// - Remark: Generated from `#/paths/organization/audit_logs/GET/query/actor_ids[]`.
                public var actorIds_lbrack__rbrack_: [Swift.String]?
                /// Return only events performed by users with these emails.
                ///
                /// - Remark: Generated from `#/paths/organization/audit_logs/GET/query/actor_emails[]`.
                public var actorEmails_lbrack__rbrack_: [Swift.String]?
                /// Return only events performed on these targets. For example, a project ID updated.
                ///
                /// - Remark: Generated from `#/paths/organization/audit_logs/GET/query/resource_ids[]`.
                public var resourceIds_lbrack__rbrack_: [Swift.String]?
                /// A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.
                ///
                ///
                /// - Remark: Generated from `#/paths/organization/audit_logs/GET/query/limit`.
                public var limit: Swift.Int?
                /// A cursor for use in pagination. `after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after=obj_foo in order to fetch the next page of the list.
                ///
                ///
                /// - Remark: Generated from `#/paths/organization/audit_logs/GET/query/after`.
                public var after: Swift.String?
                /// A cursor for use in pagination. `before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with obj_foo, your subsequent call can include before=obj_foo in order to fetch the previous page of the list.
                ///
                ///
                /// - Remark: Generated from `#/paths/organization/audit_logs/GET/query/before`.
                public var before: Swift.String?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - effectiveAt: Return only events whose `effective_at` (Unix seconds) is in this range.
                ///   - projectIds_lbrack__rbrack_: Return only events for these projects.
                ///   - eventTypes_lbrack__rbrack_: Return only events with a `type` in one of these values. For example, `project.created`. For all options, see the documentation for the [audit log object](/docs/api-reference/audit-logs/object).
                ///   - actorIds_lbrack__rbrack_: Return only events performed by these actors. Can be a user ID, a service account ID, or an api key tracking ID.
                ///   - actorEmails_lbrack__rbrack_: Return only events performed by users with these emails.
                ///   - resourceIds_lbrack__rbrack_: Return only events performed on these targets. For example, a project ID updated.
                ///   - limit: A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.
                ///   - after: A cursor for use in pagination. `after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after=obj_foo in order to fetch the next page of the list.
                ///   - before: A cursor for use in pagination. `before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with obj_foo, your subsequent call can include before=obj_foo in order to fetch the previous page of the list.
                public init(
                    effectiveAt: Operations.ListAuditLogs.Input.Query.EffectiveAtPayload? = nil,
                    projectIds_lbrack__rbrack_: [Swift.String]? = nil,
                    eventTypes_lbrack__rbrack_: [Components.Schemas.AuditLogEventType]? = nil,
                    actorIds_lbrack__rbrack_: [Swift.String]? = nil,
                    actorEmails_lbrack__rbrack_: [Swift.String]? = nil,
                    resourceIds_lbrack__rbrack_: [Swift.String]? = nil,
                    limit: Swift.Int? = nil,
                    after: Swift.String? = nil,
                    before: Swift.String? = nil
                ) {
                    self.effectiveAt = effectiveAt
                    self.projectIds_lbrack__rbrack_ = projectIds_lbrack__rbrack_
                    self.eventTypes_lbrack__rbrack_ = eventTypes_lbrack__rbrack_
                    self.actorIds_lbrack__rbrack_ = actorIds_lbrack__rbrack_
                    self.actorEmails_lbrack__rbrack_ = actorEmails_lbrack__rbrack_
                    self.resourceIds_lbrack__rbrack_ = resourceIds_lbrack__rbrack_
                    self.limit = limit
                    self.after = after
                    self.before = before
                }
            }
            public var query: Operations.ListAuditLogs.Input.Query
            /// - Remark: Generated from `#/paths/organization/audit_logs/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ListAuditLogs.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ListAuditLogs.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.ListAuditLogs.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            public init(
                query: Operations.ListAuditLogs.Input.Query = .init(),
                headers: Operations.ListAuditLogs.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/organization/audit_logs/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/organization/audit_logs/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.ListAuditLogsResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ListAuditLogsResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.ListAuditLogs.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.ListAuditLogs.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Audit logs listed successfully.
            ///
            /// - Remark: Generated from `#/paths//organization/audit_logs/get(list-audit-logs)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.ListAuditLogs.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.ListAuditLogs.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Get costs details for the organization.
    ///
    /// - Remark: HTTP `GET /organization/costs`.
    /// - Remark: Generated from `#/paths//organization/costs/get(usage-costs)`.
    public enum UsageCosts {
        public static let id: Swift.String = "usage-costs"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/organization/costs/GET/query`.
            public struct Query: Sendable, Hashable {
                /// Start time (Unix seconds) of the query time range, inclusive.
                ///
                /// - Remark: Generated from `#/paths/organization/costs/GET/query/start_time`.
                public var startTime: Swift.Int
                /// End time (Unix seconds) of the query time range, exclusive.
                ///
                /// - Remark: Generated from `#/paths/organization/costs/GET/query/end_time`.
                public var endTime: Swift.Int?
                /// - Remark: Generated from `#/paths/organization/costs/GET/query/bucket_width`.
                @frozen public enum BucketWidthPayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case _1d = "1d"
                }
                /// Width of each time bucket in response. Currently only `1d` is supported, default to `1d`.
                ///
                /// - Remark: Generated from `#/paths/organization/costs/GET/query/bucket_width`.
                public var bucketWidth: Operations.UsageCosts.Input.Query.BucketWidthPayload?
                /// Return only costs for these projects.
                ///
                /// - Remark: Generated from `#/paths/organization/costs/GET/query/project_ids`.
                public var projectIds: [Swift.String]?
                /// - Remark: Generated from `#/paths/organization/costs/GET/query/GroupByPayload`.
                @frozen public enum GroupByPayloadPayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case projectId = "project_id"
                    case lineItem = "line_item"
                }
                /// - Remark: Generated from `#/paths/organization/costs/GET/query/group_by`.
                public typealias GroupByPayload = [Operations.UsageCosts.Input.Query.GroupByPayloadPayload]
                /// Group the costs by the specified fields. Support fields include `project_id`, `line_item` and any combination of them.
                ///
                /// - Remark: Generated from `#/paths/organization/costs/GET/query/group_by`.
                public var groupBy: Operations.UsageCosts.Input.Query.GroupByPayload?
                /// A limit on the number of buckets to be returned. Limit can range between 1 and 180, and the default is 7.
                ///
                ///
                /// - Remark: Generated from `#/paths/organization/costs/GET/query/limit`.
                public var limit: Swift.Int?
                /// A cursor for use in pagination. Corresponding to the `next_page` field from the previous response.
                ///
                /// - Remark: Generated from `#/paths/organization/costs/GET/query/page`.
                public var page: Swift.String?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - startTime: Start time (Unix seconds) of the query time range, inclusive.
                ///   - endTime: End time (Unix seconds) of the query time range, exclusive.
                ///   - bucketWidth: Width of each time bucket in response. Currently only `1d` is supported, default to `1d`.
                ///   - projectIds: Return only costs for these projects.
                ///   - groupBy: Group the costs by the specified fields. Support fields include `project_id`, `line_item` and any combination of them.
                ///   - limit: A limit on the number of buckets to be returned. Limit can range between 1 and 180, and the default is 7.
                ///   - page: A cursor for use in pagination. Corresponding to the `next_page` field from the previous response.
                public init(
                    startTime: Swift.Int,
                    endTime: Swift.Int? = nil,
                    bucketWidth: Operations.UsageCosts.Input.Query.BucketWidthPayload? = nil,
                    projectIds: [Swift.String]? = nil,
                    groupBy: Operations.UsageCosts.Input.Query.GroupByPayload? = nil,
                    limit: Swift.Int? = nil,
                    page: Swift.String? = nil
                ) {
                    self.startTime = startTime
                    self.endTime = endTime
                    self.bucketWidth = bucketWidth
                    self.projectIds = projectIds
                    self.groupBy = groupBy
                    self.limit = limit
                    self.page = page
                }
            }
            public var query: Operations.UsageCosts.Input.Query
            /// - Remark: Generated from `#/paths/organization/costs/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.UsageCosts.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.UsageCosts.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.UsageCosts.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            public init(
                query: Operations.UsageCosts.Input.Query,
                headers: Operations.UsageCosts.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/organization/costs/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/organization/costs/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.UsageResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.UsageResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.UsageCosts.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.UsageCosts.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Costs data retrieved successfully.
            ///
            /// - Remark: Generated from `#/paths//organization/costs/get(usage-costs)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.UsageCosts.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.UsageCosts.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Returns a list of invites in the organization.
    ///
    /// - Remark: HTTP `GET /organization/invites`.
    /// - Remark: Generated from `#/paths//organization/invites/get(list-invites)`.
    public enum ListInvites {
        public static let id: Swift.String = "list-invites"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/organization/invites/GET/query`.
            public struct Query: Sendable, Hashable {
                /// A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.
                ///
                ///
                /// - Remark: Generated from `#/paths/organization/invites/GET/query/limit`.
                public var limit: Swift.Int?
                /// A cursor for use in pagination. `after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after=obj_foo in order to fetch the next page of the list.
                ///
                ///
                /// - Remark: Generated from `#/paths/organization/invites/GET/query/after`.
                public var after: Swift.String?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - limit: A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.
                ///   - after: A cursor for use in pagination. `after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after=obj_foo in order to fetch the next page of the list.
                public init(
                    limit: Swift.Int? = nil,
                    after: Swift.String? = nil
                ) {
                    self.limit = limit
                    self.after = after
                }
            }
            public var query: Operations.ListInvites.Input.Query
            /// - Remark: Generated from `#/paths/organization/invites/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ListInvites.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ListInvites.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.ListInvites.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            public init(
                query: Operations.ListInvites.Input.Query = .init(),
                headers: Operations.ListInvites.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/organization/invites/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/organization/invites/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.InviteListResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.InviteListResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.ListInvites.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.ListInvites.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Invites listed successfully.
            ///
            /// - Remark: Generated from `#/paths//organization/invites/get(list-invites)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.ListInvites.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.ListInvites.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Create an invite for a user to the organization. The invite must be accepted by the user before they have access to the organization.
    ///
    /// - Remark: HTTP `POST /organization/invites`.
    /// - Remark: Generated from `#/paths//organization/invites/post(inviteUser)`.
    public enum InviteUser {
        public static let id: Swift.String = "inviteUser"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/organization/invites/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.InviteUser.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.InviteUser.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.InviteUser.Input.Headers
            /// - Remark: Generated from `#/paths/organization/invites/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/organization/invites/POST/requestBody/content/application\/json`.
                case json(Components.Schemas.InviteRequest)
            }
            public var body: Operations.InviteUser.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.InviteUser.Input.Headers = .init(),
                body: Operations.InviteUser.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/organization/invites/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/organization/invites/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.Invite)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.Invite {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.InviteUser.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.InviteUser.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// User invited successfully.
            ///
            /// - Remark: Generated from `#/paths//organization/invites/post(inviteUser)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.InviteUser.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.InviteUser.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Retrieves an invite.
    ///
    /// - Remark: HTTP `GET /organization/invites/{invite_id}`.
    /// - Remark: Generated from `#/paths//organization/invites/{invite_id}/get(retrieve-invite)`.
    public enum RetrieveInvite {
        public static let id: Swift.String = "retrieve-invite"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/organization/invites/{invite_id}/GET/path`.
            public struct Path: Sendable, Hashable {
                /// The ID of the invite to retrieve.
                ///
                /// - Remark: Generated from `#/paths/organization/invites/{invite_id}/GET/path/invite_id`.
                public var inviteId: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - inviteId: The ID of the invite to retrieve.
                public init(inviteId: Swift.String) {
                    self.inviteId = inviteId
                }
            }
            public var path: Operations.RetrieveInvite.Input.Path
            /// - Remark: Generated from `#/paths/organization/invites/{invite_id}/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.RetrieveInvite.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.RetrieveInvite.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.RetrieveInvite.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            public init(
                path: Operations.RetrieveInvite.Input.Path,
                headers: Operations.RetrieveInvite.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/organization/invites/{invite_id}/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/organization/invites/{invite_id}/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.Invite)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.Invite {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.RetrieveInvite.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.RetrieveInvite.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Invite retrieved successfully.
            ///
            /// - Remark: Generated from `#/paths//organization/invites/{invite_id}/get(retrieve-invite)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.RetrieveInvite.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.RetrieveInvite.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Delete an invite. If the invite has already been accepted, it cannot be deleted.
    ///
    /// - Remark: HTTP `DELETE /organization/invites/{invite_id}`.
    /// - Remark: Generated from `#/paths//organization/invites/{invite_id}/delete(delete-invite)`.
    public enum DeleteInvite {
        public static let id: Swift.String = "delete-invite"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/organization/invites/{invite_id}/DELETE/path`.
            public struct Path: Sendable, Hashable {
                /// The ID of the invite to delete.
                ///
                /// - Remark: Generated from `#/paths/organization/invites/{invite_id}/DELETE/path/invite_id`.
                public var inviteId: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - inviteId: The ID of the invite to delete.
                public init(inviteId: Swift.String) {
                    self.inviteId = inviteId
                }
            }
            public var path: Operations.DeleteInvite.Input.Path
            /// - Remark: Generated from `#/paths/organization/invites/{invite_id}/DELETE/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.DeleteInvite.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.DeleteInvite.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.DeleteInvite.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            public init(
                path: Operations.DeleteInvite.Input.Path,
                headers: Operations.DeleteInvite.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/organization/invites/{invite_id}/DELETE/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/organization/invites/{invite_id}/DELETE/responses/200/content/application\/json`.
                    case json(Components.Schemas.InviteDeleteResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.InviteDeleteResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.DeleteInvite.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.DeleteInvite.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Invite deleted successfully.
            ///
            /// - Remark: Generated from `#/paths//organization/invites/{invite_id}/delete(delete-invite)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.DeleteInvite.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.DeleteInvite.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Returns a list of projects.
    ///
    /// - Remark: HTTP `GET /organization/projects`.
    /// - Remark: Generated from `#/paths//organization/projects/get(list-projects)`.
    public enum ListProjects {
        public static let id: Swift.String = "list-projects"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/organization/projects/GET/query`.
            public struct Query: Sendable, Hashable {
                /// A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.
                ///
                ///
                /// - Remark: Generated from `#/paths/organization/projects/GET/query/limit`.
                public var limit: Swift.Int?
                /// A cursor for use in pagination. `after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after=obj_foo in order to fetch the next page of the list.
                ///
                ///
                /// - Remark: Generated from `#/paths/organization/projects/GET/query/after`.
                public var after: Swift.String?
                /// If `true` returns all projects including those that have been `archived`. Archived projects are not included by default.
                ///
                /// - Remark: Generated from `#/paths/organization/projects/GET/query/include_archived`.
                public var includeArchived: Swift.Bool?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - limit: A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.
                ///   - after: A cursor for use in pagination. `after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after=obj_foo in order to fetch the next page of the list.
                ///   - includeArchived: If `true` returns all projects including those that have been `archived`. Archived projects are not included by default.
                public init(
                    limit: Swift.Int? = nil,
                    after: Swift.String? = nil,
                    includeArchived: Swift.Bool? = nil
                ) {
                    self.limit = limit
                    self.after = after
                    self.includeArchived = includeArchived
                }
            }
            public var query: Operations.ListProjects.Input.Query
            /// - Remark: Generated from `#/paths/organization/projects/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ListProjects.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ListProjects.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.ListProjects.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            public init(
                query: Operations.ListProjects.Input.Query = .init(),
                headers: Operations.ListProjects.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/organization/projects/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/organization/projects/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.ProjectListResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ProjectListResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.ListProjects.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.ListProjects.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Projects listed successfully.
            ///
            /// - Remark: Generated from `#/paths//organization/projects/get(list-projects)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.ListProjects.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.ListProjects.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Create a new project in the organization. Projects can be created and archived, but cannot be deleted.
    ///
    /// - Remark: HTTP `POST /organization/projects`.
    /// - Remark: Generated from `#/paths//organization/projects/post(create-project)`.
    public enum CreateProject {
        public static let id: Swift.String = "create-project"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/organization/projects/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.CreateProject.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.CreateProject.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.CreateProject.Input.Headers
            /// - Remark: Generated from `#/paths/organization/projects/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/organization/projects/POST/requestBody/content/application\/json`.
                case json(Components.Schemas.ProjectCreateRequest)
            }
            public var body: Operations.CreateProject.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.CreateProject.Input.Headers = .init(),
                body: Operations.CreateProject.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/organization/projects/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/organization/projects/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.Project)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.Project {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.CreateProject.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.CreateProject.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Project created successfully.
            ///
            /// - Remark: Generated from `#/paths//organization/projects/post(create-project)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.CreateProject.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.CreateProject.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Retrieves a project.
    ///
    /// - Remark: HTTP `GET /organization/projects/{project_id}`.
    /// - Remark: Generated from `#/paths//organization/projects/{project_id}/get(retrieve-project)`.
    public enum RetrieveProject {
        public static let id: Swift.String = "retrieve-project"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/organization/projects/{project_id}/GET/path`.
            public struct Path: Sendable, Hashable {
                /// The ID of the project.
                ///
                /// - Remark: Generated from `#/paths/organization/projects/{project_id}/GET/path/project_id`.
                public var projectId: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - projectId: The ID of the project.
                public init(projectId: Swift.String) {
                    self.projectId = projectId
                }
            }
            public var path: Operations.RetrieveProject.Input.Path
            /// - Remark: Generated from `#/paths/organization/projects/{project_id}/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.RetrieveProject.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.RetrieveProject.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.RetrieveProject.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            public init(
                path: Operations.RetrieveProject.Input.Path,
                headers: Operations.RetrieveProject.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/organization/projects/{project_id}/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/organization/projects/{project_id}/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.Project)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.Project {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.RetrieveProject.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.RetrieveProject.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Project retrieved successfully.
            ///
            /// - Remark: Generated from `#/paths//organization/projects/{project_id}/get(retrieve-project)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.RetrieveProject.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.RetrieveProject.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Modifies a project in the organization.
    ///
    /// - Remark: HTTP `POST /organization/projects/{project_id}`.
    /// - Remark: Generated from `#/paths//organization/projects/{project_id}/post(modify-project)`.
    public enum ModifyProject {
        public static let id: Swift.String = "modify-project"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/organization/projects/{project_id}/POST/path`.
            public struct Path: Sendable, Hashable {
                /// The ID of the project.
                ///
                /// - Remark: Generated from `#/paths/organization/projects/{project_id}/POST/path/project_id`.
                public var projectId: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - projectId: The ID of the project.
                public init(projectId: Swift.String) {
                    self.projectId = projectId
                }
            }
            public var path: Operations.ModifyProject.Input.Path
            /// - Remark: Generated from `#/paths/organization/projects/{project_id}/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ModifyProject.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ModifyProject.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.ModifyProject.Input.Headers
            /// - Remark: Generated from `#/paths/organization/projects/{project_id}/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/organization/projects/{project_id}/POST/requestBody/content/application\/json`.
                case json(Components.Schemas.ProjectUpdateRequest)
            }
            public var body: Operations.ModifyProject.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            ///   - body:
            public init(
                path: Operations.ModifyProject.Input.Path,
                headers: Operations.ModifyProject.Input.Headers = .init(),
                body: Operations.ModifyProject.Input.Body
            ) {
                self.path = path
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/organization/projects/{project_id}/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/organization/projects/{project_id}/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.Project)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.Project {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.ModifyProject.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.ModifyProject.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Project updated successfully.
            ///
            /// - Remark: Generated from `#/paths//organization/projects/{project_id}/post(modify-project)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.ModifyProject.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.ModifyProject.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            public struct BadRequest: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/organization/projects/{project_id}/POST/responses/400/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/organization/projects/{project_id}/POST/responses/400/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.ModifyProject.Output.BadRequest.Body
                /// Creates a new `BadRequest`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.ModifyProject.Output.BadRequest.Body) {
                    self.body = body
                }
            }
            /// Error response when updating the default project.
            ///
            /// - Remark: Generated from `#/paths//organization/projects/{project_id}/post(modify-project)/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Operations.ModifyProject.Output.BadRequest)
            /// The associated value of the enum case if `self` is `.badRequest`.
            ///
            /// - Throws: An error if `self` is not `.badRequest`.
            /// - SeeAlso: `.badRequest`.
            public var badRequest: Operations.ModifyProject.Output.BadRequest {
                get throws {
                    switch self {
                    case let .badRequest(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "badRequest",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Returns a list of API keys in the project.
    ///
    /// - Remark: HTTP `GET /organization/projects/{project_id}/api_keys`.
    /// - Remark: Generated from `#/paths//organization/projects/{project_id}/api_keys/get(list-project-api-keys)`.
    public enum ListProjectApiKeys {
        public static let id: Swift.String = "list-project-api-keys"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/organization/projects/{project_id}/api_keys/GET/path`.
            public struct Path: Sendable, Hashable {
                /// The ID of the project.
                ///
                /// - Remark: Generated from `#/paths/organization/projects/{project_id}/api_keys/GET/path/project_id`.
                public var projectId: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - projectId: The ID of the project.
                public init(projectId: Swift.String) {
                    self.projectId = projectId
                }
            }
            public var path: Operations.ListProjectApiKeys.Input.Path
            /// - Remark: Generated from `#/paths/organization/projects/{project_id}/api_keys/GET/query`.
            public struct Query: Sendable, Hashable {
                /// A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.
                ///
                ///
                /// - Remark: Generated from `#/paths/organization/projects/{project_id}/api_keys/GET/query/limit`.
                public var limit: Swift.Int?
                /// A cursor for use in pagination. `after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after=obj_foo in order to fetch the next page of the list.
                ///
                ///
                /// - Remark: Generated from `#/paths/organization/projects/{project_id}/api_keys/GET/query/after`.
                public var after: Swift.String?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - limit: A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.
                ///   - after: A cursor for use in pagination. `after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after=obj_foo in order to fetch the next page of the list.
                public init(
                    limit: Swift.Int? = nil,
                    after: Swift.String? = nil
                ) {
                    self.limit = limit
                    self.after = after
                }
            }
            public var query: Operations.ListProjectApiKeys.Input.Query
            /// - Remark: Generated from `#/paths/organization/projects/{project_id}/api_keys/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ListProjectApiKeys.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ListProjectApiKeys.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.ListProjectApiKeys.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            public init(
                path: Operations.ListProjectApiKeys.Input.Path,
                query: Operations.ListProjectApiKeys.Input.Query = .init(),
                headers: Operations.ListProjectApiKeys.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/organization/projects/{project_id}/api_keys/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/organization/projects/{project_id}/api_keys/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.ProjectApiKeyListResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ProjectApiKeyListResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.ListProjectApiKeys.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.ListProjectApiKeys.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Project API keys listed successfully.
            ///
            /// - Remark: Generated from `#/paths//organization/projects/{project_id}/api_keys/get(list-project-api-keys)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.ListProjectApiKeys.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.ListProjectApiKeys.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Retrieves an API key in the project.
    ///
    /// - Remark: HTTP `GET /organization/projects/{project_id}/api_keys/{key_id}`.
    /// - Remark: Generated from `#/paths//organization/projects/{project_id}/api_keys/{key_id}/get(retrieve-project-api-key)`.
    public enum RetrieveProjectApiKey {
        public static let id: Swift.String = "retrieve-project-api-key"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/organization/projects/{project_id}/api_keys/{key_id}/GET/path`.
            public struct Path: Sendable, Hashable {
                /// The ID of the project.
                ///
                /// - Remark: Generated from `#/paths/organization/projects/{project_id}/api_keys/{key_id}/GET/path/project_id`.
                public var projectId: Swift.String
                /// The ID of the API key.
                ///
                /// - Remark: Generated from `#/paths/organization/projects/{project_id}/api_keys/{key_id}/GET/path/key_id`.
                public var keyId: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - projectId: The ID of the project.
                ///   - keyId: The ID of the API key.
                public init(
                    projectId: Swift.String,
                    keyId: Swift.String
                ) {
                    self.projectId = projectId
                    self.keyId = keyId
                }
            }
            public var path: Operations.RetrieveProjectApiKey.Input.Path
            /// - Remark: Generated from `#/paths/organization/projects/{project_id}/api_keys/{key_id}/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.RetrieveProjectApiKey.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.RetrieveProjectApiKey.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.RetrieveProjectApiKey.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            public init(
                path: Operations.RetrieveProjectApiKey.Input.Path,
                headers: Operations.RetrieveProjectApiKey.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/organization/projects/{project_id}/api_keys/{key_id}/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/organization/projects/{project_id}/api_keys/{key_id}/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.ProjectApiKey)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ProjectApiKey {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.RetrieveProjectApiKey.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.RetrieveProjectApiKey.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Project API key retrieved successfully.
            ///
            /// - Remark: Generated from `#/paths//organization/projects/{project_id}/api_keys/{key_id}/get(retrieve-project-api-key)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.RetrieveProjectApiKey.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.RetrieveProjectApiKey.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Deletes an API key from the project.
    ///
    /// - Remark: HTTP `DELETE /organization/projects/{project_id}/api_keys/{key_id}`.
    /// - Remark: Generated from `#/paths//organization/projects/{project_id}/api_keys/{key_id}/delete(delete-project-api-key)`.
    public enum DeleteProjectApiKey {
        public static let id: Swift.String = "delete-project-api-key"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/organization/projects/{project_id}/api_keys/{key_id}/DELETE/path`.
            public struct Path: Sendable, Hashable {
                /// The ID of the project.
                ///
                /// - Remark: Generated from `#/paths/organization/projects/{project_id}/api_keys/{key_id}/DELETE/path/project_id`.
                public var projectId: Swift.String
                /// The ID of the API key.
                ///
                /// - Remark: Generated from `#/paths/organization/projects/{project_id}/api_keys/{key_id}/DELETE/path/key_id`.
                public var keyId: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - projectId: The ID of the project.
                ///   - keyId: The ID of the API key.
                public init(
                    projectId: Swift.String,
                    keyId: Swift.String
                ) {
                    self.projectId = projectId
                    self.keyId = keyId
                }
            }
            public var path: Operations.DeleteProjectApiKey.Input.Path
            /// - Remark: Generated from `#/paths/organization/projects/{project_id}/api_keys/{key_id}/DELETE/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.DeleteProjectApiKey.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.DeleteProjectApiKey.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.DeleteProjectApiKey.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            public init(
                path: Operations.DeleteProjectApiKey.Input.Path,
                headers: Operations.DeleteProjectApiKey.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/organization/projects/{project_id}/api_keys/{key_id}/DELETE/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/organization/projects/{project_id}/api_keys/{key_id}/DELETE/responses/200/content/application\/json`.
                    case json(Components.Schemas.ProjectApiKeyDeleteResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ProjectApiKeyDeleteResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.DeleteProjectApiKey.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.DeleteProjectApiKey.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Project API key deleted successfully.
            ///
            /// - Remark: Generated from `#/paths//organization/projects/{project_id}/api_keys/{key_id}/delete(delete-project-api-key)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.DeleteProjectApiKey.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.DeleteProjectApiKey.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            public struct BadRequest: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/organization/projects/{project_id}/api_keys/{key_id}/DELETE/responses/400/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/organization/projects/{project_id}/api_keys/{key_id}/DELETE/responses/400/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.DeleteProjectApiKey.Output.BadRequest.Body
                /// Creates a new `BadRequest`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.DeleteProjectApiKey.Output.BadRequest.Body) {
                    self.body = body
                }
            }
            /// Error response for various conditions.
            ///
            /// - Remark: Generated from `#/paths//organization/projects/{project_id}/api_keys/{key_id}/delete(delete-project-api-key)/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Operations.DeleteProjectApiKey.Output.BadRequest)
            /// The associated value of the enum case if `self` is `.badRequest`.
            ///
            /// - Throws: An error if `self` is not `.badRequest`.
            /// - SeeAlso: `.badRequest`.
            public var badRequest: Operations.DeleteProjectApiKey.Output.BadRequest {
                get throws {
                    switch self {
                    case let .badRequest(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "badRequest",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Archives a project in the organization. Archived projects cannot be used or updated.
    ///
    /// - Remark: HTTP `POST /organization/projects/{project_id}/archive`.
    /// - Remark: Generated from `#/paths//organization/projects/{project_id}/archive/post(archive-project)`.
    public enum ArchiveProject {
        public static let id: Swift.String = "archive-project"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/organization/projects/{project_id}/archive/POST/path`.
            public struct Path: Sendable, Hashable {
                /// The ID of the project.
                ///
                /// - Remark: Generated from `#/paths/organization/projects/{project_id}/archive/POST/path/project_id`.
                public var projectId: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - projectId: The ID of the project.
                public init(projectId: Swift.String) {
                    self.projectId = projectId
                }
            }
            public var path: Operations.ArchiveProject.Input.Path
            /// - Remark: Generated from `#/paths/organization/projects/{project_id}/archive/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ArchiveProject.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ArchiveProject.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.ArchiveProject.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            public init(
                path: Operations.ArchiveProject.Input.Path,
                headers: Operations.ArchiveProject.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/organization/projects/{project_id}/archive/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/organization/projects/{project_id}/archive/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.Project)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.Project {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.ArchiveProject.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.ArchiveProject.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Project archived successfully.
            ///
            /// - Remark: Generated from `#/paths//organization/projects/{project_id}/archive/post(archive-project)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.ArchiveProject.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.ArchiveProject.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Returns the rate limits per model for a project.
    ///
    /// - Remark: HTTP `GET /organization/projects/{project_id}/rate_limits`.
    /// - Remark: Generated from `#/paths//organization/projects/{project_id}/rate_limits/get(list-project-rate-limits)`.
    public enum ListProjectRateLimits {
        public static let id: Swift.String = "list-project-rate-limits"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/organization/projects/{project_id}/rate_limits/GET/path`.
            public struct Path: Sendable, Hashable {
                /// The ID of the project.
                ///
                /// - Remark: Generated from `#/paths/organization/projects/{project_id}/rate_limits/GET/path/project_id`.
                public var projectId: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - projectId: The ID of the project.
                public init(projectId: Swift.String) {
                    self.projectId = projectId
                }
            }
            public var path: Operations.ListProjectRateLimits.Input.Path
            /// - Remark: Generated from `#/paths/organization/projects/{project_id}/rate_limits/GET/query`.
            public struct Query: Sendable, Hashable {
                /// A limit on the number of objects to be returned. The default is 100.
                ///
                ///
                /// - Remark: Generated from `#/paths/organization/projects/{project_id}/rate_limits/GET/query/limit`.
                public var limit: Swift.Int?
                /// A cursor for use in pagination. `after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after=obj_foo in order to fetch the next page of the list.
                ///
                ///
                /// - Remark: Generated from `#/paths/organization/projects/{project_id}/rate_limits/GET/query/after`.
                public var after: Swift.String?
                /// A cursor for use in pagination. `before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, beginning with obj_foo, your subsequent call can include before=obj_foo in order to fetch the previous page of the list.
                ///
                ///
                /// - Remark: Generated from `#/paths/organization/projects/{project_id}/rate_limits/GET/query/before`.
                public var before: Swift.String?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - limit: A limit on the number of objects to be returned. The default is 100.
                ///   - after: A cursor for use in pagination. `after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after=obj_foo in order to fetch the next page of the list.
                ///   - before: A cursor for use in pagination. `before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, beginning with obj_foo, your subsequent call can include before=obj_foo in order to fetch the previous page of the list.
                public init(
                    limit: Swift.Int? = nil,
                    after: Swift.String? = nil,
                    before: Swift.String? = nil
                ) {
                    self.limit = limit
                    self.after = after
                    self.before = before
                }
            }
            public var query: Operations.ListProjectRateLimits.Input.Query
            /// - Remark: Generated from `#/paths/organization/projects/{project_id}/rate_limits/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ListProjectRateLimits.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ListProjectRateLimits.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.ListProjectRateLimits.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            public init(
                path: Operations.ListProjectRateLimits.Input.Path,
                query: Operations.ListProjectRateLimits.Input.Query = .init(),
                headers: Operations.ListProjectRateLimits.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/organization/projects/{project_id}/rate_limits/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/organization/projects/{project_id}/rate_limits/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.ProjectRateLimitListResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ProjectRateLimitListResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.ListProjectRateLimits.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.ListProjectRateLimits.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Project rate limits listed successfully.
            ///
            /// - Remark: Generated from `#/paths//organization/projects/{project_id}/rate_limits/get(list-project-rate-limits)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.ListProjectRateLimits.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.ListProjectRateLimits.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Updates a project rate limit.
    ///
    /// - Remark: HTTP `POST /organization/projects/{project_id}/rate_limits/{rate_limit_id}`.
    /// - Remark: Generated from `#/paths//organization/projects/{project_id}/rate_limits/{rate_limit_id}/post(update-project-rate-limits)`.
    public enum UpdateProjectRateLimits {
        public static let id: Swift.String = "update-project-rate-limits"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/organization/projects/{project_id}/rate_limits/{rate_limit_id}/POST/path`.
            public struct Path: Sendable, Hashable {
                /// The ID of the project.
                ///
                /// - Remark: Generated from `#/paths/organization/projects/{project_id}/rate_limits/{rate_limit_id}/POST/path/project_id`.
                public var projectId: Swift.String
                /// The ID of the rate limit.
                ///
                /// - Remark: Generated from `#/paths/organization/projects/{project_id}/rate_limits/{rate_limit_id}/POST/path/rate_limit_id`.
                public var rateLimitId: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - projectId: The ID of the project.
                ///   - rateLimitId: The ID of the rate limit.
                public init(
                    projectId: Swift.String,
                    rateLimitId: Swift.String
                ) {
                    self.projectId = projectId
                    self.rateLimitId = rateLimitId
                }
            }
            public var path: Operations.UpdateProjectRateLimits.Input.Path
            /// - Remark: Generated from `#/paths/organization/projects/{project_id}/rate_limits/{rate_limit_id}/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.UpdateProjectRateLimits.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.UpdateProjectRateLimits.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.UpdateProjectRateLimits.Input.Headers
            /// - Remark: Generated from `#/paths/organization/projects/{project_id}/rate_limits/{rate_limit_id}/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/organization/projects/{project_id}/rate_limits/{rate_limit_id}/POST/requestBody/content/application\/json`.
                case json(Components.Schemas.ProjectRateLimitUpdateRequest)
            }
            public var body: Operations.UpdateProjectRateLimits.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            ///   - body:
            public init(
                path: Operations.UpdateProjectRateLimits.Input.Path,
                headers: Operations.UpdateProjectRateLimits.Input.Headers = .init(),
                body: Operations.UpdateProjectRateLimits.Input.Body
            ) {
                self.path = path
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/organization/projects/{project_id}/rate_limits/{rate_limit_id}/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/organization/projects/{project_id}/rate_limits/{rate_limit_id}/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.ProjectRateLimit)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ProjectRateLimit {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.UpdateProjectRateLimits.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.UpdateProjectRateLimits.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Project rate limit updated successfully.
            ///
            /// - Remark: Generated from `#/paths//organization/projects/{project_id}/rate_limits/{rate_limit_id}/post(update-project-rate-limits)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.UpdateProjectRateLimits.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.UpdateProjectRateLimits.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            public struct BadRequest: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/organization/projects/{project_id}/rate_limits/{rate_limit_id}/POST/responses/400/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/organization/projects/{project_id}/rate_limits/{rate_limit_id}/POST/responses/400/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.UpdateProjectRateLimits.Output.BadRequest.Body
                /// Creates a new `BadRequest`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.UpdateProjectRateLimits.Output.BadRequest.Body) {
                    self.body = body
                }
            }
            /// Error response for various conditions.
            ///
            /// - Remark: Generated from `#/paths//organization/projects/{project_id}/rate_limits/{rate_limit_id}/post(update-project-rate-limits)/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Operations.UpdateProjectRateLimits.Output.BadRequest)
            /// The associated value of the enum case if `self` is `.badRequest`.
            ///
            /// - Throws: An error if `self` is not `.badRequest`.
            /// - SeeAlso: `.badRequest`.
            public var badRequest: Operations.UpdateProjectRateLimits.Output.BadRequest {
                get throws {
                    switch self {
                    case let .badRequest(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "badRequest",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Returns a list of service accounts in the project.
    ///
    /// - Remark: HTTP `GET /organization/projects/{project_id}/service_accounts`.
    /// - Remark: Generated from `#/paths//organization/projects/{project_id}/service_accounts/get(list-project-service-accounts)`.
    public enum ListProjectServiceAccounts {
        public static let id: Swift.String = "list-project-service-accounts"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/organization/projects/{project_id}/service_accounts/GET/path`.
            public struct Path: Sendable, Hashable {
                /// The ID of the project.
                ///
                /// - Remark: Generated from `#/paths/organization/projects/{project_id}/service_accounts/GET/path/project_id`.
                public var projectId: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - projectId: The ID of the project.
                public init(projectId: Swift.String) {
                    self.projectId = projectId
                }
            }
            public var path: Operations.ListProjectServiceAccounts.Input.Path
            /// - Remark: Generated from `#/paths/organization/projects/{project_id}/service_accounts/GET/query`.
            public struct Query: Sendable, Hashable {
                /// A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.
                ///
                ///
                /// - Remark: Generated from `#/paths/organization/projects/{project_id}/service_accounts/GET/query/limit`.
                public var limit: Swift.Int?
                /// A cursor for use in pagination. `after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after=obj_foo in order to fetch the next page of the list.
                ///
                ///
                /// - Remark: Generated from `#/paths/organization/projects/{project_id}/service_accounts/GET/query/after`.
                public var after: Swift.String?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - limit: A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.
                ///   - after: A cursor for use in pagination. `after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after=obj_foo in order to fetch the next page of the list.
                public init(
                    limit: Swift.Int? = nil,
                    after: Swift.String? = nil
                ) {
                    self.limit = limit
                    self.after = after
                }
            }
            public var query: Operations.ListProjectServiceAccounts.Input.Query
            /// - Remark: Generated from `#/paths/organization/projects/{project_id}/service_accounts/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ListProjectServiceAccounts.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ListProjectServiceAccounts.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.ListProjectServiceAccounts.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            public init(
                path: Operations.ListProjectServiceAccounts.Input.Path,
                query: Operations.ListProjectServiceAccounts.Input.Query = .init(),
                headers: Operations.ListProjectServiceAccounts.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/organization/projects/{project_id}/service_accounts/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/organization/projects/{project_id}/service_accounts/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.ProjectServiceAccountListResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ProjectServiceAccountListResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.ListProjectServiceAccounts.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.ListProjectServiceAccounts.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Project service accounts listed successfully.
            ///
            /// - Remark: Generated from `#/paths//organization/projects/{project_id}/service_accounts/get(list-project-service-accounts)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.ListProjectServiceAccounts.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.ListProjectServiceAccounts.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            public struct BadRequest: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/organization/projects/{project_id}/service_accounts/GET/responses/400/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/organization/projects/{project_id}/service_accounts/GET/responses/400/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.ListProjectServiceAccounts.Output.BadRequest.Body
                /// Creates a new `BadRequest`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.ListProjectServiceAccounts.Output.BadRequest.Body) {
                    self.body = body
                }
            }
            /// Error response when project is archived.
            ///
            /// - Remark: Generated from `#/paths//organization/projects/{project_id}/service_accounts/get(list-project-service-accounts)/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Operations.ListProjectServiceAccounts.Output.BadRequest)
            /// The associated value of the enum case if `self` is `.badRequest`.
            ///
            /// - Throws: An error if `self` is not `.badRequest`.
            /// - SeeAlso: `.badRequest`.
            public var badRequest: Operations.ListProjectServiceAccounts.Output.BadRequest {
                get throws {
                    switch self {
                    case let .badRequest(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "badRequest",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Creates a new service account in the project. This also returns an unredacted API key for the service account.
    ///
    /// - Remark: HTTP `POST /organization/projects/{project_id}/service_accounts`.
    /// - Remark: Generated from `#/paths//organization/projects/{project_id}/service_accounts/post(create-project-service-account)`.
    public enum CreateProjectServiceAccount {
        public static let id: Swift.String = "create-project-service-account"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/organization/projects/{project_id}/service_accounts/POST/path`.
            public struct Path: Sendable, Hashable {
                /// The ID of the project.
                ///
                /// - Remark: Generated from `#/paths/organization/projects/{project_id}/service_accounts/POST/path/project_id`.
                public var projectId: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - projectId: The ID of the project.
                public init(projectId: Swift.String) {
                    self.projectId = projectId
                }
            }
            public var path: Operations.CreateProjectServiceAccount.Input.Path
            /// - Remark: Generated from `#/paths/organization/projects/{project_id}/service_accounts/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.CreateProjectServiceAccount.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.CreateProjectServiceAccount.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.CreateProjectServiceAccount.Input.Headers
            /// - Remark: Generated from `#/paths/organization/projects/{project_id}/service_accounts/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/organization/projects/{project_id}/service_accounts/POST/requestBody/content/application\/json`.
                case json(Components.Schemas.ProjectServiceAccountCreateRequest)
            }
            public var body: Operations.CreateProjectServiceAccount.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            ///   - body:
            public init(
                path: Operations.CreateProjectServiceAccount.Input.Path,
                headers: Operations.CreateProjectServiceAccount.Input.Headers = .init(),
                body: Operations.CreateProjectServiceAccount.Input.Body
            ) {
                self.path = path
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/organization/projects/{project_id}/service_accounts/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/organization/projects/{project_id}/service_accounts/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.ProjectServiceAccountCreateResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ProjectServiceAccountCreateResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.CreateProjectServiceAccount.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.CreateProjectServiceAccount.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Project service account created successfully.
            ///
            /// - Remark: Generated from `#/paths//organization/projects/{project_id}/service_accounts/post(create-project-service-account)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.CreateProjectServiceAccount.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.CreateProjectServiceAccount.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            public struct BadRequest: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/organization/projects/{project_id}/service_accounts/POST/responses/400/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/organization/projects/{project_id}/service_accounts/POST/responses/400/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.CreateProjectServiceAccount.Output.BadRequest.Body
                /// Creates a new `BadRequest`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.CreateProjectServiceAccount.Output.BadRequest.Body) {
                    self.body = body
                }
            }
            /// Error response when project is archived.
            ///
            /// - Remark: Generated from `#/paths//organization/projects/{project_id}/service_accounts/post(create-project-service-account)/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Operations.CreateProjectServiceAccount.Output.BadRequest)
            /// The associated value of the enum case if `self` is `.badRequest`.
            ///
            /// - Throws: An error if `self` is not `.badRequest`.
            /// - SeeAlso: `.badRequest`.
            public var badRequest: Operations.CreateProjectServiceAccount.Output.BadRequest {
                get throws {
                    switch self {
                    case let .badRequest(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "badRequest",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Retrieves a service account in the project.
    ///
    /// - Remark: HTTP `GET /organization/projects/{project_id}/service_accounts/{service_account_id}`.
    /// - Remark: Generated from `#/paths//organization/projects/{project_id}/service_accounts/{service_account_id}/get(retrieve-project-service-account)`.
    public enum RetrieveProjectServiceAccount {
        public static let id: Swift.String = "retrieve-project-service-account"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/organization/projects/{project_id}/service_accounts/{service_account_id}/GET/path`.
            public struct Path: Sendable, Hashable {
                /// The ID of the project.
                ///
                /// - Remark: Generated from `#/paths/organization/projects/{project_id}/service_accounts/{service_account_id}/GET/path/project_id`.
                public var projectId: Swift.String
                /// The ID of the service account.
                ///
                /// - Remark: Generated from `#/paths/organization/projects/{project_id}/service_accounts/{service_account_id}/GET/path/service_account_id`.
                public var serviceAccountId: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - projectId: The ID of the project.
                ///   - serviceAccountId: The ID of the service account.
                public init(
                    projectId: Swift.String,
                    serviceAccountId: Swift.String
                ) {
                    self.projectId = projectId
                    self.serviceAccountId = serviceAccountId
                }
            }
            public var path: Operations.RetrieveProjectServiceAccount.Input.Path
            /// - Remark: Generated from `#/paths/organization/projects/{project_id}/service_accounts/{service_account_id}/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.RetrieveProjectServiceAccount.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.RetrieveProjectServiceAccount.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.RetrieveProjectServiceAccount.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            public init(
                path: Operations.RetrieveProjectServiceAccount.Input.Path,
                headers: Operations.RetrieveProjectServiceAccount.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/organization/projects/{project_id}/service_accounts/{service_account_id}/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/organization/projects/{project_id}/service_accounts/{service_account_id}/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.ProjectServiceAccount)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ProjectServiceAccount {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.RetrieveProjectServiceAccount.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.RetrieveProjectServiceAccount.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Project service account retrieved successfully.
            ///
            /// - Remark: Generated from `#/paths//organization/projects/{project_id}/service_accounts/{service_account_id}/get(retrieve-project-service-account)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.RetrieveProjectServiceAccount.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.RetrieveProjectServiceAccount.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Deletes a service account from the project.
    ///
    /// - Remark: HTTP `DELETE /organization/projects/{project_id}/service_accounts/{service_account_id}`.
    /// - Remark: Generated from `#/paths//organization/projects/{project_id}/service_accounts/{service_account_id}/delete(delete-project-service-account)`.
    public enum DeleteProjectServiceAccount {
        public static let id: Swift.String = "delete-project-service-account"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/organization/projects/{project_id}/service_accounts/{service_account_id}/DELETE/path`.
            public struct Path: Sendable, Hashable {
                /// The ID of the project.
                ///
                /// - Remark: Generated from `#/paths/organization/projects/{project_id}/service_accounts/{service_account_id}/DELETE/path/project_id`.
                public var projectId: Swift.String
                /// The ID of the service account.
                ///
                /// - Remark: Generated from `#/paths/organization/projects/{project_id}/service_accounts/{service_account_id}/DELETE/path/service_account_id`.
                public var serviceAccountId: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - projectId: The ID of the project.
                ///   - serviceAccountId: The ID of the service account.
                public init(
                    projectId: Swift.String,
                    serviceAccountId: Swift.String
                ) {
                    self.projectId = projectId
                    self.serviceAccountId = serviceAccountId
                }
            }
            public var path: Operations.DeleteProjectServiceAccount.Input.Path
            /// - Remark: Generated from `#/paths/organization/projects/{project_id}/service_accounts/{service_account_id}/DELETE/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.DeleteProjectServiceAccount.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.DeleteProjectServiceAccount.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.DeleteProjectServiceAccount.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            public init(
                path: Operations.DeleteProjectServiceAccount.Input.Path,
                headers: Operations.DeleteProjectServiceAccount.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/organization/projects/{project_id}/service_accounts/{service_account_id}/DELETE/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/organization/projects/{project_id}/service_accounts/{service_account_id}/DELETE/responses/200/content/application\/json`.
                    case json(Components.Schemas.ProjectServiceAccountDeleteResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ProjectServiceAccountDeleteResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.DeleteProjectServiceAccount.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.DeleteProjectServiceAccount.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Project service account deleted successfully.
            ///
            /// - Remark: Generated from `#/paths//organization/projects/{project_id}/service_accounts/{service_account_id}/delete(delete-project-service-account)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.DeleteProjectServiceAccount.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.DeleteProjectServiceAccount.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Returns a list of users in the project.
    ///
    /// - Remark: HTTP `GET /organization/projects/{project_id}/users`.
    /// - Remark: Generated from `#/paths//organization/projects/{project_id}/users/get(list-project-users)`.
    public enum ListProjectUsers {
        public static let id: Swift.String = "list-project-users"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/organization/projects/{project_id}/users/GET/path`.
            public struct Path: Sendable, Hashable {
                /// The ID of the project.
                ///
                /// - Remark: Generated from `#/paths/organization/projects/{project_id}/users/GET/path/project_id`.
                public var projectId: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - projectId: The ID of the project.
                public init(projectId: Swift.String) {
                    self.projectId = projectId
                }
            }
            public var path: Operations.ListProjectUsers.Input.Path
            /// - Remark: Generated from `#/paths/organization/projects/{project_id}/users/GET/query`.
            public struct Query: Sendable, Hashable {
                /// A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.
                ///
                ///
                /// - Remark: Generated from `#/paths/organization/projects/{project_id}/users/GET/query/limit`.
                public var limit: Swift.Int?
                /// A cursor for use in pagination. `after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after=obj_foo in order to fetch the next page of the list.
                ///
                ///
                /// - Remark: Generated from `#/paths/organization/projects/{project_id}/users/GET/query/after`.
                public var after: Swift.String?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - limit: A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.
                ///   - after: A cursor for use in pagination. `after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after=obj_foo in order to fetch the next page of the list.
                public init(
                    limit: Swift.Int? = nil,
                    after: Swift.String? = nil
                ) {
                    self.limit = limit
                    self.after = after
                }
            }
            public var query: Operations.ListProjectUsers.Input.Query
            /// - Remark: Generated from `#/paths/organization/projects/{project_id}/users/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ListProjectUsers.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ListProjectUsers.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.ListProjectUsers.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            public init(
                path: Operations.ListProjectUsers.Input.Path,
                query: Operations.ListProjectUsers.Input.Query = .init(),
                headers: Operations.ListProjectUsers.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/organization/projects/{project_id}/users/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/organization/projects/{project_id}/users/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.ProjectUserListResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ProjectUserListResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.ListProjectUsers.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.ListProjectUsers.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Project users listed successfully.
            ///
            /// - Remark: Generated from `#/paths//organization/projects/{project_id}/users/get(list-project-users)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.ListProjectUsers.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.ListProjectUsers.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            public struct BadRequest: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/organization/projects/{project_id}/users/GET/responses/400/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/organization/projects/{project_id}/users/GET/responses/400/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.ListProjectUsers.Output.BadRequest.Body
                /// Creates a new `BadRequest`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.ListProjectUsers.Output.BadRequest.Body) {
                    self.body = body
                }
            }
            /// Error response when project is archived.
            ///
            /// - Remark: Generated from `#/paths//organization/projects/{project_id}/users/get(list-project-users)/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Operations.ListProjectUsers.Output.BadRequest)
            /// The associated value of the enum case if `self` is `.badRequest`.
            ///
            /// - Throws: An error if `self` is not `.badRequest`.
            /// - SeeAlso: `.badRequest`.
            public var badRequest: Operations.ListProjectUsers.Output.BadRequest {
                get throws {
                    switch self {
                    case let .badRequest(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "badRequest",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Adds a user to the project. Users must already be members of the organization to be added to a project.
    ///
    /// - Remark: HTTP `POST /organization/projects/{project_id}/users`.
    /// - Remark: Generated from `#/paths//organization/projects/{project_id}/users/post(create-project-user)`.
    public enum CreateProjectUser {
        public static let id: Swift.String = "create-project-user"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/organization/projects/{project_id}/users/POST/path`.
            public struct Path: Sendable, Hashable {
                /// The ID of the project.
                ///
                /// - Remark: Generated from `#/paths/organization/projects/{project_id}/users/POST/path/project_id`.
                public var projectId: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - projectId: The ID of the project.
                public init(projectId: Swift.String) {
                    self.projectId = projectId
                }
            }
            public var path: Operations.CreateProjectUser.Input.Path
            /// - Remark: Generated from `#/paths/organization/projects/{project_id}/users/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.CreateProjectUser.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.CreateProjectUser.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.CreateProjectUser.Input.Headers
            /// - Remark: Generated from `#/paths/organization/projects/{project_id}/users/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/organization/projects/{project_id}/users/POST/requestBody/content/application\/json`.
                case json(Components.Schemas.ProjectUserCreateRequest)
            }
            public var body: Operations.CreateProjectUser.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            ///   - body:
            public init(
                path: Operations.CreateProjectUser.Input.Path,
                headers: Operations.CreateProjectUser.Input.Headers = .init(),
                body: Operations.CreateProjectUser.Input.Body
            ) {
                self.path = path
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/organization/projects/{project_id}/users/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/organization/projects/{project_id}/users/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.ProjectUser)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ProjectUser {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.CreateProjectUser.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.CreateProjectUser.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// User added to project successfully.
            ///
            /// - Remark: Generated from `#/paths//organization/projects/{project_id}/users/post(create-project-user)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.CreateProjectUser.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.CreateProjectUser.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            public struct BadRequest: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/organization/projects/{project_id}/users/POST/responses/400/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/organization/projects/{project_id}/users/POST/responses/400/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.CreateProjectUser.Output.BadRequest.Body
                /// Creates a new `BadRequest`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.CreateProjectUser.Output.BadRequest.Body) {
                    self.body = body
                }
            }
            /// Error response for various conditions.
            ///
            /// - Remark: Generated from `#/paths//organization/projects/{project_id}/users/post(create-project-user)/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Operations.CreateProjectUser.Output.BadRequest)
            /// The associated value of the enum case if `self` is `.badRequest`.
            ///
            /// - Throws: An error if `self` is not `.badRequest`.
            /// - SeeAlso: `.badRequest`.
            public var badRequest: Operations.CreateProjectUser.Output.BadRequest {
                get throws {
                    switch self {
                    case let .badRequest(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "badRequest",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Retrieves a user in the project.
    ///
    /// - Remark: HTTP `GET /organization/projects/{project_id}/users/{user_id}`.
    /// - Remark: Generated from `#/paths//organization/projects/{project_id}/users/{user_id}/get(retrieve-project-user)`.
    public enum RetrieveProjectUser {
        public static let id: Swift.String = "retrieve-project-user"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/organization/projects/{project_id}/users/{user_id}/GET/path`.
            public struct Path: Sendable, Hashable {
                /// The ID of the project.
                ///
                /// - Remark: Generated from `#/paths/organization/projects/{project_id}/users/{user_id}/GET/path/project_id`.
                public var projectId: Swift.String
                /// The ID of the user.
                ///
                /// - Remark: Generated from `#/paths/organization/projects/{project_id}/users/{user_id}/GET/path/user_id`.
                public var userId: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - projectId: The ID of the project.
                ///   - userId: The ID of the user.
                public init(
                    projectId: Swift.String,
                    userId: Swift.String
                ) {
                    self.projectId = projectId
                    self.userId = userId
                }
            }
            public var path: Operations.RetrieveProjectUser.Input.Path
            /// - Remark: Generated from `#/paths/organization/projects/{project_id}/users/{user_id}/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.RetrieveProjectUser.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.RetrieveProjectUser.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.RetrieveProjectUser.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            public init(
                path: Operations.RetrieveProjectUser.Input.Path,
                headers: Operations.RetrieveProjectUser.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/organization/projects/{project_id}/users/{user_id}/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/organization/projects/{project_id}/users/{user_id}/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.ProjectUser)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ProjectUser {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.RetrieveProjectUser.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.RetrieveProjectUser.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Project user retrieved successfully.
            ///
            /// - Remark: Generated from `#/paths//organization/projects/{project_id}/users/{user_id}/get(retrieve-project-user)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.RetrieveProjectUser.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.RetrieveProjectUser.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Modifies a user's role in the project.
    ///
    /// - Remark: HTTP `POST /organization/projects/{project_id}/users/{user_id}`.
    /// - Remark: Generated from `#/paths//organization/projects/{project_id}/users/{user_id}/post(modify-project-user)`.
    public enum ModifyProjectUser {
        public static let id: Swift.String = "modify-project-user"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/organization/projects/{project_id}/users/{user_id}/POST/path`.
            public struct Path: Sendable, Hashable {
                /// The ID of the project.
                ///
                /// - Remark: Generated from `#/paths/organization/projects/{project_id}/users/{user_id}/POST/path/project_id`.
                public var projectId: Swift.String
                /// The ID of the user.
                ///
                /// - Remark: Generated from `#/paths/organization/projects/{project_id}/users/{user_id}/POST/path/user_id`.
                public var userId: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - projectId: The ID of the project.
                ///   - userId: The ID of the user.
                public init(
                    projectId: Swift.String,
                    userId: Swift.String
                ) {
                    self.projectId = projectId
                    self.userId = userId
                }
            }
            public var path: Operations.ModifyProjectUser.Input.Path
            /// - Remark: Generated from `#/paths/organization/projects/{project_id}/users/{user_id}/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ModifyProjectUser.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ModifyProjectUser.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.ModifyProjectUser.Input.Headers
            /// - Remark: Generated from `#/paths/organization/projects/{project_id}/users/{user_id}/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/organization/projects/{project_id}/users/{user_id}/POST/requestBody/content/application\/json`.
                case json(Components.Schemas.ProjectUserUpdateRequest)
            }
            public var body: Operations.ModifyProjectUser.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            ///   - body:
            public init(
                path: Operations.ModifyProjectUser.Input.Path,
                headers: Operations.ModifyProjectUser.Input.Headers = .init(),
                body: Operations.ModifyProjectUser.Input.Body
            ) {
                self.path = path
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/organization/projects/{project_id}/users/{user_id}/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/organization/projects/{project_id}/users/{user_id}/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.ProjectUser)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ProjectUser {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.ModifyProjectUser.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.ModifyProjectUser.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Project user's role updated successfully.
            ///
            /// - Remark: Generated from `#/paths//organization/projects/{project_id}/users/{user_id}/post(modify-project-user)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.ModifyProjectUser.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.ModifyProjectUser.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            public struct BadRequest: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/organization/projects/{project_id}/users/{user_id}/POST/responses/400/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/organization/projects/{project_id}/users/{user_id}/POST/responses/400/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.ModifyProjectUser.Output.BadRequest.Body
                /// Creates a new `BadRequest`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.ModifyProjectUser.Output.BadRequest.Body) {
                    self.body = body
                }
            }
            /// Error response for various conditions.
            ///
            /// - Remark: Generated from `#/paths//organization/projects/{project_id}/users/{user_id}/post(modify-project-user)/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Operations.ModifyProjectUser.Output.BadRequest)
            /// The associated value of the enum case if `self` is `.badRequest`.
            ///
            /// - Throws: An error if `self` is not `.badRequest`.
            /// - SeeAlso: `.badRequest`.
            public var badRequest: Operations.ModifyProjectUser.Output.BadRequest {
                get throws {
                    switch self {
                    case let .badRequest(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "badRequest",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Deletes a user from the project.
    ///
    /// - Remark: HTTP `DELETE /organization/projects/{project_id}/users/{user_id}`.
    /// - Remark: Generated from `#/paths//organization/projects/{project_id}/users/{user_id}/delete(delete-project-user)`.
    public enum DeleteProjectUser {
        public static let id: Swift.String = "delete-project-user"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/organization/projects/{project_id}/users/{user_id}/DELETE/path`.
            public struct Path: Sendable, Hashable {
                /// The ID of the project.
                ///
                /// - Remark: Generated from `#/paths/organization/projects/{project_id}/users/{user_id}/DELETE/path/project_id`.
                public var projectId: Swift.String
                /// The ID of the user.
                ///
                /// - Remark: Generated from `#/paths/organization/projects/{project_id}/users/{user_id}/DELETE/path/user_id`.
                public var userId: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - projectId: The ID of the project.
                ///   - userId: The ID of the user.
                public init(
                    projectId: Swift.String,
                    userId: Swift.String
                ) {
                    self.projectId = projectId
                    self.userId = userId
                }
            }
            public var path: Operations.DeleteProjectUser.Input.Path
            /// - Remark: Generated from `#/paths/organization/projects/{project_id}/users/{user_id}/DELETE/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.DeleteProjectUser.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.DeleteProjectUser.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.DeleteProjectUser.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            public init(
                path: Operations.DeleteProjectUser.Input.Path,
                headers: Operations.DeleteProjectUser.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/organization/projects/{project_id}/users/{user_id}/DELETE/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/organization/projects/{project_id}/users/{user_id}/DELETE/responses/200/content/application\/json`.
                    case json(Components.Schemas.ProjectUserDeleteResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ProjectUserDeleteResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.DeleteProjectUser.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.DeleteProjectUser.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Project user deleted successfully.
            ///
            /// - Remark: Generated from `#/paths//organization/projects/{project_id}/users/{user_id}/delete(delete-project-user)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.DeleteProjectUser.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.DeleteProjectUser.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            public struct BadRequest: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/organization/projects/{project_id}/users/{user_id}/DELETE/responses/400/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/organization/projects/{project_id}/users/{user_id}/DELETE/responses/400/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.DeleteProjectUser.Output.BadRequest.Body
                /// Creates a new `BadRequest`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.DeleteProjectUser.Output.BadRequest.Body) {
                    self.body = body
                }
            }
            /// Error response for various conditions.
            ///
            /// - Remark: Generated from `#/paths//organization/projects/{project_id}/users/{user_id}/delete(delete-project-user)/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Operations.DeleteProjectUser.Output.BadRequest)
            /// The associated value of the enum case if `self` is `.badRequest`.
            ///
            /// - Throws: An error if `self` is not `.badRequest`.
            /// - SeeAlso: `.badRequest`.
            public var badRequest: Operations.DeleteProjectUser.Output.BadRequest {
                get throws {
                    switch self {
                    case let .badRequest(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "badRequest",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Get audio speeches usage details for the organization.
    ///
    /// - Remark: HTTP `GET /organization/usage/audio_speeches`.
    /// - Remark: Generated from `#/paths//organization/usage/audio_speeches/get(usage-audio-speeches)`.
    public enum UsageAudioSpeeches {
        public static let id: Swift.String = "usage-audio-speeches"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/organization/usage/audio_speeches/GET/query`.
            public struct Query: Sendable, Hashable {
                /// Start time (Unix seconds) of the query time range, inclusive.
                ///
                /// - Remark: Generated from `#/paths/organization/usage/audio_speeches/GET/query/start_time`.
                public var startTime: Swift.Int
                /// End time (Unix seconds) of the query time range, exclusive.
                ///
                /// - Remark: Generated from `#/paths/organization/usage/audio_speeches/GET/query/end_time`.
                public var endTime: Swift.Int?
                /// - Remark: Generated from `#/paths/organization/usage/audio_speeches/GET/query/bucket_width`.
                @frozen public enum BucketWidthPayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case _1m = "1m"
                    case _1h = "1h"
                    case _1d = "1d"
                }
                /// Width of each time bucket in response. Currently `1m`, `1h` and `1d` are supported, default to `1d`.
                ///
                /// - Remark: Generated from `#/paths/organization/usage/audio_speeches/GET/query/bucket_width`.
                public var bucketWidth: Operations.UsageAudioSpeeches.Input.Query.BucketWidthPayload?
                /// Return only usage for these projects.
                ///
                /// - Remark: Generated from `#/paths/organization/usage/audio_speeches/GET/query/project_ids`.
                public var projectIds: [Swift.String]?
                /// Return only usage for these users.
                ///
                /// - Remark: Generated from `#/paths/organization/usage/audio_speeches/GET/query/user_ids`.
                public var userIds: [Swift.String]?
                /// Return only usage for these API keys.
                ///
                /// - Remark: Generated from `#/paths/organization/usage/audio_speeches/GET/query/api_key_ids`.
                public var apiKeyIds: [Swift.String]?
                /// Return only usage for these models.
                ///
                /// - Remark: Generated from `#/paths/organization/usage/audio_speeches/GET/query/models`.
                public var models: [Swift.String]?
                /// - Remark: Generated from `#/paths/organization/usage/audio_speeches/GET/query/GroupByPayload`.
                @frozen public enum GroupByPayloadPayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case projectId = "project_id"
                    case userId = "user_id"
                    case apiKeyId = "api_key_id"
                    case model = "model"
                }
                /// - Remark: Generated from `#/paths/organization/usage/audio_speeches/GET/query/group_by`.
                public typealias GroupByPayload = [Operations.UsageAudioSpeeches.Input.Query.GroupByPayloadPayload]
                /// Group the usage data by the specified fields. Support fields include `project_id`, `user_id`, `api_key_id`, `model` or any combination of them.
                ///
                /// - Remark: Generated from `#/paths/organization/usage/audio_speeches/GET/query/group_by`.
                public var groupBy: Operations.UsageAudioSpeeches.Input.Query.GroupByPayload?
                /// Specifies the number of buckets to return.
                /// - `bucket_width=1d`: default: 7, max: 31
                /// - `bucket_width=1h`: default: 24, max: 168
                /// - `bucket_width=1m`: default: 60, max: 1440
                ///
                ///
                /// - Remark: Generated from `#/paths/organization/usage/audio_speeches/GET/query/limit`.
                public var limit: Swift.Int?
                /// A cursor for use in pagination. Corresponding to the `next_page` field from the previous response.
                ///
                /// - Remark: Generated from `#/paths/organization/usage/audio_speeches/GET/query/page`.
                public var page: Swift.String?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - startTime: Start time (Unix seconds) of the query time range, inclusive.
                ///   - endTime: End time (Unix seconds) of the query time range, exclusive.
                ///   - bucketWidth: Width of each time bucket in response. Currently `1m`, `1h` and `1d` are supported, default to `1d`.
                ///   - projectIds: Return only usage for these projects.
                ///   - userIds: Return only usage for these users.
                ///   - apiKeyIds: Return only usage for these API keys.
                ///   - models: Return only usage for these models.
                ///   - groupBy: Group the usage data by the specified fields. Support fields include `project_id`, `user_id`, `api_key_id`, `model` or any combination of them.
                ///   - limit: Specifies the number of buckets to return.
                ///   - page: A cursor for use in pagination. Corresponding to the `next_page` field from the previous response.
                public init(
                    startTime: Swift.Int,
                    endTime: Swift.Int? = nil,
                    bucketWidth: Operations.UsageAudioSpeeches.Input.Query.BucketWidthPayload? = nil,
                    projectIds: [Swift.String]? = nil,
                    userIds: [Swift.String]? = nil,
                    apiKeyIds: [Swift.String]? = nil,
                    models: [Swift.String]? = nil,
                    groupBy: Operations.UsageAudioSpeeches.Input.Query.GroupByPayload? = nil,
                    limit: Swift.Int? = nil,
                    page: Swift.String? = nil
                ) {
                    self.startTime = startTime
                    self.endTime = endTime
                    self.bucketWidth = bucketWidth
                    self.projectIds = projectIds
                    self.userIds = userIds
                    self.apiKeyIds = apiKeyIds
                    self.models = models
                    self.groupBy = groupBy
                    self.limit = limit
                    self.page = page
                }
            }
            public var query: Operations.UsageAudioSpeeches.Input.Query
            /// - Remark: Generated from `#/paths/organization/usage/audio_speeches/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.UsageAudioSpeeches.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.UsageAudioSpeeches.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.UsageAudioSpeeches.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            public init(
                query: Operations.UsageAudioSpeeches.Input.Query,
                headers: Operations.UsageAudioSpeeches.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/organization/usage/audio_speeches/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/organization/usage/audio_speeches/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.UsageResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.UsageResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.UsageAudioSpeeches.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.UsageAudioSpeeches.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Usage data retrieved successfully.
            ///
            /// - Remark: Generated from `#/paths//organization/usage/audio_speeches/get(usage-audio-speeches)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.UsageAudioSpeeches.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.UsageAudioSpeeches.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Get audio transcriptions usage details for the organization.
    ///
    /// - Remark: HTTP `GET /organization/usage/audio_transcriptions`.
    /// - Remark: Generated from `#/paths//organization/usage/audio_transcriptions/get(usage-audio-transcriptions)`.
    public enum UsageAudioTranscriptions {
        public static let id: Swift.String = "usage-audio-transcriptions"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/organization/usage/audio_transcriptions/GET/query`.
            public struct Query: Sendable, Hashable {
                /// Start time (Unix seconds) of the query time range, inclusive.
                ///
                /// - Remark: Generated from `#/paths/organization/usage/audio_transcriptions/GET/query/start_time`.
                public var startTime: Swift.Int
                /// End time (Unix seconds) of the query time range, exclusive.
                ///
                /// - Remark: Generated from `#/paths/organization/usage/audio_transcriptions/GET/query/end_time`.
                public var endTime: Swift.Int?
                /// - Remark: Generated from `#/paths/organization/usage/audio_transcriptions/GET/query/bucket_width`.
                @frozen public enum BucketWidthPayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case _1m = "1m"
                    case _1h = "1h"
                    case _1d = "1d"
                }
                /// Width of each time bucket in response. Currently `1m`, `1h` and `1d` are supported, default to `1d`.
                ///
                /// - Remark: Generated from `#/paths/organization/usage/audio_transcriptions/GET/query/bucket_width`.
                public var bucketWidth: Operations.UsageAudioTranscriptions.Input.Query.BucketWidthPayload?
                /// Return only usage for these projects.
                ///
                /// - Remark: Generated from `#/paths/organization/usage/audio_transcriptions/GET/query/project_ids`.
                public var projectIds: [Swift.String]?
                /// Return only usage for these users.
                ///
                /// - Remark: Generated from `#/paths/organization/usage/audio_transcriptions/GET/query/user_ids`.
                public var userIds: [Swift.String]?
                /// Return only usage for these API keys.
                ///
                /// - Remark: Generated from `#/paths/organization/usage/audio_transcriptions/GET/query/api_key_ids`.
                public var apiKeyIds: [Swift.String]?
                /// Return only usage for these models.
                ///
                /// - Remark: Generated from `#/paths/organization/usage/audio_transcriptions/GET/query/models`.
                public var models: [Swift.String]?
                /// - Remark: Generated from `#/paths/organization/usage/audio_transcriptions/GET/query/GroupByPayload`.
                @frozen public enum GroupByPayloadPayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case projectId = "project_id"
                    case userId = "user_id"
                    case apiKeyId = "api_key_id"
                    case model = "model"
                }
                /// - Remark: Generated from `#/paths/organization/usage/audio_transcriptions/GET/query/group_by`.
                public typealias GroupByPayload = [Operations.UsageAudioTranscriptions.Input.Query.GroupByPayloadPayload]
                /// Group the usage data by the specified fields. Support fields include `project_id`, `user_id`, `api_key_id`, `model` or any combination of them.
                ///
                /// - Remark: Generated from `#/paths/organization/usage/audio_transcriptions/GET/query/group_by`.
                public var groupBy: Operations.UsageAudioTranscriptions.Input.Query.GroupByPayload?
                /// Specifies the number of buckets to return.
                /// - `bucket_width=1d`: default: 7, max: 31
                /// - `bucket_width=1h`: default: 24, max: 168
                /// - `bucket_width=1m`: default: 60, max: 1440
                ///
                ///
                /// - Remark: Generated from `#/paths/organization/usage/audio_transcriptions/GET/query/limit`.
                public var limit: Swift.Int?
                /// A cursor for use in pagination. Corresponding to the `next_page` field from the previous response.
                ///
                /// - Remark: Generated from `#/paths/organization/usage/audio_transcriptions/GET/query/page`.
                public var page: Swift.String?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - startTime: Start time (Unix seconds) of the query time range, inclusive.
                ///   - endTime: End time (Unix seconds) of the query time range, exclusive.
                ///   - bucketWidth: Width of each time bucket in response. Currently `1m`, `1h` and `1d` are supported, default to `1d`.
                ///   - projectIds: Return only usage for these projects.
                ///   - userIds: Return only usage for these users.
                ///   - apiKeyIds: Return only usage for these API keys.
                ///   - models: Return only usage for these models.
                ///   - groupBy: Group the usage data by the specified fields. Support fields include `project_id`, `user_id`, `api_key_id`, `model` or any combination of them.
                ///   - limit: Specifies the number of buckets to return.
                ///   - page: A cursor for use in pagination. Corresponding to the `next_page` field from the previous response.
                public init(
                    startTime: Swift.Int,
                    endTime: Swift.Int? = nil,
                    bucketWidth: Operations.UsageAudioTranscriptions.Input.Query.BucketWidthPayload? = nil,
                    projectIds: [Swift.String]? = nil,
                    userIds: [Swift.String]? = nil,
                    apiKeyIds: [Swift.String]? = nil,
                    models: [Swift.String]? = nil,
                    groupBy: Operations.UsageAudioTranscriptions.Input.Query.GroupByPayload? = nil,
                    limit: Swift.Int? = nil,
                    page: Swift.String? = nil
                ) {
                    self.startTime = startTime
                    self.endTime = endTime
                    self.bucketWidth = bucketWidth
                    self.projectIds = projectIds
                    self.userIds = userIds
                    self.apiKeyIds = apiKeyIds
                    self.models = models
                    self.groupBy = groupBy
                    self.limit = limit
                    self.page = page
                }
            }
            public var query: Operations.UsageAudioTranscriptions.Input.Query
            /// - Remark: Generated from `#/paths/organization/usage/audio_transcriptions/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.UsageAudioTranscriptions.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.UsageAudioTranscriptions.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.UsageAudioTranscriptions.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            public init(
                query: Operations.UsageAudioTranscriptions.Input.Query,
                headers: Operations.UsageAudioTranscriptions.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/organization/usage/audio_transcriptions/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/organization/usage/audio_transcriptions/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.UsageResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.UsageResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.UsageAudioTranscriptions.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.UsageAudioTranscriptions.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Usage data retrieved successfully.
            ///
            /// - Remark: Generated from `#/paths//organization/usage/audio_transcriptions/get(usage-audio-transcriptions)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.UsageAudioTranscriptions.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.UsageAudioTranscriptions.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Get code interpreter sessions usage details for the organization.
    ///
    /// - Remark: HTTP `GET /organization/usage/code_interpreter_sessions`.
    /// - Remark: Generated from `#/paths//organization/usage/code_interpreter_sessions/get(usage-code-interpreter-sessions)`.
    public enum UsageCodeInterpreterSessions {
        public static let id: Swift.String = "usage-code-interpreter-sessions"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/organization/usage/code_interpreter_sessions/GET/query`.
            public struct Query: Sendable, Hashable {
                /// Start time (Unix seconds) of the query time range, inclusive.
                ///
                /// - Remark: Generated from `#/paths/organization/usage/code_interpreter_sessions/GET/query/start_time`.
                public var startTime: Swift.Int
                /// End time (Unix seconds) of the query time range, exclusive.
                ///
                /// - Remark: Generated from `#/paths/organization/usage/code_interpreter_sessions/GET/query/end_time`.
                public var endTime: Swift.Int?
                /// - Remark: Generated from `#/paths/organization/usage/code_interpreter_sessions/GET/query/bucket_width`.
                @frozen public enum BucketWidthPayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case _1m = "1m"
                    case _1h = "1h"
                    case _1d = "1d"
                }
                /// Width of each time bucket in response. Currently `1m`, `1h` and `1d` are supported, default to `1d`.
                ///
                /// - Remark: Generated from `#/paths/organization/usage/code_interpreter_sessions/GET/query/bucket_width`.
                public var bucketWidth: Operations.UsageCodeInterpreterSessions.Input.Query.BucketWidthPayload?
                /// Return only usage for these projects.
                ///
                /// - Remark: Generated from `#/paths/organization/usage/code_interpreter_sessions/GET/query/project_ids`.
                public var projectIds: [Swift.String]?
                /// - Remark: Generated from `#/paths/organization/usage/code_interpreter_sessions/GET/query/GroupByPayload`.
                @frozen public enum GroupByPayloadPayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case projectId = "project_id"
                }
                /// - Remark: Generated from `#/paths/organization/usage/code_interpreter_sessions/GET/query/group_by`.
                public typealias GroupByPayload = [Operations.UsageCodeInterpreterSessions.Input.Query.GroupByPayloadPayload]
                /// Group the usage data by the specified fields. Support fields include `project_id`.
                ///
                /// - Remark: Generated from `#/paths/organization/usage/code_interpreter_sessions/GET/query/group_by`.
                public var groupBy: Operations.UsageCodeInterpreterSessions.Input.Query.GroupByPayload?
                /// Specifies the number of buckets to return.
                /// - `bucket_width=1d`: default: 7, max: 31
                /// - `bucket_width=1h`: default: 24, max: 168
                /// - `bucket_width=1m`: default: 60, max: 1440
                ///
                ///
                /// - Remark: Generated from `#/paths/organization/usage/code_interpreter_sessions/GET/query/limit`.
                public var limit: Swift.Int?
                /// A cursor for use in pagination. Corresponding to the `next_page` field from the previous response.
                ///
                /// - Remark: Generated from `#/paths/organization/usage/code_interpreter_sessions/GET/query/page`.
                public var page: Swift.String?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - startTime: Start time (Unix seconds) of the query time range, inclusive.
                ///   - endTime: End time (Unix seconds) of the query time range, exclusive.
                ///   - bucketWidth: Width of each time bucket in response. Currently `1m`, `1h` and `1d` are supported, default to `1d`.
                ///   - projectIds: Return only usage for these projects.
                ///   - groupBy: Group the usage data by the specified fields. Support fields include `project_id`.
                ///   - limit: Specifies the number of buckets to return.
                ///   - page: A cursor for use in pagination. Corresponding to the `next_page` field from the previous response.
                public init(
                    startTime: Swift.Int,
                    endTime: Swift.Int? = nil,
                    bucketWidth: Operations.UsageCodeInterpreterSessions.Input.Query.BucketWidthPayload? = nil,
                    projectIds: [Swift.String]? = nil,
                    groupBy: Operations.UsageCodeInterpreterSessions.Input.Query.GroupByPayload? = nil,
                    limit: Swift.Int? = nil,
                    page: Swift.String? = nil
                ) {
                    self.startTime = startTime
                    self.endTime = endTime
                    self.bucketWidth = bucketWidth
                    self.projectIds = projectIds
                    self.groupBy = groupBy
                    self.limit = limit
                    self.page = page
                }
            }
            public var query: Operations.UsageCodeInterpreterSessions.Input.Query
            /// - Remark: Generated from `#/paths/organization/usage/code_interpreter_sessions/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.UsageCodeInterpreterSessions.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.UsageCodeInterpreterSessions.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.UsageCodeInterpreterSessions.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            public init(
                query: Operations.UsageCodeInterpreterSessions.Input.Query,
                headers: Operations.UsageCodeInterpreterSessions.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/organization/usage/code_interpreter_sessions/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/organization/usage/code_interpreter_sessions/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.UsageResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.UsageResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.UsageCodeInterpreterSessions.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.UsageCodeInterpreterSessions.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Usage data retrieved successfully.
            ///
            /// - Remark: Generated from `#/paths//organization/usage/code_interpreter_sessions/get(usage-code-interpreter-sessions)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.UsageCodeInterpreterSessions.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.UsageCodeInterpreterSessions.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Get completions usage details for the organization.
    ///
    /// - Remark: HTTP `GET /organization/usage/completions`.
    /// - Remark: Generated from `#/paths//organization/usage/completions/get(usage-completions)`.
    public enum UsageCompletions {
        public static let id: Swift.String = "usage-completions"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/organization/usage/completions/GET/query`.
            public struct Query: Sendable, Hashable {
                /// Start time (Unix seconds) of the query time range, inclusive.
                ///
                /// - Remark: Generated from `#/paths/organization/usage/completions/GET/query/start_time`.
                public var startTime: Swift.Int
                /// End time (Unix seconds) of the query time range, exclusive.
                ///
                /// - Remark: Generated from `#/paths/organization/usage/completions/GET/query/end_time`.
                public var endTime: Swift.Int?
                /// - Remark: Generated from `#/paths/organization/usage/completions/GET/query/bucket_width`.
                @frozen public enum BucketWidthPayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case _1m = "1m"
                    case _1h = "1h"
                    case _1d = "1d"
                }
                /// Width of each time bucket in response. Currently `1m`, `1h` and `1d` are supported, default to `1d`.
                ///
                /// - Remark: Generated from `#/paths/organization/usage/completions/GET/query/bucket_width`.
                public var bucketWidth: Operations.UsageCompletions.Input.Query.BucketWidthPayload?
                /// Return only usage for these projects.
                ///
                /// - Remark: Generated from `#/paths/organization/usage/completions/GET/query/project_ids`.
                public var projectIds: [Swift.String]?
                /// Return only usage for these users.
                ///
                /// - Remark: Generated from `#/paths/organization/usage/completions/GET/query/user_ids`.
                public var userIds: [Swift.String]?
                /// Return only usage for these API keys.
                ///
                /// - Remark: Generated from `#/paths/organization/usage/completions/GET/query/api_key_ids`.
                public var apiKeyIds: [Swift.String]?
                /// Return only usage for these models.
                ///
                /// - Remark: Generated from `#/paths/organization/usage/completions/GET/query/models`.
                public var models: [Swift.String]?
                /// If `true`, return batch jobs only. If `false`, return non-batch jobs only. By default, return both.
                ///
                ///
                /// - Remark: Generated from `#/paths/organization/usage/completions/GET/query/batch`.
                public var batch: Swift.Bool?
                /// - Remark: Generated from `#/paths/organization/usage/completions/GET/query/GroupByPayload`.
                @frozen public enum GroupByPayloadPayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case projectId = "project_id"
                    case userId = "user_id"
                    case apiKeyId = "api_key_id"
                    case model = "model"
                    case batch = "batch"
                }
                /// - Remark: Generated from `#/paths/organization/usage/completions/GET/query/group_by`.
                public typealias GroupByPayload = [Operations.UsageCompletions.Input.Query.GroupByPayloadPayload]
                /// Group the usage data by the specified fields. Support fields include `project_id`, `user_id`, `api_key_id`, `model`, `batch` or any combination of them.
                ///
                /// - Remark: Generated from `#/paths/organization/usage/completions/GET/query/group_by`.
                public var groupBy: Operations.UsageCompletions.Input.Query.GroupByPayload?
                /// Specifies the number of buckets to return.
                /// - `bucket_width=1d`: default: 7, max: 31
                /// - `bucket_width=1h`: default: 24, max: 168
                /// - `bucket_width=1m`: default: 60, max: 1440
                ///
                ///
                /// - Remark: Generated from `#/paths/organization/usage/completions/GET/query/limit`.
                public var limit: Swift.Int?
                /// A cursor for use in pagination. Corresponding to the `next_page` field from the previous response.
                ///
                /// - Remark: Generated from `#/paths/organization/usage/completions/GET/query/page`.
                public var page: Swift.String?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - startTime: Start time (Unix seconds) of the query time range, inclusive.
                ///   - endTime: End time (Unix seconds) of the query time range, exclusive.
                ///   - bucketWidth: Width of each time bucket in response. Currently `1m`, `1h` and `1d` are supported, default to `1d`.
                ///   - projectIds: Return only usage for these projects.
                ///   - userIds: Return only usage for these users.
                ///   - apiKeyIds: Return only usage for these API keys.
                ///   - models: Return only usage for these models.
                ///   - batch: If `true`, return batch jobs only. If `false`, return non-batch jobs only. By default, return both.
                ///   - groupBy: Group the usage data by the specified fields. Support fields include `project_id`, `user_id`, `api_key_id`, `model`, `batch` or any combination of them.
                ///   - limit: Specifies the number of buckets to return.
                ///   - page: A cursor for use in pagination. Corresponding to the `next_page` field from the previous response.
                public init(
                    startTime: Swift.Int,
                    endTime: Swift.Int? = nil,
                    bucketWidth: Operations.UsageCompletions.Input.Query.BucketWidthPayload? = nil,
                    projectIds: [Swift.String]? = nil,
                    userIds: [Swift.String]? = nil,
                    apiKeyIds: [Swift.String]? = nil,
                    models: [Swift.String]? = nil,
                    batch: Swift.Bool? = nil,
                    groupBy: Operations.UsageCompletions.Input.Query.GroupByPayload? = nil,
                    limit: Swift.Int? = nil,
                    page: Swift.String? = nil
                ) {
                    self.startTime = startTime
                    self.endTime = endTime
                    self.bucketWidth = bucketWidth
                    self.projectIds = projectIds
                    self.userIds = userIds
                    self.apiKeyIds = apiKeyIds
                    self.models = models
                    self.batch = batch
                    self.groupBy = groupBy
                    self.limit = limit
                    self.page = page
                }
            }
            public var query: Operations.UsageCompletions.Input.Query
            /// - Remark: Generated from `#/paths/organization/usage/completions/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.UsageCompletions.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.UsageCompletions.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.UsageCompletions.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            public init(
                query: Operations.UsageCompletions.Input.Query,
                headers: Operations.UsageCompletions.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/organization/usage/completions/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/organization/usage/completions/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.UsageResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.UsageResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.UsageCompletions.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.UsageCompletions.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Usage data retrieved successfully.
            ///
            /// - Remark: Generated from `#/paths//organization/usage/completions/get(usage-completions)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.UsageCompletions.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.UsageCompletions.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Get embeddings usage details for the organization.
    ///
    /// - Remark: HTTP `GET /organization/usage/embeddings`.
    /// - Remark: Generated from `#/paths//organization/usage/embeddings/get(usage-embeddings)`.
    public enum UsageEmbeddings {
        public static let id: Swift.String = "usage-embeddings"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/organization/usage/embeddings/GET/query`.
            public struct Query: Sendable, Hashable {
                /// Start time (Unix seconds) of the query time range, inclusive.
                ///
                /// - Remark: Generated from `#/paths/organization/usage/embeddings/GET/query/start_time`.
                public var startTime: Swift.Int
                /// End time (Unix seconds) of the query time range, exclusive.
                ///
                /// - Remark: Generated from `#/paths/organization/usage/embeddings/GET/query/end_time`.
                public var endTime: Swift.Int?
                /// - Remark: Generated from `#/paths/organization/usage/embeddings/GET/query/bucket_width`.
                @frozen public enum BucketWidthPayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case _1m = "1m"
                    case _1h = "1h"
                    case _1d = "1d"
                }
                /// Width of each time bucket in response. Currently `1m`, `1h` and `1d` are supported, default to `1d`.
                ///
                /// - Remark: Generated from `#/paths/organization/usage/embeddings/GET/query/bucket_width`.
                public var bucketWidth: Operations.UsageEmbeddings.Input.Query.BucketWidthPayload?
                /// Return only usage for these projects.
                ///
                /// - Remark: Generated from `#/paths/organization/usage/embeddings/GET/query/project_ids`.
                public var projectIds: [Swift.String]?
                /// Return only usage for these users.
                ///
                /// - Remark: Generated from `#/paths/organization/usage/embeddings/GET/query/user_ids`.
                public var userIds: [Swift.String]?
                /// Return only usage for these API keys.
                ///
                /// - Remark: Generated from `#/paths/organization/usage/embeddings/GET/query/api_key_ids`.
                public var apiKeyIds: [Swift.String]?
                /// Return only usage for these models.
                ///
                /// - Remark: Generated from `#/paths/organization/usage/embeddings/GET/query/models`.
                public var models: [Swift.String]?
                /// - Remark: Generated from `#/paths/organization/usage/embeddings/GET/query/GroupByPayload`.
                @frozen public enum GroupByPayloadPayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case projectId = "project_id"
                    case userId = "user_id"
                    case apiKeyId = "api_key_id"
                    case model = "model"
                }
                /// - Remark: Generated from `#/paths/organization/usage/embeddings/GET/query/group_by`.
                public typealias GroupByPayload = [Operations.UsageEmbeddings.Input.Query.GroupByPayloadPayload]
                /// Group the usage data by the specified fields. Support fields include `project_id`, `user_id`, `api_key_id`, `model` or any combination of them.
                ///
                /// - Remark: Generated from `#/paths/organization/usage/embeddings/GET/query/group_by`.
                public var groupBy: Operations.UsageEmbeddings.Input.Query.GroupByPayload?
                /// Specifies the number of buckets to return.
                /// - `bucket_width=1d`: default: 7, max: 31
                /// - `bucket_width=1h`: default: 24, max: 168
                /// - `bucket_width=1m`: default: 60, max: 1440
                ///
                ///
                /// - Remark: Generated from `#/paths/organization/usage/embeddings/GET/query/limit`.
                public var limit: Swift.Int?
                /// A cursor for use in pagination. Corresponding to the `next_page` field from the previous response.
                ///
                /// - Remark: Generated from `#/paths/organization/usage/embeddings/GET/query/page`.
                public var page: Swift.String?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - startTime: Start time (Unix seconds) of the query time range, inclusive.
                ///   - endTime: End time (Unix seconds) of the query time range, exclusive.
                ///   - bucketWidth: Width of each time bucket in response. Currently `1m`, `1h` and `1d` are supported, default to `1d`.
                ///   - projectIds: Return only usage for these projects.
                ///   - userIds: Return only usage for these users.
                ///   - apiKeyIds: Return only usage for these API keys.
                ///   - models: Return only usage for these models.
                ///   - groupBy: Group the usage data by the specified fields. Support fields include `project_id`, `user_id`, `api_key_id`, `model` or any combination of them.
                ///   - limit: Specifies the number of buckets to return.
                ///   - page: A cursor for use in pagination. Corresponding to the `next_page` field from the previous response.
                public init(
                    startTime: Swift.Int,
                    endTime: Swift.Int? = nil,
                    bucketWidth: Operations.UsageEmbeddings.Input.Query.BucketWidthPayload? = nil,
                    projectIds: [Swift.String]? = nil,
                    userIds: [Swift.String]? = nil,
                    apiKeyIds: [Swift.String]? = nil,
                    models: [Swift.String]? = nil,
                    groupBy: Operations.UsageEmbeddings.Input.Query.GroupByPayload? = nil,
                    limit: Swift.Int? = nil,
                    page: Swift.String? = nil
                ) {
                    self.startTime = startTime
                    self.endTime = endTime
                    self.bucketWidth = bucketWidth
                    self.projectIds = projectIds
                    self.userIds = userIds
                    self.apiKeyIds = apiKeyIds
                    self.models = models
                    self.groupBy = groupBy
                    self.limit = limit
                    self.page = page
                }
            }
            public var query: Operations.UsageEmbeddings.Input.Query
            /// - Remark: Generated from `#/paths/organization/usage/embeddings/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.UsageEmbeddings.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.UsageEmbeddings.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.UsageEmbeddings.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            public init(
                query: Operations.UsageEmbeddings.Input.Query,
                headers: Operations.UsageEmbeddings.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/organization/usage/embeddings/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/organization/usage/embeddings/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.UsageResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.UsageResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.UsageEmbeddings.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.UsageEmbeddings.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Usage data retrieved successfully.
            ///
            /// - Remark: Generated from `#/paths//organization/usage/embeddings/get(usage-embeddings)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.UsageEmbeddings.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.UsageEmbeddings.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Get images usage details for the organization.
    ///
    /// - Remark: HTTP `GET /organization/usage/images`.
    /// - Remark: Generated from `#/paths//organization/usage/images/get(usage-images)`.
    public enum UsageImages {
        public static let id: Swift.String = "usage-images"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/organization/usage/images/GET/query`.
            public struct Query: Sendable, Hashable {
                /// Start time (Unix seconds) of the query time range, inclusive.
                ///
                /// - Remark: Generated from `#/paths/organization/usage/images/GET/query/start_time`.
                public var startTime: Swift.Int
                /// End time (Unix seconds) of the query time range, exclusive.
                ///
                /// - Remark: Generated from `#/paths/organization/usage/images/GET/query/end_time`.
                public var endTime: Swift.Int?
                /// - Remark: Generated from `#/paths/organization/usage/images/GET/query/bucket_width`.
                @frozen public enum BucketWidthPayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case _1m = "1m"
                    case _1h = "1h"
                    case _1d = "1d"
                }
                /// Width of each time bucket in response. Currently `1m`, `1h` and `1d` are supported, default to `1d`.
                ///
                /// - Remark: Generated from `#/paths/organization/usage/images/GET/query/bucket_width`.
                public var bucketWidth: Operations.UsageImages.Input.Query.BucketWidthPayload?
                /// - Remark: Generated from `#/paths/organization/usage/images/GET/query/SourcesPayload`.
                @frozen public enum SourcesPayloadPayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case image_generation = "image.generation"
                    case image_edit = "image.edit"
                    case image_variation = "image.variation"
                }
                /// - Remark: Generated from `#/paths/organization/usage/images/GET/query/sources`.
                public typealias SourcesPayload = [Operations.UsageImages.Input.Query.SourcesPayloadPayload]
                /// Return only usages for these sources. Possible values are `image.generation`, `image.edit`, `image.variation` or any combination of them.
                ///
                /// - Remark: Generated from `#/paths/organization/usage/images/GET/query/sources`.
                public var sources: Operations.UsageImages.Input.Query.SourcesPayload?
                /// - Remark: Generated from `#/paths/organization/usage/images/GET/query/SizesPayload`.
                @frozen public enum SizesPayloadPayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case _256x256 = "256x256"
                    case _512x512 = "512x512"
                    case _1024x1024 = "1024x1024"
                    case _1792x1792 = "1792x1792"
                    case _1024x1792 = "1024x1792"
                }
                /// - Remark: Generated from `#/paths/organization/usage/images/GET/query/sizes`.
                public typealias SizesPayload = [Operations.UsageImages.Input.Query.SizesPayloadPayload]
                /// Return only usages for these image sizes. Possible values are `256x256`, `512x512`, `1024x1024`, `1792x1792`, `1024x1792` or any combination of them.
                ///
                /// - Remark: Generated from `#/paths/organization/usage/images/GET/query/sizes`.
                public var sizes: Operations.UsageImages.Input.Query.SizesPayload?
                /// Return only usage for these projects.
                ///
                /// - Remark: Generated from `#/paths/organization/usage/images/GET/query/project_ids`.
                public var projectIds: [Swift.String]?
                /// Return only usage for these users.
                ///
                /// - Remark: Generated from `#/paths/organization/usage/images/GET/query/user_ids`.
                public var userIds: [Swift.String]?
                /// Return only usage for these API keys.
                ///
                /// - Remark: Generated from `#/paths/organization/usage/images/GET/query/api_key_ids`.
                public var apiKeyIds: [Swift.String]?
                /// Return only usage for these models.
                ///
                /// - Remark: Generated from `#/paths/organization/usage/images/GET/query/models`.
                public var models: [Swift.String]?
                /// - Remark: Generated from `#/paths/organization/usage/images/GET/query/GroupByPayload`.
                @frozen public enum GroupByPayloadPayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case projectId = "project_id"
                    case userId = "user_id"
                    case apiKeyId = "api_key_id"
                    case model = "model"
                    case size = "size"
                    case source = "source"
                }
                /// - Remark: Generated from `#/paths/organization/usage/images/GET/query/group_by`.
                public typealias GroupByPayload = [Operations.UsageImages.Input.Query.GroupByPayloadPayload]
                /// Group the usage data by the specified fields. Support fields include `project_id`, `user_id`, `api_key_id`, `model`, `size`, `source` or any combination of them.
                ///
                /// - Remark: Generated from `#/paths/organization/usage/images/GET/query/group_by`.
                public var groupBy: Operations.UsageImages.Input.Query.GroupByPayload?
                /// Specifies the number of buckets to return.
                /// - `bucket_width=1d`: default: 7, max: 31
                /// - `bucket_width=1h`: default: 24, max: 168
                /// - `bucket_width=1m`: default: 60, max: 1440
                ///
                ///
                /// - Remark: Generated from `#/paths/organization/usage/images/GET/query/limit`.
                public var limit: Swift.Int?
                /// A cursor for use in pagination. Corresponding to the `next_page` field from the previous response.
                ///
                /// - Remark: Generated from `#/paths/organization/usage/images/GET/query/page`.
                public var page: Swift.String?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - startTime: Start time (Unix seconds) of the query time range, inclusive.
                ///   - endTime: End time (Unix seconds) of the query time range, exclusive.
                ///   - bucketWidth: Width of each time bucket in response. Currently `1m`, `1h` and `1d` are supported, default to `1d`.
                ///   - sources: Return only usages for these sources. Possible values are `image.generation`, `image.edit`, `image.variation` or any combination of them.
                ///   - sizes: Return only usages for these image sizes. Possible values are `256x256`, `512x512`, `1024x1024`, `1792x1792`, `1024x1792` or any combination of them.
                ///   - projectIds: Return only usage for these projects.
                ///   - userIds: Return only usage for these users.
                ///   - apiKeyIds: Return only usage for these API keys.
                ///   - models: Return only usage for these models.
                ///   - groupBy: Group the usage data by the specified fields. Support fields include `project_id`, `user_id`, `api_key_id`, `model`, `size`, `source` or any combination of them.
                ///   - limit: Specifies the number of buckets to return.
                ///   - page: A cursor for use in pagination. Corresponding to the `next_page` field from the previous response.
                public init(
                    startTime: Swift.Int,
                    endTime: Swift.Int? = nil,
                    bucketWidth: Operations.UsageImages.Input.Query.BucketWidthPayload? = nil,
                    sources: Operations.UsageImages.Input.Query.SourcesPayload? = nil,
                    sizes: Operations.UsageImages.Input.Query.SizesPayload? = nil,
                    projectIds: [Swift.String]? = nil,
                    userIds: [Swift.String]? = nil,
                    apiKeyIds: [Swift.String]? = nil,
                    models: [Swift.String]? = nil,
                    groupBy: Operations.UsageImages.Input.Query.GroupByPayload? = nil,
                    limit: Swift.Int? = nil,
                    page: Swift.String? = nil
                ) {
                    self.startTime = startTime
                    self.endTime = endTime
                    self.bucketWidth = bucketWidth
                    self.sources = sources
                    self.sizes = sizes
                    self.projectIds = projectIds
                    self.userIds = userIds
                    self.apiKeyIds = apiKeyIds
                    self.models = models
                    self.groupBy = groupBy
                    self.limit = limit
                    self.page = page
                }
            }
            public var query: Operations.UsageImages.Input.Query
            /// - Remark: Generated from `#/paths/organization/usage/images/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.UsageImages.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.UsageImages.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.UsageImages.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            public init(
                query: Operations.UsageImages.Input.Query,
                headers: Operations.UsageImages.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/organization/usage/images/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/organization/usage/images/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.UsageResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.UsageResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.UsageImages.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.UsageImages.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Usage data retrieved successfully.
            ///
            /// - Remark: Generated from `#/paths//organization/usage/images/get(usage-images)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.UsageImages.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.UsageImages.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Get moderations usage details for the organization.
    ///
    /// - Remark: HTTP `GET /organization/usage/moderations`.
    /// - Remark: Generated from `#/paths//organization/usage/moderations/get(usage-moderations)`.
    public enum UsageModerations {
        public static let id: Swift.String = "usage-moderations"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/organization/usage/moderations/GET/query`.
            public struct Query: Sendable, Hashable {
                /// Start time (Unix seconds) of the query time range, inclusive.
                ///
                /// - Remark: Generated from `#/paths/organization/usage/moderations/GET/query/start_time`.
                public var startTime: Swift.Int
                /// End time (Unix seconds) of the query time range, exclusive.
                ///
                /// - Remark: Generated from `#/paths/organization/usage/moderations/GET/query/end_time`.
                public var endTime: Swift.Int?
                /// - Remark: Generated from `#/paths/organization/usage/moderations/GET/query/bucket_width`.
                @frozen public enum BucketWidthPayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case _1m = "1m"
                    case _1h = "1h"
                    case _1d = "1d"
                }
                /// Width of each time bucket in response. Currently `1m`, `1h` and `1d` are supported, default to `1d`.
                ///
                /// - Remark: Generated from `#/paths/organization/usage/moderations/GET/query/bucket_width`.
                public var bucketWidth: Operations.UsageModerations.Input.Query.BucketWidthPayload?
                /// Return only usage for these projects.
                ///
                /// - Remark: Generated from `#/paths/organization/usage/moderations/GET/query/project_ids`.
                public var projectIds: [Swift.String]?
                /// Return only usage for these users.
                ///
                /// - Remark: Generated from `#/paths/organization/usage/moderations/GET/query/user_ids`.
                public var userIds: [Swift.String]?
                /// Return only usage for these API keys.
                ///
                /// - Remark: Generated from `#/paths/organization/usage/moderations/GET/query/api_key_ids`.
                public var apiKeyIds: [Swift.String]?
                /// Return only usage for these models.
                ///
                /// - Remark: Generated from `#/paths/organization/usage/moderations/GET/query/models`.
                public var models: [Swift.String]?
                /// - Remark: Generated from `#/paths/organization/usage/moderations/GET/query/GroupByPayload`.
                @frozen public enum GroupByPayloadPayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case projectId = "project_id"
                    case userId = "user_id"
                    case apiKeyId = "api_key_id"
                    case model = "model"
                }
                /// - Remark: Generated from `#/paths/organization/usage/moderations/GET/query/group_by`.
                public typealias GroupByPayload = [Operations.UsageModerations.Input.Query.GroupByPayloadPayload]
                /// Group the usage data by the specified fields. Support fields include `project_id`, `user_id`, `api_key_id`, `model` or any combination of them.
                ///
                /// - Remark: Generated from `#/paths/organization/usage/moderations/GET/query/group_by`.
                public var groupBy: Operations.UsageModerations.Input.Query.GroupByPayload?
                /// Specifies the number of buckets to return.
                /// - `bucket_width=1d`: default: 7, max: 31
                /// - `bucket_width=1h`: default: 24, max: 168
                /// - `bucket_width=1m`: default: 60, max: 1440
                ///
                ///
                /// - Remark: Generated from `#/paths/organization/usage/moderations/GET/query/limit`.
                public var limit: Swift.Int?
                /// A cursor for use in pagination. Corresponding to the `next_page` field from the previous response.
                ///
                /// - Remark: Generated from `#/paths/organization/usage/moderations/GET/query/page`.
                public var page: Swift.String?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - startTime: Start time (Unix seconds) of the query time range, inclusive.
                ///   - endTime: End time (Unix seconds) of the query time range, exclusive.
                ///   - bucketWidth: Width of each time bucket in response. Currently `1m`, `1h` and `1d` are supported, default to `1d`.
                ///   - projectIds: Return only usage for these projects.
                ///   - userIds: Return only usage for these users.
                ///   - apiKeyIds: Return only usage for these API keys.
                ///   - models: Return only usage for these models.
                ///   - groupBy: Group the usage data by the specified fields. Support fields include `project_id`, `user_id`, `api_key_id`, `model` or any combination of them.
                ///   - limit: Specifies the number of buckets to return.
                ///   - page: A cursor for use in pagination. Corresponding to the `next_page` field from the previous response.
                public init(
                    startTime: Swift.Int,
                    endTime: Swift.Int? = nil,
                    bucketWidth: Operations.UsageModerations.Input.Query.BucketWidthPayload? = nil,
                    projectIds: [Swift.String]? = nil,
                    userIds: [Swift.String]? = nil,
                    apiKeyIds: [Swift.String]? = nil,
                    models: [Swift.String]? = nil,
                    groupBy: Operations.UsageModerations.Input.Query.GroupByPayload? = nil,
                    limit: Swift.Int? = nil,
                    page: Swift.String? = nil
                ) {
                    self.startTime = startTime
                    self.endTime = endTime
                    self.bucketWidth = bucketWidth
                    self.projectIds = projectIds
                    self.userIds = userIds
                    self.apiKeyIds = apiKeyIds
                    self.models = models
                    self.groupBy = groupBy
                    self.limit = limit
                    self.page = page
                }
            }
            public var query: Operations.UsageModerations.Input.Query
            /// - Remark: Generated from `#/paths/organization/usage/moderations/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.UsageModerations.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.UsageModerations.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.UsageModerations.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            public init(
                query: Operations.UsageModerations.Input.Query,
                headers: Operations.UsageModerations.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/organization/usage/moderations/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/organization/usage/moderations/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.UsageResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.UsageResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.UsageModerations.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.UsageModerations.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Usage data retrieved successfully.
            ///
            /// - Remark: Generated from `#/paths//organization/usage/moderations/get(usage-moderations)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.UsageModerations.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.UsageModerations.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Get vector stores usage details for the organization.
    ///
    /// - Remark: HTTP `GET /organization/usage/vector_stores`.
    /// - Remark: Generated from `#/paths//organization/usage/vector_stores/get(usage-vector-stores)`.
    public enum UsageVectorStores {
        public static let id: Swift.String = "usage-vector-stores"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/organization/usage/vector_stores/GET/query`.
            public struct Query: Sendable, Hashable {
                /// Start time (Unix seconds) of the query time range, inclusive.
                ///
                /// - Remark: Generated from `#/paths/organization/usage/vector_stores/GET/query/start_time`.
                public var startTime: Swift.Int
                /// End time (Unix seconds) of the query time range, exclusive.
                ///
                /// - Remark: Generated from `#/paths/organization/usage/vector_stores/GET/query/end_time`.
                public var endTime: Swift.Int?
                /// - Remark: Generated from `#/paths/organization/usage/vector_stores/GET/query/bucket_width`.
                @frozen public enum BucketWidthPayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case _1m = "1m"
                    case _1h = "1h"
                    case _1d = "1d"
                }
                /// Width of each time bucket in response. Currently `1m`, `1h` and `1d` are supported, default to `1d`.
                ///
                /// - Remark: Generated from `#/paths/organization/usage/vector_stores/GET/query/bucket_width`.
                public var bucketWidth: Operations.UsageVectorStores.Input.Query.BucketWidthPayload?
                /// Return only usage for these projects.
                ///
                /// - Remark: Generated from `#/paths/organization/usage/vector_stores/GET/query/project_ids`.
                public var projectIds: [Swift.String]?
                /// - Remark: Generated from `#/paths/organization/usage/vector_stores/GET/query/GroupByPayload`.
                @frozen public enum GroupByPayloadPayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case projectId = "project_id"
                }
                /// - Remark: Generated from `#/paths/organization/usage/vector_stores/GET/query/group_by`.
                public typealias GroupByPayload = [Operations.UsageVectorStores.Input.Query.GroupByPayloadPayload]
                /// Group the usage data by the specified fields. Support fields include `project_id`.
                ///
                /// - Remark: Generated from `#/paths/organization/usage/vector_stores/GET/query/group_by`.
                public var groupBy: Operations.UsageVectorStores.Input.Query.GroupByPayload?
                /// Specifies the number of buckets to return.
                /// - `bucket_width=1d`: default: 7, max: 31
                /// - `bucket_width=1h`: default: 24, max: 168
                /// - `bucket_width=1m`: default: 60, max: 1440
                ///
                ///
                /// - Remark: Generated from `#/paths/organization/usage/vector_stores/GET/query/limit`.
                public var limit: Swift.Int?
                /// A cursor for use in pagination. Corresponding to the `next_page` field from the previous response.
                ///
                /// - Remark: Generated from `#/paths/organization/usage/vector_stores/GET/query/page`.
                public var page: Swift.String?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - startTime: Start time (Unix seconds) of the query time range, inclusive.
                ///   - endTime: End time (Unix seconds) of the query time range, exclusive.
                ///   - bucketWidth: Width of each time bucket in response. Currently `1m`, `1h` and `1d` are supported, default to `1d`.
                ///   - projectIds: Return only usage for these projects.
                ///   - groupBy: Group the usage data by the specified fields. Support fields include `project_id`.
                ///   - limit: Specifies the number of buckets to return.
                ///   - page: A cursor for use in pagination. Corresponding to the `next_page` field from the previous response.
                public init(
                    startTime: Swift.Int,
                    endTime: Swift.Int? = nil,
                    bucketWidth: Operations.UsageVectorStores.Input.Query.BucketWidthPayload? = nil,
                    projectIds: [Swift.String]? = nil,
                    groupBy: Operations.UsageVectorStores.Input.Query.GroupByPayload? = nil,
                    limit: Swift.Int? = nil,
                    page: Swift.String? = nil
                ) {
                    self.startTime = startTime
                    self.endTime = endTime
                    self.bucketWidth = bucketWidth
                    self.projectIds = projectIds
                    self.groupBy = groupBy
                    self.limit = limit
                    self.page = page
                }
            }
            public var query: Operations.UsageVectorStores.Input.Query
            /// - Remark: Generated from `#/paths/organization/usage/vector_stores/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.UsageVectorStores.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.UsageVectorStores.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.UsageVectorStores.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            public init(
                query: Operations.UsageVectorStores.Input.Query,
                headers: Operations.UsageVectorStores.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/organization/usage/vector_stores/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/organization/usage/vector_stores/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.UsageResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.UsageResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.UsageVectorStores.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.UsageVectorStores.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Usage data retrieved successfully.
            ///
            /// - Remark: Generated from `#/paths//organization/usage/vector_stores/get(usage-vector-stores)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.UsageVectorStores.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.UsageVectorStores.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Lists all of the users in the organization.
    ///
    /// - Remark: HTTP `GET /organization/users`.
    /// - Remark: Generated from `#/paths//organization/users/get(list-users)`.
    public enum ListUsers {
        public static let id: Swift.String = "list-users"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/organization/users/GET/query`.
            public struct Query: Sendable, Hashable {
                /// A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.
                ///
                ///
                /// - Remark: Generated from `#/paths/organization/users/GET/query/limit`.
                public var limit: Swift.Int?
                /// A cursor for use in pagination. `after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after=obj_foo in order to fetch the next page of the list.
                ///
                ///
                /// - Remark: Generated from `#/paths/organization/users/GET/query/after`.
                public var after: Swift.String?
                /// Filter by the email address of users.
                ///
                /// - Remark: Generated from `#/paths/organization/users/GET/query/emails`.
                public var emails: [Swift.String]?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - limit: A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.
                ///   - after: A cursor for use in pagination. `after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after=obj_foo in order to fetch the next page of the list.
                ///   - emails: Filter by the email address of users.
                public init(
                    limit: Swift.Int? = nil,
                    after: Swift.String? = nil,
                    emails: [Swift.String]? = nil
                ) {
                    self.limit = limit
                    self.after = after
                    self.emails = emails
                }
            }
            public var query: Operations.ListUsers.Input.Query
            /// - Remark: Generated from `#/paths/organization/users/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ListUsers.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ListUsers.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.ListUsers.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            public init(
                query: Operations.ListUsers.Input.Query = .init(),
                headers: Operations.ListUsers.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/organization/users/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/organization/users/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.UserListResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.UserListResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.ListUsers.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.ListUsers.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Users listed successfully.
            ///
            /// - Remark: Generated from `#/paths//organization/users/get(list-users)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.ListUsers.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.ListUsers.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Retrieves a user by their identifier.
    ///
    /// - Remark: HTTP `GET /organization/users/{user_id}`.
    /// - Remark: Generated from `#/paths//organization/users/{user_id}/get(retrieve-user)`.
    public enum RetrieveUser {
        public static let id: Swift.String = "retrieve-user"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/organization/users/{user_id}/GET/path`.
            public struct Path: Sendable, Hashable {
                /// The ID of the user.
                ///
                /// - Remark: Generated from `#/paths/organization/users/{user_id}/GET/path/user_id`.
                public var userId: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - userId: The ID of the user.
                public init(userId: Swift.String) {
                    self.userId = userId
                }
            }
            public var path: Operations.RetrieveUser.Input.Path
            /// - Remark: Generated from `#/paths/organization/users/{user_id}/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.RetrieveUser.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.RetrieveUser.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.RetrieveUser.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            public init(
                path: Operations.RetrieveUser.Input.Path,
                headers: Operations.RetrieveUser.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/organization/users/{user_id}/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/organization/users/{user_id}/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.User)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.User {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.RetrieveUser.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.RetrieveUser.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// User retrieved successfully.
            ///
            /// - Remark: Generated from `#/paths//organization/users/{user_id}/get(retrieve-user)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.RetrieveUser.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.RetrieveUser.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Modifies a user's role in the organization.
    ///
    /// - Remark: HTTP `POST /organization/users/{user_id}`.
    /// - Remark: Generated from `#/paths//organization/users/{user_id}/post(modify-user)`.
    public enum ModifyUser {
        public static let id: Swift.String = "modify-user"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/organization/users/{user_id}/POST/path`.
            public struct Path: Sendable, Hashable {
                /// The ID of the user.
                ///
                /// - Remark: Generated from `#/paths/organization/users/{user_id}/POST/path/user_id`.
                public var userId: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - userId: The ID of the user.
                public init(userId: Swift.String) {
                    self.userId = userId
                }
            }
            public var path: Operations.ModifyUser.Input.Path
            /// - Remark: Generated from `#/paths/organization/users/{user_id}/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ModifyUser.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ModifyUser.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.ModifyUser.Input.Headers
            /// - Remark: Generated from `#/paths/organization/users/{user_id}/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/organization/users/{user_id}/POST/requestBody/content/application\/json`.
                case json(Components.Schemas.UserRoleUpdateRequest)
            }
            public var body: Operations.ModifyUser.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            ///   - body:
            public init(
                path: Operations.ModifyUser.Input.Path,
                headers: Operations.ModifyUser.Input.Headers = .init(),
                body: Operations.ModifyUser.Input.Body
            ) {
                self.path = path
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/organization/users/{user_id}/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/organization/users/{user_id}/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.User)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.User {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.ModifyUser.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.ModifyUser.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// User role updated successfully.
            ///
            /// - Remark: Generated from `#/paths//organization/users/{user_id}/post(modify-user)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.ModifyUser.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.ModifyUser.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Deletes a user from the organization.
    ///
    /// - Remark: HTTP `DELETE /organization/users/{user_id}`.
    /// - Remark: Generated from `#/paths//organization/users/{user_id}/delete(delete-user)`.
    public enum DeleteUser {
        public static let id: Swift.String = "delete-user"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/organization/users/{user_id}/DELETE/path`.
            public struct Path: Sendable, Hashable {
                /// The ID of the user.
                ///
                /// - Remark: Generated from `#/paths/organization/users/{user_id}/DELETE/path/user_id`.
                public var userId: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - userId: The ID of the user.
                public init(userId: Swift.String) {
                    self.userId = userId
                }
            }
            public var path: Operations.DeleteUser.Input.Path
            /// - Remark: Generated from `#/paths/organization/users/{user_id}/DELETE/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.DeleteUser.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.DeleteUser.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.DeleteUser.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            public init(
                path: Operations.DeleteUser.Input.Path,
                headers: Operations.DeleteUser.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/organization/users/{user_id}/DELETE/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/organization/users/{user_id}/DELETE/responses/200/content/application\/json`.
                    case json(Components.Schemas.UserDeleteResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.UserDeleteResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.DeleteUser.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.DeleteUser.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// User deleted successfully.
            ///
            /// - Remark: Generated from `#/paths//organization/users/{user_id}/delete(delete-user)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.DeleteUser.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.DeleteUser.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Create an ephemeral API token for use in client-side applications with the
    /// Realtime API. Can be configured with the same session parameters as the
    /// `session.update` client event.
    ///
    /// It responds with a session object, plus a `client_secret` key which contains
    /// a usable ephemeral API token that can be used to authenticate browser clients
    /// for the Realtime API.
    ///
    ///
    /// - Remark: HTTP `POST /realtime/sessions`.
    /// - Remark: Generated from `#/paths//realtime/sessions/post(create-realtime-session)`.
    public enum CreateRealtimeSession {
        public static let id: Swift.String = "create-realtime-session"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/realtime/sessions/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.CreateRealtimeSession.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.CreateRealtimeSession.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.CreateRealtimeSession.Input.Headers
            /// - Remark: Generated from `#/paths/realtime/sessions/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/realtime/sessions/POST/requestBody/content/application\/json`.
                case json(Components.Schemas.RealtimeSessionCreateRequest)
            }
            public var body: Operations.CreateRealtimeSession.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.CreateRealtimeSession.Input.Headers = .init(),
                body: Operations.CreateRealtimeSession.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/realtime/sessions/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/realtime/sessions/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.RealtimeSessionCreateResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.RealtimeSessionCreateResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.CreateRealtimeSession.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.CreateRealtimeSession.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Session created successfully.
            ///
            /// - Remark: Generated from `#/paths//realtime/sessions/post(create-realtime-session)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.CreateRealtimeSession.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.CreateRealtimeSession.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Create a thread.
    ///
    /// - Remark: HTTP `POST /threads`.
    /// - Remark: Generated from `#/paths//threads/post(createThread)`.
    public enum CreateThread {
        public static let id: Swift.String = "createThread"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/threads/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.CreateThread.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.CreateThread.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.CreateThread.Input.Headers
            /// - Remark: Generated from `#/paths/threads/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/threads/POST/requestBody/content/application\/json`.
                case json(Components.Schemas.CreateThreadRequest)
            }
            public var body: Operations.CreateThread.Input.Body?
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.CreateThread.Input.Headers = .init(),
                body: Operations.CreateThread.Input.Body? = nil
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/threads/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/threads/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.ThreadObject)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ThreadObject {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.CreateThread.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.CreateThread.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// OK
            ///
            /// - Remark: Generated from `#/paths//threads/post(createThread)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.CreateThread.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.CreateThread.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Create a thread and run it in one request.
    ///
    /// - Remark: HTTP `POST /threads/runs`.
    /// - Remark: Generated from `#/paths//threads/runs/post(createThreadAndRun)`.
    public enum CreateThreadAndRun {
        public static let id: Swift.String = "createThreadAndRun"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/threads/runs/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.CreateThreadAndRun.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.CreateThreadAndRun.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.CreateThreadAndRun.Input.Headers
            /// - Remark: Generated from `#/paths/threads/runs/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/threads/runs/POST/requestBody/content/application\/json`.
                case json(Components.Schemas.CreateThreadAndRunRequest)
            }
            public var body: Operations.CreateThreadAndRun.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.CreateThreadAndRun.Input.Headers = .init(),
                body: Operations.CreateThreadAndRun.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/threads/runs/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/threads/runs/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.RunObject)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.RunObject {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.CreateThreadAndRun.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.CreateThreadAndRun.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// OK
            ///
            /// - Remark: Generated from `#/paths//threads/runs/post(createThreadAndRun)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.CreateThreadAndRun.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.CreateThreadAndRun.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Retrieves a thread.
    ///
    /// - Remark: HTTP `GET /threads/{thread_id}`.
    /// - Remark: Generated from `#/paths//threads/{thread_id}/get(getThread)`.
    public enum GetThread {
        public static let id: Swift.String = "getThread"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/threads/{thread_id}/GET/path`.
            public struct Path: Sendable, Hashable {
                /// The ID of the thread to retrieve.
                ///
                /// - Remark: Generated from `#/paths/threads/{thread_id}/GET/path/thread_id`.
                public var threadId: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - threadId: The ID of the thread to retrieve.
                public init(threadId: Swift.String) {
                    self.threadId = threadId
                }
            }
            public var path: Operations.GetThread.Input.Path
            /// - Remark: Generated from `#/paths/threads/{thread_id}/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.GetThread.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.GetThread.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.GetThread.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            public init(
                path: Operations.GetThread.Input.Path,
                headers: Operations.GetThread.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/threads/{thread_id}/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/threads/{thread_id}/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.ThreadObject)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ThreadObject {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.GetThread.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.GetThread.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// OK
            ///
            /// - Remark: Generated from `#/paths//threads/{thread_id}/get(getThread)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.GetThread.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.GetThread.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Modifies a thread.
    ///
    /// - Remark: HTTP `POST /threads/{thread_id}`.
    /// - Remark: Generated from `#/paths//threads/{thread_id}/post(modifyThread)`.
    public enum ModifyThread {
        public static let id: Swift.String = "modifyThread"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/threads/{thread_id}/POST/path`.
            public struct Path: Sendable, Hashable {
                /// The ID of the thread to modify. Only the `metadata` can be modified.
                ///
                /// - Remark: Generated from `#/paths/threads/{thread_id}/POST/path/thread_id`.
                public var threadId: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - threadId: The ID of the thread to modify. Only the `metadata` can be modified.
                public init(threadId: Swift.String) {
                    self.threadId = threadId
                }
            }
            public var path: Operations.ModifyThread.Input.Path
            /// - Remark: Generated from `#/paths/threads/{thread_id}/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ModifyThread.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ModifyThread.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.ModifyThread.Input.Headers
            /// - Remark: Generated from `#/paths/threads/{thread_id}/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/threads/{thread_id}/POST/requestBody/content/application\/json`.
                case json(Components.Schemas.ModifyThreadRequest)
            }
            public var body: Operations.ModifyThread.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            ///   - body:
            public init(
                path: Operations.ModifyThread.Input.Path,
                headers: Operations.ModifyThread.Input.Headers = .init(),
                body: Operations.ModifyThread.Input.Body
            ) {
                self.path = path
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/threads/{thread_id}/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/threads/{thread_id}/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.ThreadObject)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ThreadObject {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.ModifyThread.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.ModifyThread.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// OK
            ///
            /// - Remark: Generated from `#/paths//threads/{thread_id}/post(modifyThread)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.ModifyThread.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.ModifyThread.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Delete a thread.
    ///
    /// - Remark: HTTP `DELETE /threads/{thread_id}`.
    /// - Remark: Generated from `#/paths//threads/{thread_id}/delete(deleteThread)`.
    public enum DeleteThread {
        public static let id: Swift.String = "deleteThread"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/threads/{thread_id}/DELETE/path`.
            public struct Path: Sendable, Hashable {
                /// The ID of the thread to delete.
                ///
                /// - Remark: Generated from `#/paths/threads/{thread_id}/DELETE/path/thread_id`.
                public var threadId: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - threadId: The ID of the thread to delete.
                public init(threadId: Swift.String) {
                    self.threadId = threadId
                }
            }
            public var path: Operations.DeleteThread.Input.Path
            /// - Remark: Generated from `#/paths/threads/{thread_id}/DELETE/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.DeleteThread.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.DeleteThread.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.DeleteThread.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            public init(
                path: Operations.DeleteThread.Input.Path,
                headers: Operations.DeleteThread.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/threads/{thread_id}/DELETE/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/threads/{thread_id}/DELETE/responses/200/content/application\/json`.
                    case json(Components.Schemas.DeleteThreadResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.DeleteThreadResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.DeleteThread.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.DeleteThread.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// OK
            ///
            /// - Remark: Generated from `#/paths//threads/{thread_id}/delete(deleteThread)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.DeleteThread.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.DeleteThread.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Returns a list of messages for a given thread.
    ///
    /// - Remark: HTTP `GET /threads/{thread_id}/messages`.
    /// - Remark: Generated from `#/paths//threads/{thread_id}/messages/get(listMessages)`.
    public enum ListMessages {
        public static let id: Swift.String = "listMessages"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/threads/{thread_id}/messages/GET/path`.
            public struct Path: Sendable, Hashable {
                /// The ID of the [thread](/docs/api-reference/threads) the messages belong to.
                ///
                /// - Remark: Generated from `#/paths/threads/{thread_id}/messages/GET/path/thread_id`.
                public var threadId: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - threadId: The ID of the [thread](/docs/api-reference/threads) the messages belong to.
                public init(threadId: Swift.String) {
                    self.threadId = threadId
                }
            }
            public var path: Operations.ListMessages.Input.Path
            /// - Remark: Generated from `#/paths/threads/{thread_id}/messages/GET/query`.
            public struct Query: Sendable, Hashable {
                /// A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.
                ///
                ///
                /// - Remark: Generated from `#/paths/threads/{thread_id}/messages/GET/query/limit`.
                public var limit: Swift.Int?
                /// - Remark: Generated from `#/paths/threads/{thread_id}/messages/GET/query/order`.
                @frozen public enum OrderPayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case asc = "asc"
                    case desc = "desc"
                }
                /// Sort order by the `created_at` timestamp of the objects. `asc` for ascending order and `desc` for descending order.
                ///
                ///
                /// - Remark: Generated from `#/paths/threads/{thread_id}/messages/GET/query/order`.
                public var order: Operations.ListMessages.Input.Query.OrderPayload?
                /// A cursor for use in pagination. `after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after=obj_foo in order to fetch the next page of the list.
                ///
                ///
                /// - Remark: Generated from `#/paths/threads/{thread_id}/messages/GET/query/after`.
                public var after: Swift.String?
                /// A cursor for use in pagination. `before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with obj_foo, your subsequent call can include before=obj_foo in order to fetch the previous page of the list.
                ///
                ///
                /// - Remark: Generated from `#/paths/threads/{thread_id}/messages/GET/query/before`.
                public var before: Swift.String?
                /// Filter messages by the run ID that generated them.
                ///
                ///
                /// - Remark: Generated from `#/paths/threads/{thread_id}/messages/GET/query/run_id`.
                public var runId: Swift.String?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - limit: A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.
                ///   - order: Sort order by the `created_at` timestamp of the objects. `asc` for ascending order and `desc` for descending order.
                ///   - after: A cursor for use in pagination. `after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after=obj_foo in order to fetch the next page of the list.
                ///   - before: A cursor for use in pagination. `before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with obj_foo, your subsequent call can include before=obj_foo in order to fetch the previous page of the list.
                ///   - runId: Filter messages by the run ID that generated them.
                public init(
                    limit: Swift.Int? = nil,
                    order: Operations.ListMessages.Input.Query.OrderPayload? = nil,
                    after: Swift.String? = nil,
                    before: Swift.String? = nil,
                    runId: Swift.String? = nil
                ) {
                    self.limit = limit
                    self.order = order
                    self.after = after
                    self.before = before
                    self.runId = runId
                }
            }
            public var query: Operations.ListMessages.Input.Query
            /// - Remark: Generated from `#/paths/threads/{thread_id}/messages/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ListMessages.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ListMessages.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.ListMessages.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            public init(
                path: Operations.ListMessages.Input.Path,
                query: Operations.ListMessages.Input.Query = .init(),
                headers: Operations.ListMessages.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/threads/{thread_id}/messages/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/threads/{thread_id}/messages/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.ListMessagesResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ListMessagesResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.ListMessages.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.ListMessages.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// OK
            ///
            /// - Remark: Generated from `#/paths//threads/{thread_id}/messages/get(listMessages)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.ListMessages.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.ListMessages.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Create a message.
    ///
    /// - Remark: HTTP `POST /threads/{thread_id}/messages`.
    /// - Remark: Generated from `#/paths//threads/{thread_id}/messages/post(createMessage)`.
    public enum CreateMessage {
        public static let id: Swift.String = "createMessage"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/threads/{thread_id}/messages/POST/path`.
            public struct Path: Sendable, Hashable {
                /// The ID of the [thread](/docs/api-reference/threads) to create a message for.
                ///
                /// - Remark: Generated from `#/paths/threads/{thread_id}/messages/POST/path/thread_id`.
                public var threadId: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - threadId: The ID of the [thread](/docs/api-reference/threads) to create a message for.
                public init(threadId: Swift.String) {
                    self.threadId = threadId
                }
            }
            public var path: Operations.CreateMessage.Input.Path
            /// - Remark: Generated from `#/paths/threads/{thread_id}/messages/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.CreateMessage.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.CreateMessage.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.CreateMessage.Input.Headers
            /// - Remark: Generated from `#/paths/threads/{thread_id}/messages/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/threads/{thread_id}/messages/POST/requestBody/content/application\/json`.
                case json(Components.Schemas.CreateMessageRequest)
            }
            public var body: Operations.CreateMessage.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            ///   - body:
            public init(
                path: Operations.CreateMessage.Input.Path,
                headers: Operations.CreateMessage.Input.Headers = .init(),
                body: Operations.CreateMessage.Input.Body
            ) {
                self.path = path
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/threads/{thread_id}/messages/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/threads/{thread_id}/messages/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.MessageObject)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.MessageObject {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.CreateMessage.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.CreateMessage.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// OK
            ///
            /// - Remark: Generated from `#/paths//threads/{thread_id}/messages/post(createMessage)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.CreateMessage.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.CreateMessage.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Retrieve a message.
    ///
    /// - Remark: HTTP `GET /threads/{thread_id}/messages/{message_id}`.
    /// - Remark: Generated from `#/paths//threads/{thread_id}/messages/{message_id}/get(getMessage)`.
    public enum GetMessage {
        public static let id: Swift.String = "getMessage"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/threads/{thread_id}/messages/{message_id}/GET/path`.
            public struct Path: Sendable, Hashable {
                /// The ID of the [thread](/docs/api-reference/threads) to which this message belongs.
                ///
                /// - Remark: Generated from `#/paths/threads/{thread_id}/messages/{message_id}/GET/path/thread_id`.
                public var threadId: Swift.String
                /// The ID of the message to retrieve.
                ///
                /// - Remark: Generated from `#/paths/threads/{thread_id}/messages/{message_id}/GET/path/message_id`.
                public var messageId: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - threadId: The ID of the [thread](/docs/api-reference/threads) to which this message belongs.
                ///   - messageId: The ID of the message to retrieve.
                public init(
                    threadId: Swift.String,
                    messageId: Swift.String
                ) {
                    self.threadId = threadId
                    self.messageId = messageId
                }
            }
            public var path: Operations.GetMessage.Input.Path
            /// - Remark: Generated from `#/paths/threads/{thread_id}/messages/{message_id}/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.GetMessage.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.GetMessage.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.GetMessage.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            public init(
                path: Operations.GetMessage.Input.Path,
                headers: Operations.GetMessage.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/threads/{thread_id}/messages/{message_id}/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/threads/{thread_id}/messages/{message_id}/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.MessageObject)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.MessageObject {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.GetMessage.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.GetMessage.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// OK
            ///
            /// - Remark: Generated from `#/paths//threads/{thread_id}/messages/{message_id}/get(getMessage)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.GetMessage.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.GetMessage.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Modifies a message.
    ///
    /// - Remark: HTTP `POST /threads/{thread_id}/messages/{message_id}`.
    /// - Remark: Generated from `#/paths//threads/{thread_id}/messages/{message_id}/post(modifyMessage)`.
    public enum ModifyMessage {
        public static let id: Swift.String = "modifyMessage"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/threads/{thread_id}/messages/{message_id}/POST/path`.
            public struct Path: Sendable, Hashable {
                /// The ID of the thread to which this message belongs.
                ///
                /// - Remark: Generated from `#/paths/threads/{thread_id}/messages/{message_id}/POST/path/thread_id`.
                public var threadId: Swift.String
                /// The ID of the message to modify.
                ///
                /// - Remark: Generated from `#/paths/threads/{thread_id}/messages/{message_id}/POST/path/message_id`.
                public var messageId: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - threadId: The ID of the thread to which this message belongs.
                ///   - messageId: The ID of the message to modify.
                public init(
                    threadId: Swift.String,
                    messageId: Swift.String
                ) {
                    self.threadId = threadId
                    self.messageId = messageId
                }
            }
            public var path: Operations.ModifyMessage.Input.Path
            /// - Remark: Generated from `#/paths/threads/{thread_id}/messages/{message_id}/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ModifyMessage.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ModifyMessage.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.ModifyMessage.Input.Headers
            /// - Remark: Generated from `#/paths/threads/{thread_id}/messages/{message_id}/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/threads/{thread_id}/messages/{message_id}/POST/requestBody/content/application\/json`.
                case json(Components.Schemas.ModifyMessageRequest)
            }
            public var body: Operations.ModifyMessage.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            ///   - body:
            public init(
                path: Operations.ModifyMessage.Input.Path,
                headers: Operations.ModifyMessage.Input.Headers = .init(),
                body: Operations.ModifyMessage.Input.Body
            ) {
                self.path = path
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/threads/{thread_id}/messages/{message_id}/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/threads/{thread_id}/messages/{message_id}/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.MessageObject)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.MessageObject {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.ModifyMessage.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.ModifyMessage.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// OK
            ///
            /// - Remark: Generated from `#/paths//threads/{thread_id}/messages/{message_id}/post(modifyMessage)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.ModifyMessage.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.ModifyMessage.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Deletes a message.
    ///
    /// - Remark: HTTP `DELETE /threads/{thread_id}/messages/{message_id}`.
    /// - Remark: Generated from `#/paths//threads/{thread_id}/messages/{message_id}/delete(deleteMessage)`.
    public enum DeleteMessage {
        public static let id: Swift.String = "deleteMessage"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/threads/{thread_id}/messages/{message_id}/DELETE/path`.
            public struct Path: Sendable, Hashable {
                /// The ID of the thread to which this message belongs.
                ///
                /// - Remark: Generated from `#/paths/threads/{thread_id}/messages/{message_id}/DELETE/path/thread_id`.
                public var threadId: Swift.String
                /// The ID of the message to delete.
                ///
                /// - Remark: Generated from `#/paths/threads/{thread_id}/messages/{message_id}/DELETE/path/message_id`.
                public var messageId: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - threadId: The ID of the thread to which this message belongs.
                ///   - messageId: The ID of the message to delete.
                public init(
                    threadId: Swift.String,
                    messageId: Swift.String
                ) {
                    self.threadId = threadId
                    self.messageId = messageId
                }
            }
            public var path: Operations.DeleteMessage.Input.Path
            /// - Remark: Generated from `#/paths/threads/{thread_id}/messages/{message_id}/DELETE/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.DeleteMessage.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.DeleteMessage.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.DeleteMessage.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            public init(
                path: Operations.DeleteMessage.Input.Path,
                headers: Operations.DeleteMessage.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/threads/{thread_id}/messages/{message_id}/DELETE/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/threads/{thread_id}/messages/{message_id}/DELETE/responses/200/content/application\/json`.
                    case json(Components.Schemas.DeleteMessageResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.DeleteMessageResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.DeleteMessage.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.DeleteMessage.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// OK
            ///
            /// - Remark: Generated from `#/paths//threads/{thread_id}/messages/{message_id}/delete(deleteMessage)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.DeleteMessage.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.DeleteMessage.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Returns a list of runs belonging to a thread.
    ///
    /// - Remark: HTTP `GET /threads/{thread_id}/runs`.
    /// - Remark: Generated from `#/paths//threads/{thread_id}/runs/get(listRuns)`.
    public enum ListRuns {
        public static let id: Swift.String = "listRuns"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/threads/{thread_id}/runs/GET/path`.
            public struct Path: Sendable, Hashable {
                /// The ID of the thread the run belongs to.
                ///
                /// - Remark: Generated from `#/paths/threads/{thread_id}/runs/GET/path/thread_id`.
                public var threadId: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - threadId: The ID of the thread the run belongs to.
                public init(threadId: Swift.String) {
                    self.threadId = threadId
                }
            }
            public var path: Operations.ListRuns.Input.Path
            /// - Remark: Generated from `#/paths/threads/{thread_id}/runs/GET/query`.
            public struct Query: Sendable, Hashable {
                /// A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.
                ///
                ///
                /// - Remark: Generated from `#/paths/threads/{thread_id}/runs/GET/query/limit`.
                public var limit: Swift.Int?
                /// - Remark: Generated from `#/paths/threads/{thread_id}/runs/GET/query/order`.
                @frozen public enum OrderPayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case asc = "asc"
                    case desc = "desc"
                }
                /// Sort order by the `created_at` timestamp of the objects. `asc` for ascending order and `desc` for descending order.
                ///
                ///
                /// - Remark: Generated from `#/paths/threads/{thread_id}/runs/GET/query/order`.
                public var order: Operations.ListRuns.Input.Query.OrderPayload?
                /// A cursor for use in pagination. `after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after=obj_foo in order to fetch the next page of the list.
                ///
                ///
                /// - Remark: Generated from `#/paths/threads/{thread_id}/runs/GET/query/after`.
                public var after: Swift.String?
                /// A cursor for use in pagination. `before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with obj_foo, your subsequent call can include before=obj_foo in order to fetch the previous page of the list.
                ///
                ///
                /// - Remark: Generated from `#/paths/threads/{thread_id}/runs/GET/query/before`.
                public var before: Swift.String?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - limit: A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.
                ///   - order: Sort order by the `created_at` timestamp of the objects. `asc` for ascending order and `desc` for descending order.
                ///   - after: A cursor for use in pagination. `after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after=obj_foo in order to fetch the next page of the list.
                ///   - before: A cursor for use in pagination. `before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with obj_foo, your subsequent call can include before=obj_foo in order to fetch the previous page of the list.
                public init(
                    limit: Swift.Int? = nil,
                    order: Operations.ListRuns.Input.Query.OrderPayload? = nil,
                    after: Swift.String? = nil,
                    before: Swift.String? = nil
                ) {
                    self.limit = limit
                    self.order = order
                    self.after = after
                    self.before = before
                }
            }
            public var query: Operations.ListRuns.Input.Query
            /// - Remark: Generated from `#/paths/threads/{thread_id}/runs/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ListRuns.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ListRuns.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.ListRuns.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            public init(
                path: Operations.ListRuns.Input.Path,
                query: Operations.ListRuns.Input.Query = .init(),
                headers: Operations.ListRuns.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/threads/{thread_id}/runs/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/threads/{thread_id}/runs/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.ListRunsResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ListRunsResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.ListRuns.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.ListRuns.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// OK
            ///
            /// - Remark: Generated from `#/paths//threads/{thread_id}/runs/get(listRuns)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.ListRuns.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.ListRuns.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Create a run.
    ///
    /// - Remark: HTTP `POST /threads/{thread_id}/runs`.
    /// - Remark: Generated from `#/paths//threads/{thread_id}/runs/post(createRun)`.
    public enum CreateRun {
        public static let id: Swift.String = "createRun"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/threads/{thread_id}/runs/POST/path`.
            public struct Path: Sendable, Hashable {
                /// The ID of the thread to run.
                ///
                /// - Remark: Generated from `#/paths/threads/{thread_id}/runs/POST/path/thread_id`.
                public var threadId: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - threadId: The ID of the thread to run.
                public init(threadId: Swift.String) {
                    self.threadId = threadId
                }
            }
            public var path: Operations.CreateRun.Input.Path
            /// - Remark: Generated from `#/paths/threads/{thread_id}/runs/POST/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/threads/{thread_id}/runs/POST/query/Include_lbrack__rbrack_Payload`.
                @frozen public enum IncludeLbrackRbrackPayloadPayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case stepDetails_toolCalls_lbrack__ast__rbrack__fileSearch_results_lbrack__ast__rbrack__content = "step_details.tool_calls[*].file_search.results[*].content"
                }
                /// - Remark: Generated from `#/paths/threads/{thread_id}/runs/POST/query/include[]`.
                public typealias Include_lbrack__rbrack_Payload = [Operations.CreateRun.Input.Query.IncludeLbrackRbrackPayloadPayload]
                /// A list of additional fields to include in the response. Currently the only supported value is `step_details.tool_calls[*].file_search.results[*].content` to fetch the file search result content.
                ///
                /// See the [file search tool documentation](/docs/assistants/tools/file-search#customizing-file-search-settings) for more information.
                ///
                ///
                /// - Remark: Generated from `#/paths/threads/{thread_id}/runs/POST/query/include[]`.
                public var include_lbrack__rbrack_: Operations.CreateRun.Input.Query.Include_lbrack__rbrack_Payload?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - include_lbrack__rbrack_: A list of additional fields to include in the response. Currently the only supported value is `step_details.tool_calls[*].file_search.results[*].content` to fetch the file search result content.
                public init(include_lbrack__rbrack_: Operations.CreateRun.Input.Query.Include_lbrack__rbrack_Payload? = nil) {
                    self.include_lbrack__rbrack_ = include_lbrack__rbrack_
                }
            }
            public var query: Operations.CreateRun.Input.Query
            /// - Remark: Generated from `#/paths/threads/{thread_id}/runs/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.CreateRun.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.CreateRun.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.CreateRun.Input.Headers
            /// - Remark: Generated from `#/paths/threads/{thread_id}/runs/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/threads/{thread_id}/runs/POST/requestBody/content/application\/json`.
                case json(Components.Schemas.CreateRunRequest)
            }
            public var body: Operations.CreateRun.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            ///   - body:
            public init(
                path: Operations.CreateRun.Input.Path,
                query: Operations.CreateRun.Input.Query = .init(),
                headers: Operations.CreateRun.Input.Headers = .init(),
                body: Operations.CreateRun.Input.Body
            ) {
                self.path = path
                self.query = query
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/threads/{thread_id}/runs/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/threads/{thread_id}/runs/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.RunObject)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.RunObject {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.CreateRun.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.CreateRun.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// OK
            ///
            /// - Remark: Generated from `#/paths//threads/{thread_id}/runs/post(createRun)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.CreateRun.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.CreateRun.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Retrieves a run.
    ///
    /// - Remark: HTTP `GET /threads/{thread_id}/runs/{run_id}`.
    /// - Remark: Generated from `#/paths//threads/{thread_id}/runs/{run_id}/get(getRun)`.
    public enum GetRun {
        public static let id: Swift.String = "getRun"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/threads/{thread_id}/runs/{run_id}/GET/path`.
            public struct Path: Sendable, Hashable {
                /// The ID of the [thread](/docs/api-reference/threads) that was run.
                ///
                /// - Remark: Generated from `#/paths/threads/{thread_id}/runs/{run_id}/GET/path/thread_id`.
                public var threadId: Swift.String
                /// The ID of the run to retrieve.
                ///
                /// - Remark: Generated from `#/paths/threads/{thread_id}/runs/{run_id}/GET/path/run_id`.
                public var runId: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - threadId: The ID of the [thread](/docs/api-reference/threads) that was run.
                ///   - runId: The ID of the run to retrieve.
                public init(
                    threadId: Swift.String,
                    runId: Swift.String
                ) {
                    self.threadId = threadId
                    self.runId = runId
                }
            }
            public var path: Operations.GetRun.Input.Path
            /// - Remark: Generated from `#/paths/threads/{thread_id}/runs/{run_id}/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.GetRun.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.GetRun.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.GetRun.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            public init(
                path: Operations.GetRun.Input.Path,
                headers: Operations.GetRun.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/threads/{thread_id}/runs/{run_id}/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/threads/{thread_id}/runs/{run_id}/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.RunObject)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.RunObject {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.GetRun.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.GetRun.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// OK
            ///
            /// - Remark: Generated from `#/paths//threads/{thread_id}/runs/{run_id}/get(getRun)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.GetRun.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.GetRun.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Modifies a run.
    ///
    /// - Remark: HTTP `POST /threads/{thread_id}/runs/{run_id}`.
    /// - Remark: Generated from `#/paths//threads/{thread_id}/runs/{run_id}/post(modifyRun)`.
    public enum ModifyRun {
        public static let id: Swift.String = "modifyRun"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/threads/{thread_id}/runs/{run_id}/POST/path`.
            public struct Path: Sendable, Hashable {
                /// The ID of the [thread](/docs/api-reference/threads) that was run.
                ///
                /// - Remark: Generated from `#/paths/threads/{thread_id}/runs/{run_id}/POST/path/thread_id`.
                public var threadId: Swift.String
                /// The ID of the run to modify.
                ///
                /// - Remark: Generated from `#/paths/threads/{thread_id}/runs/{run_id}/POST/path/run_id`.
                public var runId: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - threadId: The ID of the [thread](/docs/api-reference/threads) that was run.
                ///   - runId: The ID of the run to modify.
                public init(
                    threadId: Swift.String,
                    runId: Swift.String
                ) {
                    self.threadId = threadId
                    self.runId = runId
                }
            }
            public var path: Operations.ModifyRun.Input.Path
            /// - Remark: Generated from `#/paths/threads/{thread_id}/runs/{run_id}/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ModifyRun.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ModifyRun.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.ModifyRun.Input.Headers
            /// - Remark: Generated from `#/paths/threads/{thread_id}/runs/{run_id}/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/threads/{thread_id}/runs/{run_id}/POST/requestBody/content/application\/json`.
                case json(Components.Schemas.ModifyRunRequest)
            }
            public var body: Operations.ModifyRun.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            ///   - body:
            public init(
                path: Operations.ModifyRun.Input.Path,
                headers: Operations.ModifyRun.Input.Headers = .init(),
                body: Operations.ModifyRun.Input.Body
            ) {
                self.path = path
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/threads/{thread_id}/runs/{run_id}/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/threads/{thread_id}/runs/{run_id}/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.RunObject)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.RunObject {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.ModifyRun.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.ModifyRun.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// OK
            ///
            /// - Remark: Generated from `#/paths//threads/{thread_id}/runs/{run_id}/post(modifyRun)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.ModifyRun.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.ModifyRun.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Cancels a run that is `in_progress`.
    ///
    /// - Remark: HTTP `POST /threads/{thread_id}/runs/{run_id}/cancel`.
    /// - Remark: Generated from `#/paths//threads/{thread_id}/runs/{run_id}/cancel/post(cancelRun)`.
    public enum CancelRun {
        public static let id: Swift.String = "cancelRun"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/threads/{thread_id}/runs/{run_id}/cancel/POST/path`.
            public struct Path: Sendable, Hashable {
                /// The ID of the thread to which this run belongs.
                ///
                /// - Remark: Generated from `#/paths/threads/{thread_id}/runs/{run_id}/cancel/POST/path/thread_id`.
                public var threadId: Swift.String
                /// The ID of the run to cancel.
                ///
                /// - Remark: Generated from `#/paths/threads/{thread_id}/runs/{run_id}/cancel/POST/path/run_id`.
                public var runId: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - threadId: The ID of the thread to which this run belongs.
                ///   - runId: The ID of the run to cancel.
                public init(
                    threadId: Swift.String,
                    runId: Swift.String
                ) {
                    self.threadId = threadId
                    self.runId = runId
                }
            }
            public var path: Operations.CancelRun.Input.Path
            /// - Remark: Generated from `#/paths/threads/{thread_id}/runs/{run_id}/cancel/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.CancelRun.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.CancelRun.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.CancelRun.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            public init(
                path: Operations.CancelRun.Input.Path,
                headers: Operations.CancelRun.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/threads/{thread_id}/runs/{run_id}/cancel/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/threads/{thread_id}/runs/{run_id}/cancel/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.RunObject)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.RunObject {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.CancelRun.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.CancelRun.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// OK
            ///
            /// - Remark: Generated from `#/paths//threads/{thread_id}/runs/{run_id}/cancel/post(cancelRun)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.CancelRun.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.CancelRun.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Returns a list of run steps belonging to a run.
    ///
    /// - Remark: HTTP `GET /threads/{thread_id}/runs/{run_id}/steps`.
    /// - Remark: Generated from `#/paths//threads/{thread_id}/runs/{run_id}/steps/get(listRunSteps)`.
    public enum ListRunSteps {
        public static let id: Swift.String = "listRunSteps"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/threads/{thread_id}/runs/{run_id}/steps/GET/path`.
            public struct Path: Sendable, Hashable {
                /// The ID of the thread the run and run steps belong to.
                ///
                /// - Remark: Generated from `#/paths/threads/{thread_id}/runs/{run_id}/steps/GET/path/thread_id`.
                public var threadId: Swift.String
                /// The ID of the run the run steps belong to.
                ///
                /// - Remark: Generated from `#/paths/threads/{thread_id}/runs/{run_id}/steps/GET/path/run_id`.
                public var runId: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - threadId: The ID of the thread the run and run steps belong to.
                ///   - runId: The ID of the run the run steps belong to.
                public init(
                    threadId: Swift.String,
                    runId: Swift.String
                ) {
                    self.threadId = threadId
                    self.runId = runId
                }
            }
            public var path: Operations.ListRunSteps.Input.Path
            /// - Remark: Generated from `#/paths/threads/{thread_id}/runs/{run_id}/steps/GET/query`.
            public struct Query: Sendable, Hashable {
                /// A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.
                ///
                ///
                /// - Remark: Generated from `#/paths/threads/{thread_id}/runs/{run_id}/steps/GET/query/limit`.
                public var limit: Swift.Int?
                /// - Remark: Generated from `#/paths/threads/{thread_id}/runs/{run_id}/steps/GET/query/order`.
                @frozen public enum OrderPayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case asc = "asc"
                    case desc = "desc"
                }
                /// Sort order by the `created_at` timestamp of the objects. `asc` for ascending order and `desc` for descending order.
                ///
                ///
                /// - Remark: Generated from `#/paths/threads/{thread_id}/runs/{run_id}/steps/GET/query/order`.
                public var order: Operations.ListRunSteps.Input.Query.OrderPayload?
                /// A cursor for use in pagination. `after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after=obj_foo in order to fetch the next page of the list.
                ///
                ///
                /// - Remark: Generated from `#/paths/threads/{thread_id}/runs/{run_id}/steps/GET/query/after`.
                public var after: Swift.String?
                /// A cursor for use in pagination. `before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with obj_foo, your subsequent call can include before=obj_foo in order to fetch the previous page of the list.
                ///
                ///
                /// - Remark: Generated from `#/paths/threads/{thread_id}/runs/{run_id}/steps/GET/query/before`.
                public var before: Swift.String?
                /// - Remark: Generated from `#/paths/threads/{thread_id}/runs/{run_id}/steps/GET/query/Include_lbrack__rbrack_Payload`.
                @frozen public enum IncludeLbrackRbrackPayloadPayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case stepDetails_toolCalls_lbrack__ast__rbrack__fileSearch_results_lbrack__ast__rbrack__content = "step_details.tool_calls[*].file_search.results[*].content"
                }
                /// - Remark: Generated from `#/paths/threads/{thread_id}/runs/{run_id}/steps/GET/query/include[]`.
                public typealias Include_lbrack__rbrack_Payload = [Operations.ListRunSteps.Input.Query.IncludeLbrackRbrackPayloadPayload]
                /// A list of additional fields to include in the response. Currently the only supported value is `step_details.tool_calls[*].file_search.results[*].content` to fetch the file search result content.
                ///
                /// See the [file search tool documentation](/docs/assistants/tools/file-search#customizing-file-search-settings) for more information.
                ///
                ///
                /// - Remark: Generated from `#/paths/threads/{thread_id}/runs/{run_id}/steps/GET/query/include[]`.
                public var include_lbrack__rbrack_: Operations.ListRunSteps.Input.Query.Include_lbrack__rbrack_Payload?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - limit: A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.
                ///   - order: Sort order by the `created_at` timestamp of the objects. `asc` for ascending order and `desc` for descending order.
                ///   - after: A cursor for use in pagination. `after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after=obj_foo in order to fetch the next page of the list.
                ///   - before: A cursor for use in pagination. `before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with obj_foo, your subsequent call can include before=obj_foo in order to fetch the previous page of the list.
                ///   - include_lbrack__rbrack_: A list of additional fields to include in the response. Currently the only supported value is `step_details.tool_calls[*].file_search.results[*].content` to fetch the file search result content.
                public init(
                    limit: Swift.Int? = nil,
                    order: Operations.ListRunSteps.Input.Query.OrderPayload? = nil,
                    after: Swift.String? = nil,
                    before: Swift.String? = nil,
                    include_lbrack__rbrack_: Operations.ListRunSteps.Input.Query.Include_lbrack__rbrack_Payload? = nil
                ) {
                    self.limit = limit
                    self.order = order
                    self.after = after
                    self.before = before
                    self.include_lbrack__rbrack_ = include_lbrack__rbrack_
                }
            }
            public var query: Operations.ListRunSteps.Input.Query
            /// - Remark: Generated from `#/paths/threads/{thread_id}/runs/{run_id}/steps/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ListRunSteps.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ListRunSteps.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.ListRunSteps.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            public init(
                path: Operations.ListRunSteps.Input.Path,
                query: Operations.ListRunSteps.Input.Query = .init(),
                headers: Operations.ListRunSteps.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/threads/{thread_id}/runs/{run_id}/steps/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/threads/{thread_id}/runs/{run_id}/steps/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.ListRunStepsResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ListRunStepsResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.ListRunSteps.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.ListRunSteps.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// OK
            ///
            /// - Remark: Generated from `#/paths//threads/{thread_id}/runs/{run_id}/steps/get(listRunSteps)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.ListRunSteps.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.ListRunSteps.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Retrieves a run step.
    ///
    /// - Remark: HTTP `GET /threads/{thread_id}/runs/{run_id}/steps/{step_id}`.
    /// - Remark: Generated from `#/paths//threads/{thread_id}/runs/{run_id}/steps/{step_id}/get(getRunStep)`.
    public enum GetRunStep {
        public static let id: Swift.String = "getRunStep"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/threads/{thread_id}/runs/{run_id}/steps/{step_id}/GET/path`.
            public struct Path: Sendable, Hashable {
                /// The ID of the thread to which the run and run step belongs.
                ///
                /// - Remark: Generated from `#/paths/threads/{thread_id}/runs/{run_id}/steps/{step_id}/GET/path/thread_id`.
                public var threadId: Swift.String
                /// The ID of the run to which the run step belongs.
                ///
                /// - Remark: Generated from `#/paths/threads/{thread_id}/runs/{run_id}/steps/{step_id}/GET/path/run_id`.
                public var runId: Swift.String
                /// The ID of the run step to retrieve.
                ///
                /// - Remark: Generated from `#/paths/threads/{thread_id}/runs/{run_id}/steps/{step_id}/GET/path/step_id`.
                public var stepId: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - threadId: The ID of the thread to which the run and run step belongs.
                ///   - runId: The ID of the run to which the run step belongs.
                ///   - stepId: The ID of the run step to retrieve.
                public init(
                    threadId: Swift.String,
                    runId: Swift.String,
                    stepId: Swift.String
                ) {
                    self.threadId = threadId
                    self.runId = runId
                    self.stepId = stepId
                }
            }
            public var path: Operations.GetRunStep.Input.Path
            /// - Remark: Generated from `#/paths/threads/{thread_id}/runs/{run_id}/steps/{step_id}/GET/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/threads/{thread_id}/runs/{run_id}/steps/{step_id}/GET/query/Include_lbrack__rbrack_Payload`.
                @frozen public enum IncludeLbrackRbrackPayloadPayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case stepDetails_toolCalls_lbrack__ast__rbrack__fileSearch_results_lbrack__ast__rbrack__content = "step_details.tool_calls[*].file_search.results[*].content"
                }
                /// - Remark: Generated from `#/paths/threads/{thread_id}/runs/{run_id}/steps/{step_id}/GET/query/include[]`.
                public typealias Include_lbrack__rbrack_Payload = [Operations.GetRunStep.Input.Query.IncludeLbrackRbrackPayloadPayload]
                /// A list of additional fields to include in the response. Currently the only supported value is `step_details.tool_calls[*].file_search.results[*].content` to fetch the file search result content.
                ///
                /// See the [file search tool documentation](/docs/assistants/tools/file-search#customizing-file-search-settings) for more information.
                ///
                ///
                /// - Remark: Generated from `#/paths/threads/{thread_id}/runs/{run_id}/steps/{step_id}/GET/query/include[]`.
                public var include_lbrack__rbrack_: Operations.GetRunStep.Input.Query.Include_lbrack__rbrack_Payload?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - include_lbrack__rbrack_: A list of additional fields to include in the response. Currently the only supported value is `step_details.tool_calls[*].file_search.results[*].content` to fetch the file search result content.
                public init(include_lbrack__rbrack_: Operations.GetRunStep.Input.Query.Include_lbrack__rbrack_Payload? = nil) {
                    self.include_lbrack__rbrack_ = include_lbrack__rbrack_
                }
            }
            public var query: Operations.GetRunStep.Input.Query
            /// - Remark: Generated from `#/paths/threads/{thread_id}/runs/{run_id}/steps/{step_id}/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.GetRunStep.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.GetRunStep.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.GetRunStep.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            public init(
                path: Operations.GetRunStep.Input.Path,
                query: Operations.GetRunStep.Input.Query = .init(),
                headers: Operations.GetRunStep.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/threads/{thread_id}/runs/{run_id}/steps/{step_id}/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/threads/{thread_id}/runs/{run_id}/steps/{step_id}/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.RunStepObject)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.RunStepObject {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.GetRunStep.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.GetRunStep.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// OK
            ///
            /// - Remark: Generated from `#/paths//threads/{thread_id}/runs/{run_id}/steps/{step_id}/get(getRunStep)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.GetRunStep.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.GetRunStep.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// When a run has the `status: "requires_action"` and `required_action.type` is `submit_tool_outputs`, this endpoint can be used to submit the outputs from the tool calls once they're all completed. All outputs must be submitted in a single request.
    ///
    ///
    /// - Remark: HTTP `POST /threads/{thread_id}/runs/{run_id}/submit_tool_outputs`.
    /// - Remark: Generated from `#/paths//threads/{thread_id}/runs/{run_id}/submit_tool_outputs/post(submitToolOuputsToRun)`.
    public enum SubmitToolOuputsToRun {
        public static let id: Swift.String = "submitToolOuputsToRun"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/threads/{thread_id}/runs/{run_id}/submit_tool_outputs/POST/path`.
            public struct Path: Sendable, Hashable {
                /// The ID of the [thread](/docs/api-reference/threads) to which this run belongs.
                ///
                /// - Remark: Generated from `#/paths/threads/{thread_id}/runs/{run_id}/submit_tool_outputs/POST/path/thread_id`.
                public var threadId: Swift.String
                /// The ID of the run that requires the tool output submission.
                ///
                /// - Remark: Generated from `#/paths/threads/{thread_id}/runs/{run_id}/submit_tool_outputs/POST/path/run_id`.
                public var runId: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - threadId: The ID of the [thread](/docs/api-reference/threads) to which this run belongs.
                ///   - runId: The ID of the run that requires the tool output submission.
                public init(
                    threadId: Swift.String,
                    runId: Swift.String
                ) {
                    self.threadId = threadId
                    self.runId = runId
                }
            }
            public var path: Operations.SubmitToolOuputsToRun.Input.Path
            /// - Remark: Generated from `#/paths/threads/{thread_id}/runs/{run_id}/submit_tool_outputs/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.SubmitToolOuputsToRun.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.SubmitToolOuputsToRun.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.SubmitToolOuputsToRun.Input.Headers
            /// - Remark: Generated from `#/paths/threads/{thread_id}/runs/{run_id}/submit_tool_outputs/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/threads/{thread_id}/runs/{run_id}/submit_tool_outputs/POST/requestBody/content/application\/json`.
                case json(Components.Schemas.SubmitToolOutputsRunRequest)
            }
            public var body: Operations.SubmitToolOuputsToRun.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            ///   - body:
            public init(
                path: Operations.SubmitToolOuputsToRun.Input.Path,
                headers: Operations.SubmitToolOuputsToRun.Input.Headers = .init(),
                body: Operations.SubmitToolOuputsToRun.Input.Body
            ) {
                self.path = path
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/threads/{thread_id}/runs/{run_id}/submit_tool_outputs/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/threads/{thread_id}/runs/{run_id}/submit_tool_outputs/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.RunObject)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.RunObject {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.SubmitToolOuputsToRun.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.SubmitToolOuputsToRun.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// OK
            ///
            /// - Remark: Generated from `#/paths//threads/{thread_id}/runs/{run_id}/submit_tool_outputs/post(submitToolOuputsToRun)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.SubmitToolOuputsToRun.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.SubmitToolOuputsToRun.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Creates an intermediate [Upload](/docs/api-reference/uploads/object) object that you can add [Parts](/docs/api-reference/uploads/part-object) to. Currently, an Upload can accept at most 8 GB in total and expires after an hour after you create it.
    ///
    /// Once you complete the Upload, we will create a [File](/docs/api-reference/files/object) object that contains all the parts you uploaded. This File is usable in the rest of our platform as a regular File object.
    ///
    /// For certain `purpose`s, the correct `mime_type` must be specified. Please refer to documentation for the supported MIME types for your use case:
    /// - [Assistants](/docs/assistants/tools/file-search#supported-files)
    ///
    /// For guidance on the proper filename extensions for each purpose, please follow the documentation on [creating a File](/docs/api-reference/files/create).
    ///
    ///
    /// - Remark: HTTP `POST /uploads`.
    /// - Remark: Generated from `#/paths//uploads/post(createUpload)`.
    public enum CreateUpload {
        public static let id: Swift.String = "createUpload"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/uploads/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.CreateUpload.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.CreateUpload.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.CreateUpload.Input.Headers
            /// - Remark: Generated from `#/paths/uploads/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/uploads/POST/requestBody/content/application\/json`.
                case json(Components.Schemas.CreateUploadRequest)
            }
            public var body: Operations.CreateUpload.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.CreateUpload.Input.Headers = .init(),
                body: Operations.CreateUpload.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/uploads/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/uploads/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.Upload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.Upload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.CreateUpload.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.CreateUpload.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// OK
            ///
            /// - Remark: Generated from `#/paths//uploads/post(createUpload)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.CreateUpload.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.CreateUpload.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Cancels the Upload. No Parts may be added after an Upload is cancelled.
    ///
    ///
    /// - Remark: HTTP `POST /uploads/{upload_id}/cancel`.
    /// - Remark: Generated from `#/paths//uploads/{upload_id}/cancel/post(cancelUpload)`.
    public enum CancelUpload {
        public static let id: Swift.String = "cancelUpload"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/uploads/{upload_id}/cancel/POST/path`.
            public struct Path: Sendable, Hashable {
                /// The ID of the Upload.
                ///
                ///
                /// - Remark: Generated from `#/paths/uploads/{upload_id}/cancel/POST/path/upload_id`.
                public var uploadId: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - uploadId: The ID of the Upload.
                public init(uploadId: Swift.String) {
                    self.uploadId = uploadId
                }
            }
            public var path: Operations.CancelUpload.Input.Path
            /// - Remark: Generated from `#/paths/uploads/{upload_id}/cancel/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.CancelUpload.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.CancelUpload.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.CancelUpload.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            public init(
                path: Operations.CancelUpload.Input.Path,
                headers: Operations.CancelUpload.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/uploads/{upload_id}/cancel/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/uploads/{upload_id}/cancel/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.Upload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.Upload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.CancelUpload.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.CancelUpload.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// OK
            ///
            /// - Remark: Generated from `#/paths//uploads/{upload_id}/cancel/post(cancelUpload)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.CancelUpload.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.CancelUpload.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Completes the [Upload](/docs/api-reference/uploads/object). 
    ///
    /// Within the returned Upload object, there is a nested [File](/docs/api-reference/files/object) object that is ready to use in the rest of the platform.
    ///
    /// You can specify the order of the Parts by passing in an ordered list of the Part IDs.
    ///
    /// The number of bytes uploaded upon completion must match the number of bytes initially specified when creating the Upload object. No Parts may be added after an Upload is completed.
    ///
    ///
    /// - Remark: HTTP `POST /uploads/{upload_id}/complete`.
    /// - Remark: Generated from `#/paths//uploads/{upload_id}/complete/post(completeUpload)`.
    public enum CompleteUpload {
        public static let id: Swift.String = "completeUpload"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/uploads/{upload_id}/complete/POST/path`.
            public struct Path: Sendable, Hashable {
                /// The ID of the Upload.
                ///
                ///
                /// - Remark: Generated from `#/paths/uploads/{upload_id}/complete/POST/path/upload_id`.
                public var uploadId: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - uploadId: The ID of the Upload.
                public init(uploadId: Swift.String) {
                    self.uploadId = uploadId
                }
            }
            public var path: Operations.CompleteUpload.Input.Path
            /// - Remark: Generated from `#/paths/uploads/{upload_id}/complete/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.CompleteUpload.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.CompleteUpload.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.CompleteUpload.Input.Headers
            /// - Remark: Generated from `#/paths/uploads/{upload_id}/complete/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/uploads/{upload_id}/complete/POST/requestBody/content/application\/json`.
                case json(Components.Schemas.CompleteUploadRequest)
            }
            public var body: Operations.CompleteUpload.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            ///   - body:
            public init(
                path: Operations.CompleteUpload.Input.Path,
                headers: Operations.CompleteUpload.Input.Headers = .init(),
                body: Operations.CompleteUpload.Input.Body
            ) {
                self.path = path
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/uploads/{upload_id}/complete/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/uploads/{upload_id}/complete/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.Upload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.Upload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.CompleteUpload.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.CompleteUpload.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// OK
            ///
            /// - Remark: Generated from `#/paths//uploads/{upload_id}/complete/post(completeUpload)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.CompleteUpload.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.CompleteUpload.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Adds a [Part](/docs/api-reference/uploads/part-object) to an [Upload](/docs/api-reference/uploads/object) object. A Part represents a chunk of bytes from the file you are trying to upload. 
    ///
    /// Each Part can be at most 64 MB, and you can add Parts until you hit the Upload maximum of 8 GB.
    ///
    /// It is possible to add multiple Parts in parallel. You can decide the intended order of the Parts when you [complete the Upload](/docs/api-reference/uploads/complete).
    ///
    ///
    /// - Remark: HTTP `POST /uploads/{upload_id}/parts`.
    /// - Remark: Generated from `#/paths//uploads/{upload_id}/parts/post(addUploadPart)`.
    public enum AddUploadPart {
        public static let id: Swift.String = "addUploadPart"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/uploads/{upload_id}/parts/POST/path`.
            public struct Path: Sendable, Hashable {
                /// The ID of the Upload.
                ///
                ///
                /// - Remark: Generated from `#/paths/uploads/{upload_id}/parts/POST/path/upload_id`.
                public var uploadId: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - uploadId: The ID of the Upload.
                public init(uploadId: Swift.String) {
                    self.uploadId = uploadId
                }
            }
            public var path: Operations.AddUploadPart.Input.Path
            /// - Remark: Generated from `#/paths/uploads/{upload_id}/parts/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.AddUploadPart.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.AddUploadPart.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.AddUploadPart.Input.Headers
            /// - Remark: Generated from `#/paths/uploads/{upload_id}/parts/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/uploads/{upload_id}/parts/POST/requestBody/content/multipart\/form-data`.
                case multipartForm(OpenAPIRuntime.MultipartBody<Components.Schemas.AddUploadPartRequest>)
            }
            public var body: Operations.AddUploadPart.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            ///   - body:
            public init(
                path: Operations.AddUploadPart.Input.Path,
                headers: Operations.AddUploadPart.Input.Headers = .init(),
                body: Operations.AddUploadPart.Input.Body
            ) {
                self.path = path
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/uploads/{upload_id}/parts/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/uploads/{upload_id}/parts/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.UploadPart)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.UploadPart {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.AddUploadPart.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.AddUploadPart.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// OK
            ///
            /// - Remark: Generated from `#/paths//uploads/{upload_id}/parts/post(addUploadPart)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.AddUploadPart.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.AddUploadPart.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Returns a list of vector stores.
    ///
    /// - Remark: HTTP `GET /vector_stores`.
    /// - Remark: Generated from `#/paths//vector_stores/get(listVectorStores)`.
    public enum ListVectorStores {
        public static let id: Swift.String = "listVectorStores"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/vector_stores/GET/query`.
            public struct Query: Sendable, Hashable {
                /// A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.
                ///
                ///
                /// - Remark: Generated from `#/paths/vector_stores/GET/query/limit`.
                public var limit: Swift.Int?
                /// - Remark: Generated from `#/paths/vector_stores/GET/query/order`.
                @frozen public enum OrderPayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case asc = "asc"
                    case desc = "desc"
                }
                /// Sort order by the `created_at` timestamp of the objects. `asc` for ascending order and `desc` for descending order.
                ///
                ///
                /// - Remark: Generated from `#/paths/vector_stores/GET/query/order`.
                public var order: Operations.ListVectorStores.Input.Query.OrderPayload?
                /// A cursor for use in pagination. `after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after=obj_foo in order to fetch the next page of the list.
                ///
                ///
                /// - Remark: Generated from `#/paths/vector_stores/GET/query/after`.
                public var after: Swift.String?
                /// A cursor for use in pagination. `before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with obj_foo, your subsequent call can include before=obj_foo in order to fetch the previous page of the list.
                ///
                ///
                /// - Remark: Generated from `#/paths/vector_stores/GET/query/before`.
                public var before: Swift.String?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - limit: A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.
                ///   - order: Sort order by the `created_at` timestamp of the objects. `asc` for ascending order and `desc` for descending order.
                ///   - after: A cursor for use in pagination. `after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after=obj_foo in order to fetch the next page of the list.
                ///   - before: A cursor for use in pagination. `before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with obj_foo, your subsequent call can include before=obj_foo in order to fetch the previous page of the list.
                public init(
                    limit: Swift.Int? = nil,
                    order: Operations.ListVectorStores.Input.Query.OrderPayload? = nil,
                    after: Swift.String? = nil,
                    before: Swift.String? = nil
                ) {
                    self.limit = limit
                    self.order = order
                    self.after = after
                    self.before = before
                }
            }
            public var query: Operations.ListVectorStores.Input.Query
            /// - Remark: Generated from `#/paths/vector_stores/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ListVectorStores.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ListVectorStores.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.ListVectorStores.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            public init(
                query: Operations.ListVectorStores.Input.Query = .init(),
                headers: Operations.ListVectorStores.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/vector_stores/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/vector_stores/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.ListVectorStoresResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ListVectorStoresResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.ListVectorStores.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.ListVectorStores.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// OK
            ///
            /// - Remark: Generated from `#/paths//vector_stores/get(listVectorStores)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.ListVectorStores.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.ListVectorStores.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Create a vector store.
    ///
    /// - Remark: HTTP `POST /vector_stores`.
    /// - Remark: Generated from `#/paths//vector_stores/post(createVectorStore)`.
    public enum CreateVectorStore {
        public static let id: Swift.String = "createVectorStore"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/vector_stores/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.CreateVectorStore.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.CreateVectorStore.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.CreateVectorStore.Input.Headers
            /// - Remark: Generated from `#/paths/vector_stores/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/vector_stores/POST/requestBody/content/application\/json`.
                case json(Components.Schemas.CreateVectorStoreRequest)
            }
            public var body: Operations.CreateVectorStore.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.CreateVectorStore.Input.Headers = .init(),
                body: Operations.CreateVectorStore.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/vector_stores/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/vector_stores/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.VectorStoreObject)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.VectorStoreObject {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.CreateVectorStore.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.CreateVectorStore.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// OK
            ///
            /// - Remark: Generated from `#/paths//vector_stores/post(createVectorStore)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.CreateVectorStore.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.CreateVectorStore.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Retrieves a vector store.
    ///
    /// - Remark: HTTP `GET /vector_stores/{vector_store_id}`.
    /// - Remark: Generated from `#/paths//vector_stores/{vector_store_id}/get(getVectorStore)`.
    public enum GetVectorStore {
        public static let id: Swift.String = "getVectorStore"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/vector_stores/{vector_store_id}/GET/path`.
            public struct Path: Sendable, Hashable {
                /// The ID of the vector store to retrieve.
                ///
                /// - Remark: Generated from `#/paths/vector_stores/{vector_store_id}/GET/path/vector_store_id`.
                public var vectorStoreId: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - vectorStoreId: The ID of the vector store to retrieve.
                public init(vectorStoreId: Swift.String) {
                    self.vectorStoreId = vectorStoreId
                }
            }
            public var path: Operations.GetVectorStore.Input.Path
            /// - Remark: Generated from `#/paths/vector_stores/{vector_store_id}/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.GetVectorStore.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.GetVectorStore.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.GetVectorStore.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            public init(
                path: Operations.GetVectorStore.Input.Path,
                headers: Operations.GetVectorStore.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/vector_stores/{vector_store_id}/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/vector_stores/{vector_store_id}/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.VectorStoreObject)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.VectorStoreObject {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.GetVectorStore.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.GetVectorStore.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// OK
            ///
            /// - Remark: Generated from `#/paths//vector_stores/{vector_store_id}/get(getVectorStore)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.GetVectorStore.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.GetVectorStore.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Modifies a vector store.
    ///
    /// - Remark: HTTP `POST /vector_stores/{vector_store_id}`.
    /// - Remark: Generated from `#/paths//vector_stores/{vector_store_id}/post(modifyVectorStore)`.
    public enum ModifyVectorStore {
        public static let id: Swift.String = "modifyVectorStore"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/vector_stores/{vector_store_id}/POST/path`.
            public struct Path: Sendable, Hashable {
                /// The ID of the vector store to modify.
                ///
                /// - Remark: Generated from `#/paths/vector_stores/{vector_store_id}/POST/path/vector_store_id`.
                public var vectorStoreId: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - vectorStoreId: The ID of the vector store to modify.
                public init(vectorStoreId: Swift.String) {
                    self.vectorStoreId = vectorStoreId
                }
            }
            public var path: Operations.ModifyVectorStore.Input.Path
            /// - Remark: Generated from `#/paths/vector_stores/{vector_store_id}/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ModifyVectorStore.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ModifyVectorStore.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.ModifyVectorStore.Input.Headers
            /// - Remark: Generated from `#/paths/vector_stores/{vector_store_id}/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/vector_stores/{vector_store_id}/POST/requestBody/content/application\/json`.
                case json(Components.Schemas.UpdateVectorStoreRequest)
            }
            public var body: Operations.ModifyVectorStore.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            ///   - body:
            public init(
                path: Operations.ModifyVectorStore.Input.Path,
                headers: Operations.ModifyVectorStore.Input.Headers = .init(),
                body: Operations.ModifyVectorStore.Input.Body
            ) {
                self.path = path
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/vector_stores/{vector_store_id}/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/vector_stores/{vector_store_id}/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.VectorStoreObject)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.VectorStoreObject {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.ModifyVectorStore.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.ModifyVectorStore.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// OK
            ///
            /// - Remark: Generated from `#/paths//vector_stores/{vector_store_id}/post(modifyVectorStore)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.ModifyVectorStore.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.ModifyVectorStore.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Delete a vector store.
    ///
    /// - Remark: HTTP `DELETE /vector_stores/{vector_store_id}`.
    /// - Remark: Generated from `#/paths//vector_stores/{vector_store_id}/delete(deleteVectorStore)`.
    public enum DeleteVectorStore {
        public static let id: Swift.String = "deleteVectorStore"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/vector_stores/{vector_store_id}/DELETE/path`.
            public struct Path: Sendable, Hashable {
                /// The ID of the vector store to delete.
                ///
                /// - Remark: Generated from `#/paths/vector_stores/{vector_store_id}/DELETE/path/vector_store_id`.
                public var vectorStoreId: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - vectorStoreId: The ID of the vector store to delete.
                public init(vectorStoreId: Swift.String) {
                    self.vectorStoreId = vectorStoreId
                }
            }
            public var path: Operations.DeleteVectorStore.Input.Path
            /// - Remark: Generated from `#/paths/vector_stores/{vector_store_id}/DELETE/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.DeleteVectorStore.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.DeleteVectorStore.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.DeleteVectorStore.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            public init(
                path: Operations.DeleteVectorStore.Input.Path,
                headers: Operations.DeleteVectorStore.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/vector_stores/{vector_store_id}/DELETE/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/vector_stores/{vector_store_id}/DELETE/responses/200/content/application\/json`.
                    case json(Components.Schemas.DeleteVectorStoreResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.DeleteVectorStoreResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.DeleteVectorStore.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.DeleteVectorStore.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// OK
            ///
            /// - Remark: Generated from `#/paths//vector_stores/{vector_store_id}/delete(deleteVectorStore)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.DeleteVectorStore.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.DeleteVectorStore.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Create a vector store file batch.
    ///
    /// - Remark: HTTP `POST /vector_stores/{vector_store_id}/file_batches`.
    /// - Remark: Generated from `#/paths//vector_stores/{vector_store_id}/file_batches/post(createVectorStoreFileBatch)`.
    public enum CreateVectorStoreFileBatch {
        public static let id: Swift.String = "createVectorStoreFileBatch"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/vector_stores/{vector_store_id}/file_batches/POST/path`.
            public struct Path: Sendable, Hashable {
                /// The ID of the vector store for which to create a File Batch.
                ///
                ///
                /// - Remark: Generated from `#/paths/vector_stores/{vector_store_id}/file_batches/POST/path/vector_store_id`.
                public var vectorStoreId: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - vectorStoreId: The ID of the vector store for which to create a File Batch.
                public init(vectorStoreId: Swift.String) {
                    self.vectorStoreId = vectorStoreId
                }
            }
            public var path: Operations.CreateVectorStoreFileBatch.Input.Path
            /// - Remark: Generated from `#/paths/vector_stores/{vector_store_id}/file_batches/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.CreateVectorStoreFileBatch.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.CreateVectorStoreFileBatch.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.CreateVectorStoreFileBatch.Input.Headers
            /// - Remark: Generated from `#/paths/vector_stores/{vector_store_id}/file_batches/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/vector_stores/{vector_store_id}/file_batches/POST/requestBody/content/application\/json`.
                case json(Components.Schemas.CreateVectorStoreFileBatchRequest)
            }
            public var body: Operations.CreateVectorStoreFileBatch.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            ///   - body:
            public init(
                path: Operations.CreateVectorStoreFileBatch.Input.Path,
                headers: Operations.CreateVectorStoreFileBatch.Input.Headers = .init(),
                body: Operations.CreateVectorStoreFileBatch.Input.Body
            ) {
                self.path = path
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/vector_stores/{vector_store_id}/file_batches/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/vector_stores/{vector_store_id}/file_batches/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.VectorStoreFileBatchObject)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.VectorStoreFileBatchObject {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.CreateVectorStoreFileBatch.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.CreateVectorStoreFileBatch.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// OK
            ///
            /// - Remark: Generated from `#/paths//vector_stores/{vector_store_id}/file_batches/post(createVectorStoreFileBatch)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.CreateVectorStoreFileBatch.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.CreateVectorStoreFileBatch.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Retrieves a vector store file batch.
    ///
    /// - Remark: HTTP `GET /vector_stores/{vector_store_id}/file_batches/{batch_id}`.
    /// - Remark: Generated from `#/paths//vector_stores/{vector_store_id}/file_batches/{batch_id}/get(getVectorStoreFileBatch)`.
    public enum GetVectorStoreFileBatch {
        public static let id: Swift.String = "getVectorStoreFileBatch"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/vector_stores/{vector_store_id}/file_batches/{batch_id}/GET/path`.
            public struct Path: Sendable, Hashable {
                /// The ID of the vector store that the file batch belongs to.
                ///
                /// - Remark: Generated from `#/paths/vector_stores/{vector_store_id}/file_batches/{batch_id}/GET/path/vector_store_id`.
                public var vectorStoreId: Swift.String
                /// The ID of the file batch being retrieved.
                ///
                /// - Remark: Generated from `#/paths/vector_stores/{vector_store_id}/file_batches/{batch_id}/GET/path/batch_id`.
                public var batchId: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - vectorStoreId: The ID of the vector store that the file batch belongs to.
                ///   - batchId: The ID of the file batch being retrieved.
                public init(
                    vectorStoreId: Swift.String,
                    batchId: Swift.String
                ) {
                    self.vectorStoreId = vectorStoreId
                    self.batchId = batchId
                }
            }
            public var path: Operations.GetVectorStoreFileBatch.Input.Path
            /// - Remark: Generated from `#/paths/vector_stores/{vector_store_id}/file_batches/{batch_id}/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.GetVectorStoreFileBatch.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.GetVectorStoreFileBatch.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.GetVectorStoreFileBatch.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            public init(
                path: Operations.GetVectorStoreFileBatch.Input.Path,
                headers: Operations.GetVectorStoreFileBatch.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/vector_stores/{vector_store_id}/file_batches/{batch_id}/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/vector_stores/{vector_store_id}/file_batches/{batch_id}/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.VectorStoreFileBatchObject)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.VectorStoreFileBatchObject {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.GetVectorStoreFileBatch.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.GetVectorStoreFileBatch.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// OK
            ///
            /// - Remark: Generated from `#/paths//vector_stores/{vector_store_id}/file_batches/{batch_id}/get(getVectorStoreFileBatch)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.GetVectorStoreFileBatch.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.GetVectorStoreFileBatch.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Cancel a vector store file batch. This attempts to cancel the processing of files in this batch as soon as possible.
    ///
    /// - Remark: HTTP `POST /vector_stores/{vector_store_id}/file_batches/{batch_id}/cancel`.
    /// - Remark: Generated from `#/paths//vector_stores/{vector_store_id}/file_batches/{batch_id}/cancel/post(cancelVectorStoreFileBatch)`.
    public enum CancelVectorStoreFileBatch {
        public static let id: Swift.String = "cancelVectorStoreFileBatch"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/vector_stores/{vector_store_id}/file_batches/{batch_id}/cancel/POST/path`.
            public struct Path: Sendable, Hashable {
                /// The ID of the vector store that the file batch belongs to.
                ///
                /// - Remark: Generated from `#/paths/vector_stores/{vector_store_id}/file_batches/{batch_id}/cancel/POST/path/vector_store_id`.
                public var vectorStoreId: Swift.String
                /// The ID of the file batch to cancel.
                ///
                /// - Remark: Generated from `#/paths/vector_stores/{vector_store_id}/file_batches/{batch_id}/cancel/POST/path/batch_id`.
                public var batchId: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - vectorStoreId: The ID of the vector store that the file batch belongs to.
                ///   - batchId: The ID of the file batch to cancel.
                public init(
                    vectorStoreId: Swift.String,
                    batchId: Swift.String
                ) {
                    self.vectorStoreId = vectorStoreId
                    self.batchId = batchId
                }
            }
            public var path: Operations.CancelVectorStoreFileBatch.Input.Path
            /// - Remark: Generated from `#/paths/vector_stores/{vector_store_id}/file_batches/{batch_id}/cancel/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.CancelVectorStoreFileBatch.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.CancelVectorStoreFileBatch.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.CancelVectorStoreFileBatch.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            public init(
                path: Operations.CancelVectorStoreFileBatch.Input.Path,
                headers: Operations.CancelVectorStoreFileBatch.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/vector_stores/{vector_store_id}/file_batches/{batch_id}/cancel/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/vector_stores/{vector_store_id}/file_batches/{batch_id}/cancel/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.VectorStoreFileBatchObject)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.VectorStoreFileBatchObject {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.CancelVectorStoreFileBatch.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.CancelVectorStoreFileBatch.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// OK
            ///
            /// - Remark: Generated from `#/paths//vector_stores/{vector_store_id}/file_batches/{batch_id}/cancel/post(cancelVectorStoreFileBatch)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.CancelVectorStoreFileBatch.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.CancelVectorStoreFileBatch.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Returns a list of vector store files in a batch.
    ///
    /// - Remark: HTTP `GET /vector_stores/{vector_store_id}/file_batches/{batch_id}/files`.
    /// - Remark: Generated from `#/paths//vector_stores/{vector_store_id}/file_batches/{batch_id}/files/get(listFilesInVectorStoreBatch)`.
    public enum ListFilesInVectorStoreBatch {
        public static let id: Swift.String = "listFilesInVectorStoreBatch"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/vector_stores/{vector_store_id}/file_batches/{batch_id}/files/GET/path`.
            public struct Path: Sendable, Hashable {
                /// The ID of the vector store that the files belong to.
                ///
                /// - Remark: Generated from `#/paths/vector_stores/{vector_store_id}/file_batches/{batch_id}/files/GET/path/vector_store_id`.
                public var vectorStoreId: Swift.String
                /// The ID of the file batch that the files belong to.
                ///
                /// - Remark: Generated from `#/paths/vector_stores/{vector_store_id}/file_batches/{batch_id}/files/GET/path/batch_id`.
                public var batchId: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - vectorStoreId: The ID of the vector store that the files belong to.
                ///   - batchId: The ID of the file batch that the files belong to.
                public init(
                    vectorStoreId: Swift.String,
                    batchId: Swift.String
                ) {
                    self.vectorStoreId = vectorStoreId
                    self.batchId = batchId
                }
            }
            public var path: Operations.ListFilesInVectorStoreBatch.Input.Path
            /// - Remark: Generated from `#/paths/vector_stores/{vector_store_id}/file_batches/{batch_id}/files/GET/query`.
            public struct Query: Sendable, Hashable {
                /// A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.
                ///
                ///
                /// - Remark: Generated from `#/paths/vector_stores/{vector_store_id}/file_batches/{batch_id}/files/GET/query/limit`.
                public var limit: Swift.Int?
                /// - Remark: Generated from `#/paths/vector_stores/{vector_store_id}/file_batches/{batch_id}/files/GET/query/order`.
                @frozen public enum OrderPayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case asc = "asc"
                    case desc = "desc"
                }
                /// Sort order by the `created_at` timestamp of the objects. `asc` for ascending order and `desc` for descending order.
                ///
                ///
                /// - Remark: Generated from `#/paths/vector_stores/{vector_store_id}/file_batches/{batch_id}/files/GET/query/order`.
                public var order: Operations.ListFilesInVectorStoreBatch.Input.Query.OrderPayload?
                /// A cursor for use in pagination. `after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after=obj_foo in order to fetch the next page of the list.
                ///
                ///
                /// - Remark: Generated from `#/paths/vector_stores/{vector_store_id}/file_batches/{batch_id}/files/GET/query/after`.
                public var after: Swift.String?
                /// A cursor for use in pagination. `before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with obj_foo, your subsequent call can include before=obj_foo in order to fetch the previous page of the list.
                ///
                ///
                /// - Remark: Generated from `#/paths/vector_stores/{vector_store_id}/file_batches/{batch_id}/files/GET/query/before`.
                public var before: Swift.String?
                /// - Remark: Generated from `#/paths/vector_stores/{vector_store_id}/file_batches/{batch_id}/files/GET/query/filter`.
                @frozen public enum FilterPayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case inProgress = "in_progress"
                    case completed = "completed"
                    case failed = "failed"
                    case cancelled = "cancelled"
                }
                /// Filter by file status. One of `in_progress`, `completed`, `failed`, `cancelled`.
                ///
                /// - Remark: Generated from `#/paths/vector_stores/{vector_store_id}/file_batches/{batch_id}/files/GET/query/filter`.
                public var filter: Operations.ListFilesInVectorStoreBatch.Input.Query.FilterPayload?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - limit: A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.
                ///   - order: Sort order by the `created_at` timestamp of the objects. `asc` for ascending order and `desc` for descending order.
                ///   - after: A cursor for use in pagination. `after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after=obj_foo in order to fetch the next page of the list.
                ///   - before: A cursor for use in pagination. `before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with obj_foo, your subsequent call can include before=obj_foo in order to fetch the previous page of the list.
                ///   - filter: Filter by file status. One of `in_progress`, `completed`, `failed`, `cancelled`.
                public init(
                    limit: Swift.Int? = nil,
                    order: Operations.ListFilesInVectorStoreBatch.Input.Query.OrderPayload? = nil,
                    after: Swift.String? = nil,
                    before: Swift.String? = nil,
                    filter: Operations.ListFilesInVectorStoreBatch.Input.Query.FilterPayload? = nil
                ) {
                    self.limit = limit
                    self.order = order
                    self.after = after
                    self.before = before
                    self.filter = filter
                }
            }
            public var query: Operations.ListFilesInVectorStoreBatch.Input.Query
            /// - Remark: Generated from `#/paths/vector_stores/{vector_store_id}/file_batches/{batch_id}/files/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ListFilesInVectorStoreBatch.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ListFilesInVectorStoreBatch.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.ListFilesInVectorStoreBatch.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            public init(
                path: Operations.ListFilesInVectorStoreBatch.Input.Path,
                query: Operations.ListFilesInVectorStoreBatch.Input.Query = .init(),
                headers: Operations.ListFilesInVectorStoreBatch.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/vector_stores/{vector_store_id}/file_batches/{batch_id}/files/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/vector_stores/{vector_store_id}/file_batches/{batch_id}/files/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.ListVectorStoreFilesResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ListVectorStoreFilesResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.ListFilesInVectorStoreBatch.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.ListFilesInVectorStoreBatch.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// OK
            ///
            /// - Remark: Generated from `#/paths//vector_stores/{vector_store_id}/file_batches/{batch_id}/files/get(listFilesInVectorStoreBatch)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.ListFilesInVectorStoreBatch.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.ListFilesInVectorStoreBatch.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Returns a list of vector store files.
    ///
    /// - Remark: HTTP `GET /vector_stores/{vector_store_id}/files`.
    /// - Remark: Generated from `#/paths//vector_stores/{vector_store_id}/files/get(listVectorStoreFiles)`.
    public enum ListVectorStoreFiles {
        public static let id: Swift.String = "listVectorStoreFiles"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/vector_stores/{vector_store_id}/files/GET/path`.
            public struct Path: Sendable, Hashable {
                /// The ID of the vector store that the files belong to.
                ///
                /// - Remark: Generated from `#/paths/vector_stores/{vector_store_id}/files/GET/path/vector_store_id`.
                public var vectorStoreId: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - vectorStoreId: The ID of the vector store that the files belong to.
                public init(vectorStoreId: Swift.String) {
                    self.vectorStoreId = vectorStoreId
                }
            }
            public var path: Operations.ListVectorStoreFiles.Input.Path
            /// - Remark: Generated from `#/paths/vector_stores/{vector_store_id}/files/GET/query`.
            public struct Query: Sendable, Hashable {
                /// A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.
                ///
                ///
                /// - Remark: Generated from `#/paths/vector_stores/{vector_store_id}/files/GET/query/limit`.
                public var limit: Swift.Int?
                /// - Remark: Generated from `#/paths/vector_stores/{vector_store_id}/files/GET/query/order`.
                @frozen public enum OrderPayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case asc = "asc"
                    case desc = "desc"
                }
                /// Sort order by the `created_at` timestamp of the objects. `asc` for ascending order and `desc` for descending order.
                ///
                ///
                /// - Remark: Generated from `#/paths/vector_stores/{vector_store_id}/files/GET/query/order`.
                public var order: Operations.ListVectorStoreFiles.Input.Query.OrderPayload?
                /// A cursor for use in pagination. `after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after=obj_foo in order to fetch the next page of the list.
                ///
                ///
                /// - Remark: Generated from `#/paths/vector_stores/{vector_store_id}/files/GET/query/after`.
                public var after: Swift.String?
                /// A cursor for use in pagination. `before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with obj_foo, your subsequent call can include before=obj_foo in order to fetch the previous page of the list.
                ///
                ///
                /// - Remark: Generated from `#/paths/vector_stores/{vector_store_id}/files/GET/query/before`.
                public var before: Swift.String?
                /// - Remark: Generated from `#/paths/vector_stores/{vector_store_id}/files/GET/query/filter`.
                @frozen public enum FilterPayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case inProgress = "in_progress"
                    case completed = "completed"
                    case failed = "failed"
                    case cancelled = "cancelled"
                }
                /// Filter by file status. One of `in_progress`, `completed`, `failed`, `cancelled`.
                ///
                /// - Remark: Generated from `#/paths/vector_stores/{vector_store_id}/files/GET/query/filter`.
                public var filter: Operations.ListVectorStoreFiles.Input.Query.FilterPayload?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - limit: A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.
                ///   - order: Sort order by the `created_at` timestamp of the objects. `asc` for ascending order and `desc` for descending order.
                ///   - after: A cursor for use in pagination. `after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after=obj_foo in order to fetch the next page of the list.
                ///   - before: A cursor for use in pagination. `before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with obj_foo, your subsequent call can include before=obj_foo in order to fetch the previous page of the list.
                ///   - filter: Filter by file status. One of `in_progress`, `completed`, `failed`, `cancelled`.
                public init(
                    limit: Swift.Int? = nil,
                    order: Operations.ListVectorStoreFiles.Input.Query.OrderPayload? = nil,
                    after: Swift.String? = nil,
                    before: Swift.String? = nil,
                    filter: Operations.ListVectorStoreFiles.Input.Query.FilterPayload? = nil
                ) {
                    self.limit = limit
                    self.order = order
                    self.after = after
                    self.before = before
                    self.filter = filter
                }
            }
            public var query: Operations.ListVectorStoreFiles.Input.Query
            /// - Remark: Generated from `#/paths/vector_stores/{vector_store_id}/files/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ListVectorStoreFiles.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ListVectorStoreFiles.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.ListVectorStoreFiles.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            public init(
                path: Operations.ListVectorStoreFiles.Input.Path,
                query: Operations.ListVectorStoreFiles.Input.Query = .init(),
                headers: Operations.ListVectorStoreFiles.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/vector_stores/{vector_store_id}/files/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/vector_stores/{vector_store_id}/files/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.ListVectorStoreFilesResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ListVectorStoreFilesResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.ListVectorStoreFiles.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.ListVectorStoreFiles.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// OK
            ///
            /// - Remark: Generated from `#/paths//vector_stores/{vector_store_id}/files/get(listVectorStoreFiles)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.ListVectorStoreFiles.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.ListVectorStoreFiles.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Create a vector store file by attaching a [File](/docs/api-reference/files) to a [vector store](/docs/api-reference/vector-stores/object).
    ///
    /// - Remark: HTTP `POST /vector_stores/{vector_store_id}/files`.
    /// - Remark: Generated from `#/paths//vector_stores/{vector_store_id}/files/post(createVectorStoreFile)`.
    public enum CreateVectorStoreFile {
        public static let id: Swift.String = "createVectorStoreFile"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/vector_stores/{vector_store_id}/files/POST/path`.
            public struct Path: Sendable, Hashable {
                /// The ID of the vector store for which to create a File.
                ///
                ///
                /// - Remark: Generated from `#/paths/vector_stores/{vector_store_id}/files/POST/path/vector_store_id`.
                public var vectorStoreId: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - vectorStoreId: The ID of the vector store for which to create a File.
                public init(vectorStoreId: Swift.String) {
                    self.vectorStoreId = vectorStoreId
                }
            }
            public var path: Operations.CreateVectorStoreFile.Input.Path
            /// - Remark: Generated from `#/paths/vector_stores/{vector_store_id}/files/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.CreateVectorStoreFile.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.CreateVectorStoreFile.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.CreateVectorStoreFile.Input.Headers
            /// - Remark: Generated from `#/paths/vector_stores/{vector_store_id}/files/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/vector_stores/{vector_store_id}/files/POST/requestBody/content/application\/json`.
                case json(Components.Schemas.CreateVectorStoreFileRequest)
            }
            public var body: Operations.CreateVectorStoreFile.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            ///   - body:
            public init(
                path: Operations.CreateVectorStoreFile.Input.Path,
                headers: Operations.CreateVectorStoreFile.Input.Headers = .init(),
                body: Operations.CreateVectorStoreFile.Input.Body
            ) {
                self.path = path
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/vector_stores/{vector_store_id}/files/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/vector_stores/{vector_store_id}/files/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.VectorStoreFileObject)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.VectorStoreFileObject {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.CreateVectorStoreFile.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.CreateVectorStoreFile.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// OK
            ///
            /// - Remark: Generated from `#/paths//vector_stores/{vector_store_id}/files/post(createVectorStoreFile)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.CreateVectorStoreFile.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.CreateVectorStoreFile.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Retrieves a vector store file.
    ///
    /// - Remark: HTTP `GET /vector_stores/{vector_store_id}/files/{file_id}`.
    /// - Remark: Generated from `#/paths//vector_stores/{vector_store_id}/files/{file_id}/get(getVectorStoreFile)`.
    public enum GetVectorStoreFile {
        public static let id: Swift.String = "getVectorStoreFile"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/vector_stores/{vector_store_id}/files/{file_id}/GET/path`.
            public struct Path: Sendable, Hashable {
                /// The ID of the vector store that the file belongs to.
                ///
                /// - Remark: Generated from `#/paths/vector_stores/{vector_store_id}/files/{file_id}/GET/path/vector_store_id`.
                public var vectorStoreId: Swift.String
                /// The ID of the file being retrieved.
                ///
                /// - Remark: Generated from `#/paths/vector_stores/{vector_store_id}/files/{file_id}/GET/path/file_id`.
                public var fileId: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - vectorStoreId: The ID of the vector store that the file belongs to.
                ///   - fileId: The ID of the file being retrieved.
                public init(
                    vectorStoreId: Swift.String,
                    fileId: Swift.String
                ) {
                    self.vectorStoreId = vectorStoreId
                    self.fileId = fileId
                }
            }
            public var path: Operations.GetVectorStoreFile.Input.Path
            /// - Remark: Generated from `#/paths/vector_stores/{vector_store_id}/files/{file_id}/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.GetVectorStoreFile.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.GetVectorStoreFile.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.GetVectorStoreFile.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            public init(
                path: Operations.GetVectorStoreFile.Input.Path,
                headers: Operations.GetVectorStoreFile.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/vector_stores/{vector_store_id}/files/{file_id}/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/vector_stores/{vector_store_id}/files/{file_id}/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.VectorStoreFileObject)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.VectorStoreFileObject {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.GetVectorStoreFile.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.GetVectorStoreFile.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// OK
            ///
            /// - Remark: Generated from `#/paths//vector_stores/{vector_store_id}/files/{file_id}/get(getVectorStoreFile)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.GetVectorStoreFile.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.GetVectorStoreFile.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Delete a vector store file. This will remove the file from the vector store but the file itself will not be deleted. To delete the file, use the [delete file](/docs/api-reference/files/delete) endpoint.
    ///
    /// - Remark: HTTP `DELETE /vector_stores/{vector_store_id}/files/{file_id}`.
    /// - Remark: Generated from `#/paths//vector_stores/{vector_store_id}/files/{file_id}/delete(deleteVectorStoreFile)`.
    public enum DeleteVectorStoreFile {
        public static let id: Swift.String = "deleteVectorStoreFile"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/vector_stores/{vector_store_id}/files/{file_id}/DELETE/path`.
            public struct Path: Sendable, Hashable {
                /// The ID of the vector store that the file belongs to.
                ///
                /// - Remark: Generated from `#/paths/vector_stores/{vector_store_id}/files/{file_id}/DELETE/path/vector_store_id`.
                public var vectorStoreId: Swift.String
                /// The ID of the file to delete.
                ///
                /// - Remark: Generated from `#/paths/vector_stores/{vector_store_id}/files/{file_id}/DELETE/path/file_id`.
                public var fileId: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - vectorStoreId: The ID of the vector store that the file belongs to.
                ///   - fileId: The ID of the file to delete.
                public init(
                    vectorStoreId: Swift.String,
                    fileId: Swift.String
                ) {
                    self.vectorStoreId = vectorStoreId
                    self.fileId = fileId
                }
            }
            public var path: Operations.DeleteVectorStoreFile.Input.Path
            /// - Remark: Generated from `#/paths/vector_stores/{vector_store_id}/files/{file_id}/DELETE/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.DeleteVectorStoreFile.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.DeleteVectorStoreFile.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.DeleteVectorStoreFile.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            public init(
                path: Operations.DeleteVectorStoreFile.Input.Path,
                headers: Operations.DeleteVectorStoreFile.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/vector_stores/{vector_store_id}/files/{file_id}/DELETE/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/vector_stores/{vector_store_id}/files/{file_id}/DELETE/responses/200/content/application\/json`.
                    case json(Components.Schemas.DeleteVectorStoreFileResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.DeleteVectorStoreFileResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.DeleteVectorStoreFile.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.DeleteVectorStoreFile.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// OK
            ///
            /// - Remark: Generated from `#/paths//vector_stores/{vector_store_id}/files/{file_id}/delete(deleteVectorStoreFile)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.DeleteVectorStoreFile.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.DeleteVectorStoreFile.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
}
